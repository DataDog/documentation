#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require './lib/rule_helper'


preprocess do

  # def rchomp(sep = $/)
  #   self.start_with?(sep) ? self[sep.size..-1] : self
  # end

  # def snippetizer(item)
  #   if item["has_snippets"] == "True"
  #     doc = Nokogiri::HTML.fragment(item.content)
  #     doc.css(".snippetizer").each do |snippet|
  #       print snippet
  # #     # id = @item.identifier.gsub("(/(.+)/", "$&")
  #       id = item.identifier.chomp('/').rchomp('/') + '-' + snippet['id']
  # #     # print id
  # #     # print snippet.content
  #       new_snippet = {id => snippet.content}
  #       print new_snippet
  #       $global_snippets.merge(new_snippet)
  #     end
  #   end
  # end

  create_tag_pages(example_items,{:identifier => "/examples/%%tag%%/"})
  create_tag_pages(video_items,{:identifier => "/videos/%%tag%%/"})
  create_tag_pages(ja_example_items,{:identifier => "/ja/examples/%%tag%%/", :template => "example-subindex-ja"})
  create_tag_pages(ja_video_items,{:identifier => "/ja/videos/%%tag%%/", :template => "video-subindex-ja"})

  @items.each do |item|
    language = "en"
    otherlang = "ja"
    langpath = ""
    if item.identifier.match('/ja/')
      language = "ja"
      otherlang = ""
      langpath = "/ja"
    end
    phrases = get_local_hash(language)
    item["language"] = language
    item["otherlang"] = otherlang
    item["langpath"] = langpath
    phrases.each do | key, val |
      item[key] = val
    end
    # snippetizer(item)
  end
end

compile 'sitemap' do
  filter :erb
end

compile '/tipuesearch/tipuesearch_content/' do
  filter :erb
end

compile '/tipuesearch/*/' do

end

compile '/static/bootstrap/scss/*' do
end

compile '/static/bootstrap/scss/mixins/*' do
end

# compile '/static/bootstrap/scss/*' do
#     filter :sass, syntax: :scss, style: :compressed
#     filter :autoprefixer
# end

compile '/static/css/*' do
  unless item.identifier.start_with?('/static/css/_')
    filter :sass, syntax: :scss, style: :compressed
    filter :autoprefixer
  end
end

compile '/static/*' do

end

compile '/partials/*' do
  filter :erb
end

compile '*' do
  unless item.binary?

    filter :erb
    case item[:extension]
      when 'md'
        filter :kramdown
    end
    # filter :kramdown
    filter :colorize_syntax, :default_colorizer => :rouge, colorizers: {
      javascript: :rouge,
      console: :rouge,
      python: :rouge,
      ruby: :rouge,
      pycon: :rouge,
      json: :rouge
    }

    id = @item.identifier

    case
    
    # when id.match('/ja/guides/basic_agent_usage/')
    #   layout 'basic_agent_usage-ja'
    when id.match('/guides/basic_agent_usage/')
      layout 'basic_agent_usage'
    when id.match('/integrations') && @item[:kind] == 'integration'
      layout 'integration_layout'
    else
      layout 'default'
    end
  end
end

route 'sitemap' do
  item.identifier.chop + '.xml'
end

route '/partials/*' do
  nil
end

route '/tipuesearch/*' do
  unless item.identifier.include?('#')
    "/tipuesearch/#{basename(item.attributes[:filename])}.js"
  end
end

route '/static/favicon/' do
  '/favicon.ico'
end

route '/static/bootstrap/scss/*' do
    nil
end

# route '/static/bootstrap/scss/mixins/*' do
#   nil
# end

# route '/static/bootstrap/scss/*' do
#     '/static/bootstrap/css/' + File.basename(item.identifier) + '.css'
# end


route '/static/css/*' do
  unless item.identifier.start_with?('/static/css/_')
    item.identifier.gsub(/\/$/, '') + '.css'
  end
end

route '/static/CNAME/' do
  '/CNAME'
end

route '/static/*' do
  item.identifier.chop + '.' + item[:extension]
end


route '*' do
  # Write item with identifier /foo/ to /foo/index.html
  item.identifier.downcase + 'index.html'
end

layout '*', :erb

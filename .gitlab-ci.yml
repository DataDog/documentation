stages:
  - build
  - post-deploy
  - cleanup

variables:
  PREVIEW_CONFIG: "config/preview.yaml"
  LIVE_CONFIG: "config/live.yaml"
  ARTIFACT_RESOURCE: "public"
  LIVE_DOMAIN: "https://docs.datadoghq.com/"
  PREVIEW_DOMAIN: "https://docs-staging.datadoghq.com/"

# ================== copy scripts =============== #
before_script:
  - find local/bin/ -type f -exec cp {} /usr/local/bin \;  # load scripts
  - find local/etc/ -type f -exec cp {} /etc \;  # load configs
  - source /usr/local/bin/helpers.sh  # source helpers so they are available in the container

# ================== templates ================== #
.base_template: &base_template
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/corp-ci:master
  tags:
    - "runner:main"
    - "size:large"
  only:
    - branches

# ================== preview ================== #
# If the branch has a name of <slack-user>/<feature-name> then ci builds a preview site
build_preview:
  <<: *base_template
  stage: build
  environment: "preview"
  variables:
    URL: ${PREVIEW_DOMAIN}
    CONFIG: ${PREVIEW_CONFIG}
    MESSAGE: ":gift_heart: Your preview site is available!\nNow running tests..."
    UNTRACKED_EXTRAS: "data,content/en/integrations"
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} started" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "info"
    - version_static_assets
    - sync_integration_descriptions
    - placehold_translations
    - build_hugo_site
    - build_hugo_site_ja
    - minify_html
    - collect_static_assets
    - push_site_to_s3
    - notify_slack "<https://github.com/DataDog/documentation/commit/${CI_COMMIT_SHA}|${CI_COMMIT_REF_NAME}> is ready for preview. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}| checks running>." "#31b834"
    - remove_static_from_repo
    - create_artifact
    - create_artifact_untracked
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

test_preview_link_checks:
  <<: *base_template
  stage: post-deploy
  environment: "preview"
  variables:
    URL: ${PREVIEW_DOMAIN}
    DISALLOW_BOTS: "1"
  script:
    - node /etc/node_modules/link-checker/dd-link-checker.js -e preview -c ${CI_PROJECT_DIR}/local/etc/link-check-config.js
  only:
    - /.+?\/[a-zA-Z0-9_-]+/

# ================== live ================== #
build_live:
  <<: *base_template
  stage: build
  environment: "live"
  variables:
    CONFIG: ${LIVE_CONFIG}
    URL: ${LIVE_DOMAIN}
    UNTRACKED_EXTRAS: "data,content/en/integrations"
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} started" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "info"
    - notify_slack "<https://github.com/DataDog/documentation/commit/${CI_COMMIT_SHA}|${CI_COMMIT_SHA:0:8}> sent to gitlab for production deployment. <${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}|details>" "#FFD700"
    - version_static_assets
    - sync_integration_descriptions
    - sync_integration_metrics
    - placehold_translations
    - build_hugo_site
    - build_hugo_site_ja
    - minify_html
    - collect_static_assets
    - push_site_to_s3
    - create_artifact
    - create_artifact_untracked
  only:
    - master

test_live_link_checks:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  variables:
    URL: ${LIVE_DOMAIN}
  script:
    - node /etc/node_modules/link-checker/dd-link-checker.js -e live -c ${CI_PROJECT_DIR}/local/etc/link-check-config.js
  only:
    - master

index_algolia:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  script:
    - cp ./local/etc/docsdatadoghq.json /etc/
    - index_docsearch_algolia
  only:
    - schedules

manage_translations:on-schedule:
  <<: *base_template
  stage: post-deploy
  environment: "live"
  variables:
    URL: ${PREVIEW_DOMAIN}
    CONFIG: ${PREVIEW_CONFIG}
  script:
    - manage_translations "${APIKEY}"
  only:
    - schedules

#rollback_live:
#  <<: *base_template
#  stage: cleanup
#  environment: "live"
#  when: on_failure
#  script:
#    - rollback_env
#  only:
#    - master

tag_successful_live_pipeline:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_success
  script:
    - tag_successful_pipeline
  only:
    - master

post_success_event_to_dd_live:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_success
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} succeeded" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "success"
    - post_dd_metric "documentation.pipeline.completed" "1" "" "success"
  only:
    - master

post_failure_event_to_dd_live:
  <<: *base_template
  stage: cleanup
  environment: "live"
  when: on_failure
  script:
    - post_dd_event "documentation deploy ${CI_COMMIT_REF_NAME} failed" "${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}" "error"
    - post_dd_metric "documentation.pipeline.completed" "0" "" "failure"
  only:
    - master

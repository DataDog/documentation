name: Documentation Team Approval Check

on:
  pull_request:
    types: [opened, synchronize, review_requested]
  pull_request_review:
    types: [submitted, dismissed]

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  check-documentation-team-approval:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      pull-requests: write
      contents: read
      id-token: write # Needed to federate tokens.
    outputs:
      approval_status: ${{ steps.check_approvals.outputs.approval_status }}
      team_requested: ${{ steps.check_approvals.outputs.team_requested }}
      error: ${{ steps.check_approvals.outputs.error }}
    steps:
      - uses: DataDog/dd-octo-sts-action@08f2144903ced3254a3dafec2592563409ba2aa0 # v1.0.1
        id: octo-sts
        with:
          scope: DataDog
          policy: documentation.read-org-members 

      - name: Check Documentation Team Approval
        id: check_approvals
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7
        env:
          GITHUB_TOKEN: ${{ steps.octo-sts.outputs.token }}
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Shared utilities and constants
            const TEAM_SLUGS = ['documentation', 'webops-platform'];
            
            const retryApiCall = async (apiCall, maxRetries = 3, delay = 1000) => {
              for (let i = 0; i < maxRetries; i++) {
                try {
                  return await apiCall();
                } catch (error) {
                  console.log(`API call attempt ${i + 1} failed:`, error.message);
                  if (i === maxRetries - 1) throw error;
                  await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
                }
              }
            };
            
            const getAllTeamMembers = async () => {
              const allMembers = [];
              for (const teamSlug of TEAM_SLUGS) {
                const { data: members } = await retryApiCall(() =>
                  github.rest.teams.listMembersInOrg({ org: owner, team_slug: teamSlug })
                );
                allMembers.push(...members);
              }
              return allMembers;
            };
            
            // Get pull request details
            const { data: pr } = await retryApiCall(() => 
              github.rest.pulls.get({ owner, repo, pull_number: number })
            );
            
            // Skip if not targeting master
            if (pr.base.ref !== 'master') {
              console.log(`Base branch is ${pr.base.ref}. Skipping check.`);
              return;
            }
            
            // Get all reviews
            const { data: reviews } = await retryApiCall(() =>
              github.rest.pulls.listReviews({
                owner,
                repo,
                pull_number: number,
              })
            );

            // Track latest review state per user
            const latestReviews = new Map();
            reviews.forEach(review => {
              const existing = latestReviews.get(review.user.login);
              if (!existing || review.submitted_at > existing.submitted_at) {
                latestReviews.set(review.user.login, review);
              }
            });

            // Get current approvals (will be filtered by team membership later)
            const allApprovals = new Set(
              Array.from(latestReviews.values())
                .filter(review => review.state === 'APPROVED')
                .map(review => review.user.login)
            );

            // Check if teams are required via CODEOWNERS (requested reviewers)
            let hasTeamApproval = false;
            let isTeamRequested = false;
            
            try {
              // Get requested reviewers to see if teams are currently requested
              const { data: reviewers } = await retryApiCall(() =>
                github.rest.pulls.listRequestedReviewers({
                  owner,
                  repo,
                  pull_number: number,
                })
              );
              
              // Check if any of our teams are currently in requested reviewers
              const currentlyRequested = reviewers.teams.some(team => 
                TEAM_SLUGS.includes(team.slug)
              );
              
              // Get all team members from both teams
              const teamMembers = await getAllTeamMembers();
              
              const teamMemberLogins = new Set(teamMembers.map(member => member.login));
              const hasTeamMemberReview = reviews.some(review => 
                teamMemberLogins.has(review.user.login)
              );
              
              // Teams are considered "requested" if:
              // 1. They are currently in requested reviewers, OR
              // 2. Any team member has already reviewed (meaning they were requested but fulfilled the request)
              isTeamRequested = currentlyRequested || hasTeamMemberReview;
              
              console.log(`Teams currently requested: ${currentlyRequested}`);
              console.log(`Team member has reviewed: ${hasTeamMemberReview}`);
              console.log(`Teams considered requested: ${isTeamRequested}`);
              
              if (isTeamRequested) {
                // Check for approval from team members
                const teamApprovals = teamMembers.filter(member => 
                  allApprovals.has(member.login)
                );
                hasTeamApproval = teamApprovals.length > 0;
                
                console.log(`Team members who approved: ${teamApprovals.map(m => m.login).join(', ')}`);
                console.log(`Team approval status: ${hasTeamApproval}`);
              } else {
                // If teams are not requested, no approval needed
                hasTeamApproval = true;
                console.log('Teams not required for this PR - no approval needed.');
              }
              
            } catch (error) {
              console.error(`Error checking teams: ${error}`);
              // Don't fail the job here - let the status check job handle the failure
              // Set outputs to indicate error state
              core.setOutput('approval_status', 'false');
              core.setOutput('team_requested', 'true');
              core.setOutput('error', error.message);
              return;
            }

            // Set output for the status job
            core.setOutput('approval_status', hasTeamApproval);
            core.setOutput('team_requested', isTeamRequested);
            core.setOutput('error', '');

            // Log final status but don't fail the job
            if (isTeamRequested && !hasTeamApproval) {
              console.log(`Team approval required from @${owner}/${TEAM_SLUGS.join(' or @' + owner + '/')}`);
            } else if (!isTeamRequested) {
              console.log('Team review not required for this PR.');
            } else {
              console.log('Teams have approved this PR.');
            }

  update-pr-status:
    runs-on: ubuntu-latest
    needs: check-documentation-team-approval
    if: always() && github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      pull-requests: write
      contents: read
      statuses: write
    steps:
      - name: Update PR status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            const approvalStatus = '${{ needs.check-documentation-team-approval.outputs.approval_status }}' === 'true';
            const teamRequested = '${{ needs.check-documentation-team-approval.outputs.team_requested }}' === 'true';
            const errorMessage = '${{ needs.check-documentation-team-approval.outputs.error }}';

            const retryApiCall = async (apiCall, maxRetries = 3, delay = 1000) => {
              for (let i = 0; i < maxRetries; i++) {
                try {
                  return await apiCall();
                } catch (error) {
                  console.log(`API call attempt ${i + 1} failed:`, error.message);
                  if (i === maxRetries - 1) throw error;
                  await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));
                }
              }
            };
            
            // Debug logging
            console.log('Raw outputs from first job:');
            console.log('approval_status:', '${{ needs.check-documentation-team-approval.outputs.approval_status }}');
            console.log('team_requested:', '${{ needs.check-documentation-team-approval.outputs.team_requested }}');
            console.log('error:', '${{ needs.check-documentation-team-approval.outputs.error }}');
            console.log('Parsed values:');
            console.log('approvalStatus:', approvalStatus);
            console.log('teamRequested:', teamRequested);
            
            // Get pull request details for commit SHA
            const { data: pr } = await retryApiCall(() =>
              github.rest.pulls.get({ owner, repo, pull_number: number })
            );
            
            // Determine PR status based on error state and approval status
            let statusState, statusDescription;
            
            if (errorMessage) {
              statusState = 'error';
              statusDescription = `Error checking team approval: ${errorMessage}`;
            } else if (teamRequested && !approvalStatus) {
              statusState = 'failure';
              statusDescription = 'Team approval required';
            } else if (teamRequested && approvalStatus) {
              statusState = 'success';
              statusDescription = 'Team has approved';
            } else {
              statusState = 'success';
              statusDescription = 'Team review not required';
            }

            await retryApiCall(() =>
              github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha: pr.head.sha,
                state: statusState,
                target_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
                description: statusDescription,
                context: 'Documentation Team Approval'
              })
            );
            
            console.log(`Created commit status: ${statusState} - ${statusDescription}`);
            
            // If there was an error, fail the job
            if (errorMessage) {
              core.setFailed(`Team approval check failed: ${errorMessage}`);
            }
name: Documentation Team Approval Check

on:
  pull_request:
    types: [opened]
  pull_request_review:
    types: [submitted, dismissed]

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  check-documentation-team-approval:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Check Documentation Team Approval
        id: check_approvals
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7
        env:
          GITHUB_TOKEN: ${{ secrets.CODEOWNER_WORKFLOW_TOKEN }}
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get pull request details
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            
            // Skip if not targeting master
            if (pr.base.ref !== 'master') {
              console.log(`Base branch is ${pr.base.ref}. Skipping check.`);
              return;
            }

            // Define the documentation team slug
            const DOCUMENTATION_TEAM = 'documentation';
            
            // Get all reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: number,
            });

            // Track latest review state per user
            const latestReviews = new Map();
            reviews.forEach(review => {
              const existing = latestReviews.get(review.user.login);
              if (!existing || review.submitted_at > existing.submitted_at) {
                latestReviews.set(review.user.login, review);
              }
            });

            // Get current approvals
            const approvals = new Set(
              Array.from(latestReviews.values())
                .filter(review => review.state === 'APPROVED')
                .map(review => review.user.login)
            );

            // Check if documentation team has approved by looking at requested reviewers and comments
            let hasDocumentationApproval = false;
            let isDocumentationTeamRequested = false;
            
            try {
              // Get requested reviewers to see if documentation team is requested
              const { data: reviewers } = await github.rest.pulls.listRequestedReviewers({
                owner,
                repo,
                pull_number: number,
              });
              
              // Check if documentation team is in requested reviewers
              isDocumentationTeamRequested = reviewers.teams.some(team => 
                team.slug === DOCUMENTATION_TEAM
              );
              
              if (isDocumentationTeamRequested) {
                console.log('Documentation team review is requested. Checking for approval indicators...');
                
                // Get all comments (including review comments)
                const { data: comments } = await github.rest.issues.listComments({
                  owner,
                  repo,
                  issue_number: number,
                });
                
                const { data: reviewComments } = await github.rest.pulls.listReviewComments({
                  owner,
                  repo,
                  pull_number: number,
                });

                console.log('comments', comments);
                console.log('reviewComments', reviewComments);
                
                // Combine all comments
                const allComments = [...comments, ...reviewComments];
                
                // Look for documentation team approval indicators in comments
                const approvalPatterns = [
                  /docs?\s*team\s*approved?/i,
                  /documentation\s*team\s*approved?/i,
                  /docs?\s*approved?/i,
                  /documentation\s*approved?/i,
                  /@DataDog\/documentation\s*approved?/i,
                  /lgtm.*docs?/i,
                  /docs?.*lgtm/i
                ];
                
                // Check if any comment from an approver contains approval patterns
                const docApprovalFromComment = allComments.some(comment => {
                  const hasApprovalPattern = approvalPatterns.some(pattern => 
                    pattern.test(comment.body)
                  );
                  const isFromApprover = approvals.has(comment.user.login);
                  
                  if (hasApprovalPattern && isFromApprover) {
                    console.log(`Found documentation approval indicator from ${comment.user.login}: "${comment.body.substring(0, 100)}..."`);
                    return true;
                  }
                  return false;
                });
                
                // Also check if any reviewer has approved AND mentioned docs in their review
                const docApprovalFromReview = reviews.some(review => {
                  const isApproval = review.state === 'APPROVED';
                  const mentionsDocs = review.body && approvalPatterns.some(pattern => 
                    pattern.test(review.body)
                  );
                  
                  if (isApproval && mentionsDocs) {
                    console.log(`Found documentation approval in review from ${review.user.login}`);
                    return true;
                  }
                  return false;
                });
                
                hasDocumentationApproval = docApprovalFromComment || docApprovalFromReview;
                
                if (!hasDocumentationApproval && approvals.size > 0) {
                  console.log(`Found ${approvals.size} approval(s), but no documentation team approval indicators found in comments.`);
                }
              } else {
                // If documentation team is not requested, we don't need their approval
                console.log('Documentation team review not requested for this PR.');
                hasDocumentationApproval = true;
              }
              
              console.log(`Documentation team approval status: ${hasDocumentationApproval}`);
              
            } catch (error) {
              console.error(`Error checking documentation team: ${error}`);
              core.setFailed(`Error checking documentation team approval: ${error.message}`);
              return;
            }



            // Set final status
            if (isDocumentationTeamRequested && !hasDocumentationApproval) {
              core.setFailed(`Documentation team approval required from @${owner}/${DOCUMENTATION_TEAM}`);
            } else if (!isDocumentationTeamRequested) {
              console.log('Documentation team review not required for this PR.');
            } else {
              console.log('Documentation team has approved this PR.');
            }
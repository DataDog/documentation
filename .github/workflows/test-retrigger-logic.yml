name: Test Retrigger Logic

on:
  push:
    branches:
      - 'devin.ford/manual-freeze-run'  # Triggers on any branch push
    paths:
      - '.github/workflows/test-retrigger-logic.yml'  # Only when this file changes
  workflow_dispatch:
    inputs:
      max_prs:
        description: 'Maximum number of PRs to test (default: 1)'
        required: false
        default: '1'
        type: string

permissions:
  contents: read
  pull-requests: read

jobs:
  test-retrigger-logic:
    runs-on: ubuntu-latest
    steps:
      - name: Test PR fetching and workflow dispatch logic
        uses: actions/github-script@v7
        with:
          script: |
            const maxPrs = parseInt('${{ github.event.inputs.max_prs || 1 }}');
            
            console.log(`Triggered by: ${{ github.event_name }}`);
            
            console.log(`Testing retrigger logic with max ${maxPrs} PRs targeting master branch...`);
            
            try {
              // Get latest PRs targeting master branch
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                base: 'master',
                sort: 'updated',
                direction: 'desc',
                per_page: maxPrs
              });
              
              if (pullRequests.length === 0) {
                console.log('✅ No open pull requests found targeting master branch');
                return;
              }
              
              console.log(`✅ Found ${pullRequests.length} pull requests`);
              console.log(`✅ Pull request numbers: ${pullRequests.map(pr => pr.number).join(', ')}`);
              
              // Test the workflow dispatch logic for each PR (without actually dispatching)
              for (const pr of pullRequests) {
                console.log(`\n--- Testing PR #${pr.number} ---`);
                console.log(`PR Title: ${pr.title}`);
                console.log(`PR Head SHA: ${pr.head.sha}`);
                console.log(`PR Head Ref: ${pr.head.ref}`);
                console.log(`PR State: ${pr.state}`);
                console.log(`PR Updated: ${pr.updated_at}`);
                
                // Simulate what would be sent to workflow dispatch
                const dispatchPayload = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'code-freeze.yml',
                  ref: pr.head.sha,
                  inputs: {
                    pr_number: pr.number.toString()
                  }
                };
                
                console.log(`✅ Would dispatch workflow with payload:`, JSON.stringify(dispatchPayload, null, 2));
                
                // Test workflow existence (check if code-freeze.yml exists)
                try {
                  const { data: workflow } = await github.rest.actions.getWorkflow({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'code-freeze.yml'
                  });
                  console.log(`✅ Target workflow exists: ${workflow.name} (ID: ${workflow.id})`);
                } catch (error) {
                  console.log(`❌ Target workflow 'code-freeze.yml' not found: ${error.message}`);
                }
                
                // Simulate rate limiting delay
                console.log(`⏱️  Simulating 2-second rate limit delay...`);
                await new Promise(resolve => setTimeout(resolve, 2000));
              }
              
              console.log('\n✅ Test completed successfully! All PR data retrieved and workflow dispatch payloads validated.');
              
              // Summary
              console.log('\n--- Test Summary ---');
              console.log(`Total PRs found: ${pullRequests.length}`);
              console.log(`PRs that would be processed: ${pullRequests.map(pr => `#${pr.number}`).join(', ')}`);
              console.log(`Each PR would trigger code-freeze.yml workflow with their respective HEAD SHA`);
              
            } catch (error) {
              console.error(`❌ Test failed: ${error.message}`);
              console.error(`Error details:`, error);
              process.exit(1);
            } 
{{- if (or (eq hugo.Environment "live") (in (slice "typesense_sync_preview:manual" "algolia_sync_preview:manual") (os.Getenv "CI_JOB_NAME" | default "" ))) -}}
    {{ $.Scratch.Add "algoliaindex" slice }}
    {{ $section := $.Site.GetPage "section" .Section }}
    {{ $hugo_context := . }}
    {{ $apiPagesWithoutTypeAPI := slice "api/latest/" "api/latest/rate-limits/" "api/latest/scopes/" }}

    {{ range (where (where (where .Site.AllPages "Kind" "!=" "home") "Type" "!=" "api") ".RelPermalink" "not in" $apiPagesWithoutTypeAPI) }}
        {{ $page := . }}
        {{ if and ($page.IsDescendant $section) (ne $page.Params.private true) (not (in $page.RelPermalink "/faq")) (not $page.Draft) (not (isset .Params "external_redirect")) }}
            {{ $rel_path := "" }}
            {{ with $page.File }}
              {{ $rel_path = (print .Lang "/" .Path) }}
            {{ end }}
            {{ $object_id := md5 $rel_path }}
            {{ $title := $page.Params.integration_title | default $page.Title }}
            {{ $content := $page.Plain | htmlUnescape | safeHTML | truncate 10000 }}
            {{ $tags := $page.Params.algolia.tags }}
            {{ $rank := $page.Params.algolia.rank | default 70 }}
            {{ $category := $page.Params.algolia.category | default "Documentation" }}
            {{ $subcategory := $page.Params.algolia.subcategory }}

            {{- /* Fallback to page's ancestor if subcategory isnt set in Params. */ -}}
            {{ if not $subcategory }}
                {{ if eq (lower $page.FirstSection.Title) ("service_managements") }}
                    {{ $subcategory = $page.CurrentSection.Title }}
                {{ else }}
                    {{ $subcategory = $page.FirstSection.Title }}
                {{ end }}
            {{ end }}

            {{- /* remove "is not supported" alert content which appears at the beginning of some markdown files */ -}}
            {{- $content = replaceRE `(\w|\s)*\s(is not supported for your selected Datadog site \(\))(.|\s)` "" $content 1 -}}

            {{- /* record for each individual section (split by h2 header) */ -}}
            {{- partial "algolia/page-sections.json" (dict "context" $hugo_context "page" $page "title" $title "category" $category "subcategory" $subcategory "rank" $rank) -}}

            {{/* This page has no h2 headings lets do a full page record, so we don't miss the page */}}
            {{- $headingCount := (len .Fragments.HeadingsMap) | default 0 -}}
            {{- if eq $headingCount 0 -}}
                {{- /* Full page record */ -}}
                {{- $record := (
                    dict "objectID" $object_id
                    "id" $object_id
                    "title" $title
                    "section_header" ""
                    "content" $content
                    "type" $page.Type
                    "relpermalink" $page.RelPermalink
                    "distinct_base_url" $page.RelPermalink
                    "full_url" $page.Permalink
                    "language" $page.Language.Lang
                    "category" $category
                    "subcategory" $subcategory
                    "rank" $rank
                    "order" -1
                    "tags" (slice)
                ) -}}

                {{- if $tags -}}
                    {{- $tags_dict := (dict "tags" $tags) -}}
                    {{- $record = merge $record $tags_dict -}}
                {{- end -}}

                {{- $.Scratch.Add "algoliaindex" $record -}}
            {{- end -}}
        {{ end }}
    {{ end }}

    {{- /* api pages are controlled by layout and not markdown, so we need to index them separately */ -}}
    {{ partial "algolia/api-pages-full-index.json" (dict "context" $hugo_context) }}

    {{- /* standard attributes pages */ -}}
    {{ partial "algolia/standard-attributes.json" (dict "context" $hugo_context) }}

    {{- /* glossary pages */ -}}
    {{ partial "algolia/glossary.json" (dict "context" $hugo_context) }}

    {{- /* Outputs final JSON object, copied to public/ folder. */ -}}
    {{- $.Scratch.Get "algoliaindex" | jsonify -}}
{{- end -}}
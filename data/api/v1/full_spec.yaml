components:
  callbacks: {}
  examples: {}
  headers: {}
  links: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    APIErrorResponse:
      description: Error response object.
      properties:
        errors:
          description: Array of errors returned by the API.
          items:
            description: Error description.
            example: Bad Request
            type: string
          type: array
      required:
      - errors
      type: object
    AWSAccount:
      description: Returns the AWS account associated with this integration.
      properties:
        access_key_id:
          description: Your AWS access key ID. Only required if your AWS account is
            a GovCloud or China account.
          type: string
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        account_specific_namespace_rules:
          additionalProperties:
            description: A list of additional properties.
            type: boolean
          description: 'An object, (in the form `{"namespace1":true/false, "namespace2":true/false}`),

            that enables or disables metric collection for specific AWS namespaces
            for this

            AWS account only.'
          example:
            auto_scaling: false
            opswork: false
          type: object
        excluded_regions:
          description: An array of AWS regions to exclude from metrics collection.
          example:
          - us-east-1
          - us-west-2
          items:
            description: Regions to exclude.
            type: string
          type: array
        filter_tags:
          description: 'The array of EC2 tags (in the form `key:value`) defines a
            filter that Datadog uses when collecting metrics from EC2.

            Wildcards, such as `?` (for single characters) and `*` (for multiple characters)
            can also be used.

            Only hosts that match one of the defined tags

            will be imported into Datadog. The rest will be ignored.

            Host matching a given tag can also be excluded by adding `!` before the
            tag.

            For example, `env:production,instance-type:c1.*,!region:us-east-1`'
          example:
          - <KEY>:<VALUE>
          items:
            description: The list of the filter_tags.
            type: string
          type: array
        host_tags:
          description: 'Array of tags (in the form `key:value`) to add to all hosts

            and metrics reporting through this integration.'
          example:
          - <KEY>:<VALUE>
          items:
            description: The list of the the host_tags.
            type: string
          type: array
        role_name:
          description: Your Datadog role delegation name.
          example: DatadogAWSIntegrationRole
          type: string
        secret_access_key:
          description: Your AWS secret access key. Only required if your AWS account
            is a GovCloud or China account.
          type: string
      type: object
    AWSAccountAndLambdaRequest:
      description: AWS account ID and Lambda ARN.
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        lambda_arn:
          description: ARN of the Datadog Lambda created during the Datadog-Amazon
            Web services Log collection setup.
          example: arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
          type: string
      required:
      - account_id
      - lambda_arn
      type: object
    AWSAccountCreateResponse:
      description: The Response returned by the AWS Create Account call.
      properties:
        external_id:
          description: AWS external_id.
          type: string
      type: object
    AWSAccountListResponse:
      description: List of enabled AWS accounts.
      properties:
        accounts:
          description: List of enabled AWS accounts.
          items:
            $ref: '#/components/schemas/AWSAccount'
          type: array
      type: object
    AWSLogsAsyncResponse:
      description: A list of all Datadog-AWS logs integrations available in your Datadog
        organization.
      properties:
        errors:
          description: List of errors.
          items:
            description: Description of errors.
            properties:
              code:
                description: Code properties
                example: no_such_config
                type: string
              message:
                description: Message content.
                example: AWS account 12345 has no lambda config to update
                type: string
            type: object
          type: array
        status:
          description: Status of the properties.
          example: created
          type: string
      type: object
    AWSLogsListResponse:
      description: A list of all Datadog-AWS logs integrations available in your Datadog
        organization.
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        lambdas:
          description: List of ARNs configured in your Datadog account.
          example:
          - arn: arn:aws:lambda:us-east-1:1234567:function:LogsCollectionAPITest
          items:
            description: Description of the Lambdas.
            properties:
              arn:
                description: Available ARN IDs.
                type: string
            type: object
          type: array
        services:
          description: Array of services IDs.
          example:
          - s3
          - elb
          - elbv2
          - cloudfront
          - redshift
          - lambda
          items:
            description: Description of the services.
            type: string
          type: array
      type: object
    AWSLogsListServicesResponse:
      description: The list of current AWS services for which Datadog offers automatic
        log collection.
      properties:
        id:
          description: Key value in returned object.
          example: s3
          type: string
        label:
          description: Name of service available for configuration with Datadog logs.
          example: S3 Access Logs
          type: string
      type: object
    AWSLogsServicesRequest:
      description: A list of current AWS services for which Datadog offers automatic
        log collection.
      properties:
        account_id:
          description: Your AWS Account ID without dashes.
          example: '1234567'
          type: string
        services:
          description: Array of services IDs set to enable automatic log collection.
            Discover the list of available services with the get list of AWS log ready
            services API endpoint.
          example:
          - s3
          - elb
          - elbv2
          - cloudfront
          - redshift
          - lambda
          items:
            description: Description of services.
            type: string
          type: array
      required:
      - account_id
      - services
      type: object
    AccessRole:
      default: st
      description: The access role of the user. Options are **st** (standard user),
        **adm** (admin user), or **ro** (read-only user).
      enum:
      - st
      - adm
      - ro
      - ERROR
      example: st
      type: string
      x-enum-varnames:
      - STANDARD
      - ADMIN
      - READ_ONLY
      - ERROR
    AlertGraphWidgetDefinition:
      description: Alert graphs are timeseries graphs showing the current status of
        any monitor defined on your system.
      properties:
        alert_id:
          description: ID of the alert to use in the widget.
          type: string
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: The title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: alert_graph
          description: Type of the widget.
          readOnly: true
          type: string
        viz_type:
          $ref: '#/components/schemas/WidgetVizType'
      required:
      - type
      - alert_id
      - viz_type
      type: object
    AlertValueWidgetDefinition:
      description: Alert values are query values showing the current value of the
        metric in any monitor defined on your system.
      properties:
        alert_id:
          description: ID of the alert to use in the widget.
          type: string
        precision:
          description: Number of decimal to show. If not defined, will use the raw
            value.
          format: int64
          type: integer
        text_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of value in the widget.
          type: string
        type:
          default: alert_value
          description: Type of the widget.
          readOnly: true
          type: string
        unit:
          description: Unit to display with the value.
          type: string
      required:
      - type
      - alert_id
      type: object
    ApiKey:
      description: Datadog API key.
      properties:
        created:
          description: Date of creation of the API key.
          example: '2019-08-02 15:31:07'
          readOnly: true
          type: string
        created_by:
          description: Datadog user handle that created the API key.
          example: john@example.com
          readOnly: true
          type: string
        key:
          description: API key.
          example: 1234512345123456abcabc912349abcd
          maxLength: 32
          minLength: 32
          readOnly: true
          type: string
        name:
          description: Name of your API key.
          example: example user
          type: string
      type: object
    ApiKeyListResponse:
      description: List of API and application keys available for a given organization.
      example:
        api_keys:
        - created_by: test_user
          key: 1234512345123456abcabc912349abcd
          name: app_key
      properties:
        api_keys:
          description: Array of API keys.
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      type: object
    ApiKeyResponse:
      description: An API key with its associated metadata.
      example:
        api_key:
          created_by: test_user
          key: 1234512345123456abcabc912349abcd
          name: app_key
      properties:
        api_key:
          $ref: '#/components/schemas/ApiKey'
      type: object
    ApplicationKey:
      description: An application key with its associated metadata.
      properties:
        hash:
          description: Hash of an application key.
          example: 1234512345123459cda4eb9ced49a3d84fd0138c
          maxLength: 40
          minLength: 40
          readOnly: true
          type: string
        name:
          description: Name of an application key.
          example: example user
          type: string
        owner:
          description: Owner of an application key.
          example: example.com
          readOnly: true
          type: string
      type: object
    ApplicationKeyListResponse:
      description: An application key response.
      example:
        application_keys:
        - hash: 1234512345123459cda4eb9ced49a3d84fd0138c
          name: app_key
          owner: test_user
      properties:
        application_keys:
          description: Array of application keys.
          items:
            $ref: '#/components/schemas/ApplicationKey'
          type: array
      type: object
    ApplicationKeyResponse:
      description: An application key response.
      example:
        application_key:
          hash: 1234512345123459cda4eb9ced49a3d84fd0138c
          name: app_key
          owner: test_user
      properties:
        application_key:
          $ref: '#/components/schemas/ApplicationKey'
      type: object
    AzureAccount:
      description: Datadog-Azure integrations configured for your organization.
      properties:
        client_id:
          description: Your Azure web application ID.
          example: testc7f6-1234-5678-9101-3fcbf464test
          type: string
        client_secret:
          description: Your Azure web application secret key.
          example: testingx./Sw*g/Y33t..R1cH+hScMDt
          type: string
        errors:
          description: Errors in your configuration.
          example:
          - '*'
          items:
            description: List of errors.
            readOnly: true
            type: string
          type: array
        host_filters:
          description: 'Limit the Azure instances that are pulled into Datadog by
            using tags.

            Only hosts that match one of the defined tags are imported into Datadog.'
          example: key:value,filter:example
          type: string
        new_client_id:
          description: Your New Azure web application ID.
          example: new1c7f6-1234-5678-9101-3fcbf464test
          type: string
        new_tenant_name:
          description: Your New Azure Active Directory ID.
          example: new1c44-1234-5678-9101-cc00736ftest
          type: string
        tenant_name:
          description: Your Azure Active Directory ID.
          example: testc44-1234-5678-9101-cc00736ftest
          type: string
      type: object
    AzureAccountListResponse:
      description: Accounts configured for your organization.
      items:
        $ref: '#/components/schemas/AzureAccount'
      type: array
    CancelDowntimesByScopeRequest:
      description: Cancel downtimes according to scope.
      properties:
        scope:
          description: 'The scope(s) to which the downtime applies. For example, `host:app2`.

            Provide multiple scopes as a comma-separated list like `env:dev,env:prod`.

            The resulting downtime applies to sources that matches ALL provided scopes
            (`env:dev` **AND** `env:prod`).'
          example: host:myserver
          type: string
      required:
      - scope
      type: object
    CanceledDowntimesIds:
      description: Object containing array of IDs of canceled downtimes.
      properties:
        cancelled_ids:
          description: ID of downtimes that were canceled.
          example:
          - 123456789
          - 123456790
          items:
            description: Integer representation of one downtime ID.
            format: int64
            type: integer
          type: array
      type: object
    ChangeWidgetDefinition:
      description: The Change graph shows you the change in a value over the time
        period chosen.
      properties:
        requests:
          description: "Array of one request object to display in the widget.\n\n\
            See the dedicated [Request JSON schema documentation](https://docs.datadoghq.com/dashboards/graphing_json/request_json)\n\
            \ to learn how to build the `REQUEST_SCHEMA`."
          example:
          - q/apm_query/log_query: <METRIC_1>{<SCOPE_1>}
          items:
            $ref: '#/components/schemas/ChangeWidgetRequest'
          maxItems: 1
          minItems: 1
          type: array
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: change
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    ChangeWidgetRequest:
      description: Updated change widget.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        change_type:
          $ref: '#/components/schemas/WidgetChangeType'
        compare_to:
          $ref: '#/components/schemas/WidgetCompareTo'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        increase_good:
          description: Whether to show increase as good.
          type: boolean
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        order_by:
          $ref: '#/components/schemas/WidgetOrderBy'
        order_dir:
          $ref: '#/components/schemas/WidgetSort'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Query definition.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        show_present:
          description: Whether to show the present value.
          type: boolean
      type: object
    CheckCanDeleteMonitorResponse:
      description: Response of monitor IDs that can or can't be safely deleted.
      properties:
        data:
          description: Wrapper object with the list of monitor IDs.
          properties:
            ok:
              description: An array of of Monitor IDs that can be safely deleted.
              items:
                description: ID of a monitor that can be safely deleted.
                format: int64
                type: integer
              type: array
          type: object
        errors:
          additionalProperties:
            description: Strings denoting where a monitor is used.
            items:
              description: Asset where a monitor is used.
              type: string
            type: array
          description: A mapping of Monitor ID to strings denoting where it's used.
          type: object
      required:
      - data
      type: object
    CheckCanDeleteSLOResponse:
      description: A service level objective response containing the requested object.
      properties:
        data:
          description: An array of service level objective objects.
          properties:
            ok:
              description: An array of of SLO IDs that can be safely deleted.
              items:
                description: A SLO ID.
                type: string
              type: array
          type: object
        errors:
          additionalProperties:
            description: Description of the service level objective reference.
            type: string
          description: A mapping of SLO id to it's current usages.
          type: object
      type: object
    CheckStatusWidgetDefinition:
      description: Check status shows the current status or number of results for
        any check performed.
      properties:
        check:
          description: Name of the check to use in the widget.
          type: string
        group:
          description: Group reporting a single check.
          type: string
        group_by:
          description: List of tag prefixes to group by in the case of a cluster check.
          items:
            description: Tag prefix.
            type: string
          type: array
        grouping:
          $ref: '#/components/schemas/WidgetGrouping'
        tags:
          description: List of tags used to filter the groups reporting a cluster
            check.
          items:
            description: Tag name.
            type: string
          type: array
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: check_status
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - check
      - grouping
      type: object
    Creator:
      description: Object describing the creator of the shared element.
      properties:
        email:
          description: Email of the creator.
          type: string
        handle:
          description: Handle of the creator.
          type: string
        name:
          description: Name of the creator.
          type: string
      readOnly: true
      type: object
    Dashboard:
      description: "A dashboard is Datadog\u2019s tool for visually tracking, analyzing,\
        \ and displaying\nkey performance metrics, which enable you to monitor the\
        \ health of your infrastructure."
      properties:
        author_handle:
          description: Identifier of the dashboard author.
          example: test@datadoghq.com
          readOnly: true
          type: string
        created_at:
          description: Creation date of the dashboard.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Description of the dashboard.
          nullable: true
          type: string
        id:
          description: ID of the dashboard.
          example: 123-abc-456
          readOnly: true
          type: string
        is_read_only:
          default: false
          description: Whether this dashboard is read-only. If True, only the author
            and admins can make changes to it.
          example: false
          type: boolean
        layout_type:
          $ref: '#/components/schemas/DashboardLayoutType'
        modified_at:
          description: Modification date of the dashboard.
          format: date-time
          readOnly: true
          type: string
        notify_list:
          description: List of handles of users to notify when changes are made to
            this dashboard.
          items:
            description: User handles.
            type: string
          nullable: true
          type: array
        template_variable_presets:
          description: Array of template variables saved views.
          items:
            $ref: '#/components/schemas/DashboardTemplateVariablePreset'
          nullable: true
          type: array
        template_variables:
          description: List of template variables for this dashboard.
          items:
            description: Template variable.
            properties:
              default:
                description: The default value for the template variable on dashboard
                  load.
                example: my-host
                nullable: true
                type: string
              name:
                description: The name of the variable.
                example: host1
                type: string
              prefix:
                description: The tag prefix associated with the variable. Only tags
                  with this prefix appear in the variable drop-down.
                example: host
                nullable: true
                type: string
            required:
            - name
            type: object
          nullable: true
          type: array
        title:
          description: Title of the dashboard.
          type: string
        url:
          description: The URL of the dashboard.
          example: /dashboard/123-abc-456/example-dashboard-title
          readOnly: true
          type: string
        widgets:
          description: List of widgets to display on the dashboard.
          items:
            $ref: '#/components/schemas/Widget'
          type: array
      required:
      - title
      - layout_type
      - widgets
      type: object
    DashboardDeleteResponse:
      description: Response from the delete dashboard call.
      properties:
        deleted_dashboard_id:
          description: ID of the deleted dashboard.
          type: string
      type: object
    DashboardLayoutType:
      description: Layout type of the dashboard.
      enum:
      - ordered
      - free
      type: string
      x-enum-varnames:
      - ORDERED
      - FREE
    DashboardList:
      description: Your Datadog Dashboards.
      properties:
        author:
          $ref: '#/components/schemas/Creator'
        created:
          description: Date of creation of the dashboard list.
          format: date-time
          readOnly: true
          type: string
        dashboard_count:
          description: The number of dashboards in the list.
          format: int64
          readOnly: true
          type: integer
        id:
          description: The ID of the dashboard list.
          format: int64
          readOnly: true
          type: integer
        is_favorite:
          description: Whether or not the list is in the favorites.
          readOnly: true
          type: boolean
        modified:
          description: Date of last edition of the dashboard list.
          format: date-time
          readOnly: true
          type: string
        name:
          description: The name of the dashboard list.
          type: string
        type:
          description: The type of dashboard list.
          example: manual_dashboard_list
          readOnly: true
          type: string
      required:
      - name
      type: object
    DashboardListDeleteResponse:
      description: Deleted dashboard details.
      properties:
        deleted_dashboard_list_id:
          description: ID of the deleted dashboard list.
          format: int64
          type: integer
      type: object
    DashboardListListResponse:
      description: Information on your dashboard lists.
      properties:
        dashboard_lists:
          description: List of all your dashboard lists.
          items:
            $ref: '#/components/schemas/DashboardList'
          type: array
      type: object
    DashboardSummary:
      description: Dashboard summary response.
      properties:
        dashboards:
          description: List of dashboard definitions.
          items:
            description: Dashboard definition.
            properties:
              author_handle:
                description: Identifier of the dashboard author.
                type: string
              created_at:
                description: Creation date of the dashboard.
                format: date-time
                type: string
              description:
                description: Description of the dashboard.
                type: string
              id:
                description: Dashboard identifier.
                type: string
              is_read_only:
                description: Whether this dashboard is read-only. If True, only the
                  author and admins can make changes to it.
                type: boolean
              layout_type:
                $ref: '#/components/schemas/DashboardLayoutType'
              modified_at:
                description: Modification date of the dashboard.
                format: date-time
                type: string
              title:
                description: Title of the dashboard.
                type: string
              url:
                description: URL of the dashboard.
                type: string
            type: object
          type: array
      type: object
    DashboardTemplateVariablePreset:
      description: Template variables saved views.
      properties:
        name:
          description: The name of the variable.
          type: string
        template_variables:
          description: List of variables.
          items:
            $ref: '#/components/schemas/DashboardTemplateVariablePresetValue'
          type: array
      type: object
    DashboardTemplateVariablePresetValue:
      description: Template variables saved views.
      properties:
        name:
          description: The name of the variable.
          type: string
        value:
          description: The value of the template variable within the saved view.
          type: string
      type: object
    DeletedMonitor:
      description: Response from the delete monitor call.
      properties:
        deleted_monitor_id:
          description: ID of the deleted monitor.
          format: int64
          type: integer
      readOnly: true
      type: object
    DistributionWidgetDefinition:
      description: "The Distribution visualization is another way of showing metrics\n\
        aggregated across one or several tags, such as hosts.\nUnlike the heat map,\
        \ a distribution graph\u2019s x-axis is quantity rather than time."
      properties:
        legend_size:
          $ref: '#/components/schemas/WidgetLegendSize'
        requests:
          description: "Array of one request object to display in the widget.\n\n\
            See the dedicated [Request JSON schema documentation](https://docs.datadoghq.com/dashboards/graphing_json/request_json)\n\
            \ to learn how to build the `REQUEST_SCHEMA`."
          items:
            $ref: '#/components/schemas/DistributionWidgetRequest'
          maxItems: 1
          minItems: 1
          type: array
        show_legend:
          description: Whether or not to display the legend on this widget.
          type: boolean
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: distribution
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    DistributionWidgetRequest:
      description: Updated distribution widget.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Widget query.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        style:
          $ref: '#/components/schemas/WidgetStyle'
      type: object
    Downtime:
      description: 'Downtiming gives you greater control over monitor notifications
        by

        allowing you to globally exclude scopes from alerting.

        Downtime settings, which can be scheduled with start and end times,

        prevent all alerting related to specified Datadog tags.'
      properties:
        active:
          description: If a scheduled downtime currently exists.
          example: true
          readOnly: true
          type: boolean
        canceled:
          description: If a scheduled downtime is canceled.
          example: 1412799983
          format: int64
          nullable: true
          readOnly: true
          type: integer
        creator_id:
          description: User ID of the downtime creator.
          example: 123456
          format: int32
          maximum: 2147483647
          readOnly: true
          type: integer
        disabled:
          description: If a downtime has been disabled.
          example: false
          type: boolean
        downtime_type:
          description: '`0` for a downtime applied on `*` or all,

            `1` when the downtime is only scoped to hosts,

            or `2` when the downtime is scoped to anything but hosts.'
          example: 2
          format: int32
          maximum: 2147483647
          readOnly: true
          type: integer
        end:
          description: 'POSIX timestamp to end the downtime. If not provided,

            the downtime is in effect indefinitely until you cancel it.'
          example: 1412793983
          format: int64
          nullable: true
          type: integer
        id:
          description: The downtime ID.
          example: 1625
          format: int64
          readOnly: true
          type: integer
        message:
          description: 'A message to include with notifications for this downtime.

            Email notifications can be sent to specific users by using the same `@username`
            notation as events.'
          example: Message on the downtime
          type: string
        monitor_id:
          description: 'A single monitor to which the downtime applies.

            If not provided, the downtime applies to all monitors.'
          example: 123456
          format: int64
          nullable: true
          type: integer
        monitor_tags:
          description: 'A comma-separated list of monitor tags. For example, tags
            that are applied directly to monitors,

            not tags that are used in monitor queries (which are filtered by the scope
            parameter), to which the downtime applies.

            The resulting downtime applies to monitors that match ALL provided monitor
            tags.

            For example, `service:postgres` **AND** `team:frontend`.'
          example:
          - '*'
          items:
            description: A monitor tag.
            type: string
          type: array
        parent_id:
          description: ID of the parent Downtime.
          example: 123
          format: int64
          nullable: true
          type: integer
        recurrence:
          $ref: '#/components/schemas/DowntimeRecurrence'
        scope:
          description: 'The scope(s) to which the downtime applies. For example, `host:app2`.

            Provide multiple scopes as a comma-separated list like `env:dev,env:prod`.

            The resulting downtime applies to sources that matches ALL provided scopes
            (`env:dev` **AND** `env:prod`).'
          example:
          - env:staging
          items:
            description: A scope. For example, `"env:staging"`.
            type: string
          type: array
        start:
          description: 'POSIX timestamp to start the downtime.

            If not provided, the downtime starts the moment it is created.'
          example: 1412792983
          format: int64
          type: integer
        timezone:
          description: The timezone for the downtime.
          example: America/New_York
          type: string
        updater_id:
          description: ID of the last user that updated the downtime.
          example: 123456
          format: int32
          maximum: 2147483647
          nullable: true
          readOnly: true
          type: integer
      type: object
    DowntimeRecurrence:
      description: An object defining the recurrence of the downtime.
      nullable: true
      properties:
        period:
          description: 'How often to repeat as an integer.

            For example, to repeat every 3 days, select a type of `days` and a period
            of `3`.'
          example: 1
          format: int32
          maximum: 2147483647
          type: integer
        type:
          description: The type of recurrence. Choose from `days`, `weeks`, `months`,
            `years`.
          example: weeks
          type: string
        until_date:
          description: 'The date at which the recurrence should end as a POSIX timestamp.

            `until_occurences` and `until_date` are mutually exclusive.'
          example: 1447786293
          format: int64
          nullable: true
          type: integer
        until_occurrences:
          description: 'How many times the downtime is rescheduled.

            `until_occurences` and `until_date` are mutually exclusive.'
          example: 2
          format: int32
          maximum: 2147483647
          nullable: true
          type: integer
        week_days:
          description: 'A list of week days to repeat on. Choose from `Mon`, `Tue`,
            `Wed`, `Thu`, `Fri`, `Sat` or `Sun`.

            Only applicable when type is weeks. First letter must be capitalized.'
          example:
          - Mon
          - Tue
          items:
            description: A day of the week, formatted as `Mon`, `Tue`, `Wed`, `Thu`,
              `Fri`, `Sat` or `Sun`.
            type: string
          type: array
      type: object
    EmbeddableGraph:
      description: Embeddable graph.
      properties:
        dash_name:
          description: Name of the dashboard the graph is on (null if none).
          type: string
        dash_url:
          description: URL of the dashboard the graph is on (null if none).
          type: string
        embed_id:
          description: ID of the embed.
          type: string
        graph_title:
          description: Title of the graph.
          type: string
        html:
          description: HTML fragment for the embed (iframe).
          type: string
        revoked:
          description: Boolean flag for whether or not the embed is revoked.
          type: boolean
        shared_by:
          description: ID of the use who shared the embed.
          format: int64
          type: integer
      type: object
    EmbeddableGraphLegend:
      default: 'no'
      description: The flag determining if the graph includes a legend.
      enum:
      - 'yes'
      - 'no'
      type: string
      x-enum-varnames:
      - 'YES'
      - 'NO'
    EmbeddableGraphPayload:
      description: Payload to create new embeddable graph.
      properties:
        graph_json:
          description: 'The graph definition in JSON.


            Same format that is available on the JSON tab of the graph editor.'
          type: string
        legend:
          $ref: '#/components/schemas/EmbeddableGraphLegend'
        size:
          $ref: '#/components/schemas/EmbeddableGraphSize'
        timeframe:
          $ref: '#/components/schemas/EmbeddableGraphTimeframe'
        title:
          default: Embed created through API
          description: Determines graph title. Must be at least 1 character.
          minimum: 1
          type: string
      required:
      - graph_json
      type: object
    EmbeddableGraphSize:
      default: medium
      description: The size of the graph.
      enum:
      - small
      - medium
      - large
      - xlarge
      type: string
      x-enum-varnames:
      - SMALL
      - MEDIUM
      - LARGE
      - XLARGE
    EmbeddableGraphTimeframe:
      default: 1_hour
      description: The timeframe for the graph.
      enum:
      - 1_hour
      - 4_hours
      - 1_day
      - 2_days
      - 1_week
      type: string
      x-enum-varnames:
      - 1_HOUR
      - 4_HOURS
      - 1_DAY
      - 2_DAYS
      - 1_WEEK
    EmbeddableGraphs:
      description: Response with embeddable graphs.
      properties:
        embedded_graphs:
          description: List of embeddable graphs.
          items:
            $ref: '#/components/schemas/EmbeddableGraph'
          type: array
      type: object
    Event:
      description: Object representing an event.
      properties:
        aggregation_key:
          description: 'An arbitrary string to use for aggregation. Limited to 100
            characters.

            If you specify a key, all events using that key are grouped together in
            the Event Stream.'
          maxLength: 100
          type: string
        alert_type:
          $ref: '#/components/schemas/EventAlertType'
        date_happened:
          description: 'POSIX timestamp of the event. Must be sent as an integer (i.e.
            no quotes).

            Limited to events no older than 1 year, 24 days (389 days).'
          format: int64
          type: integer
        device_name:
          description: A list of device names to post the event with.
          items:
            description: A device name.
            type: string
          type: array
        host:
          description: 'Host name to associate with the event.

            Any tags associated with the host are also applied to this event.'
          type: string
        id:
          description: Integer ID of the event.
          format: int64
          readOnly: true
          type: integer
        payload:
          description: Payload of the event.
          example: '{}'
          readOnly: true
          type: string
        priority:
          $ref: '#/components/schemas/EventPriority'
        related_event_id:
          description: ID of the parent event. Must be sent as an integer (i.e. no
            quotes).
          format: int64
          type: integer
        source_type_name:
          description: 'The type of event being posted. Option examples include nagios,
            hudson, jenkins, my_apps, chef, puppet, git, bitbucket, etc.

            A complete list of source attribute values [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).'
          type: string
        tags:
          description: A list of tags to apply to the event.
          example:
          - environment:test
          items:
            description: A tag.
            type: string
          type: array
        text:
          description: 'The body of the event. Limited to 4000 characters. The text
            supports markdown.

            Use `msg_text` with the Datadog Ruby library.'
          example: Oh boy!
          maxLength: 4000
          type: string
        title:
          description: The event title. Limited to 100 characters. Use `msg_title`
            with the Datadog Ruby library.
          example: Did you hear the news today?
          maxLength: 100
          type: string
        url:
          description: URL of the event.
          readOnly: true
          type: string
      required:
      - title
      - text
      type: object
    EventAlertType:
      description: 'If an alert event is enabled, set its type.

        For example, `error`, `warning`, `info`, and `success`.'
      enum:
      - error
      - warning
      - info
      - success
      example: info
      type: string
      x-enum-varnames:
      - ERROR
      - WARNING
      - INFO
      - SUCCESS
    EventListResponse:
      description: An event list response.
      properties:
        events:
          description: An array of events.
          items:
            $ref: '#/components/schemas/Event'
          type: array
        status:
          description: A status.
          type: string
      type: object
    EventPriority:
      description: The priority of the event. For example, `normal` or `low`.
      enum:
      - normal
      - low
      example: normal
      type: string
      x-enum-varnames:
      - NORMAL
      - LOW
    EventQueryDefinition:
      description: List of events
      properties:
        search:
          description: The query being made on the event.
          type: string
        tags_execution:
          description: The execution method for multi-value filters. Can be either
            and or or.
          type: string
      required:
      - search
      - tags_execution
      type: object
    EventResponse:
      description: Object containing an event response.
      properties:
        event:
          $ref: '#/components/schemas/Event'
        status:
          description: A status.
          type: string
      type: object
    EventStreamWidgetDefinition:
      description: 'The event stream is a widget version of the stream of events

        on the Event Stream view. Only available on FREE layout dashboards.'
      properties:
        event_size:
          $ref: '#/components/schemas/WidgetEventSize'
        query:
          description: Query to filter the event stream with.
          type: string
        tags_execution:
          description: The execution method for multi-value filters. Can be either
            and or or.
          type: string
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: event_stream
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - query
      type: object
    EventTimelineWidgetDefinition:
      description: The event timeline is a widget version of the timeline that appears
        at the top of the Event Stream view. Only available on FREE layout dashboards.
      properties:
        query:
          description: Query to filter the event timeline with.
          type: string
        tags_execution:
          description: The execution method for multi-value filters. Can be either
            and or or.
          type: string
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: event_timeline
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - query
      type: object
    FreeTextWidgetDefinition:
      description: Free text is a widget that allows you to add headings to your screenboard.
        Commonly used to state the overall purpose of the dashboard. Only available
        on FREE layout dashboards.
      properties:
        color:
          description: Color of the text.
          type: string
        font_size:
          description: Size of the text.
          type: string
        text:
          description: Text to display.
          type: string
        text_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        type:
          default: free_text
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - text
      type: object
    GCPAccount:
      description: Your Google Cloud Platform Account.
      properties:
        auth_provider_x509_cert_url:
          description: Should be `https://www.googleapis.com/oauth2/v1/certs`.
          example: https://www.googleapis.com/oauth2/v1/certs
          type: string
        auth_uri:
          description: Should be `https://accounts.google.com/o/oauth2/auth`.
          example: https://accounts.google.com/o/oauth2/auth
          type: string
        automute:
          description: Silence monitors for expected GCE instance shutdowns.
          type: boolean
        client_email:
          description: Your email found in your JSON service account key.
          example: api-dev@datadog-sandbox.iam.gserviceaccount.com
          type: string
        client_id:
          description: Your ID found in your JSON service account key.
          example: '123456712345671234567'
          type: string
        client_x509_cert_url:
          description: 'Should be `https://www.googleapis.com/robot/v1/metadata/x509/<CLIENT_EMAIL>`

            where `<CLIENT_EMAIL>` is the email found in your JSON service account
            key.'
          example: https://www.googleapis.com/robot/v1/metadata/x509/<CLIENT_EMAIL>
          type: string
        errors:
          description: An array of errors.
          example:
          - '*'
          items:
            description: String representation of one error.
            readOnly: true
            type: string
          type: array
        host_filters:
          description: 'Limit the GCE instances that are pulled into Datadog by using
            tags.

            Only hosts that match one of the defined tags are imported into Datadog.'
          example: key:value,filter:example
          type: string
        private_key:
          description: Your private key name found in your JSON service account key.
          example: private_key
          type: string
        private_key_id:
          description: Your private key ID found in your JSON service account key.
          example: 123456789abcdefghi123456789abcdefghijklm
          type: string
        project_id:
          description: Your Google Cloud project ID found in your JSON service account
            key.
          example: datadog-apitest
          type: string
        token_uri:
          description: Should be `https://accounts.google.com/o/oauth2/token`.
          example: https://accounts.google.com/o/oauth2/token
          type: string
        type:
          description: The value for service_account found in your JSON service account
            key.
          example: service_account
          type: string
      type: object
    GCPAccountListResponse:
      description: Array of GCP account responses.
      items:
        $ref: '#/components/schemas/GCPAccount'
      type: array
    GraphSnapshot:
      description: Object representing a graph snapshot.
      properties:
        graph_def:
          description: 'A JSON document defining the graph. `graph_def` can be used
            instead of `metric_query`.

            The JSON document uses the [grammar defined here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)

            and should be formatted to a single line then URL encoded.'
          type: string
        metric_query:
          description: The metric query. One of `metric_query` or `graph_def` is required.
          type: string
        snapshot_url:
          description: URL of your [graph snapshot](https://docs.datadoghq.com/metrics/explorer/#snapshot).
          example: https://app.datadoghq.com/s/f12345678/aaa-bbb-ccc
          type: string
      type: object
    GroupWidgetDefinition:
      description: The groups widget allows you to keep similar graphs together on
        your timeboard. Each group has a custom header, can hold one to many graphs,
        and is collapsible.
      properties:
        layout_type:
          $ref: '#/components/schemas/WidgetLayoutType'
        title:
          description: Title of the widget.
          type: string
        type:
          default: group
          description: Type of the widget.
          readOnly: true
          type: string
        widgets:
          description: List of widget groups.
          items:
            $ref: '#/components/schemas/Widget'
          type: array
      required:
      - type
      - layout_type
      - widgets
      type: object
    HTTPLog:
      description: Logs that are sent over HTTP.
      properties:
        ddsource:
          description: 'The integration name associated with your log: the technology
            from which the log originated.

            When it matches an integration name, Datadog automatically installs the
            corresponding parsers and facets.

            See [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).'
          example: nginx
          type: string
        ddtags:
          description: Tags associated with your logs.
          example: env:staging,service:payment
          type: string
        hostname:
          description: The name of the originating host of the log.
          example: i-012345678
          type: string
        message:
          description: 'The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)

            of your log. By default, Datadog ingests the value of the message attribute
            as the body of the log entry.

            That value is then highlighted and displayed in the Logstream, where it
            is indexed for full text search.'
          example: 2019-11-19T14:37:58,995 INFO [process.name][20081] Hello World
          type: string
      required:
      - name
      type: object
    HTTPLogError:
      description: Invalid query performed.
      properties:
        code:
          description: Error code.
          format: int32
          maximum: 2147483647
          type: integer
        message:
          description: Error message.
          type: string
      required:
      - code
      - message
      type: object
    HTTPMethod:
      description: The HTTP method.
      enum:
      - GET
      - POST
      - PATCH
      - PUT
      - DELETE
      - HEAD
      - OPTIONS
      type: string
      x-enum-varnames:
      - GET
      - POST
      - PATCH
      - PUT
      - DELETE
      - HEAD
      - OPTIONS
    HeatMapWidgetDefinition:
      description: The heat map visualization shows metrics aggregated across many
        tags, such as hosts. The more hosts that have a particular value, the darker
        that square is.
      properties:
        events:
          description: List of widget events.
          items:
            $ref: '#/components/schemas/WidgetEvent'
          type: array
        legend_size:
          $ref: '#/components/schemas/WidgetLegendSize'
        requests:
          description: List of widget types.
          items:
            $ref: '#/components/schemas/HeatMapWidgetRequest'
          maxItems: 1
          minItems: 1
          type: array
        show_legend:
          description: Whether or not to display the legend on this widget.
          type: boolean
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: heatmap
          description: Type of the widget.
          readOnly: true
          type: string
        yaxis:
          $ref: '#/components/schemas/WidgetAxis'
      required:
      - type
      - requests
      type: object
    HeatMapWidgetRequest:
      description: Updated heat map widget.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Widget query.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        style:
          $ref: '#/components/schemas/WidgetStyle'
      type: object
    Host:
      description: Object representing a host.
      properties:
        aliases:
          description: Host aliases collected by Datadog.
          items:
            description: A host alias.
            example: mycoolhost-1
            type: string
          type: array
        apps:
          description: The Datadog integrations reporting metrics for the host.
          items:
            description: Name of an app.
            example: agent
            type: string
          type: array
        aws_name:
          description: AWS name of your host.
          example: mycoolhost-1
          type: string
        host_name:
          description: The host name.
          example: i-deadbeef
          type: string
        id:
          description: The host ID.
          example: 123456
          format: int64
          type: integer
        is_muted:
          description: If a host is muted or unmuted.
          example: false
          type: boolean
        last_reported_time:
          description: Last time the host reported a metric data point.
          example: 1565000000
          format: int64
          type: integer
        meta:
          description: Metadata associated with your host.
          properties:
            nixV:
              description: Array of Unix versions.
              items:
                description: Version name.
                example: Ubuntu
                type: string
              type: array
          type: object
        metrics:
          description: Host Metrics collected.
          properties:
            cpu:
              description: The percent of CPU used (everything but idle).
              example: 99.0
              format: double
              type: number
            iowait:
              description: The percent of CPU spent waiting on the IO (not reported
                for all platforms).
              example: 3.2
              format: double
              type: number
            load:
              description: The system load over the last 15 minutes.
              example: 0.5
              format: double
              type: number
          type: object
        mute_timeout:
          description: Timeout of the mute applied to your host.
          format: int64
          type: integer
        name:
          description: The host name.
          example: i-hostname
          type: string
        sources:
          description: Source or cloud provider associated with your host.
          items:
            description: A source or cloud provider name.
            example: aws
            type: string
          type: array
        tags_by_source:
          additionalProperties:
            description: Array of tags for a single source.
            items:
              description: A tag.
              example: test.example.com.host
              type: string
            type: array
          description: List of tags for each source (AWS, Datadog Agent, Chef..).
          type: object
        up:
          description: Displays UP when the expected metrics are received and displays
            `???` if no metrics are received.
          example: true
          type: boolean
      type: object
    HostListResponse:
      description: Response with Host information from Datadog.
      properties:
        host_list:
          description: Array of hosts.
          items:
            $ref: '#/components/schemas/Host'
          type: array
        total_matching:
          description: Number of host matching the query.
          example: 1
          format: int64
          type: integer
        total_returned:
          description: Number of host returned.
          example: 1
          format: int64
          type: integer
      type: object
    HostMapRequest:
      description: Updated host map.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Query definition.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
      type: object
    HostMapWidgetDefinition:
      description: The host map widget graphs any metric across your hosts using the
        same visualization available from the main Host Map page.
      properties:
        group:
          description: List of tag prefixes to group by.
          items:
            description: Tag prefixes.
            type: string
          type: array
        no_group_hosts:
          description: "Whether to show the hosts that don\u2019t fit in a group."
          type: boolean
        no_metric_hosts:
          description: Whether to show the hosts with no metrics.
          type: boolean
        node_type:
          $ref: '#/components/schemas/WidgetNodeType'
        notes:
          description: Notes on the title.
          type: string
        requests:
          description: List of definitions.
          properties:
            fill:
              $ref: '#/components/schemas/HostMapRequest'
            size:
              $ref: '#/components/schemas/HostMapRequest'
          type: object
        scope:
          description: List of tags used to filter the map.
          items:
            description: Tags.
            type: string
          type: array
        style:
          description: The style to apply to the widget.
          properties:
            fill_max:
              description: Max value to use to color the map.
              type: string
            fill_min:
              description: Min value to use to color the map.
              type: string
            palette:
              description: Color palette to apply to the widget.
              type: string
            palette_flip:
              description: Whether to flip the palette tones.
              type: boolean
          type: object
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: hostmap
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    HostMuteResponse:
      description: Response with the list of muted host for your organization.
      properties:
        action:
          description: Action applied to the hosts.
          example: Muted
          type: string
        end:
          description: POSIX timestamp in seconds when the host is unmuted.
          example: 1579098130
          format: int64
          type: integer
        hostname:
          description: The host name.
          example: test.host
          type: string
        message:
          description: Message associated with the mute.
          example: Muting this host for a test!
          type: string
      type: object
    HostMuteSettings:
      description: Combination of settings to mute a host.
      properties:
        end:
          description: POSIX timestamp in seconds when the host is unmuted. If omitted,
            the host remains muted until explicitly unmuted.
          example: 1579098130
          format: int64
          type: integer
        message:
          description: Message to associate with the muting of this host.
          example: Muting this host for a test!
          type: string
        override:
          description: If true and the host is already muted, replaces existing host
            mute settings.
          example: false
          type: boolean
      type: object
    HostTags:
      description: Set of tags to associate with your host.
      properties:
        host:
          description: Your host name.
          example: test.host
          type: string
        tags:
          description: A list of tags to apply to the host.
          items:
            description: A given tag in a list.
            example: environment:production
            type: string
          type: array
      type: object
    HostTotals:
      description: Total number of host currently monitored by Datadog.
      properties:
        total_active:
          description: Total number of active host (UP and ???) reporting to Datadog.
          format: int64
          type: integer
        total_up:
          description: Number of host that are UP and reporting to Datadog.
          format: int64
          type: integer
      type: object
    IFrameWidgetDefinition:
      description: The iframe widget allows you to embed a portion of any other web
        page on your dashboard. Only available on FREE layout dashboards.
      properties:
        type:
          default: iframe
          description: Type of the widget.
          readOnly: true
          type: string
        url:
          description: URL of the iframe.
          type: string
      required:
      - type
      - url
      type: object
    IPPrefixesAPI:
      description: Available prefix information for the API endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesAPM:
      description: Available prefix information for the APM endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesAgents:
      description: Available prefix information for the Agent endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesLogs:
      description: Available prefix information for the Logs endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesProcess:
      description: Available prefix information for the Process endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesSynthetics:
      description: Available prefix information for the Synthetics endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPPrefixesWebhooks:
      description: Available prefix information for the Webhook endpoints.
      properties:
        prefixes_ipv4:
          description: List of IPv4 prefixes.
          items:
            description: IPv4 prefix
            type: string
          type: array
        prefixes_ipv6:
          description: List of IPv6 prefixes.
          items:
            description: IPv6 prefix
            type: string
          type: array
      type: object
    IPRanges:
      description: IP ranges.
      properties:
        agents:
          $ref: '#/components/schemas/IPPrefixesAgents'
        api:
          $ref: '#/components/schemas/IPPrefixesAPI'
        apm:
          $ref: '#/components/schemas/IPPrefixesAPM'
        logs:
          $ref: '#/components/schemas/IPPrefixesLogs'
        modified:
          description: Date when last updated, in the form `YYYY-MM-DD-hh-mm-ss`.
          example: 2019-10-31-20-00-00
          type: string
        process:
          $ref: '#/components/schemas/IPPrefixesProcess'
        synthetics:
          $ref: '#/components/schemas/IPPrefixesSynthetics'
        version:
          description: Version of the IP list.
          example: 11
          format: int64
          type: integer
        webhooks:
          $ref: '#/components/schemas/IPPrefixesWebhooks'
      type: object
    IdpFormData:
      description: Object describing the IdP configuration.
      properties:
        idp_file:
          description: The path to the XML metadata file you wish to upload.
          format: binary
          type: string
      required:
      - idp_file
      type: object
    IdpResponse:
      description: The IdP response object.
      properties:
        message:
          description: Identity provider response.
          example: IdP metadata successfully uploaded for example org
          type: string
      required:
      - message
      type: object
    ImageWidgetDefinition:
      description: The image widget allows you to embed an image on your dashboard.
        An image can be a PNG, JPG, or animated GIF. Only available on FREE layout
        dashboards.
      properties:
        margin:
          $ref: '#/components/schemas/WidgetMargin'
        sizing:
          $ref: '#/components/schemas/WidgetImageSizing'
        type:
          default: image
          description: Type of the widget.
          readOnly: true
          type: string
        url:
          description: URL of the image.
          type: string
      required:
      - type
      - url
      type: object
    IntakePayloadAccepted:
      description: The payload accepted for intake.
      properties:
        status:
          description: The status of the intake payload.
          example: ok
          type: string
      type: object
    Log:
      description: Object describing a log after being processed and stored by Datadog.
      properties:
        content:
          description: JSON object containing all log attributes and their associated
            values.
          properties:
            attributes:
              additionalProperties: {}
              description: JSON object of attributes from your log.
              example:
                customAttribute: 123
                duration: 2345
              type: object
            host:
              description: Name of the machine from where the logs are being sent.
              example: i-0123
              type: string
            message:
              description: 'The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)

                of your log. By default, Datadog ingests the value of the message
                attribute as the body of the log entry.

                That value is then highlighted and displayed in the Logstream, where
                it is indexed for full text search.'
              example: Host connected to remote
              type: string
            service:
              description: 'The name of the application or service generating the
                log events.

                It is used to switch from Logs to APM, so make sure you define the
                same

                value when you use both products.'
              example: agent
              type: string
            tags:
              description: Array of tags associated with your log.
              example:
              - team:A
              format: array
              items:
                description: Tag associated with your log.
                format: string
            timestamp:
              description: Timestamp of your log.
              example: '2019-01-02T09:42:36.320Z'
              format: date-time
              type: string
          type: object
        id:
          description: Unique ID of the Log.
          example: AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA
          type: string
      type: object
    LogQueryDefinition:
      description: List of logs.
      properties:
        compute:
          $ref: '#/components/schemas/LogsQueryCompute'
        group_by:
          description: List of tag prefixes to group by in the case of a cluster check.
          items:
            description: Defined items in the group.
            properties:
              facet:
                description: Facet name.
                example: resource_name
                type: string
              limit:
                description: Maximum number of items in the group.
                example: 50
                format: int64
                type: integer
              sort:
                description: Define a sorting method.
                properties:
                  aggregation:
                    description: The aggregation method.
                    example: avg
                    type: string
                  facet:
                    description: Facet name.
                    example: '@string_query.interval'
                    type: string
                  order:
                    $ref: '#/components/schemas/WidgetSort'
                required:
                - aggregation
                - order
                type: object
            required:
            - facet
            type: object
          type: array
        index:
          description: A coma separated-list of index names. Use "*" query all indexes
            at once. [Multiple Indexes](https://docs.datadoghq.com/logs/indexes/#multiple-indexes)
          example: days-3,days-7
          type: string
        multi_compute:
          description: This field is mutually exclusive with `compute`.
          items:
            $ref: '#/components/schemas/LogsQueryCompute'
          type: array
        search:
          description: The query being made on the logs.
          properties:
            query:
              description: Search value to apply.
              type: string
          required:
          - query
          type: object
      type: object
    LogStreamWidgetDefinition:
      description: The Log Stream displays a log flow matching the defined query.
        Only available on FREE layout dashboards.
      properties:
        columns:
          description: Which columns to display on the widget.
          items:
            description: Column name.
            type: string
          type: array
        indexes:
          description: An array of index names to query in the stream. Use [] to query
            all indexes at once.
          example:
          - days-3
          - days-7
          items:
            description: One of the log indexes set up for your organization. [Multiple
              Indexes](https://docs.datadoghq.com/logs/indexes/#multiple-indexes)
            type: string
          type: array
        message_display:
          $ref: '#/components/schemas/WidgetMessageDisplay'
        query:
          description: Query to filter the log stream with.
          type: string
        show_date_column:
          description: Whether to show the date column or not
          type: boolean
        show_message_column:
          description: Whether to show the message column or not
          type: boolean
        sort:
          $ref: '#/components/schemas/WidgetFieldSort'
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: log_stream
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      type: object
    LogsAPIError:
      description: Error returned by the Logs API
      properties:
        code:
          description: Code identifying the error
          type: string
        details:
          description: Additional error details
          items:
            $ref: '#/components/schemas/LogsAPIError'
          type: array
        message:
          description: Error message
          type: string
      type: object
    LogsAPIErrorResponse:
      description: Response returned by the Logs API when errors occur.
      properties:
        error:
          $ref: '#/components/schemas/LogsAPIError'
      type: object
    LogsArithmeticProcessor:
      description: "Use the Arithmetic Processor to add a new attribute (without spaces\
        \ or special characters\nin the new attribute name) to a log with the result\
        \ of the provided formula.\nThis enables you to remap different time attributes\
        \ with different units into a single attribute,\nor to compute operations\
        \ on attributes within the same log.\n\nThe formula can use parentheses and\
        \ the basic arithmetic operators `-`, `+`, `*`, `/`.\n\nBy default, the calculation\
        \ is skipped if an attribute is missing.\nSelect \u201CReplace missing attribute\
        \ by 0\u201D to automatically populate\nmissing attribute values with 0 to\
        \ ensure that the calculation is done.\nAn attribute is missing if it is not\
        \ found in the log attributes,\nor if it cannot be converted to a number.\n\
        \n*Notes*:\n\n- The operator `-` needs to be space split in the formula as\
        \ it can also be contained in attribute names.\n- If the target attribute\
        \ already exists, it is overwritten by the result of the formula.\n- Results\
        \ are rounded up to the 9th decimal. For example, if the result of the formula\
        \ is `0.1234567891`,\n  the actual value stored for the attribute is `0.123456789`.\n\
        - If you need to scale a unit of measure,\n  see [Scale Filter](https://docs.datadoghq.com/logs/processing/parsing/?tab=filter#matcher-and-filter)."
      properties:
        expression:
          description: Arithmetic operation between one or more log attributes.
          type: string
        is_replace_missing:
          default: false
          description: 'If `true`, it replaces all missing attributes of expression
            by `0`, `false`

            skip the operation if an attribute is missing.'
          type: boolean
        target:
          description: Name of the attribute that contains the result of the arithmetic
            operation.
          type: string
        type:
          default: arithmetic-processor
          description: Type of processor
          readOnly: true
          type: string
      required:
      - target
      - expression
      type: object
    LogsAttributeRemapper:
      description: 'The remapper processor remaps any source attribute(s) or tag to
        another target attribute or tag.

        Constraints on the tag/attribute name are explained in the [Tag Best Practice
        documentation](https://docs.datadoghq.com/logs/guide/log-parsing-best-practice).

        Some additional constraints are applied as `:` or `,` are not allowed in the
        target tag/attribute name.'
      properties:
        override_on_conflict:
          default: false
          description: Override or not the target element if already set,
          type: boolean
        preserve_source:
          default: false
          description: Remove or preserve the remapped source element.
          type: boolean
        source_type:
          default: attribute
          description: Defines if the sources are from log `attribute` or `tag`.
          type: string
        sources:
          description: Array of source attributes.
          items:
            description: Attribute used as a source to remap its value to the target
              attribute.
            type: string
          type: array
        target:
          description: Final attribute or tag name to remap the sources to.
          type: string
        target_type:
          default: attribute
          description: Defines if the sources are from log `attribute` or `tag`.
          type: string
        type:
          default: attribute-remapper
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    LogsCategoryProcessor:
      description: "Use the Category Processor to add a new attribute (without spaces\
        \ or special characters in the new attribute name)\nto a log matching a provided\
        \ search query. Use categories to create groups for an analytical view.\n\
        For example, URL groups, machine groups, environments, and response time buckets.\n\
        \n**Notes**:\n\n- The syntax of the query is the one of Logs Explorer search\
        \ bar.\n  The query can be done on any log attribute or tag, whether it is\
        \ a facet or not.\n  Wildcards can also be used inside your query.\n- Once\
        \ the log has matched one of the Processor queries, it stops.\n  Make sure\
        \ they are properly ordered in case a log could match several queries.\n-\
        \ The names of the categories must be unique.\n- Once defined in the Category\
        \ Processor, you can map categories to log status using the Log Status Remapper."
      properties:
        categories:
          description: 'Array of filters to match or not a log and their

            corresponding `name`to assign a custom value to the log.'
          items:
            description: Object describing the logs filter.
            properties:
              filter:
                $ref: '#/components/schemas/LogsFilter'
              name:
                description: Value to assign to the target attribute.
                type: string
            type: object
          type: array
        target:
          description: Name of the target attribute which value is defined by the
            matching category.
          type: string
        type:
          default: category-processor
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - categories
      - target
      type: object
    LogsDateRemapper:
      description: "As Datadog receives logs, it timestamps them using the value(s)\
        \ from any of these default attributes.\n\n  - `timestamp`\n  - `date`\n \
        \ - `_timestamp`\n  - `Timestamp`\n  - `eventTime`\n  - `published_date`\n\
        \n  If your logs put their dates in an attribute not in this list,\n  use\
        \ the log date Remapper Processor to define their date attribute as the official\
        \ log timestamp.\n  The recognized date formats are ISO8601, UNIX (the milliseconds\
        \ EPOCH format), and RFC3164.\n\n  **Note:** If your logs don\u2019t contain\
        \ any of the default attributes\n  and you haven\u2019t defined your own date\
        \ attribute, Datadog timestamps\n  the logs with the date it received them.\n\
        \n  If multiple log date remapper processors can be applied to a given log,\n\
        \  only the first one (according to the pipelines order) is taken into account."
      properties:
        sources:
          description: Array of source attributes.
          items:
            description: Attribute used as a source to define the log associated date.
            type: string
          type: array
        type:
          default: date-remapper
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogsExclusion:
      description: Represents the index exclusion filter object from configuration
        API.
      properties:
        filter:
          $ref: '#/components/schemas/LogsExclusionFilter'
        is_enabled:
          description: Whether or not the exclusion filter is active.
          type: boolean
        name:
          description: Name of the index exclusion filter.
          type: string
      required:
      - name
      type: object
    LogsExclusionFilter:
      description: Exclusion filter is defined by a query, a sampling rule, and a
        active/inactive toggle.
      properties:
        query:
          description: 'Default query is `*`, meaning all logs flowing in the index
            would be excluded.

            Scope down exclusion filter to only a subset of logs with a log query.'
          example: '*'
          type: string
        sample_rate:
          description: 'Sample rate to apply to logs going through this exclusion
            filter,

            a value of 1 will exclude all logs matching the query.'
          example: 1
          format: double
          type: number
      required:
      - sample_rate
      type: object
    LogsFilter:
      description: Filter for logs.
      properties:
        query:
          description: The filter query.
          example: source:python
          type: string
      type: object
    LogsGeoIPParser:
      description: 'The GeoIP parser takes an IP address attribute and extracts if
        available

        the Continent, Country, Subdivision, and City information in the target attribute
        path.'
      properties:
        sources:
          default:
          - network.client.ip
          description: Array of source attributes.
          items:
            description: Attribute to geo-localize the IP from.
            type: string
          type: array
        target:
          default: network.client.geoip
          description: Name of the parent attribute that contains all the extracted
            details from the `sources`.
          type: string
        type:
          default: geo-ip-parser
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    LogsGrokParser:
      description: 'Create custom grok rules to parse the full message or [a specific
        attribute of your raw event](https://docs.datadoghq.com/logs/processing/parsing/#advanced-settings).

        For more information, see the [parsing section](https://docs.datadoghq.com/logs/processing/parsing).'
      properties:
        grok:
          $ref: '#/components/schemas/LogsGrokParserRules'
        samples:
          description: List of sample logs to test this grok parser.
          items:
            description: A log sample that is used to test the grok parser.
            maxLength: 5000
            type: string
          maxItems: 5
          type: array
        source:
          default: message
          description: Name of the log attribute to parse.
          type: string
        type:
          default: grok-parser
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - source
      - grok
      type: object
    LogsGrokParserRules:
      description: Set of rules for the grok parser.
      properties:
        match_rules:
          description: List of match rules for the grok parser, separated by a new
            line.
          example: 'rule_name_1 foo

            rule_name_2 bar

            '
          type: string
        support_rules:
          default: ''
          description: List of support rules for the grok parser, separated by a new
            line.
          example: 'rule_name_1 foo

            rule_name_2 bar

            '
          type: string
      required:
      - match_rules
      type: object
    LogsIndex:
      description: Object describing a Datadog Log index.
      properties:
        daily_limit:
          description: The number of log events you can send in this index per day
            before you are rate-limited.
          format: int64
          readOnly: true
          type: integer
        exclusion_filters:
          description: 'An array of exclusion objects. The logs are tested against
            the query of each filter,

            following the order of the array. Only the first matching active exclusion
            matters,

            others (if any) are ignored.'
          items:
            $ref: '#/components/schemas/LogsExclusion'
          type: array
        filter:
          $ref: '#/components/schemas/LogsFilter'
        is_rate_limited:
          description: 'A boolean stating if the index is rate limited, meaning more
            logs than the daily limit have been sent.

            Rate limit is reset every-day at 2pm UTC.'
          readOnly: true
          type: boolean
        name:
          description: The name of the index.
          readOnly: true
          type: string
        num_retention_days:
          description: The number of days before logs are deleted from this index.
          format: int64
          readOnly: true
          type: integer
      required:
      - filter
      type: object
    LogsIndexListResponse:
      description: Object with all Index configurations for a given organization.
      properties:
        indexes:
          description: Array of Log index configurations.
          items:
            $ref: '#/components/schemas/LogsIndex'
          type: array
      type: object
    LogsIndexesOrder:
      description: Object containing the ordered list of log index names.
      properties:
        index_names:
          description: 'Array of strings identifying by their name(s) the index(es)
            of your organization.

            Logs are tested against the query filter of each index one by one, following
            the order of the array.

            Logs are eventually stored in the first matching index.'
          items:
            description: An index name.
            type: string
          type: array
      required:
      - index_names
      type: object
    LogsListRequest:
      description: Object to send with the request to retrieve a list of logs from
        your Organization.
      properties:
        index:
          description: For multi-index organizations, the log index in which the request
            is performed.
          type: string
        limit:
          description: Number of logs return in the response.
          format: int32
          maximum: 1000
          type: integer
        query:
          description: The search query - following the log search syntax.
          type: string
        sort:
          $ref: '#/components/schemas/LogsSort'
        startAt:
          description: 'Hash identifier of the first log to return in the list, available
            in a log `id` attribute.

            This parameter is used for the pagination feature.


            **Note**: This parameter is ignored if the corresponding log

            is out of the scope of the specified time window.'
          type: string
        time:
          description: Timeframe to retrieve the log from.
          properties:
            from:
              description: Minimum timestamp for requested logs.
              format: date-time
              type: string
            timezone:
              description: 'Timezone can be specified both as an offset (e.g. "UTC+03:00")

                or a regional zone (e.g. "Europe/Paris").'
              type: string
            to:
              description: Maximum timestamp for requested logs.
              format: date-time
              type: string
          required:
          - from
          - to
          type: object
      required:
      - query
      - time
      type: object
    LogsListResponse:
      description: Response object with all logs matching the request and pagination
        information.
      properties:
        logs:
          description: Array of logs matching the request and the `nextLogId` if sent.
          items:
            $ref: '#/components/schemas/Log'
          type: array
        nextLogId:
          description: 'Hash identifier of the next log to return in the list.

            This parameter is used for the pagination feature.'
          type: string
        status:
          description: Status of the response.
          type: string
      type: object
    LogsLookupProcessor:
      description: 'Use the Lookup Processor to define a mapping between a log attribute

        and a human readable value saved in the processors mapping table.

        For example, you can use the Lookup Processor to map an internal service ID

        into a human readable service name. Alternatively, you could also use it to
        check

        if the MAC address that just attempted to connect to the production

        environment belongs to your list of stolen machines.'
      properties:
        default_lookup:
          description: Value to set the target attribute if the source value is not
            found in the list.
          type: string
        lookup_table:
          description: 'Mapping table of values for the source attribute and their
            associated target attribute values,

            formatted as `["source_key1,target_value1", "source_key2,target_value2"]`'
          items:
            description: Mapping between a source and a value, it should follow the
              format `"<SOURCE>,<VALUE>"`.
            type: string
          type: array
        source:
          description: Source attribute used to perform the lookup.
          type: string
        target:
          description: 'Name of the attribute that contains the corresponding value
            in the mapping list

            or the `default_lookup` if not found in the mapping list.'
          type: string
        type:
          default: lookup-processor
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - source
      - target
      - lookup_table
      type: object
    LogsMessageRemapper:
      description: 'The message is a key attribute in Datadog.

        It is displayed in the message column of the Log Explorer and you can do full
        string search on it.

        Use this Processor to define one or more attributes as the official log message.


        **Note:** If multiple log message remapper processors can be applied to a
        given log,

        only the first one (according to the pipeline order) is taken into account.'
      properties:
        sources:
          default:
          - msg
          description: Array of source attributes.
          items:
            description: Attribute used as a source to define the log associated message.
            type: string
          type: array
        type:
          default: message-remapper
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogsPipeline:
      description: 'Pipelines and processors operate on incoming logs,

        parsing and transforming them into structured attributes for easier querying.


        **Note**: These endpoints are only available for admin users.

        Make sure to use an application key created by an admin.'
      properties:
        filter:
          $ref: '#/components/schemas/LogsFilter'
        id:
          description: ID of the pipeline.
          readOnly: true
          type: string
        is_enabled:
          description: Whether or not the pipeline is enabled.
          type: boolean
        is_read_only:
          description: Whether or not the pipeline can be edited.
          readOnly: true
          type: boolean
        name:
          description: Name of the pipeline.
          type: string
        processors:
          description: Ordered list of processors in this pipeline.
          items:
            $ref: '#/components/schemas/LogsProcessor'
          type: array
        type:
          description: Type of pipeline.
          example: pipeline
          readOnly: true
          type: string
      required:
      - name
      type: object
    LogsPipelineList:
      description: Array of pipeline ID strings.
      items:
        $ref: '#/components/schemas/LogsPipeline'
      type: array
    LogsPipelineProcessor:
      description: 'Nested Pipelines are pipelines within a pipeline. Use Nested Pipelines
        to split the processing into two steps.

        For example, first use a high-level filtering such as team and then a second
        level of filtering based on the

        integration, service, or any other tag or attribute.


        A pipeline can contain Nested Pipelines and Processors whereas a Nested Pipeline
        can only contain Processors.'
      properties:
        filter:
          $ref: '#/components/schemas/LogsFilter'
        processors:
          description: Ordered list of processors in this pipeline.
          items:
            $ref: '#/components/schemas/LogsProcessor'
          type: array
        type:
          default: pipeline
          description: Type of processor.
          readOnly: true
          type: string
      type: object
    LogsPipelinesOrder:
      description: Object containing the ordered list of pipeline IDs.
      properties:
        pipeline_ids:
          description: 'Ordered Array of `<PIPELINE_ID>` strings, the order of pipeline
            IDs in the array

            define the overall Pipelines order for Datadog.'
          items:
            description: A given pipeline ID.
            type: string
          type: array
      required:
      - pipeline_ids
      type: object
    LogsProcessor:
      description: Definition of a logs processor.
      discriminator:
        mapping:
          arithmetic-processor: '#/components/schemas/LogsArithmeticProcessor'
          attribute-remapper: '#/components/schemas/LogsAttributeRemapper'
          category-processor: '#/components/schemas/LogsCategoryProcessor'
          date-remapper: '#/components/schemas/LogsDateRemapper'
          geo-ip-parser: '#/components/schemas/LogsGeoIPParser'
          grok-parser: '#/components/schemas/LogsGrokParser'
          lookup-processor: '#/components/schemas/LogsLookupProcessor'
          message-remapper: '#/components/schemas/LogsMessageRemapper'
          pipeline: '#/components/schemas/LogsPipelineProcessor'
          service-remapper: '#/components/schemas/LogsServiceRemapper'
          status-remapper: '#/components/schemas/LogsStatusRemapper'
          string-builder-processor: '#/components/schemas/LogsStringBuilderProcessor'
          trace-id-remapper: '#/components/schemas/LogsTraceRemapper'
          url-parser: '#/components/schemas/LogsURLParser'
          user-agent-parser: '#/components/schemas/LogsUserAgentParser'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/LogsGrokParser'
      - $ref: '#/components/schemas/LogsDateRemapper'
      - $ref: '#/components/schemas/LogsStatusRemapper'
      - $ref: '#/components/schemas/LogsServiceRemapper'
      - $ref: '#/components/schemas/LogsMessageRemapper'
      - $ref: '#/components/schemas/LogsAttributeRemapper'
      - $ref: '#/components/schemas/LogsURLParser'
      - $ref: '#/components/schemas/LogsUserAgentParser'
      - $ref: '#/components/schemas/LogsCategoryProcessor'
      - $ref: '#/components/schemas/LogsArithmeticProcessor'
      - $ref: '#/components/schemas/LogsStringBuilderProcessor'
      - $ref: '#/components/schemas/LogsPipelineProcessor'
      - $ref: '#/components/schemas/LogsGeoIPParser'
      - $ref: '#/components/schemas/LogsLookupProcessor'
      - $ref: '#/components/schemas/LogsTraceRemapper'
      properties:
        is_enabled:
          default: false
          description: Whether or not the processor is enabled.
          type: boolean
        name:
          description: Name of the processor.
          type: string
      type: object
    LogsQueryCompute:
      description: Define computation for a log query.
      properties:
        aggregation:
          description: The aggregation method.
          example: avg
          type: string
        facet:
          description: Facet name.
          example: '@duration'
          type: string
        interval:
          description: Define a time interval in seconds.
          example: 5000
          format: int64
          type: integer
      required:
      - aggregation
      type: object
    LogsServiceRemapper:
      description: 'Use this processor if you want to assign one or more attributes
        as the official service.


        **Note:** If multiple service remapper processors can be applied to a given
        log,

        only the first one (according to the pipeline order) is taken into account.'
      properties:
        sources:
          description: Array of source attributes.
          items:
            description: Attribute used as a source to define the log associated service.
            type: string
          type: array
        type:
          default: service-remapper
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogsSort:
      description: Time-ascending `asc` or time-descending `desc`results.
      enum:
      - asc
      - desc
      type: string
      x-enum-varnames:
      - TIME_ASCENDING
      - TIME_DESCENDING
    LogsStatusRemapper:
      description: "Use this Processor if you want to assign some attributes as the\
        \ official status.\n\nEach incoming status value is mapped as follows.\n\n\
        \  - Integers from 0 to 7 map to the Syslog severity standards\n  - Strings\
        \ beginning with `emerg` or f (case-insensitive) map to `emerg` (0)\n  - Strings\
        \ beginning with `a` (case-insensitive) map to `alert` (1)\n  - Strings beginning\
        \ with `c` (case-insensitive) map to `critical` (2)\n  - Strings beginning\
        \ with `err` (case-insensitive) map to `error` (3)\n  - Strings beginning\
        \ with `w` (case-insensitive) map to `warning` (4)\n  - Strings beginning\
        \ with `n` (case-insensitive) map to `notice` (5)\n  - Strings beginning with\
        \ `i` (case-insensitive) map to `info` (6)\n  - Strings beginning with `d`,\
        \ `trace` or `verbose` (case-insensitive) map to `debug` (7)\n  - Strings\
        \ beginning with `o` or matching `OK` or `Success` (case-insensitive) map\
        \ to OK\n  - All others map to `info` (6)\n\n  **Note:** If multiple log status\
        \ remapper processors can be applied to a given log,\n  only the first one\
        \ (according to the pipelines order) is taken into account."
      properties:
        sources:
          description: Array of source attributes.
          items:
            description: Attribute used as a source to define the log associated status.
            type: string
          type: array
        type:
          default: status-remapper
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      type: object
    LogsStringBuilderProcessor:
      description: "Use the string builder processor to add a new attribute (without\
        \ spaces or special characters)\nto a log with the result of the provided\
        \ template.\nThis enables aggregation of different attributes or raw strings\
        \ into a single attribute.\n\nThe template is defined by both raw text and\
        \ blocks with the syntax `%{attribute_path}`.\n\n**Notes**:\n\n- The processor\
        \ only accepts attributes with values or an array of values in the blocks.\n\
        - If an attribute cannot be used (object or array of object),\n  it is replaced\
        \ by an empty string or the entire operation is skipped depending on your\
        \ selection.\n- If the target attribute already exists, it is overwritten\
        \ by the result of the template.\n- Results of the template cannot exceed\
        \ 256 characters."
      properties:
        is_replace_missing:
          default: false
          description: 'If true, it replaces all missing attributes of `template`
            by an empty string.

            If `false` (default), skips the operation for missing attributes.'
          type: boolean
        target:
          description: The name of the attribute that contains the result of the template.
          type: string
        template:
          description: A formula with one or more attributes and raw text.
          type: string
        type:
          default: string-builder-processor
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - target
      - template
      type: object
    LogsTraceRemapper:
      description: "There are two ways to improve correlation between application\
        \ traces and logs.\n\n  1. Follow the documentation on [how to inject a trace\
        \ ID in the application logs](https://docs.datadoghq.com/tracing/connect_logs_and_traces)\n\
        \  and by default log integrations take care of all the rest of the setup.\n\
        \n  2. Use the Trace remapper processor to define a log attribute as its associated\
        \ trace ID."
      properties:
        sources:
          default:
          - dd.trace_id
          description: Array of source attributes.
          items:
            description: Attribute to extract the Trace ID from.
            type: string
          type: array
        type:
          default: trace-id-remapper
          description: Type of processor.
          readOnly: true
          type: string
      type: object
    LogsURLParser:
      description: This processor extracts query parameters and other important parameters
        from a URL.
      properties:
        normalize_ending_slashes:
          default: false
          description: Normalize the ending slashes or not.
          nullable: true
          type: boolean
        sources:
          default:
          - http.url
          description: Array of source attributes.
          items:
            description: Attribute to extract the URL from.
            type: string
          type: array
        target:
          default: http.url_details
          description: Name of the parent attribute that contains all the extracted
            details from the `sources`.
          type: string
        type:
          default: url-parser
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    LogsUserAgentParser:
      description: 'The User-Agent parser takes a User-Agent attribute and extracts
        the OS, browser, device, and other user data.

        It recognizes major bots like the Google Bot, Yahoo Slurp, and Bing.'
      properties:
        is_encoded:
          default: false
          description: Define if the source attribute is URL encoded or not.
          type: boolean
        sources:
          default:
          - http.useragent
          description: Array of source attributes.
          items:
            description: Attribute to extract the User-Agent from.
            type: string
          type: array
        target:
          default: http.useragent_details
          description: Name of the parent attribute that contains all the extracted
            details from the `sources`.
          type: string
        type:
          default: user-agent-parser
          description: Type of processor.
          readOnly: true
          type: string
      required:
      - sources
      - target
      type: object
    MetricMetadata:
      description: Object with all metric related metadata.
      properties:
        description:
          description: Metric description.
          type: string
        integration:
          description: Name of the integration that sent the metric if applicable.
          readOnly: true
          type: string
        per_unit:
          description: Per unit of the metric such as `second` in `bytes per second`.
          example: second
          type: string
        short_name:
          description: A more human-readable and abbreviated version of the metric
            name.
          type: string
        statsd_interval:
          description: StatsD flush interval of the metric in seconds if applicable.
          format: int64
          type: integer
        type:
          description: Metric type such as `gauge` or `rate`.
          example: count
          type: string
        unit:
          description: Primary unit of the metric such as `byte` or `operation`.
          example: byte
          type: string
      type: object
    MetricSearchResponse:
      description: Object containing the list of metrics matching the search query.
      properties:
        results:
          description: Search result.
          properties:
            metrics:
              description: List of metrics that match the search query.
              items:
                description: Metric name.
                type: string
              type: array
          type: object
      type: object
    MetricsListResponse:
      description: Object listing all metric names stored by Datadog since a given
        time.
      properties:
        from:
          description: Time when the metrics were active, seconds since the Unix epoch.
          type: string
        metrics:
          description: List of metric names.
          items:
            description: A metric name.
            type: string
          type: array
      type: object
    MetricsPayload:
      description: The metrics' payload.
      properties:
        series:
          description: A list of time series to submit to Datadog.
          items:
            $ref: '#/components/schemas/Series'
          type: array
      type: object
    MetricsQueryResponse:
      description: Response Object that includes your query and the list of metrics
        retrieved.
      properties:
        error:
          description: Message indicating the errors if status is not `ok`.
          readOnly: true
          type: string
        from_date:
          description: Start of requested time window, milliseconds since Unix epoch.
          format: int64
          readOnly: true
          type: integer
        group_by:
          description: List of tag keys on which to group.
          items:
            description: Tag key to group by your metric.
            type: string
          readOnly: true
          type: array
        message:
          description: Message indicating `success` if status is `ok`.
          readOnly: true
          type: string
        query:
          description: Query string
          readOnly: true
          type: string
        res_type:
          description: Type of response.
          example: time_series
          readOnly: true
          type: string
        series:
          description: List of timeseries queried.
          items:
            description: Object containing all metric names returned and their associated
              metadata.
            properties:
              aggr:
                description: Aggregation type.
                example: avg
                readOnly: true
                type: string
              display_name:
                description: Display name of the metric.
                example: system.cpu.idle
                readOnly: true
                type: string
              end:
                description: End of the time window, milliseconds since Unix epoch.
                format: int64
                readOnly: true
                type: integer
              expression:
                description: Metric expression.
                example: system.cpu.idle{host:foo,env:test}
                readOnly: true
                type: string
              interval:
                description: Number of seconds between data samples.
                format: int64
                readOnly: true
                type: integer
              length:
                description: Number of data samples.
                format: int64
                readOnly: true
                type: integer
              metric:
                description: Metric name.
                example: system.cpu.idle
                readOnly: true
                type: string
              pointlist:
                description: List of points of the time series.
                items:
                  $ref: '#/components/schemas/Point'
                readOnly: true
                type: array
              scope:
                description: Metric scope, comma separated list of tags.
                example: host:foo,env:test
                readOnly: true
                type: string
              start:
                description: Start of the time window, milliseconds since Unix epoch.
                format: int64
                readOnly: true
                type: integer
              unit:
                description: 'Detailed information about the metric unit.

                  First element describes the "primary unit" (for example, `bytes`
                  in `bytes per second`),

                  second describes the "per unit" (for example, `second` in `bytes
                  per second`).'
                items:
                  description: Object containing the metric unit family, scale factor,
                    name, and short name.
                  properties:
                    family:
                      description: Unit family, allows for conversion between units
                        of the same family, for scaling.
                      example: time
                      readOnly: true
                      type: string
                    name:
                      description: Unit name
                      example: minute
                      readOnly: true
                      type: string
                    plural:
                      description: Plural form of the unit name.
                      example: minutes
                      readOnly: true
                      type: string
                    scale_factor:
                      description: Factor for scaling between units of the same family.
                      example: 60.0
                      format: double
                      readOnly: true
                      type: number
                    short_name:
                      description: Abbreviation of the unit.
                      example: min
                      readOnly: true
                      type: string
                  type: object
                maxItems: 2
                minItems: 2
                readOnly: true
                type: array
            type: object
          readOnly: true
          type: array
        status:
          description: Status of the query.
          example: ok
          readOnly: true
          type: string
        to_date:
          description: End of requested time window, milliseconds since Unix epoch.
          format: int64
          readOnly: true
          type: integer
      type: object
    Monitor:
      description: Object describing a monitor.
      properties:
        created:
          description: Timestamp of the monitor creation.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/Creator'
        deleted:
          description: Whether or not the monitor is deleted. (Always `null`)
          format: date-time
          nullable: true
          readOnly: true
          type: string
        id:
          description: ID of this monitor.
          format: int64
          readOnly: true
          type: integer
        message:
          description: A message to include with notifications for this monitor.
          type: string
        modified:
          description: Last timestamp when the monitor was edited.
          format: date-time
          readOnly: true
          type: string
        multi:
          description: Whether or not the monitor is broken down on different groups.
          readOnly: true
          type: boolean
        name:
          description: The monitor name.
          type: string
        options:
          $ref: '#/components/schemas/MonitorOptions'
        overall_state:
          $ref: '#/components/schemas/MonitorOverallStates'
        query:
          description: The monitor query.
          type: string
        state:
          $ref: '#/components/schemas/MonitorState'
        tags:
          description: Tags associated to your monitor.
          items:
            description: A Datadog tag.
            type: string
          type: array
        type:
          $ref: '#/components/schemas/MonitorType'
      type: object
    MonitorDeviceID:
      description: ID of the device the Synthetics monitor is running on. Same as
        `SyntheticsDeviceID`.
      enum:
      - laptop_large
      - tablet
      - mobile_small
      type: string
      x-enum-varnames:
      - LAPTOP_LARGE
      - TABLET
      - MOBILE_SMALL
    MonitorOptions:
      description: List of options associated with your monitor.
      properties:
        aggregation:
          description: Type of aggregation performed in the monitor query.
          properties:
            group_by:
              description: Group to break down the monitor on.
              example: host
              type: string
            metric:
              description: Metric name used in the monitor.
              example: metrics.name
              type: string
            type:
              description: Metric type used in the monitor.
              example: count
              type: string
          readOnly: true
          type: object
        device_ids:
          deprecated: true
          description: IDs of the device the Synthetics monitor is running on.
          items:
            $ref: '#/components/schemas/MonitorDeviceID'
          readOnly: true
          type: array
        enable_logs_sample:
          description: Whether or not to send a log sample when the log monitor triggers.
          type: boolean
        escalation_message:
          default: none
          description: 'A message to include with a re-notification. Supports the
            `@username` notification we allow elsewhere.

            Not applicable if `renotify_interval` is `None`.'
          type: string
        evaluation_delay:
          description: 'Time (in seconds) to delay evaluation, as a non-negative integer.
            For example, if the value is set to `300` (5min),

            the timeframe is set to `last_5m` and the time is 7:00, the monitor evaluates
            data from 6:50 to 6:55.

            This is useful for AWS CloudWatch and other backfilled metrics to ensure
            the monitor always has data during evaluation.'
          format: int64
          nullable: true
          type: integer
        include_tags:
          default: true
          description: 'A Boolean indicating whether notifications from this monitor
            automatically inserts its triggering tags into the title.


            **Examples**

            - If `True`, `[Triggered on {host:h1}] Monitor Title`

            - If `False`, `[Triggered] Monitor Title`'
          type: boolean
        locked:
          description: Whether or not the monitor is locked (only editable by creator
            and admins).
          type: boolean
        min_failure_duration:
          default: 0
          description: How long the test should be in failure before alerting (integer,
            number of seconds, max 7200).
          format: int64
          maximum: 7200
          minimum: 0
          nullable: true
          type: integer
        min_location_failed:
          default: 1
          description: 'The minimum number of locations in failure at the same time
            during

            at least one moment in the `min_failure_duration` period (`min_location_failed`
            and `min_failure_duration`

            are part of the advanced alerting rules - integer, >= 1).'
          format: int64
          nullable: true
          type: integer
        new_host_delay:
          default: 300
          description: 'Time (in seconds) to allow a host to boot and applications

            to fully start before starting the evaluation of monitor results.

            Should be a non negative integer.'
          format: int64
          nullable: true
          type: integer
        no_data_timeframe:
          description: 'The number of minutes before a monitor notifies after data
            stops reporting.

            Datadog recommends at least 2x the monitor timeframe for metric alerts
            or 2 minutes for service checks.

            If omitted, 2x the evaluation timeframe is used for metric alerts, and
            24 hours is used for service checks.'
          format: int64
          nullable: true
          type: integer
        notify_audit:
          default: false
          description: A Boolean indicating whether tagged users is notified on changes
            to this monitor.
          type: boolean
        notify_no_data:
          default: false
          description: A Boolean indicating whether this monitor notifies when data
            stops reporting.
          type: boolean
        renotify_interval:
          default: none
          description: "The number of minutes after the last notification before a\
            \ monitor re-notifies on the current status.\nIt only re-notifies if it\u2019\
            s not resolved."
          format: int64
          nullable: true
          type: integer
        require_full_window:
          default: true
          description: "A Boolean indicating whether this monitor needs a full window\
            \ of data before it\u2019s evaluated.\nWe highly recommend you set this\
            \ to `false` for sparse metrics,\notherwise some evaluations are skipped.\
            \ For \u201Con average\u201D\n\u201Cat all times\u201D and \u201Cin total\u201D\
            \ aggregation, default is true. `False` otherwise."
          type: boolean
        silenced:
          additionalProperties:
            description: ID of the downtime applied to the monitor.
            format: int64
            nullable: true
            type: integer
          deprecated: true
          description: Information about the downtime applied to the monitor.
          type: object
        synthetics_check_id:
          deprecated: true
          description: ID of the corresponding Synthetic check.
          format: int64
          nullable: true
          type: integer
        threshold_windows:
          $ref: '#/components/schemas/MonitorThresholdWindowOptions'
        thresholds:
          $ref: '#/components/schemas/MonitorThresholds'
        timeout_h:
          default: none
          description: The number of hours of the monitor not reporting data before
            it automatically resolves from a triggered state.
          format: int64
          nullable: true
          type: integer
      type: object
    MonitorOverallStates:
      description: The different states your monitor can be in.
      enum:
      - Alert
      - Ignored
      - No Data
      - OK
      - Skipped
      - Unknown
      - Warn
      readOnly: true
      type: string
      x-enum-varnames:
      - ALERT
      - IGNORED
      - NO_DATA
      - OK
      - SKIPPED
      - UNKNOWN
      - WARN
    MonitorState:
      description: Wrapper object with the different monitor states.
      properties:
        groups:
          additionalProperties:
            $ref: '#/components/schemas/MonitorStateGroup'
          description: 'Dictionary where the keys are groups (comma separated lists
            of tags) and the values are

            the list of groups your monitor is broken down on.'
          type: object
      readOnly: true
      type: object
    MonitorStateGroup:
      description: Monitor state for a single group.
      properties:
        last_nodata_ts:
          description: Latest timestamp the monitor was in NO_DATA state.
          format: int64
          type: integer
        last_notified_ts:
          description: Latest timestamp of the notification sent for this monitor
            group.
          format: int64
          type: integer
        last_resolved_ts:
          description: Latest timestamp the monitor group was resolved.
          format: int64
          type: integer
        last_triggered_ts:
          description: Latest timestamp the monitor group triggered.
          format: int64
          type: integer
        name:
          description: The name of the monitor.
          type: string
        status:
          $ref: '#/components/schemas/MonitorOverallStates'
      type: object
    MonitorSummaryWidgetDefinition:
      description: The monitor summary widget displays a summary view of all your
        Datadog monitors, or a subset based on a query. Only available on FREE layout
        dashboards.
      properties:
        color_preference:
          $ref: '#/components/schemas/WidgetColorPreference'
        display_format:
          $ref: '#/components/schemas/WidgetMonitorSummaryDisplayFormat'
        hide_zero_counts:
          description: Whether to show counts of 0 or not.
          type: boolean
        query:
          description: Query to filter the monitors with.
          type: string
        show_last_triggered:
          description: Whether to show the time that has elapsed since the monitor/group
            triggered.
          type: boolean
        sort:
          $ref: '#/components/schemas/WidgetSort'
        summary_type:
          $ref: '#/components/schemas/WidgetSummaryType'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: manage_status
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - query
      type: object
    MonitorThresholdWindowOptions:
      description: Alerting time window options.
      properties:
        recovery_window:
          description: Describes how long an anomalous metric must be normal before
            the alert recovers.
          nullable: true
          type: string
        trigger_window:
          description: Describes how long a metric must be anomalous before an alert
            triggers.
          nullable: true
          type: string
      type: object
    MonitorThresholds:
      description: List of the different monitor threshold available.
      properties:
        critical:
          description: The monitor `CRITICAL` threshold.
          format: double
          type: number
        critical_recovery:
          description: The monitor `CRITICAL` recovery threshold.
          format: double
          nullable: true
          type: number
        ok:
          description: The monitor `OK` threshold.
          format: double
          nullable: true
          type: number
        unknown:
          description: The monitor UNKNOWN threshold.
          format: double
          nullable: true
          type: number
        warning:
          description: The monitor `WARNING` threshold.
          format: double
          nullable: true
          type: number
        warning_recovery:
          description: The monitor `WARNING` recovery threshold.
          format: double
          nullable: true
          type: number
      type: object
    MonitorType:
      description: The type of the monitor. For more information about `type`, see
        the [monitor options](https://docs.datadoghq.com/monitors/guide/monitor_api_options/)
        docs.
      enum:
      - composite
      - event alert
      - log alert
      - metric alert
      - process alert
      - query alert
      - rum alert
      - service check
      - synthetics alert
      - trace-analytics alert
      type: string
      x-enum-varnames:
      - COMPOSITE
      - EVENT_ALERT
      - LOG_ALERT
      - METRIC_ALERT
      - PROCESS_ALERT
      - QUERY_ALERT
      - RUM_ALERT
      - SERVICE_CHECK
      - SYNTHETICS_ALERT
      - TRACE_ANALYTICS_ALERT
    MonitorUpdateRequest:
      description: Object describing a monitor.
      properties:
        created:
          description: Timestamp of the monitor creation.
          format: date-time
          readOnly: true
          type: string
        creator:
          $ref: '#/components/schemas/Creator'
        deleted:
          description: Whether or not the monitor is deleted. (Always `null`)
          format: date-time
          nullable: true
          readOnly: true
          type: string
        id:
          description: ID of this monitor.
          format: int64
          readOnly: true
          type: integer
        message:
          description: A message to include with notifications for this monitor.
          type: string
        modified:
          description: Last timestamp when the monitor was edited.
          format: date-time
          readOnly: true
          type: string
        multi:
          description: Whether or not the monitor is broken down on different groups.
          readOnly: true
          type: boolean
        name:
          description: The monitor name.
          type: string
        options:
          $ref: '#/components/schemas/MonitorOptions'
        overall_state:
          $ref: '#/components/schemas/MonitorOverallStates'
        query:
          description: The monitor query.
          type: string
        state:
          $ref: '#/components/schemas/MonitorState'
        tags:
          description: Tags associated to your monitor.
          items:
            description: A Datadog tag.
            type: string
          type: array
        type:
          $ref: '#/components/schemas/MonitorType'
      type: object
    NoteWidgetDefinition:
      description: The notes and links widget is similar to free text widget, but
        allows for more formatting options.
      properties:
        background_color:
          description: Background color of the note.
          type: string
        content:
          description: Content of the note.
          type: string
        font_size:
          description: Size of the text.
          type: string
        show_tick:
          description: Whether to show a tick or not.
          type: boolean
        text_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        tick_edge:
          $ref: '#/components/schemas/WidgetTickEdge'
        tick_pos:
          description: Where to position the tick on an edge.
          type: string
        type:
          default: note
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - content
      type: object
    Organization:
      description: Create, edit, and manage organizations.
      properties:
        billing:
          description: A JSON array of billing type.
          example:
            type: parent_billing
          properties:
            type:
              description: The type of billing. Only `parent_billing` is supported.
              type: string
          type: object
        created:
          description: Date of the organization creation.
          example: '2019-09-26 17:28:28'
          readOnly: true
          type: string
        description:
          description: Description of the organization.
          example: some description
          type: string
        name:
          description: The name of the new child-organization, limited to 32 characters.
          example: New child org
          maximum: 32
          type: string
        public_id:
          description: The `public_id` of the organization you are operating within.
          example: abcdef12345
          type: string
        settings:
          description: A JSON array of settings.
          properties:
            private_widget_share:
              description: Whether or not the organization users can share widgets
                outside of Datadog.
              example: false
              type: boolean
            saml:
              description: 'Set the boolean property enabled to enable or disable
                single sign on with SAML.

                See the SAML documentation for more information about all SAML settings.'
              properties:
                enabled:
                  description: Whether or not SAML is enabled for this organization.
                  example: false
                  type: boolean
              type: object
            saml_autocreate_access_role:
              $ref: '#/components/schemas/AccessRole'
            saml_autocreate_users_domains:
              description: Has two properties, `enabled` (boolean) and `domains`,
                which is a list of domains without the @ symbol.
              properties:
                domains:
                  description: List of domains where the SAML automated user creation
                    is enabled.
                  items:
                    description: Domain to automate user creation from.
                    example: example.com
                    type: string
                  type: array
                enabled:
                  description: Whether or not the automated user creation based on
                    SAML domain is enabled.
                  example: false
                  type: boolean
              type: object
            saml_can_be_enabled:
              description: Whether or not SAML can be enabled for this organization.
              example: false
              type: boolean
            saml_idp_endpoint:
              description: Identity provider endpoint for SAML authentication.
              example: https://my.saml.endpoint
              type: string
            saml_idp_initiated_login:
              description: Has one property enabled (boolean).
              properties:
                enabled:
                  description: 'Whether SAML IdP initiated login is enabled, learn
                    more

                    in the [SAML documentation](https://docs.datadoghq.com/account_management/saml/#idp-initiated-login).'
                  example: false
                  type: boolean
              type: object
            saml_idp_metadata_uploaded:
              description: Whether or not a SAML identity provider metadata file was
                provided to the Datadog organization.
              example: false
              type: boolean
            saml_login_url:
              description: URL for SAML logging.
              example: https://my.saml.login.url
              type: string
            saml_strict_mode:
              description: Has one property enabled (boolean).
              properties:
                enabled:
                  description: 'Whether or not the SAML strict mode is enabled. If
                    true, all users must log in with SAML.

                    Learn more on the [SAML Strict documentation](https://docs.datadoghq.com/account_management/saml/#saml-strict).'
                  example: false
                  type: boolean
              type: object
          type: object
        subscription:
          description: A JSON array of subscription type.
          example:
            type: pro
          properties:
            type:
              description: The subscription type. Types available are `trial`, `free`,
                and `pro`.
              type: string
          type: object
      type: object
    OrganizationCreateBody:
      description: Object describing an organization to create.
      properties:
        billing:
          description: A JSON array of billing type.
          example:
            type: parent_billing
          properties:
            type:
              description: The type of billing. Only `parent_billing` is supported.
              type: string
          type: object
        name:
          description: The name of the new child-organization, limited to 32 characters.
          example: New child org
          maximum: 32
          type: string
        subscription:
          description: A JSON array of subscription type.
          example:
            type: pro
          properties:
            type:
              description: The subscription type. Types available are `trial`, `free`,
                and `pro`.
              type: string
          type: object
      required:
      - name
      - subscription
      - billing
      type: object
    OrganizationCreateResponse:
      description: Response object for an organization creation.
      properties:
        api_key:
          $ref: '#/components/schemas/ApiKey'
        application_key:
          $ref: '#/components/schemas/ApplicationKey'
        org:
          $ref: '#/components/schemas/Organization'
        user:
          $ref: '#/components/schemas/User'
      type: object
    OrganizationListResponse:
      description: Response with the list of organizations.
      properties:
        orgs:
          description: Array of organization objects.
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
    OrganizationResponse:
      description: Response with an organization.
      properties:
        org:
          $ref: '#/components/schemas/Organization'
      type: object
    PagerDutyService:
      description: The PagerDuty service that is available for integration with Datadog.
      properties:
        service_key:
          description: Your service key in PagerDuty.
          type: string
        service_name:
          description: Your service name associated with a service key in PagerDuty.
          type: string
      required:
      - service_name
      - service_key
      type: object
    PagerDutyServiceKey:
      description: PagerDuty service object key.
      properties:
        service_key:
          description: Your service key in PagerDuty.
          type: string
      required:
      - service_key
      type: object
    PagerDutyServiceName:
      description: PagerDuty service object name.
      properties:
        service_name:
          description: Your service name associated service key in PagerDuty.
          type: string
      required:
      - service_name
      type: object
    Point:
      description: Array of timeseries points.
      example:
      - 1575317847
      - 0.5
      items:
        description: 'Each point is of the form `[POSIX_timestamp, numeric_value]`.

          The timestamp should be in seconds and current.

          The numeric value format should be a 32bit float gauge-type value.

          Current is defined as not more than 10 minutes in the future or more than
          1 hour in the past.'
        format: double
        type: number
      maxItems: 2
      minItems: 2
      type: array
    ProcessQueryDefinition:
      description: The process query to use in the widget.
      properties:
        filter_by:
          description: List of processes.
          items:
            description: Process name.
            type: string
          type: array
        limit:
          description: Max number of items in the filter list.
          format: int64
          minimum: 0
          type: integer
        metric:
          description: Your chosen metric.
          type: string
        search_by:
          description: Your chosen search term.
          type: string
      required:
      - metric
      type: object
    QueryValueWidgetDefinition:
      description: Query values display the current value of a given metric, APM,
        or log query.
      properties:
        autoscale:
          description: Whether to use auto-scaling or not.
          type: boolean
        custom_unit:
          description: Display a unit of your choice on the widget.
          type: string
        precision:
          description: Number of decimals to show. If not defined, the widget uses
            the raw value.
          format: int64
          type: integer
        requests:
          description: Widget definition.
          example:
          - q/apm_query/log_query: <METRIC_1>{<SCOPE_1>}
          items:
            $ref: '#/components/schemas/QueryValueWidgetRequest'
          maxItems: 1
          minItems: 1
          type: array
        text_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: query_value
          description: Type of widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    QueryValueWidgetRequest:
      description: Updated query value widget.
      properties:
        aggregator:
          $ref: '#/components/schemas/WidgetAggregator'
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        conditional_formats:
          description: List of conditional formats.
          items:
            $ref: '#/components/schemas/WidgetConditionalFormat'
          type: array
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: TODO.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
      type: object
    SLOBulkDelete:
      additionalProperties:
        description: An array of all SLO timeframes.
        items:
          $ref: '#/components/schemas/SLOTimeframe'
        type: array
      description: 'A map of service level objective object IDs to arrays of timeframes,

        which indicate the thresholds to delete for each ID.'
      example:
        id1:
        - 7d
        - 30d
        id2:
        - 7d
        - 30d
      type: object
    SLOBulkDeleteResponse:
      description: 'The bulk partial delete service level objective object endpoint

        response.


        This endpoint operates on multiple service level objective objects, so

        it may be partially successful. In such cases, the "data" and "error"

        fields in this response indicate which deletions succeeded and failed.'
      properties:
        data:
          description: An array of service level objective objects.
          properties:
            deleted:
              description: 'An array of service level objective object IDs that indicates

                which objects that were completely deleted.'
              items:
                description: A deleted SLO ID.
                type: string
              type: array
            updated:
              description: 'An array of service level objective object IDs that indicates

                which objects that were modified (objects for which at least one

                threshold was deleted, but that were not completely deleted).'
              items:
                description: An updated SLO ID.
                type: string
              type: array
          type: object
        errors:
          description: Array of errors object returned.
          items:
            description: Object describing the error.
            properties:
              id:
                description: 'The ID of the service level objective object associated
                  with

                  this error.'
                type: string
              message:
                description: The error message.
                type: string
              timeframe:
                $ref: '#/components/schemas/SLOErrorTimeframe'
            required:
            - id
            - timeframe
            - message
            type: object
          type: array
      type: object
    SLODeleteResponse:
      description: A response list of all service level objective deleted.
      properties:
        data:
          description: An array containing the ID of the deleted service level objective
            object.
          items:
            description: ID of a deleted SLO.
            type: string
          type: array
        errors:
          additionalProperties:
            description: Error preventing the SLO deletion.
            type: string
          description: An dictionary containing the ID of the SLO as key and a deletion
            error as value.
          type: object
      type: object
    SLOErrorTimeframe:
      description: 'The timeframe of the threshold associated with this error

        or "all" if all thresholds are affected.'
      enum:
      - 7d
      - 30d
      - 90d
      - all
      type: string
      x-enum-varnames:
      - SEVEN_DAYS
      - THIRTY_DAYS
      - NINETY_DAYS
      - ALL
    SLOHistoryMetrics:
      description: A `metric` based SLO history response.
      properties:
        denominator:
          $ref: '#/components/schemas/SLOHistoryMetricsSeries'
        interval:
          description: The aggregated query interval for the series data. It's implicit
            based on the query time window.
          format: int64
          type: integer
        message:
          description: Optional message if there are specific query issues/warnings.
          type: string
        numerator:
          $ref: '#/components/schemas/SLOHistoryMetricsSeries'
        query:
          description: The combined numerator and denominator query CSV.
          type: string
        res_type:
          description: The series result type. This mimics `batch_query` response
            type.
          type: string
        resp_version:
          description: The series response version type. This mimics `batch_query`
            response type.
          format: int64
          type: integer
        times:
          description: An array of query timestamps in EPOCH milliseconds
          items:
            description: A timestamp in EPOCH milliseconds.
            format: double
            type: number
          type: array
      required:
      - res_type
      - interval
      - resp_version
      - query
      - times
      - numerator
      - denominator
      type: object
    SLOHistoryMetricsSeries:
      description: 'A representation of `metric` based SLO time series for the provided
        queries.

        This is the same response type from `batch_query` endpoint.'
      properties:
        count:
          description: Count of submitted metrics.
          format: int64
          type: integer
        metadata:
          description: Query metadata.
          properties:
            aggr:
              description: Query aggregator function.
              type: string
            expression:
              description: Query expression.
              type: string
            metric:
              description: Query metric used.
              type: string
            query_index:
              description: Query index from original combined query.
              format: int64
              type: integer
            scope:
              description: Query scope.
              type: string
            unit:
              description: Query units (if available).
              type: string
          type: object
        sum:
          description: Total sum of the query.
          format: double
          type: number
        values:
          description: The query values for each metric.
          items:
            description: A metric name and its value.
            format: double
            type: number
          type: array
      required:
      - count
      - sum
      - values
      - metadata
      type: object
    SLOHistoryResponse:
      description: A service level objective history response.
      properties:
        data:
          description: An array of service level objective objects.
          properties:
            from_ts:
              description: The `from` timestamp in epoch seconds.
              format: int64
              type: integer
            groups:
              $ref: '#/components/schemas/SLOHistorySLIData'
            overall:
              $ref: '#/components/schemas/SLOHistorySLIData'
            series:
              $ref: '#/components/schemas/SLOHistoryMetrics'
            thresholds:
              additionalProperties:
                $ref: '#/components/schemas/SLOThreshold'
              description: mapping of string timeframe to the SLO threshold.
              type: object
            to_ts:
              description: The `to` timestamp in epoch seconds.
              format: int64
              type: integer
            type:
              $ref: '#/components/schemas/SLOType'
            type_id:
              $ref: '#/components/schemas/SLOTypeNumeric'
          type: object
        errors:
          description: A list of errors while querying the history data for the service
            level objective.
          items:
            $ref: '#/components/schemas/SLOHistoryResponseError'
          type: array
      type: object
    SLOHistoryResponseError:
      description: A service level objective response containing the requested history.
      properties:
        error:
          description: Human readable error.
          type: string
      type: object
    SLOHistorySLIData:
      description: 'An object that holds an SLI value and its associated data. It
        can represent

        an SLO''s overall SLI value or the SLI value for a specific monitor (in multi-monitor
        SLOs)

        or group (in grouped SLOs). The uptime history is included for monitor SLOs.'
      properties:
        history:
          description: For `monitor` based SLOs, this includes the aggregated history
            uptime time series.
          items:
            description: Represents an array time series data.
            items:
              description: A time series data point which is a tuple of (timestamp,
                value).
              format: double
              type: number
            maxItems: 2
            minItems: 2
            type: array
          type: array
        name:
          description: For groups in a grouped SLO this is the group name. For monitors
            in a multi-monitor SLO this is the monitor name.
          type: string
        precision:
          additionalProperties:
            description: The number of accurate decimals.
            format: double
            type: number
          description: A mapping of threshold `timeframe` to number of accurate decimals,
            regardless of the from && to timestamp.
          type: object
        preview:
          description: 'For `monitor` based SLOs when `true` this indicates that a
            replay is in progress to give an accurate uptime

            calculation.'
          type: boolean
        sli_value:
          description: The current SLI value of the SLO over the history window.
          example: 99.99
          format: double
          type: number
        span_precision:
          description: The amount of decimal places the SLI value is accurate to for
            the given from `&&` to timestamp.
          format: double
          type: number
        uptime:
          deprecated: true
          description: Deprecated. Use `sli_value` instead.
          format: double
          type: number
      type: object
    SLOListResponse:
      description: A response with one or more service level objective.
      properties:
        data:
          description: An array of service level objective objects.
          items:
            $ref: '#/components/schemas/ServiceLevelObjective'
          type: array
        errors:
          description: 'An array of error messages. Each endpoint documents how/whether
            this field is

            used.'
          items:
            description: The error message.
            type: string
          type: array
      type: object
    SLOResponse:
      description: A service level objective response containing a single service
        level objective.
      properties:
        data:
          $ref: '#/components/schemas/ServiceLevelObjective'
        errors:
          description: 'An array of error messages. Each endpoint documents how/whether
            this field is

            used.'
          items:
            description: The error message.
            type: string
          type: array
      type: object
    SLOThreshold:
      description: SLO thresholds (target and optionally warning) for a single time
        window.
      properties:
        target:
          description: 'The target value for the service level indicator within the
            corresponding

            timeframe.'
          format: double
          type: number
        target_display:
          description: 'A string representation of the target that indicates its precision.

            It uses trailing zeros to show significant decimal places (e.g. `98.00`).


            Always included in service level objective responses. Ignored in

            create/update requests.'
          example: '99.9'
          type: string
        timeframe:
          $ref: '#/components/schemas/SLOTimeframe'
        warning:
          description: The warning value for the service level objective.
          format: double
          type: number
        warning_display:
          description: 'A string representation of the warning target (see the description
            of

            the `target_display` field for details).


            Included in service level objective responses if a warning target exists.

            Ignored in create/update requests.'
          type: string
      required:
      - timeframe
      - target
      type: object
    SLOTimeframe:
      description: The SLO time window options.
      enum:
      - 7d
      - 30d
      - 90d
      type: string
      x-enum-varnames:
      - SEVEN_DAYS
      - THIRTY_DAYS
      - NINETY_DAYS
    SLOType:
      description: The type of the service level objective.
      enum:
      - metric
      - monitor
      type: string
      x-enum-varnames:
      - METRIC
      - MONITOR
    SLOTypeNumeric:
      description: 'A numeric representation of the type of the service level objective
        (`0` for

        monitor, `1` for metric). Always included in service level objective responses.

        Ignored in create/update requests.'
      enum:
      - 0
      - 1
      example: 0
      format: int32
      type: integer
      x-enum-varnames:
      - MONITOR
      - METRIC
    SLOWidgetDefinition:
      description: Use the SLO and uptime widget to track your SLOs (Service Level
        Objectives) and uptime on screenboards and timeboards.
      properties:
        show_error_budget:
          description: Defined error budget.
          type: boolean
        slo_id:
          description: ID of the SLO displayed.
          type: string
        time_windows:
          description: Times being monitored.
          items:
            $ref: '#/components/schemas/WidgetTimeWindows'
          type: array
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: slo
          description: Type of the widget.
          readOnly: true
          type: string
        view_mode:
          $ref: '#/components/schemas/WidgetViewMode'
        view_type:
          default: detail
          description: Type of view displayed by the widget.
          type: string
      required:
      - type
      - view_type
      type: object
    ScatterPlotRequest:
      description: Updated scatter plot.
      properties:
        aggregator:
          $ref: '#/components/schemas/WidgetAggregator'
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Query definition.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
      type: object
    ScatterPlotWidgetDefinition:
      description: The scatter plot visualization allows you to graph a chosen scope
        over two different metrics with their respective aggregation.
      properties:
        color_by_groups:
          description: List of groups used for colors.
          items:
            description: Group name.
            type: string
          type: array
        requests:
          description: Widget definition.
          properties:
            x:
              $ref: '#/components/schemas/ScatterPlotRequest'
            y:
              $ref: '#/components/schemas/ScatterPlotRequest'
          required:
          - x
          - y
          type: object
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: scatterplot
          description: Type of widget.
          readOnly: true
          type: string
        xaxis:
          $ref: '#/components/schemas/WidgetAxis'
        yaxis:
          $ref: '#/components/schemas/WidgetAxis'
      required:
      - type
      - requests
      type: object
    Series:
      description: 'A metric to submit to Datadog.

        See [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).'
      properties:
        host:
          description: The name of the host that produced the metric.
          type: string
        interval:
          default: null
          description: If the type of the metric is rate or count, define the corresponding
            interval.
          format: int64
          nullable: true
          type: integer
        metric:
          description: The name of the timeseries.
          example: system.load.1
          type: string
        points:
          description: Points relating to a metric.
          items:
            $ref: '#/components/schemas/Point'
          type: array
        tags:
          description: A list of tags associated with the metric.
          items:
            description: Individual tags.
            type: string
          type: array
        type:
          default: gauge
          description: The type of the metric.
          type: string
      required:
      - metric
      - points
      type: object
    ServiceCheck:
      description: An object containing service check and status.
      properties:
        check:
          description: The check.
          example: app.ok
          type: string
        host_name:
          description: The host name correlated with the check.
          example: app.host1
          type: string
        message:
          description: Message containing check status.
          example: app is running
          type: string
        status:
          $ref: '#/components/schemas/ServiceCheckStatus'
        tags:
          description: Tags related to a check.
          items:
            description: Items related to a check.
            type: string
          type: array
        timestamp:
          description: Time of check.
          format: int64
          type: integer
      required:
      - check
      - status
      type: object
    ServiceCheckStatus:
      description: The status of a service check.
      enum:
      - 0
      - 1
      - 2
      - 3
      example: 0
      type: integer
      x-enum-varnames:
      - OK
      - WARNING
      - CRITICAL
      - UNKNOWN
    ServiceChecks:
      description: The service checks.
      items:
        $ref: '#/components/schemas/ServiceCheck'
      type: array
    ServiceLevelObjective:
      description: 'A service level objective object includes a service level indicator,
        thresholds

        for one or more timeframes, and metadata (`name`, `description`, `tags`, etc.).'
      properties:
        created_at:
          description: 'Creation timestamp (UNIX time in seconds)


            Always included in service level objective responses.'
          format: int64
          readOnly: true
          type: integer
        creator:
          $ref: '#/components/schemas/Creator'
        description:
          description: 'A user-defined description of the service level objective.


            Always included in service level objective responses (but may be `null`).

            Optional in create/update requests.'
          nullable: true
          type: string
        groups:
          description: 'A list of (up to 20) monitor groups that narrow the scope
            of a monitor service level objective.


            Included in service level objective responses if it is not empty. Optional
            in

            create/update requests for monitor service level objectives, but may only
            be

            used when then length of the `monitor_ids` field is one.'
          example:
          - env:prod
          - role:mysql
          items:
            description: A group name, for instance `env:prod`.
            type: string
          type: array
        id:
          description: 'A unique identifier for the service level objective object.


            Always included in service level objective responses.'
          readOnly: true
          type: string
        modified_at:
          description: 'Modification timestamp (UNIX time in seconds)


            Always included in service level objective responses.'
          format: int64
          readOnly: true
          type: integer
        monitor_ids:
          description: 'A list of monitor ids that defines the scope of a monitor
            service level

            objective. **Required if type is `monitor`**.'
          items:
            description: A monitor ID.
            format: int64
            type: integer
          type: array
        monitor_tags:
          description: 'The union of monitor tags for all monitors referenced by the
            `monitor_ids`

            field.

            Always included in service level objective responses for monitor service
            level

            objectives (but may be empty). Ignored in create/update requests. Does
            not

            affect which monitors are included in the service level objective (that
            is

            determined entirely by the `monitor_ids` field).'
          items:
            description: A monitor tag.
            type: string
          type: array
        name:
          description: The name of the service level objective object.
          type: string
        query:
          description: A metric SLI query. **Required if type is `metric`**.
          properties:
            denominator:
              description: A Datadog metric query for total (valid) events.
              type: string
            numerator:
              description: A Datadog metric query for good events.
              type: string
          required:
          - numerator
          - denominator
          type: object
        tags:
          description: 'A list of tags associated with this service level objective.

            Always included in service level objective responses (but may be empty).

            Optional in create/update requests.'
          example:
          - env:prod
          - app:core
          items:
            description: A tag to apply to your SLO.
            type: string
          type: array
        thresholds:
          description: 'The thresholds (timeframes and associated targets) for this
            service level

            objective object.'
          items:
            $ref: '#/components/schemas/SLOThreshold'
          type: array
        type:
          $ref: '#/components/schemas/SLOType'
      required:
      - name
      - thresholds
      - type
    ServiceLevelObjectiveRequest:
      description: 'A service level objective object includes a service level indicator,
        thresholds

        for one or more timeframes, and metadata (`name`, `description`, `tags`, etc.).'
      properties:
        created_at:
          description: 'Creation timestamp (UNIX time in seconds)


            Always included in service level objective responses.'
          format: int64
          readOnly: true
          type: integer
        creator:
          $ref: '#/components/schemas/Creator'
        description:
          description: 'A user-defined description of the service level objective.


            Always included in service level objective responses (but may be `null`).

            Optional in create/update requests.'
          nullable: true
          type: string
        groups:
          description: 'A list of (up to 20) monitor groups that narrow the scope
            of a monitor service level objective.


            Included in service level objective responses if it is not empty. Optional
            in

            create/update requests for monitor service level objectives, but may only
            be

            used when then length of the `monitor_ids` field is one.'
          example:
          - env:prod
          - role:mysql
          items:
            description: A group name, for instance `env:prod`.
            type: string
          type: array
        id:
          description: 'A unique identifier for the service level objective object.


            Always included in service level objective responses.'
          readOnly: true
          type: string
        modified_at:
          description: 'Modification timestamp (UNIX time in seconds)


            Always included in service level objective responses.'
          format: int64
          readOnly: true
          type: integer
        monitor_ids:
          description: 'A list of monitor ids that defines the scope of a monitor
            service level

            objective. **Required if type is `monitor`**.'
          items:
            description: A monitor ID.
            format: int64
            type: integer
          type: array
        name:
          description: The name of the service level objective object.
          type: string
        query:
          description: A metric SLI query. **Required if type is `metric`**.
          properties:
            denominator:
              description: A Datadog metric query for total (valid) events.
              type: string
            numerator:
              description: A Datadog metric query for good events.
              type: string
          required:
          - numerator
          - denominator
          type: object
        tags:
          description: 'A list of tags associated with this service level objective.

            Always included in service level objective responses (but may be empty).

            Optional in create/update requests.'
          example:
          - env:prod
          - app:core
          items:
            description: A tag to apply to your SLO.
            type: string
          type: array
        thresholds:
          description: 'The thresholds (timeframes and associated targets) for this
            service level

            objective object.'
          items:
            $ref: '#/components/schemas/SLOThreshold'
          type: array
        type:
          $ref: '#/components/schemas/SLOType'
      required:
      - name
      - thresholds
      - type
    ServiceMapWidgetDefinition:
      description: This widget displays a map of a service to all of the services
        that call it, and all of the services that it calls.
      properties:
        filters:
          description: Your environment and primary tag (or * if enabled for your
            account).
          items:
            description: Filter name.
            type: string
          minItems: 1
          type: array
        service:
          description: The ID of the service you want to map.
          type: string
        title:
          description: The title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: servicemap
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - filters
      - service
      type: object
    ServiceSummaryWidgetDefinition:
      description: The service summary displays the graphs of a chosen service in
        your screenboard. Only available on FREE layout dashboards.
      properties:
        display_format:
          $ref: '#/components/schemas/WidgetServiceSummaryDisplayFormat'
        env:
          description: APM environment.
          type: string
        service:
          description: APM service.
          type: string
        show_breakdown:
          description: Whether to show the latency breakdown or not.
          type: boolean
        show_distribution:
          description: Whether to show the latency distribution or not.
          type: boolean
        show_errors:
          description: Whether to show the error metrics or not.
          type: boolean
        show_hits:
          description: Whether to show the hits metrics or not.
          type: boolean
        show_latency:
          description: Whether to show the latency metrics or not.
          type: boolean
        show_resource_list:
          description: Whether to show the resource list or not.
          type: boolean
        size_format:
          $ref: '#/components/schemas/WidgetSizeFormat'
        span_name:
          description: APM span name.
          type: string
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of the widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: trace_service
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - env
      - service
      - span_name
      type: object
    SlackChannel:
      description: The Slack channel configuration.
      properties:
        account:
          description: Account to which the channel belongs to.
          type: string
        channel_name:
          description: Your channel name.
          example: '#general'
          type: string
        transfer_all_user_comments:
          default: false
          description: 'To be notified for every comment on a graph, set it to `true`.

            If set to `False` use the `@slack-channel_name` syntax for comments

            to be posted to slack.'
          type: boolean
      required:
      - channel_name
      - account
      type: object
    SlackChannels:
      description: Configuration of your Slack channels.
      example:
        channels:
        - account: Main_Account
          channel_name: '#channel_name_main_account'
          transfer_all_user_comments: false
        - account: doghouse
          channel_name: '#channel_name_doghouse'
          transfer_all_user_comments: false
      properties:
        channels:
          description: An array of slack channel configurations.
          items:
            $ref: '#/components/schemas/SlackChannel'
          type: array
      type: object
    SlackIntegration:
      description: A new Datadog-Slack integration.
      properties:
        service_hooks:
          description: The array of service hook objects.
          example:
          - account: Main_Account
            url: https://hooks.slack.com/services/1/1/1
          - account: doghouse
            url: https://hooks.slack.com/services/2/2/2
          items:
            $ref: '#/components/schemas/SlackServiceHook'
          type: array
      type: object
    SlackServiceHook:
      description: 'The service hook is generated for your Slack account in

        your Slack account administration page.'
      properties:
        account:
          description: Your Slack account name.
          type: string
        url:
          description: Your Slack service hook URL.
          type: string
      required:
      - account
      - url
      type: object
    Span:
      description: 'A logical unit of work in the system for a given time period.

        Each span consists of a `span.name`, start time, duration, and span tags.'
      properties:
        duration:
          description: The duration of the request in nanoseconds.
          format: int64
          type: integer
        error:
          description: 'Set this value to 1 to indicate if an error occurred.


            If an error occurs, you should pass additional information,

            such as the error message, type and stack information in the meta property.'
          format: int32
          maximum: 1
          minimum: 0
          type: integer
        meta:
          additionalProperties:
            description: Additional properties for key-value metadata.
            type: string
          description: A set of key-value metadata. Keys and values must be strings.
          type: object
        metrics:
          additionalProperties:
            description: Additional properties for key-value metrics.
            format: double
            type: number
          description: A set of key-value metadata. Keys must be strings and values
            must be 64-bit floating point numbers.
          type: object
        name:
          description: The span name. The span name must not be longer than 100 characters.
          example: span_name
          maxLength: 100
          type: string
        parent_id:
          description: The span integer ID of the parent span.
          format: int64
          type: integer
        resource:
          description: The resource you are tracing. The resource name must not be
            longer than 5000 characters.
          example: /home
          maxLength: 5000
          type: string
        service:
          description: The service you are tracing. The service name must not be longer
            than 100 characters.
          example: service_name
          maxLength: 100
          type: string
        span_id:
          description: The span integer (64-bit unsigned) ID.
          example: 987654321
          format: int64
          type: integer
        start:
          description: The start time of the request in nanoseconds from the UNIX
            epoch.
          format: int64
          type: integer
        trace_id:
          description: The unique integer (64-bit unsigned) ID of the trace containing
            this span.
          example: 123456789
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/SpanType'
      required:
      - trace_id
      - span_id
      - name
      - resource
      - service
      - start
      - duration
      type: object
    SpanType:
      default: custom
      description: The type of request.
      enum:
      - web
      - db
      - cache
      - custom
      example: web
      type: string
      x-enum-varnames:
      - WEB
      - DB
      - CACHE
      - CUSTOM
    SyntheticsAPITestResultData:
      description: Object containing results for your Synthetic API test.
      properties:
        cert:
          $ref: '#/components/schemas/SyntheticsSSLCertificate'
        errorCode:
          $ref: '#/components/schemas/SyntheticsErrorCode'
        errorMessage:
          description: The API test error message.
          type: string
        eventType:
          $ref: '#/components/schemas/SyntheticsTestProcessStatus'
        httpStatusCode:
          description: The API test HTTP status code.
          format: int64
          type: integer
        requestHeaders:
          additionalProperties:
            description: Requested request header.
            type: object
          description: Request header object used for the API test.
          type: object
        responseBody:
          description: Response body returned for the API test.
          type: string
        responseHeaders:
          additionalProperties:
            description: Returned request header.
            type: object
          description: Response headers returned for the API test.
          type: object
        responseSize:
          description: Global size in byte of the API test response.
          format: int64
          type: integer
        timings:
          $ref: '#/components/schemas/SyntheticsTiming'
      type: object
    SyntheticsAPITestResultFull:
      description: Object returned describing a API test result.
      properties:
        check:
          description: Object describing the API test configuration.
          properties:
            config:
              $ref: '#/components/schemas/SyntheticsTestConfig'
          required:
          - config
          type: object
        check_time:
          description: When the API test was conducted.
          format: double
          type: number
        check_version:
          description: Version of the API test used.
          format: int64
          type: integer
        probe_dc:
          description: Locations for which to query the API test results.
          type: string
        result:
          $ref: '#/components/schemas/SyntheticsAPITestResultData'
        result_id:
          description: ID of the API test result.
          type: string
        status:
          $ref: '#/components/schemas/SyntheticsTestMonitorStatus'
      type: object
    SyntheticsAPITestResultShort:
      description: Object with the results of a single Synthetic API test.
      properties:
        check_time:
          description: Last time the API test was performed.
          format: double
          type: number
        probe_dc:
          description: Location from which the API test was performed.
          type: string
        result:
          description: Result of the last API test run.
          properties:
            timings:
              $ref: '#/components/schemas/SyntheticsTiming'
          type: object
        result_id:
          description: ID of the API test result.
          type: string
        status:
          $ref: '#/components/schemas/SyntheticsTestMonitorStatus'
      type: object
    SyntheticsAssertion:
      description: 'Object describing the assertions type, their associated operator,

        which property they apply , and upon which target.'
      properties:
        operator:
          $ref: '#/components/schemas/SyntheticsAssertionOperator'
        property:
          description: The associated assertion property.
          type: string
        target:
          description: Target to apply the assertion to. It can be a string, a number,
            or a Date.
          type: object
        type:
          $ref: '#/components/schemas/SyntheticsAssertionType'
      required:
      - type
      - operator
      type: object
    SyntheticsAssertionOperator:
      description: Assertion operator to apply.
      enum:
      - contains
      - doesNotContain
      - is
      - isNot
      - lessThan
      - matches
      - doesNotMatch
      - validates
      - isInMoreThan
      type: string
      x-enum-varnames:
      - CONTAINS
      - DOES_NOT_CONTAIN
      - IS
      - IS_NOT
      - LESS_THAN
      - MATCHES
      - DOES_NOT_MATCH
      - VALIDATES
      - IS_IN_MORE_DAYS_THAN
    SyntheticsAssertionType:
      description: Type of the assertion.
      enum:
      - body
      - header
      - statusCode
      - certificate
      - responseTime
      - property
      type: string
      x-enum-varnames:
      - BODY
      - HEADER
      - STATUS_CODE
      - CERTIFICATE
      - RESPONSE_TIME
      - PROPERTY
    SyntheticsBrowserError:
      description: Error response object for a browser test.
      properties:
        description:
          description: Description of the error.
          type: string
        name:
          description: Name of the error.
          type: string
        statusCode:
          description: Status Code of the error.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/SyntheticsBrowserErrorType'
      required:
      - description
      - name
      - type
      type: object
    SyntheticsBrowserErrorType:
      description: Error type returned by a browser test.
      enum:
      - network
      - js
      type: string
      x-enum-varnames:
      - NETWORK
      - JS
    SyntheticsBrowserTestResultData:
      description: Object containing results for your Synthetic browser test.
      properties:
        browserType:
          description: Type of browser device used for the browser test.
          type: string
        browserVersion:
          description: Browser version used for the browser test.
          type: string
        device:
          $ref: '#/components/schemas/SyntheticsDevice'
        duration:
          description: Global duration in second of the browser test.
          format: double
          type: number
        error:
          description: Error returned for the browser test.
          type: string
        passed:
          description: Whether or not the browser test was conducted.
          type: boolean
        receivedEmailCount:
          description: The amount of email received during the browser test.
          format: int64
          type: integer
        startUrl:
          description: Starting URL for the browser test.
          type: string
        stepDetails:
          description: Array containing the different browser test steps.
          items:
            $ref: '#/components/schemas/SyntheticsStepDetail'
          type: array
        thumbnailsBucketKey:
          description: Whether or not a thumbnail is associated with the browser test.
          type: boolean
        timeToInteractive:
          description: Time in second to wait before the browser test starts after
            reaching the start URL.
          format: double
          type: number
      type: object
    SyntheticsBrowserTestResultFull:
      description: Object returned describing a browser test result.
      properties:
        check:
          description: Object describing the browser test configuration.
          properties:
            config:
              $ref: '#/components/schemas/SyntheticsTestConfig'
          required:
          - config
          type: object
        check_time:
          description: When the browser test was conducted.
          format: double
          type: number
        check_version:
          description: Version of the browser test used.
          format: int64
          type: integer
        probe_dc:
          description: Location from which the browser test was performed.
          type: string
        result:
          $ref: '#/components/schemas/SyntheticsBrowserTestResultData'
        result_id:
          description: ID of the browser test result.
          type: string
        status:
          $ref: '#/components/schemas/SyntheticsTestMonitorStatus'
      type: object
    SyntheticsBrowserTestResultShort:
      description: Object with the results of a single Synthetic browser test.
      properties:
        check_time:
          description: Last time the browser test was performed.
          format: double
          type: number
        probe_dc:
          description: Location from which the Browser test was performed.
          type: string
        result:
          description: Object with the result of the last browser test run.
          properties:
            device:
              $ref: '#/components/schemas/SyntheticsDevice'
            duration:
              description: Length in second of the browser test run.
              format: double
              type: number
            errorCount:
              description: Amount of errors collected for a single browser test run.
              format: int64
              type: integer
            stepCountCompleted:
              description: Amount of browser test steps completed before failing.
              format: int64
              type: integer
            stepCountTotal:
              description: Total amount of browser test steps.
              format: int64
              type: integer
          type: object
        result_id:
          description: ID of the browser test result.
          type: string
        status:
          $ref: '#/components/schemas/SyntheticsTestMonitorStatus'
      required:
      - from_ts
      - to_ts
      type: object
    SyntheticsBrowserVariable:
      description: 'Object defining a variable that can be used in your browser test.

        Learn more in the [Browser test Actions documentation](https://docs.datadoghq.com/synthetics/browser_tests/actions#variable).'
      properties:
        example:
          description: Example for the variable.
          type: string
        id:
          description: ID for the variable.
          type: string
        name:
          description: Name of the variable.
          type: string
        pattern:
          description: Pattern of the variable.
          type: string
        type:
          $ref: '#/components/schemas/SyntheticsBrowserVariableType'
      required:
      - type
      - name
      type: object
    SyntheticsBrowserVariableType:
      description: Type of browser test variable.
      enum:
      - element
      - email
      - global
      - text
      type: string
      x-enum-varnames:
      - ELEMENT
      - EMAIL
      - GLOBAL
      - TEXT
    SyntheticsCheckType:
      description: Type of assertion to apply in an API test.
      enum:
      - equals
      - notEquals
      - contains
      - notContains
      - startsWith
      - notStartsWith
      - greater
      - lower
      - greaterEquals
      - lowerEquals
      - matchRegex
      type: string
      x-enum-varnames:
      - EQUALS
      - NOT_EQUALS
      - CONTAINS
      - NOT_CONTAINS
      - STARTS_WITH
      - NOT_STARTS_WITH
      - GREATER
      - LOWER
      - GREATER_EQUALS
      - LOWER_EQUALS
      - MATCH_REGEX
    SyntheticsDeleteTestsPayload:
      description: A JSON list of the ID or IDs of the Synthetic tests that you want
        to delete.
      properties:
        public_ids:
          description: An array of Synthetic test IDs you want to delete.
          items:
            description: A Synthetic test ID to delete.
            type: string
          type: array
      type: object
    SyntheticsDeleteTestsResponse:
      description: Response object for deleting Synthetic test.
      properties:
        deleted_tests:
          description: Array of objects containing a deleted Synthetic test ID with
            the associated deletion timestamp.
          items:
            description: Object containing a deleted Synthetic test ID with the associated
              deletion timestamp.
            properties:
              deleted_at:
                description: Deletion timestamp of the Synthetic test ID.
                format: date-time
                type: string
              public_id:
                description: The Synthetic test ID deleted.
                type: string
            type: object
          type: array
      type: object
    SyntheticsDevice:
      description: Object describing the device used to perform the Synthetic test.
      properties:
        height:
          description: Screen height of the device.
          format: int64
          type: integer
        id:
          $ref: '#/components/schemas/SyntheticsDeviceID'
        isMobile:
          description: Whether or not the device is a mobile.
          type: boolean
        name:
          description: The device name.
          type: string
        width:
          description: Screen width of the device.
          format: int64
          type: integer
      required:
      - id
      - name
      - height
      - width
      type: object
    SyntheticsDeviceID:
      description: The device ID.
      enum:
      - laptop_large
      - tablet
      - mobile_small
      type: string
      x-enum-varnames:
      - LAPTOP_LARGE
      - TABLET
      - MOBILE_SMALL
    SyntheticsErrorCode:
      description: Error code that can be returned by a Synthetic test.
      enum:
      - NO_ERROR
      - UNKNOWN
      - DNS
      - SSL
      - TIMEOUT
      - DENIED
      - INCORRECT_ASSERTION
      type: string
      x-enum-varnames:
      - NO_ERROR
      - UNKNOWN
      - DNS
      - SSL
      - TIMEOUT
      - DENIED
      - INCORRECT_ASSERTION
    SyntheticsGetAPITestLatestResultsResponse:
      description: Object with the latest Synthetic API test run.
      properties:
        last_timestamp_fetched:
          description: Timestamp of the latest API test run.
          format: int64
          type: integer
        results:
          description: Result of the latest API test run.
          items:
            $ref: '#/components/schemas/SyntheticsAPITestResultShort'
          type: array
      type: object
    SyntheticsGetBrowserTestLatestResultsResponse:
      description: Object with the latest Synthetic browser test run.
      properties:
        last_timestamp_fetched:
          description: Timestamp of the latest browser test run.
          format: int64
          type: integer
        results:
          description: Result of the latest browser test run.
          items:
            $ref: '#/components/schemas/SyntheticsBrowserTestResultShort'
          type: array
      type: object
    SyntheticsListTestsResponse:
      description: Object containing an array of Synthetic tests configuration.
      properties:
        tests:
          description: Array of Synthetic tests configuration.
          items:
            $ref: '#/components/schemas/SyntheticsTestDetails'
          type: array
      type: object
    SyntheticsPlayingTab:
      description: Navigate between different tabs for your browser test.
      enum:
      - -1
      - 0
      - 1
      - 2
      - 3
      format: int64
      type: integer
      x-enum-varnames:
      - MAIN_TAB
      - NEW_TAB
      - TAB_1
      - TAB_2
      - TAB_3
    SyntheticsResource:
      description: Object describing a resource which is the combination of requests
        (fetch, XHR) and Assets (HTML, CSS, JS, images).
      properties:
        duration:
          description: Number of time the resource was collected.
          format: double
          type: number
        method:
          description: HTTP method associated to the resource.
          type: string
        size:
          description: Size of the resource in bytes.
          format: int64
          type: integer
        status:
          description: Status Code of the resource.
          format: int64
          type: integer
        timestamp:
          description: Timestamp of the resource collection.
          format: double
          type: number
        traceId:
          description: Trace ID associated with the resource if any.
          type: string
        type:
          $ref: '#/components/schemas/SyntheticsResourceType'
        url:
          description: URL of the resource.
          type: string
      type: object
    SyntheticsResourceType:
      description: Document type to apply an assertion against.
      enum:
      - document
      - stylesheet
      - fetch
      - image
      - script
      - xhr
      - other
      type: string
      x-enum-varnames:
      - DOCUMENT
      - STYLESHEET
      - FETCH
      - IMAGE
      - SCRIPT
      - XHR
      - OTHER
    SyntheticsSSLCertificate:
      description: Object describing the SSL certificate used for a Synthetic test.
      properties:
        cipher:
          description: Cipher used for the connection.
          type: string
        exponent:
          description: Exponent associated to the certificate.
          format: double
          type: number
        extKeyUsage:
          description: Array of extensions and details used for the certificate.
          items:
            description: An extension or detail used for the certificate.
            type: string
          type: array
        fingerprint:
          description: MD5 digest of the DER-encoded Certificate information.
          type: string
        fingerprint256:
          description: SHA-1 digest of the DER-encoded Certificate information.
          type: string
        issuer:
          description: Object describing the issuer of a SSL certificate.
          properties:
            C:
              description: Country Name that issued the certificate.
              type: string
            CN:
              description: Common Name that issued certificate.
              type: string
            L:
              description: Locality that issued the certificate.
              type: string
            O:
              description: Organization that issued the certificate.
              type: string
            OU:
              description: Organizational Unit that issued the certificate.
              type: string
            ST:
              description: State Or Province Name that issued the certificate.
              type: string
          type: object
        modulus:
          description: Modulus associated to the SSL certificate private key.
          type: string
        protocol:
          description: TLS protocol used for the test.
          type: string
        serialNumber:
          description: Serial Number assigned by Symantec to the SSL certificate.
          type: string
        subject:
          description: Object describing the SSL certificate used for the test.
          properties:
            C:
              description: Country Name associated with the certificate.
              type: string
            CN:
              description: Common Name that associated with the certificate.
              type: string
            L:
              description: Locality associated with the certificate.
              type: string
            O:
              description: Organization associated with the certificate.
              type: string
            OU:
              description: Organizational Unit associated with the certificate.
              type: string
            ST:
              description: State Or Province Name associated with the certificate.
              type: string
            altName:
              description: Subject Alternative Name associated with the certificate.
              type: string
          type: object
        validFrom:
          description: Date from which the SSL certificate is valid.
          format: date-time
          type: string
        validTo:
          description: Date until which the SSL certificate is valid.
          format: date-time
          type: string
      type: object
    SyntheticsStepDetail:
      description: Object describing a step for a Synthetic test.
      properties:
        browserErrors:
          description: Array of errors collected for a browser test.
          items:
            $ref: '#/components/schemas/SyntheticsBrowserError'
          type: array
        checkType:
          $ref: '#/components/schemas/SyntheticsCheckType'
        description:
          description: Description of the test.
          type: string
        duration:
          description: Total duration in millisecond of the test.
          format: double
          type: number
        error:
          description: Error returned by the test.
          type: string
        playingTab:
          $ref: '#/components/schemas/SyntheticsPlayingTab'
        resources:
          description: Array of resources collected by the test.
          items:
            $ref: '#/components/schemas/SyntheticsResource'
          type: array
        screenshotBucketKey:
          description: Whether or not screenshots where collected by the test.
          type: boolean
        skipped:
          description: Whether or not to skip this step.
          type: boolean
        snapshotBucketKey:
          description: Whether or not snapshots where collected by the test.
          type: boolean
        stepId:
          description: The step ID.
          format: int64
          type: integer
        subTestStepDetails:
          description: 'If this steps include a sub-test.

            [Subtests documentation](https://docs.datadoghq.com/synthetics/browser_tests/advanced_options/#subtests).'
          items:
            $ref: '#/components/schemas/SyntheticsStepDetail'
          type: array
        timeToInteractive:
          description: Time before starting the step.
          format: double
          type: number
        type:
          $ref: '#/components/schemas/SyntheticsStepType'
        url:
          description: URL to perform the step against.
          type: string
        value:
          description: Value for the step.
          type: object
        warnings:
          description: Warning collected that didn't failed the step.
          items:
            description: Object collecting warnings for a given step.
            properties:
              message:
                description: Message for the warning.
                type: string
              type:
                $ref: '#/components/schemas/SyntheticsWarningType'
            required:
            - message
            - type
            type: object
          type: array
      type: object
    SyntheticsStepType:
      description: Step type used in your Synthetic test.
      enum:
      - assertCurrentUrl
      - assertElementContent
      - assertElementPresent
      - assertEmail
      - assertPageContains
      - assertPageLacks
      - click
      - extractVariable
      - goToEmailLink
      - goToUrl
      - goToUrlAndMeasureTti
      - hover
      - playSubTest
      - pressKey
      - refresh
      - selectOption
      - typeText
      - uploadFiles
      - wait
      type: string
      x-enum-varnames:
      - ASSERT_CURRENT_URL
      - ASSERT_ELEMENT_CONTENT
      - ASSERT_ELEMENT_PRESENT
      - ASSERT_EMAIL
      - ASSERT_PAGE_CONTAINS
      - ASSERT_PAGE_LACKS
      - CLICK
      - EXTRACT_VARIABLE
      - GO_TO_EMAIL_LINK
      - GO_TO_URL
      - GO_TO_URL_AND_MEASURE_TTI
      - HOVER
      - PLAY_SUB_TEST
      - PRESS_KEY
      - REFRESH
      - SELECT_OPTION
      - TYPE_TEXT
      - UPLOAD_FILES
      - WAIT
    SyntheticsTestAuthor:
      description: Object describing the author or a Synthetic test.
      properties:
        email:
          description: Email of the author.
          type: string
        handle:
          description: Handle of the author.
          type: string
        id:
          description: Unique ID of the author.
          format: int64
          type: integer
        name:
          description: Name of the author.
          type: string
      type: object
    SyntheticsTestConfig:
      description: Configuration object for a Synthetic test.
      properties:
        assertions:
          default: []
          description: Array of assertions used for the test.
          items:
            $ref: '#/components/schemas/SyntheticsAssertion'
          type: array
        request:
          $ref: '#/components/schemas/SyntheticsTestRequest'
        variables:
          description: Array of variables used for the test.
          items:
            $ref: '#/components/schemas/SyntheticsBrowserVariable'
          type: array
      required:
      - request
      - assertions
      type: object
    SyntheticsTestDetails:
      description: Object containing details about your Synthetic test.
      properties:
        config:
          $ref: '#/components/schemas/SyntheticsTestConfig'
        created_at:
          description: The test creation date.
          type: string
        created_by:
          $ref: '#/components/schemas/SyntheticsTestAuthor'
        locations:
          description: Array of locations used to run the test.
          items:
            description: A location from which the test was run.
            type: string
          type: array
        message:
          description: Notification message associated with the test.
          type: string
        modified_at:
          description: Last timestamp the test was modified.
          type: string
        modified_by:
          $ref: '#/components/schemas/SyntheticsTestAuthor'
        monitor_id:
          description: The associated monitor ID.
          format: int64
          type: integer
        name:
          description: Name of the test.
          type: string
        options:
          $ref: '#/components/schemas/SyntheticsTestOptions'
        public_id:
          description: The test public ID.
          type: string
        status:
          $ref: '#/components/schemas/SyntheticsTestPauseStatus'
        subtype:
          $ref: '#/components/schemas/SyntheticsTestDetailsSubType'
        tags:
          description: Array of tags attached to the test.
          items:
            description: A tag attached to the test.
            type: string
          type: array
        type:
          $ref: '#/components/schemas/SyntheticsTestDetailsType'
      type: object
    SyntheticsTestDetailsSubType:
      description: The sub-type of the Synthetic API test, either `http` or `ssl`.
      enum:
      - http
      - ssl
      type: string
      x-enum-varnames:
      - HTTP
      - SSL
    SyntheticsTestDetailsType:
      description: Type of the Synthetic test, either `api` or `browser`.
      enum:
      - api
      - browser
      type: string
      x-enum-varnames:
      - API
      - BROWSER
    SyntheticsTestMonitorStatus:
      description: 'The status of your Synthetic monitor.

        * `O` for not triggered

        * `1` for triggered

        * `2` for no data'
      enum:
      - 0
      - 1
      - 2
      format: int64
      type: integer
      x-enum-varnames:
      - UNTRIGGERED
      - TRIGGERED
      - NO_DATA
    SyntheticsTestOptions:
      description: Object describing the extra options for a Synthetic test.
      properties:
        accept_self_signed:
          description: For browser test, whether or not the test should allow self
            signed certificate.
          type: boolean
        allow_insecure:
          description: Allows loading insecure content for an HTTP request.
          type: boolean
        device_ids:
          description: Array with the different device IDs used to run the test.
          items:
            $ref: '#/components/schemas/SyntheticsDeviceID'
          type: array
        follow_redirects:
          description: For API SSL test, whether or not the test should follow redirects.
          type: boolean
        min_failure_duration:
          description: Minimum amount of time before declaring the test has failed.
          format: int64
          type: integer
        min_location_failed:
          description: Minimum amount of locations that are allowed to fail for the
            test.
          format: int64
          type: integer
        retry:
          description: Object describing the retry strategy to apply to a Synthetic
            test.
          properties:
            count:
              description: The amount of location that needs to fail for the test
                to be retried.
              format: int64
              type: integer
            interval:
              description: The interval over which the amount of location needed to
                fail for the test to be retried.
              format: double
              type: number
          type: object
        tick_every:
          $ref: '#/components/schemas/SyntheticsTickInterval'
      type: object
    SyntheticsTestPauseStatus:
      description: Define whether you want to start (`live`) or pause (`paused`) a
        Synthetic test.
      enum:
      - live
      - paused
      type: string
      x-enum-varnames:
      - LIVE
      - PAUSED
    SyntheticsTestProcessStatus:
      description: Status of a Synthetic test.
      enum:
      - not_scheduled
      - scheduled
      - started
      - finished
      - finished_with_error
      type: string
      x-enum-varnames:
      - NOT_SCHEDULED
      - SCHEDULED
      - STARTED
      - FINISHED
      - FINISHED_WITH_ERROR
    SyntheticsTestRequest:
      description: Object describing the Synthetic test request.
      properties:
        basicAuth:
          description: Object to handle basic authentication when performing the test.
          properties:
            password:
              description: Password to use for the basic authentication.
              type: string
            username:
              description: Username to use for the basic authentication.
              type: string
          required:
          - password
          - username
          type: object
        body:
          description: Body to include in the test.
          type: string
        headers:
          additionalProperties:
            description: A single Header.
            type: string
          description: Headers to include when performing the test.
          type: object
        host:
          description: Host name to perform the test with.
          type: string
        method:
          $ref: '#/components/schemas/HTTPMethod'
        port:
          description: Port to use when performing the test.
          format: int64
          type: integer
        query:
          description: Query to use for the test.
          type: object
        timeout:
          description: Timeout in millisecond for the test.
          format: double
          type: number
        url:
          description: URL to perform the test with.
          type: string
      type: object
    SyntheticsTickInterval:
      description: The frequency at which to run the Synthetic test.
      enum:
      - 60
      - 300
      - 900
      - 1800
      - 3600
      - 21600
      - 43200
      - 86400
      - 604800
      format: int64
      type: integer
      x-enum-varnames:
      - MINUTE
      - FIVE_MINUTES
      - FIFTEEN_MINUTES
      - THIRTY_MINUTES
      - HOUR
      - SIX_HOURS
      - TWELVE_HOURS
      - DAY
      - WEEK
    SyntheticsTiming:
      description: 'Object containing all metrics and their values collected for a
        Synthetic API test.

        Learn more about those metrics in [Synthetics documentation](https://docs.datadoghq.com/synthetics/#metrics).'
      properties:
        dns:
          description: The duration in millisecond of the DNS lookup.
          format: double
          type: number
        download:
          description: The time in millisecond to download the response.
          format: double
          type: number
        firstByte:
          description: The time in millisecond to first byte.
          format: double
          type: number
        handshake:
          description: The duration in millisecond of the TLS handshake.
          format: double
          type: number
        redirect:
          description: The time in millisecond spent during redirections.
          format: double
          type: number
        ssl:
          description: The duration in millisecond of the TLS handshake.
          format: double
          type: number
        tcp:
          description: Time in millisecond to establish the TCP connection.
          format: double
          type: number
        total:
          description: The overall time in millisecond the request took to be processed.
          format: double
          type: number
        wait:
          description: Time spent in millisecond waiting for a response.
          format: double
          type: number
      type: object
    SyntheticsUpdateTestPauseStatusPayload:
      description: Object to start or pause an existing Synthetic test.
      properties:
        new_status:
          $ref: '#/components/schemas/SyntheticsTestPauseStatus'
      type: object
    SyntheticsWarningType:
      description: User locator used.
      enum:
      - user_locator
      type: string
      x-enum-varnames:
      - USER_LOCATOR
    TableWidgetDefinition:
      description: The table visualization is available on timeboards and screenboards.
        It displays columns of metrics grouped by tag key.
      properties:
        requests:
          description: Widget definition.
          example:
          - q/apm_query/log_query: <METRIC_1>{<SCOPE_1>}
          items:
            $ref: '#/components/schemas/TableWidgetRequest'
          type: array
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: query_table
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    TableWidgetRequest:
      description: Updated table widget.
      properties:
        aggregator:
          $ref: '#/components/schemas/WidgetAggregator'
        alias:
          description: The column name (defaults to the metric name).
          type: string
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        conditional_formats:
          description: List of conditional formats.
          items:
            $ref: '#/components/schemas/WidgetConditionalFormat'
          type: array
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        limit:
          description: For metric queries, the number of lines to show in the table.
            Only one request should have this property.
          format: int64
          type: integer
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        order:
          $ref: '#/components/schemas/WidgetSort'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Query definition.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
      type: object
    TagToHosts:
      description: In this object, the key is the tag, the value is a list of host
        names that are reporting that tag.
      properties:
        tags:
          additionalProperties:
            description: A list of additional properties for tags.
            items:
              description: A given tag in a list.
              example: test.metric.host
              type: string
            type: array
          description: A list of tags to apply to the host.
          type: object
      type: object
    TimeseriesWidgetDefinition:
      description: The timeseries visualization allows you to display the evolution
        of one or more metrics, log events, or Analyzed Spans over time.
      properties:
        events:
          description: List of widget events.
          items:
            $ref: '#/components/schemas/WidgetEvent'
          type: array
        legend_size:
          $ref: '#/components/schemas/WidgetLegendSize'
        markers:
          description: List of markers.
          items:
            $ref: '#/components/schemas/WidgetMarker'
          type: array
        requests:
          description: List of timeseries widget requests.
          example:
          - q/apm_query/log_query: <METRIC_1>{<SCOPE_1>}
          items:
            $ref: '#/components/schemas/TimeseriesWidgetRequest'
          minItems: 1
          type: array
        show_legend:
          description: (screenboard only) Show the legend for this widget.
          type: boolean
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: timeseries
          description: Type of the widget.
          readOnly: true
          type: string
        yaxis:
          $ref: '#/components/schemas/WidgetAxis'
      required:
      - type
      - requests
      type: object
    TimeseriesWidgetRequest:
      description: Updated timeseries widget.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        display_type:
          $ref: '#/components/schemas/WidgetDisplayType'
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        metadata:
          description: Used to define expression aliases.
          items:
            description: Define an expression alias.
            properties:
              alias_name:
                description: Expression alias.
                type: string
              expression:
                description: Expression name.
                type: string
            required:
            - expression
            type: object
          type: array
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Widget query.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        style:
          description: Define widget style.
          properties:
            line_type:
              $ref: '#/components/schemas/WidgetLineType'
            line_width:
              $ref: '#/components/schemas/WidgetLineWidth'
            palette:
              description: Color palette to apply to the widget.
              type: string
          type: object
      type: object
    ToplistWidgetDefinition:
      description: The top list visualization enables you to display a list of Tag
        value like hostname or service with the most or least of any metric value,
        such as highest consumers of CPU, hosts with the least disk space, etc.
      properties:
        requests:
          description: List of top list widget requests.
          items:
            $ref: '#/components/schemas/ToplistWidgetRequest'
          type: array
        time:
          $ref: '#/components/schemas/WidgetTime'
        title:
          description: Title of your widget.
          type: string
        title_align:
          $ref: '#/components/schemas/WidgetTextAlign'
        title_size:
          description: Size of the title.
          type: string
        type:
          default: toplist
          description: Type of the widget.
          readOnly: true
          type: string
      required:
      - type
      - requests
      type: object
    ToplistWidgetRequest:
      description: Updated top list widget.
      properties:
        apm_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        conditional_formats:
          description: List of conditional formats.
          items:
            $ref: '#/components/schemas/WidgetConditionalFormat'
          minItems: 1
          type: array
        event_query:
          $ref: '#/components/schemas/EventQueryDefinition'
        log_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        network_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        process_query:
          $ref: '#/components/schemas/ProcessQueryDefinition'
        q:
          description: Widget query.
          type: string
        rum_query:
          $ref: '#/components/schemas/LogQueryDefinition'
        style:
          description: Define widget style.
          properties:
            line_type:
              $ref: '#/components/schemas/WidgetLineType'
            line_width:
              $ref: '#/components/schemas/WidgetLineWidth'
            palette:
              description: Color palette to apply to the widget.
              type: string
          type: object
      type: object
    UsageFargateHour:
      description: Number of Fargate tasks run and hourly usage.
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        tasks_count:
          description: The number of Fargate tasks run.
          format: int64
          type: integer
      type: object
    UsageFargateResponse:
      description: Response containing the number of Fargate tasks run and hourly
        usage.
      properties:
        usage:
          description: Array with the number of hourly Fargate tasks recorded for
            a given organization.
          items:
            $ref: '#/components/schemas/UsageFargateHour'
          type: array
      type: object
    UsageHostHour:
      description: Number of hosts/containers recorded for each hour for a given organization.
      properties:
        agent_host_count:
          description: 'Contains the total number of infrastructure hosts reporting

            during a given hour that were running the Datadog Agent.'
          format: int64
          type: integer
        alibaba_host_count:
          description: 'Contains the total number of hosts that reported via Alibaba
            integration

            (and were NOT running the Datadog Agent).'
          format: int64
          type: integer
        apm_host_count:
          description: 'Shows the total number of hosts using APM during the hour,

            these are counted as billable (except during trial periods).'
          format: int64
          type: integer
        aws_host_count:
          description: 'Contains the total number of hosts that reported via the AWS
            integration

            (and were NOT running the Datadog Agent).'
          format: int64
          type: integer
        azure_host_count:
          description: 'Contains the total number of hosts that reported via Azure
            integration

            (and were NOT running the Datadog Agent).'
          format: int64
          type: integer
        container_count:
          description: 'Contains the total number of billable infrastructure hosts
            reporting during a given hour.

            This is the sum of `agent_host_count`, `aws_host_count`, and `gcp_host_count`.'
          format: int64
          type: integer
        gcp_host_count:
          description: 'Contains the total number of hosts that reported via the Google
            Cloud integration

            (and were NOT running the Datadog Agent).'
          format: int64
          type: integer
        host_count:
          description: Shows the total number of containers reporting via the Docker
            integration during the hour.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageHostsResponse:
      description: Host usage response.
      properties:
        usage:
          description: An array of objects related to host usage.
          items:
            $ref: '#/components/schemas/UsageHostHour'
          type: array
      type: object
    UsageLambdaHour:
      description: 'Number of lambda functions and sum of the invocations of all lambda
        functions

        for each hour for a given organization.'
      properties:
        func_count:
          description: Contains the number of different functions for each region
            and AWS account.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        invocations_sum:
          description: Contains the sum of invocations of all functions.
          format: int64
          type: integer
      type: object
    UsageLambdaResponse:
      description: 'Response containing the number of lambda functions and sum of
        the invocations of all lambda functions

        for each hour for a given organization.'
      properties:
        usage:
          description: Get hourly usage for Lambda.
          items:
            $ref: '#/components/schemas/UsageLambdaHour'
          type: array
      type: object
    UsageLogsByIndexHour:
      description: Number of indexed logs for each hour and index for a given organization.
      properties:
        event_count:
          description: The total number of indexed logs for the queried hour.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        index_id:
          description: The index ID for this usage.
          type: string
        index_name:
          description: The user specified name for this index ID.
          type: string
        retention:
          description: The retention period (in days) for this index ID.
          format: int64
          type: integer
      type: object
    UsageLogsByIndexResponse:
      description: Response containing the number of indexed logs for each hour and
        index for a given organization.
      properties:
        usage:
          description: An array of objects regarding hourly usage of logs by index
            response.
          items:
            $ref: '#/components/schemas/UsageLogsByIndexHour'
          type: array
      type: object
    UsageLogsHour:
      description: Hour usage for logs.
      properties:
        billable_ingested_bytes:
          description: Contains the number of billable log bytes ingested.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        indexed_events_count:
          description: Contains the number of log events indexed.
          format: int64
          type: integer
        ingested_events_bytes:
          description: Contains the number of log bytes ingested.
          format: int64
          type: integer
      type: object
    UsageLogsResponse:
      description: Response containing the number of logs for each hour.
      properties:
        usage:
          description: An array of objects regarding hourly usage of logs.
          items:
            $ref: '#/components/schemas/UsageLogsHour'
          type: array
      type: object
    UsageMetricCategory:
      description: Contains the metric category.
      enum:
      - standard
      - custom
      type: string
      x-enum-varnames:
      - STANDARD
      - CUSTOM
    UsageNetworkFlowsHour:
      description: Number of netflow events indexed for each hour for a given organization.
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        indexed_event_count:
          description: Contains the number of netflow events indexed.
          format: int64
          type: integer
      type: object
    UsageNetworkFlowsResponse:
      description: Response containing the number of netflow events indexed for each
        hour for a given organization.
      properties:
        usage:
          description: Get hourly usage for Network Flows.
          items:
            $ref: '#/components/schemas/UsageNetworkFlowsHour'
          type: array
      type: object
    UsageNetworkHostsHour:
      description: Number of active NPM hosts for each hour for a given organization.
      properties:
        host_count:
          description: Contains the number of active NPM hosts.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageNetworkHostsResponse:
      description: Response containing the number of active NPM hosts for each hour
        for a given organization.
      properties:
        usage:
          description: Get hourly usage for NPM hosts.
          items:
            $ref: '#/components/schemas/UsageNetworkHostsHour'
          type: array
      type: object
    UsageRumSessionsHour:
      description: Number of RUM Sessions recorded for each hour for a given organization.
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        session_count:
          description: Contains the number of RUM Sessions.
          format: int64
          type: integer
      type: object
    UsageRumSessionsResponse:
      description: Response containing the number of RUM Sessions for each hour for
        a given organization.
      properties:
        usage:
          description: Get hourly usage for RUM Sessions.
          items:
            $ref: '#/components/schemas/UsageRumSessionsHour'
          type: array
      type: object
    UsageSummaryDate:
      description: Response with hourly report of all data billed by Datadog all organizations.
      properties:
        agent_host_top99p:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current date for all organizations.
          format: int64
          type: integer
        apm_host_top99p:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current date for all organizations.
          format: int64
          type: integer
        aws_host_top99p:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current date for all organizations.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the average of the number of functions that executed
            1 or more times each hour in the current date for all organizations.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Lambda invocations over all hours
            in the current date for all organizations.
          format: int64
          type: integer
        billable_ingested_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for all organizations.
          format: int64
          type: integer
        container_avg:
          description: Shows the average of all distinct containers over all hours
            in the current date for all organizations.
          format: int64
          type: integer
        container_hwm:
          description: Shows the high watermark of all distinct containers over all
            hours in the current date for all organizations.
          format: int64
          type: integer
        custom_ts_avg:
          description: Shows the average number of distinct custom metrics over all
            hours in the current date for all organizations.
          format: int64
          type: integer
        date:
          description: The date for the usage.
          format: date-time
          type: string
        fargate_tasks_count_avg:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current date for all organizations.
          format: int64
          type: integer
        fargate_tasks_count_hwm:
          description: Shows the average of all Fargate tasks over all hours in the
            current date for all organizations.
          format: int64
          type: integer
        gcp_host_top99p:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current date for all organizations.
          format: int64
          type: integer
        indexed_events_count_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current date for all organizations.
          format: int64
          type: integer
        infra_host_top99p:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current date for all organizations.
          format: int64
          type: integer
        ingested_events_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for all organizations.
          format: int64
          type: integer
        netflow_indexed_events_count_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current date for all organizations.
          format: int64
          type: integer
        npm_host_top99p:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current date for all organizations.
          format: int64
          type: integer
        orgs:
          description: Organizations associated with a user.
          items:
            $ref: '#/components/schemas/UsageSummaryDateOrg'
          type: array
        rum_session_count_sum:
          description: Shows the sum of all RUM Sessions over all hours in the current
            date for all organizations
          format: int64
          type: integer
        synthetics_browser_check_calls_count_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current date for all organizations.
          format: int64
          type: integer
        synthetics_check_calls_count_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current date for all organizations.
          format: int64
          type: integer
        trace_search_indexed_events_count_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current date for all organizations.
          format: int64
          type: integer
      type: object
    UsageSummaryDateOrg:
      description: Global hourly report of all data billed by Datadog for a given
        organization.
      properties:
        agent_host_top99p:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current date for the given org.
          format: int64
          type: integer
        apm_host_top99p:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current date for the given org.
          format: int64
          type: integer
        aws_host_top99p:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current date for the given org.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the sum of all AWS Lambda invocations over all hours
            in the current date for the given org.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Lambda invocations over all hours
            in the current date for the given org.
          format: int64
          type: integer
        billable_ingested_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for the given org.
          format: int64
          type: integer
        container_avg:
          description: Shows the average of all distinct containers over all hours
            in the current date for the given org.
          format: int64
          type: integer
        container_hwm:
          description: Shows the high watermark of all distinct containers over all
            hours in the current date for the given org.
          format: int64
          type: integer
        custom_ts_avg:
          description: Shows the average number of distinct custom metrics over all
            hours in the current date for the given org.
          format: int64
          type: integer
        fargate_tasks_count_avg:
          description: The average task count for Fargate.
          format: int64
          type: integer
        fargate_tasks_count_hwm:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current date for the given org.
          format: int64
          type: integer
        gcp_host_top99p:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current date for the given org.
          format: int64
          type: integer
        id:
          description: The organization id.
          type: string
        indexed_events_count_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current date for the given org.
          format: int64
          type: integer
        infra_host_top99p:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current date for the given org.
          format: int64
          type: integer
        ingested_events_bytes_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current date for the given org.
          format: int64
          type: integer
        name:
          description: The organization name.
          type: string
        netflow_indexed_events_count_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current date for the given org.
          format: int64
          type: integer
        npm_host_top99p:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current date for the given org.
          format: int64
          type: integer
        public_id:
          description: The organization public id.
          type: string
        rum_session_count_sum:
          description: Shows the sum of all RUM Sessions over all hours in the current
            date for the given org.
          format: int64
          type: integer
        synthetics_browser_check_calls_count_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current date for the given org.
          format: int64
          type: integer
        synthetics_check_calls_count_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current date for the given org.
          format: int64
          type: integer
        trace_search_indexed_events_count_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current date for the given org.
          format: int64
          type: integer
      type: object
    UsageSummaryResponse:
      description: Response with hourly report of all data billed by Datadog all organizations.
      properties:
        agent_host_top99p_sum:
          description: Shows the 99th percentile of all agent hosts over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        apm_host_top99p_sum:
          description: Shows the 99th percentile of all distinct APM hosts over all
            hours in the current month(s) for all organizations.
          format: int64
          type: integer
        aws_host_top99p_sum:
          description: Shows the 99th percentile of all AWS hosts over all hours in
            the current month(s) for all organizations.
          format: int64
          type: integer
        aws_lambda_func_count:
          description: Shows the average of the number of functions that executed
            1 or more times each hour in the current month(s) for all organizations.
          format: int64
          type: integer
        aws_lambda_invocations_sum:
          description: Shows the sum of all AWS Lambda invocations over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        azure_host_top99p_sum:
          description: Shows the 99th percentile of all Azure hosts over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        billable_ingested_bytes_agg_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current month(s) for all organizations.
          format: int64
          type: integer
        container_avg_sum:
          description: Shows the average of all distinct containers over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        container_hwm_sum:
          description: Shows the high watermark of all distinct containers over all
            hours in the current month(s) for all organizations.
          format: int64
          type: integer
        custom_ts_sum:
          description: Shows the average number of distinct custom metrics over all
            hours in the current month(s) for all organizations.
          format: int64
          type: integer
        end_date:
          description: Shows the last date of usage in the current month(s) for all
            organizations.
          format: date-time
          type: string
        fargate_tasks_count_avg_sum:
          description: Shows the average of all Fargate tasks over all hours in the
            current month(s) for all organizations.
          format: int64
          type: integer
        fargate_tasks_count_hwm_sum:
          description: Shows the high watermark of all Fargate tasks over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        gcp_host_top99p_sum:
          description: Shows the 99th percentile of all GCP hosts over all hours in
            the current month(s) for all organizations.
          format: int64
          type: integer
        indexed_events_count_agg_sum:
          description: Shows the sum of all log events indexed over all hours in the
            current month(s) for all organizations.
          format: int64
          type: integer
        infra_host_top99p_sum:
          description: Shows the 99th percentile of all distinct infrastructure hosts
            over all hours in the current month(s) for all organizations.
          format: int64
          type: integer
        ingested_events_bytes_agg_sum:
          description: Shows the sum of all log bytes ingested over all hours in the
            current month(s) for all organizations.
          format: int64
          type: integer
        last_updated:
          description: Shows the the most recent hour in the current month(s) for
            all organizations for which all usages were calculated.
          format: date-time
          type: string
        netflow_indexed_events_count_agg_sum:
          description: Shows the sum of all Network flows indexed over all hours in
            the current month(s) for all organizations.
          format: int64
          type: integer
        npm_host_top99p_sum:
          description: Shows the 99th percentile of all distinct Networks hosts over
            all hours in the current month(s) for all organizations.
          format: int64
          type: integer
        rum_session_count_agg_sum:
          description: Shows the sum of all RUM Sessions over all hours in the current
            month(s) for all organizations.
          format: int64
          type: integer
        start_date:
          description: Shows the first date of usage in the current month(s) for all
            organizations.
          format: date-time
          type: string
        synthetics_browser_check_calls_count_agg_sum:
          description: Shows the sum of all Synthetic browser tests over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        synthetics_check_calls_count_agg_sum:
          description: Shows the sum of all Synthetic API tests over all hours in
            the current month(s) for all organizations.
          format: int64
          type: integer
        trace_search_indexed_events_count_agg_sum:
          description: Shows the sum of all analyzed spans indexed over all hours
            in the current month(s) for all organizations.
          format: int64
          type: integer
        usage:
          description: An array of objects regarding hourly usage.
          items:
            $ref: '#/components/schemas/UsageSummaryDate'
          type: array
      type: object
    UsageSyntheticsAPIHour:
      description: Number of Synthetics API tests run for each hour for a given organization.
      properties:
        check_calls_count:
          description: Contains the number of Synthetics API tests run.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageSyntheticsAPIResponse:
      description: Response containing the number of Synthetics API tests run for
        each hour for a given organization.
      properties:
        usage:
          description: Get hourly usage for Synthetics API tests.
          items:
            $ref: '#/components/schemas/UsageSyntheticsAPIHour'
          type: array
      type: object
    UsageSyntheticsBrowserHour:
      description: Number of Synthetics Browser tests run for each hour for a given
        organization.
      properties:
        browser_check_calls_count:
          description: Contains the number of Synthetics Browser tests run.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageSyntheticsBrowserResponse:
      description: Response containing the number of Synthetics Browser tests run
        for each hour for a given organization.
      properties:
        usage:
          description: Get hourly usage for Synthetics Browser tests.
          items:
            $ref: '#/components/schemas/UsageSyntheticsBrowserHour'
          type: array
      type: object
    UsageSyntheticsHour:
      description: Number of Synthetics API tests run for each hour for a given organization.
      properties:
        check_calls_count:
          description: Contains the number of Synthetics API tests run.
          format: int64
          type: integer
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
      type: object
    UsageSyntheticsResponse:
      description: Response containing the number of Synthetics API tests run for
        each hour for a given organization.
      properties:
        usage:
          description: Array with the number of hourly Synthetics test run for a given
            organization.
          items:
            $ref: '#/components/schemas/UsageSyntheticsHour'
          type: array
      type: object
    UsageTimeseriesHour:
      description: The hourly usage of timeseries.
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        num_custom_input_timeseries:
          description: Contains the number of custom metrics that are inputs for aggregations
            (metric configured is custom).
          format: int64
          type: integer
        num_custom_output_timeseries:
          description: Contains the number of custom metrics that are outputs for
            aggregations (metric configured is custom).
          format: int64
          type: integer
        num_custom_timeseries:
          description: Contains the number of non-aggregation custom metrics.
          format: int64
          type: integer
      type: object
    UsageTimeseriesResponse:
      description: Response containing hourly usage of timeseries.
      properties:
        usage:
          description: An array of objects regarding hourly usage of timeseries.
          items:
            $ref: '#/components/schemas/UsageTimeseriesHour'
          type: array
      type: object
    UsageTopAvgMetricsHour:
      description: Number of hourly recorded custom metrics for a given organization.
      properties:
        avg_metric_hour:
          description: Average number of timeseries per hour in which the metric occurs.
          format: int64
          type: integer
        max_metric_hour:
          description: Maximum number of timeseries per hour in which the metric occurs.
          format: int64
          type: integer
        metric_category:
          $ref: '#/components/schemas/UsageMetricCategory'
        metric_name:
          description: Contains the custom metric name.
          type: string
      type: object
    UsageTopAvgMetricsResponse:
      description: Response containing the number of hourly recorded custom metrics
        for a given organization.
      properties:
        usage:
          description: Number of hourly recorded custom metrics for a given organization.
          items:
            $ref: '#/components/schemas/UsageTopAvgMetricsHour'
          type: array
      type: object
    UsageTraceHour:
      description: The hours of trace usage.
      properties:
        hour:
          description: The hour for the usage.
          format: date-time
          type: string
        indexed_events_count:
          description: Contains the number of Analyzed Spans indexed.
          format: int64
          type: integer
      type: object
    UsageTraceResponse:
      description: A response containing trace usage.
      properties:
        usage:
          description: Array with the number of hourly traces indexed for a given
            organization.
          items:
            $ref: '#/components/schemas/UsageTraceHour'
          type: array
      type: object
    User:
      description: Create, edit, and disable users.
      properties:
        access_role:
          $ref: '#/components/schemas/AccessRole'
        disabled:
          description: The new disabled status of the user.
          example: false
          type: boolean
        email:
          description: The new email of the user.
          example: test@datadoghq.com
          format: email
          type: string
        handle:
          description: The user handle, must be a valid email.
          example: test@datadoghq.com
          format: email
          type: string
        icon:
          description: Gravatar icon associated to the user.
          example: /path/to/matching/gravatar/icon
          readOnly: true
          type: string
        name:
          description: The name of the user.
          example: test user
          type: string
        verified:
          description: Whether or not the user logged in Datadog at least once.
          example: true
          readOnly: true
          type: boolean
      type: object
    UserDisableResponse:
      description: Array of user disabled for a given organization.
      properties:
        message:
          description: Information pertaining to a user disabled for a given organization.
          type: string
      type: object
    UserListResponse:
      description: Array of Datadog users for a given organization.
      properties:
        users:
          description: Array of users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserResponse:
      description: A Datadog User.
      properties:
        user:
          $ref: '#/components/schemas/User'
      type: object
    WebhooksIntegration:
      description: Datadog-Webhooks integration.
      properties:
        custom_headers:
          additionalProperties:
            description: Additional properties for custom headers.
            type: string
          description: 'If `null`, uses no header.

            If given a JSON payload, these will be headers attached to your webhook.'
          nullable: true
          type: object
        encode_as:
          $ref: '#/components/schemas/WebhooksIntegrationEncoding'
        name:
          description: 'The name of the webhook. It corresponds with `<WEBHOOK_NAME>`.

            Learn more on how to use it in

            [monitor notifications](https://docs.datadoghq.com/monitors/notifications).'
          example: WEBHOOK_NAME
          type: string
        payload:
          description: 'If `null`, uses default payload.

            If given a JSON payload, the webhook will return the payload

            specified by the given payload.

            [Using those variables](https://docs.datadoghq.com/integrations/webhooks/#usage).'
          nullable: true
          type: object
        url:
          description: URL of the webhook.
          example: https://example.com/webhook
          type: string
      required:
      - name
      - url
      type: object
    WebhooksIntegrationCustomVariable:
      description: Custom variable for Webhook integration.
      properties:
        is_secret:
          description: 'Make custom variable is secret or not.

            If the custom variable is secret, it returns `null` for

            the `<CUSTOM_VARIABLE_VALUE>` in the response payload.'
          type: boolean
        name:
          description: The name of the webhook. It corresponds with `<CUSTOM_VARIABLE_NAME>`.
          example: CUSTOM_VARIABLE_NAME
          type: string
        value:
          description: Value of the custom variable.
          example: CUSTOM_VARIABLE_VALUE
          nullable: true
          type: string
      required:
      - name
      - value
      - is_secret
      type: object
    WebhooksIntegrationCustomVariableUpdateRequest:
      description: 'Update request of a custom variable object.


        *All properties are optional.*'
      properties:
        is_secret:
          description: 'Make custom variable is secret or not.

            If the custom variable is secret, it returns `null` for

            the `<CUSTOM_VARIABLE_VALUE>` in the response payload.'
          type: boolean
        name:
          description: The name of the webhook. It corresponds with `<CUSTOM_VARIABLE_NAME>`.
          example: CUSTOM_VARIABLE_NAME
          type: string
        value:
          description: Value of the custom variable.
          example: CUSTOM_VARIABLE_VALUE
          nullable: true
          type: string
      type: object
    WebhooksIntegrationEncoding:
      default: json
      description: Encoding type. Can be given either `json` or `form`.
      enum:
      - json
      - form
      type: string
      x-enum-varnames:
      - JSON
      - FORM
    WebhooksIntegrationUpdateRequest:
      description: 'Update request of a Webhooks integration object.


        *All properties are optional.*'
      properties:
        custom_headers:
          additionalProperties:
            description: Additional properties for custom headers.
            type: string
          description: 'If `null`, uses no header.

            If given a JSON payload, these will be headers attached to your webhook.'
          type: object
        encode_as:
          $ref: '#/components/schemas/WebhooksIntegrationEncoding'
        name:
          description: 'The name of the webhook. It corresponds with `<WEBHOOK_NAME>`.

            Learn more on how to use it in

            [monitor notifications](https://docs.datadoghq.com/monitors/notifications).'
          example: WEBHOOK_NAME
          type: string
        payload:
          description: 'If `null`, uses default payload.

            If given a JSON payload, the webhook will return the payload

            specified by the given payload.

            [Using those variables](https://docs.datadoghq.com/integrations/webhooks/#usage).'
          nullable: true
          type: object
        url:
          description: URL of the webhook.
          example: https://example.com/webhook
          type: string
      type: object
    Widget:
      description: 'Information about widget.


        Note: The `layout` property is required for widgets in dashboards with `free`
        `layout_type` only.'
      properties:
        definition:
          $ref: '#/components/schemas/WidgetDefinition'
        id:
          description: ID of the widget.
          format: int64
          type: integer
        layout:
          $ref: '#/components/schemas/WidgetLayout'
      required:
      - definition
      type: object
    WidgetAggregator:
      description: Aggregator used for the request.
      enum:
      - avg
      - last
      - max
      - min
      - sum
      type: string
      x-enum-varnames:
      - AVERAGE
      - LAST
      - MAXIMUM
      - MINIMUM
      - SUM
    WidgetAxis:
      description: Axis controls for the widget.
      properties:
        include_zero:
          description: True includes zero.
          type: boolean
        label:
          description: The label of the axis to display on the graph.
          type: string
        max:
          default: auto
          description: Specifies the maximum value to show on the y-axis. It takes
            a number, or auto for default behavior.
          type: string
        min:
          default: auto
          description: Specifies minimum value to show on the y-axis. It takes a number,
            or auto for default behavior.
          type: string
        scale:
          default: linear
          description: Specifies the scale type. Possible values are `linear`, `log`,
            `sqrt`, `pow##` (e.g. `pow2`, `pow0.5` etc.).
          type: string
      type: object
    WidgetChangeType:
      description: Show the absolute or the relative change.
      enum:
      - absolute
      - relative
      type: string
      x-enum-varnames:
      - ABSOLUTE
      - RELATIVE
    WidgetColorPreference:
      description: Which color to use on the widget.
      enum:
      - background
      - text
      type: string
      x-enum-varnames:
      - BACKGROUND
      - TEXT
    WidgetComparator:
      description: Comparator to apply.
      enum:
      - '>'
      - '>='
      - <
      - <=
      type: string
      x-enum-varnames:
      - GREATER_THAN
      - GREATER_THAN_OR_EQUAL_TO
      - LESS_THAN
      - LESS_THAN_OR_EQUAL_TO
    WidgetCompareTo:
      description: Timeframe used for the change comparison.
      enum:
      - hour_before
      - day_before
      - week_before
      - month_before
      type: string
      x-enum-varnames:
      - HOUR_BEFORE
      - DAY_BEFORE
      - WEEK_BEFORE
      - MONTH_BEFORE
    WidgetConditionalFormat:
      description: Define a conditional format for the widget.
      properties:
        comparator:
          $ref: '#/components/schemas/WidgetComparator'
        custom_bg_color:
          description: Color palette to apply to the background, same values available
            as palette.
          type: string
        custom_fg_color:
          description: Color palette to apply to the foreground, same values available
            as palette.
          type: string
        hide_value:
          description: True hides values.
          type: boolean
        image_url:
          description: Displays an image as the background.
          type: string
        metric:
          description: Metric from the request to correlate this conditional format
            with.
          type: string
        palette:
          $ref: '#/components/schemas/WidgetPalette'
        timeframe:
          description: Defines the displayed timeframe.
          type: string
        value:
          description: Value for the comparator.
          format: double
          type: number
      required:
      - comparator
      - value
      - palette
      type: object
    WidgetDefinition:
      description: '[Definition of the widget](https://docs.datadoghq.com/dashboards/widgets/).'
      discriminator:
        mapping:
          alert_graph: '#/components/schemas/AlertGraphWidgetDefinition'
          alert_value: '#/components/schemas/AlertValueWidgetDefinition'
          change: '#/components/schemas/ChangeWidgetDefinition'
          check_status: '#/components/schemas/CheckStatusWidgetDefinition'
          distribution: '#/components/schemas/DistributionWidgetDefinition'
          event_stream: '#/components/schemas/EventStreamWidgetDefinition'
          event_timeline: '#/components/schemas/EventTimelineWidgetDefinition'
          free_text: '#/components/schemas/FreeTextWidgetDefinition'
          group: '#/components/schemas/GroupWidgetDefinition'
          heatmap: '#/components/schemas/HeatMapWidgetDefinition'
          hostmap: '#/components/schemas/HostMapWidgetDefinition'
          iframe: '#/components/schemas/IFrameWidgetDefinition'
          image: '#/components/schemas/ImageWidgetDefinition'
          log_stream: '#/components/schemas/LogStreamWidgetDefinition'
          manage_status: '#/components/schemas/MonitorSummaryWidgetDefinition'
          note: '#/components/schemas/NoteWidgetDefinition'
          query_table: '#/components/schemas/TableWidgetDefinition'
          query_value: '#/components/schemas/QueryValueWidgetDefinition'
          scatterplot: '#/components/schemas/ScatterPlotWidgetDefinition'
          servicemap: '#/components/schemas/ServiceMapWidgetDefinition'
          slo: '#/components/schemas/SLOWidgetDefinition'
          timeseries: '#/components/schemas/TimeseriesWidgetDefinition'
          toplist: '#/components/schemas/ToplistWidgetDefinition'
          trace_service: '#/components/schemas/ServiceSummaryWidgetDefinition'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/AlertGraphWidgetDefinition'
      - $ref: '#/components/schemas/AlertValueWidgetDefinition'
      - $ref: '#/components/schemas/ChangeWidgetDefinition'
      - $ref: '#/components/schemas/CheckStatusWidgetDefinition'
      - $ref: '#/components/schemas/DistributionWidgetDefinition'
      - $ref: '#/components/schemas/EventStreamWidgetDefinition'
      - $ref: '#/components/schemas/EventTimelineWidgetDefinition'
      - $ref: '#/components/schemas/FreeTextWidgetDefinition'
      - $ref: '#/components/schemas/GroupWidgetDefinition'
      - $ref: '#/components/schemas/HeatMapWidgetDefinition'
      - $ref: '#/components/schemas/HostMapWidgetDefinition'
      - $ref: '#/components/schemas/IFrameWidgetDefinition'
      - $ref: '#/components/schemas/ImageWidgetDefinition'
      - $ref: '#/components/schemas/LogStreamWidgetDefinition'
      - $ref: '#/components/schemas/MonitorSummaryWidgetDefinition'
      - $ref: '#/components/schemas/NoteWidgetDefinition'
      - $ref: '#/components/schemas/QueryValueWidgetDefinition'
      - $ref: '#/components/schemas/ScatterPlotWidgetDefinition'
      - $ref: '#/components/schemas/SLOWidgetDefinition'
      - $ref: '#/components/schemas/ServiceMapWidgetDefinition'
      - $ref: '#/components/schemas/ServiceSummaryWidgetDefinition'
      - $ref: '#/components/schemas/TableWidgetDefinition'
      - $ref: '#/components/schemas/TimeseriesWidgetDefinition'
      - $ref: '#/components/schemas/ToplistWidgetDefinition'
      type: object
    WidgetDisplayType:
      description: Type of display to use for the request.
      enum:
      - area
      - bars
      - line
      type: string
      x-enum-varnames:
      - AREA
      - BARS
      - LINE
    WidgetEvent:
      description: 'Event overlay control options.


        See the dedicated [Events JSON schema documentation](https://docs.datadoghq.com/dashboards/graphing_json/widget_json/#events-schema)

        to learn how to build the `<EVENTS_SCHEMA>`.'
      properties:
        q:
          description: Query definition.
          type: string
        tags_execution:
          description: The execution method for multi-value filters.
          type: string
      required:
      - q
      type: object
    WidgetEventSize:
      description: Size to use to display an event.
      enum:
      - s
      - l
      type: string
      x-enum-varnames:
      - SMALL
      - LARGE
    WidgetFieldSort:
      description: Which column and order to sort by
      properties:
        column:
          description: Facet path for the column
          type: string
        order:
          $ref: '#/components/schemas/WidgetSort'
      required:
      - column
      - order
      type: object
    WidgetGrouping:
      description: The kind of grouping to use.
      enum:
      - check
      - cluster
      type: string
      x-enum-varnames:
      - CHECK
      - CLUSTER
    WidgetImageSizing:
      description: How to size the image on the widget.
      enum:
      - zoom
      - fit
      - center
      type: string
      x-enum-varnames:
      - ZOOM
      - FIT
      - CENTER
    WidgetLayout:
      description: The layout for a widget on a free dashboard.
      properties:
        height:
          description: The height of the widget. Should be a non-negative integer.
          format: int64
          minimum: 0
          type: integer
        width:
          description: The width of the widget. Should be a non-negative integer.
          format: int64
          minimum: 0
          type: integer
        x:
          description: The position of the widget on the x (horizontal) axis. Should
            be a non-negative integer.
          format: int64
          minimum: 0
          type: integer
        y:
          description: The position of the widget on the y (vertical) axis. Should
            be a non-negative integer.
          format: int64
          minimum: 0
          type: integer
      required:
      - x
      - y
      - width
      - height
      type: object
    WidgetLayoutType:
      description: Layout type of the group.
      enum:
      - ordered
      type: string
      x-enum-varnames:
      - ORDERED
    WidgetLegendSize:
      description: Available legend sizes for a widget.
      enum:
      - '2'
      - '4'
      - '8'
      - '16'
      - auto
      type: string
      x-enum-varnames:
      - TWO
      - FOUR
      - EIGHT
      - SIXTEEN
      - AUTO
    WidgetLineType:
      description: Type of lines displayed.
      enum:
      - dashed
      - dotted
      - solid
      type: string
      x-enum-varnames:
      - DASHED
      - DOTTED
      - SOLID
    WidgetLineWidth:
      description: Width of line displayed.
      enum:
      - normal
      - thick
      - thin
      type: string
      x-enum-varnames:
      - NORMAL
      - THICK
      - THIN
    WidgetLiveSpan:
      description: The available timeframes depend on the widget you are using.
      enum:
      - 1m
      - 5m
      - 10m
      - 15m
      - 30m
      - 1h
      - 4h
      - 1d
      - 2d
      - 1w
      - 1mo
      - 3mo
      - 6mo
      - 1y
      - alert
      type: string
      x-enum-varnames:
      - PAST_ONE_MINUTE
      - PAST_FIVE_MINUTES
      - PAST_TEN_MINUTES
      - PAST_FIFTEEN_MINUTES
      - PAST_THIRTY_MINUTES
      - PAST_ONE_HOUR
      - PAST_FOUR_HOURS
      - PAST_ONE_DAY
      - PAST_TWO_DAYS
      - PAST_ONE_WEEK
      - PAST_ONE_MONTH
      - PAST_THREE_MONTHS
      - PAST_SIX_MONTHS
      - PAST_ONE_YEAR
      - ALERT
    WidgetMargin:
      description: Size of the margins around the image.
      enum:
      - small
      - large
      type: string
      x-enum-varnames:
      - SMALL
      - LARGE
    WidgetMarker:
      description: Markers allow you to add visual conditional formatting for your
        graphs.
      properties:
        display_type:
          description: "Combination of:\n  - A severity error, warning, ok, or info\n\
            \  - A line type: dashed, solid, or bold\n"
          example: error dashed
          type: string
        label:
          description: Label to display over the marker.
          example: Error threshold
          type: string
        time:
          description: Timestamp for the widget.
          type: string
        value:
          description: Value to apply. Can be a single value y = 15 or a range of
            values 0 < y < 10.
          example: y = 15
          type: string
      required:
      - value
      type: object
    WidgetMessageDisplay:
      description: Amount of log lines to display
      enum:
      - inline
      - expanded-md
      - expanded-lg
      type: string
      x-enum-varnames:
      - INLINE
      - EXPANDED_MEDIUM
      - EXPANDED_LARGE
    WidgetMonitorSummaryDisplayFormat:
      description: What to display on the widget.
      enum:
      - counts
      - countsAndList
      - list
      type: string
      x-enum-varnames:
      - COUNTS
      - COUNTS_AND_LIST
      - LIST
    WidgetNodeType:
      description: Which type of node to use in the map.
      enum:
      - host
      - container
      type: string
      x-enum-varnames:
      - HOST
      - CONTAINER
    WidgetOrderBy:
      description: What to order by.
      enum:
      - change
      - name
      - present
      - past
      type: string
      x-enum-varnames:
      - CHANGE
      - NAME
      - PRESENT
      - PAST
    WidgetPalette:
      description: Color palette to apply.
      enum:
      - blue
      - custom_bg
      - custom_image
      - custom_text
      - gray_on_white
      - grey
      - green
      - orange
      - red
      - red_on_white
      - white_on_gray
      - white_on_green
      - green_on_white
      - white_on_red
      - white_on_yellow
      - yellow_on_white
      type: string
      x-enum-varnames:
      - BLUE
      - CUSTOM_BACKGROUND
      - CUSTOM_IMAGE
      - CUSTOM_TEXT
      - GRAY_ON_WHITE
      - GREY
      - GREEN
      - ORANGE
      - RED
      - RED_ON_WHITE
      - WHITE_ON_GRAY
      - WHITE_ON_GREEN
      - GREEN_ON_WHITE
      - WHITE_ON_RED
      - WHITE_ON_YELLOW
      - YELLOW_ON_WHITE
    WidgetServiceSummaryDisplayFormat:
      description: Number of columns to display.
      enum:
      - one_column
      - two_column
      type: string
      x-enum-varnames:
      - ONE_COLUMN
      - TWO_COLUMN
    WidgetSizeFormat:
      description: Size of the widget.
      enum:
      - small
      - medium
      - large
      type: string
      x-enum-varnames:
      - SMALL
      - MEDIUM
      - LARGE
    WidgetSort:
      description: Widget sorting methods.
      enum:
      - asc
      - desc
      example: desc
      type: string
      x-enum-varnames:
      - ASCENDING
      - DESCENDING
    WidgetStyle:
      description: Widget style definition.
      properties:
        palette:
          description: Color palette to apply to the widget.
          type: string
      type: object
    WidgetSummaryType:
      description: Which summary type should be used.
      enum:
      - monitors
      - groups
      - combined
      type: string
      x-enum-varnames:
      - MONITORS
      - GROUPS
      - COMBINED
    WidgetTextAlign:
      description: How to align the text on the widget.
      enum:
      - center
      - left
      - right
      type: string
      x-enum-varnames:
      - CENTER
      - LEFT
      - RIGHT
    WidgetTickEdge:
      description: Define how you want to align the text on the widget.
      enum:
      - bottom
      - left
      - right
      - top
      type: string
      x-enum-varnames:
      - BOTTOM
      - LEFT
      - RIGHT
      - TOP
    WidgetTime:
      description: Time setting for the widget.
      properties:
        live_span:
          $ref: '#/components/schemas/WidgetLiveSpan'
      type: object
    WidgetTimeWindows:
      description: Define a time window.
      enum:
      - 7d
      - 30d
      - 90d
      - week_to_date
      - previous_week
      - month_to_date
      - previous_month
      type: string
      x-enum-varnames:
      - SEVEN_DAYS
      - THIRTY_DAYS
      - NINETY_DAYS
      - WEEK_TO_DATE
      - PREVIOUS_WEEK
      - MONTH_TO_DATE
      - PREVIOUS_MONTH
    WidgetViewMode:
      description: Define how you want the SLO to be displayed.
      enum:
      - overall
      - component
      - both
      type: string
      x-enum-varnames:
      - OVERALL
      - COMPONENT
      - BOTH
    WidgetVizType:
      description: Whether to display the Alert Graph as a timeseries or a top list.
      enum:
      - timeseries
      - toplist
      type: string
      x-enum-varnames:
      - TIMESERIES
      - TOPLIST
  securitySchemes:
    apiKeyAuth:
      description: Your Datadog API Key.
      in: header
      name: DD-API-KEY
      type: apiKey
      x-env-name: DD_CLIENT_API_KEY
    apiKeyAuthQuery:
      description: Deprecated API Key as query argument.
      in: query
      name: api_key
      type: apiKey
      x-auth-id-alias: apiKeyAuth
      x-env-name: DD_CLIENT_API_KEY
    appKeyAuth:
      description: Your Datadog APP Key.
      in: header
      name: DD-APPLICATION-KEY
      type: apiKey
      x-env-name: DD_CLIENT_APP_KEY
    appKeyAuthQuery:
      description: Deprecated APP Key as query argument.
      in: query
      name: application_key
      type: apiKey
      x-auth-id-alias: appKeyAuth
      x-env-name: DD_CLIENT_APP_KEY
info:
  contact:
    email: support@datadoghq.com
    name: Datadog Support
    url: https://www.datadoghq.com/support/
  description: Collection of all Datadog Public endpoints.
  title: Datadog API Collection
  version: '1.0'
openapi: 3.0.0
paths:
  /:
    get:
      description: Get information about Datadog IP ranges.
      operationId: GetIPRanges
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPRanges'
          description: List of IP ranges.
      security: []
      servers:
      - url: https://{subdomain}.{site}
        variables:
          site:
            default: datadoghq.com
            description: The regional site for our customers.
            enum:
            - datadoghq.com
            - datadoghq.eu
          subdomain:
            default: ip-ranges
            description: The subdomain where the API is deployed.
      - url: '{protocol}://{name}'
        variables:
          name:
            default: ip-ranges.datadoghq.com
            description: Full site DNS name.
          protocol:
            default: https
            description: The protocol for accessing the API.
      summary: List IP Ranges
      tags:
      - IP Ranges
  /api/v1/api_key:
    get:
      description: Get all API keys available for your account.
      operationId: ListAPIKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all API keys
      tags:
      - Key Management
    post:
      description: Creates an API key with a given name.
      operationId: CreateAPIKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create an API key
      tags:
      - Key Management
      x-codegen-request-body-name: body
  /api/v1/api_key/{key}:
    delete:
      description: Delete a given API key.
      operationId: DeleteAPIKey
      parameters:
      - description: The specific API key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an API key
      tags:
      - Key Management
    get:
      description: Get a given API key.
      operationId: GetAPIKey
      parameters:
      - description: The specific API key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get API key
      tags:
      - Key Management
    put:
      description: Edit an API key name.
      operationId: UpdateAPIKey
      parameters:
      - description: The specific API key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Edit an API key
      tags:
      - Key Management
      x-codegen-request-body-name: body
  /api/v1/application_key:
    get:
      description: Get all application keys available for your Datadog account.
      operationId: ListApplicationKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all application keys
      tags:
      - Key Management
    post:
      description: Create an application key with a given name.
      operationId: CreateApplicationKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationKey'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Conflict
      summary: Create an application key
      tags:
      - Key Management
      x-codegen-request-body-name: body
  /api/v1/application_key/{key}:
    delete:
      description: Delete a given application key.
      operationId: DeleteApplicationKey
      parameters:
      - description: The specific APP key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete an application key
      tags:
      - Key Management
    get:
      description: Get a given application key.
      operationId: GetApplicationKey
      parameters:
      - description: The specific APP key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get an application key
      tags:
      - Key Management
    put:
      description: Edit an application key name.
      operationId: UpdateApplicationKey
      parameters:
      - description: The specific APP key you are working with.
        in: path
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationKey'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationKeyResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Conflict
      summary: Edit an application key
      tags:
      - Key Management
      x-codegen-request-body-name: body
  /api/v1/check_run:
    post:
      description: 'Submit a list of Service Checks.


        **Note**: A valid API key is required.'
      operationId: SubmitServiceCheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceChecks'
        description: Service Check request body.
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Payload too large
      security:
      - apiKeyAuthQuery: []
      summary: Submit a Service Check
      tags:
      - Service Checks
      x-codegen-request-body-name: body
  /api/v1/dashboard:
    get:
      description: Get all dashboards.
      operationId: ListDashboards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Get all dashboards
      tags:
      - Dashboards
    post:
      description: Create a dashboard using the specified options.
      operationId: CreateDashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        description: Create a dashboard request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Create a new dashboard
      tags:
      - Dashboards
      x-codegen-request-body-name: body
  /api/v1/dashboard/lists/manual:
    get:
      description: Fetch all of your existing dashboard list definitions.
      operationId: ListDashboardLists
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all dashboard lists
      tags:
      - Dashboard Lists
    post:
      description: Create an empty dashboard list.
      operationId: CreateDashboardList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardList'
        description: Create a dashboard list request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
  /api/v1/dashboard/lists/manual/{list_id}:
    delete:
      description: Delete a dashboard list.
      operationId: DeleteDashboardList
      parameters:
      - description: ID of the dashboard list to delete.
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardListDeleteResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Delete a dashboard list
      tags:
      - Dashboard Lists
    get:
      description: Fetch an existing dashboard list's definition.
      operationId: GetDashboardList
      parameters:
      - description: ID of the dashboard list to fetch.
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get a dashboard list
      tags:
      - Dashboard Lists
    put:
      description: Update the name of a dashboard list.
      operationId: UpdateDashboardList
      parameters:
      - description: ID of the dashboard list to update.
        in: path
        name: list_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardList'
        description: Update a dashboard list request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardList'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update a dashboard list
      tags:
      - Dashboard Lists
      x-codegen-request-body-name: body
  /api/v1/dashboard/{dashboard_id}:
    delete:
      description: Delete a dashboard using the specified ID.
      operationId: DeleteDashboard
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDeleteResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Dashboards Not Found
      summary: Delete a dashboard
      tags:
      - Dashboards
    get:
      description: Get a dashboard using the specified ID.
      operationId: GetDashboard
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get a dashboard
      tags:
      - Dashboards
    put:
      description: Update a dashboard using the specified ID.
      operationId: UpdateDashboard
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboard_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
        description: Update Dashboard request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Update a dashboard
      tags:
      - Dashboards
      x-codegen-request-body-name: body
  /api/v1/downtime:
    get:
      description: Get all scheduled downtimes.
      operationId: ListDowntimes
      parameters:
      - description: Only return downtimes that are active when the request is made.
        in: query
        name: current_only
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Downtime'
                type: array
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all downtimes
      tags:
      - Downtimes
    post:
      description: Schedule a downtime.
      operationId: CreateDowntime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime'
        description: Schedule a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Schedule a downtime
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/downtime/cancel/by_scope:
    post:
      description: Delete all downtimes that match the scope of `X`.
      operationId: CancelDowntimesByScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelDowntimesByScopeRequest'
        description: Scope to cancel downtimes for.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanceledDowntimesIds'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtimes not found
      summary: Cancel downtimes by scope
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/downtime/{downtime_id}:
    delete:
      description: Cancel a downtime.
      operationId: CancelDowntime
      parameters:
      - description: ID of the downtime to cancel.
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
      summary: Cancel a downtime
      tags:
      - Downtimes
    get:
      description: Get downtime detail by `downtime_id`.
      operationId: GetDowntime
      parameters:
      - description: ID of the downtime to fetch.
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
      summary: Get a downtime
      tags:
      - Downtimes
    put:
      description: Update a single downtime by `downtime_id`.
      operationId: UpdateDowntime
      parameters:
      - description: ID of the downtime to update.
        in: path
        name: downtime_id
        required: true
        schema:
          example: 123456
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Downtime'
        description: Update a downtime request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Downtime'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Downtime not found
      summary: Update a downtime
      tags:
      - Downtimes
      x-codegen-request-body-name: body
  /api/v1/events:
    get:
      description: "The event stream can be queried and filtered by time, priority,\
        \ sources and tags.\n\n**Note**: If the event you\u2019re querying contains\
        \ markdown formatting of any kind, you may see characters such as %,\\,n in\
        \ your output."
      operationId: ListEvents
      parameters:
      - description: POSIX timestamp.
        in: query
        name: start
        required: true
        schema:
          format: int64
          type: integer
      - description: POSIX timestamp.
        in: query
        name: end
        required: true
        schema:
          format: int64
          type: integer
      - description: Priority of your events, either `low` or `normal`.
        in: query
        name: priority
        required: false
        schema:
          $ref: '#/components/schemas/EventPriority'
      - description: A comma separated string of sources.
        in: query
        name: sources
        schema:
          type: string
      - description: A comma separated list indicating what tags, if any, should be
          used to filter the list of monitors by scope.
        example: host:host0
        in: query
        name: tags
        required: false
        schema:
          type: string
      - description: 'Set unaggregated to `true` to return all events within the specified
          [`start`,`end`] timeframe.

          Otherwise if an event is aggregated to a parent event with a timestamp outside
          of the timeframe,

          it won''t be available in the output.'
        in: query
        name: unaggregated
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Query the event stream
      tags:
      - Events
    post:
      description: 'This endpoint allows you to post events to the stream.

        Tag them, set priority and event aggregate them with other events.'
      operationId: CreateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Event request object
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
      security:
      - apiKeyAuthQuery: []
      summary: Post an event
      tags:
      - Events
      x-codegen-request-body-name: body
  /api/v1/events/{event_id}:
    get:
      description: "This endpoint allows you to query for event details.\n\n**Note**:\
        \ If the event you\u2019re querying contains markdown formatting of any kind,\n\
        you may see characters such as `%`,`\\`,`n` in your output."
      operationId: GetEvent
      parameters:
      - description: The ID of the event.
        in: path
        name: event_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get an event
      tags:
      - Events
  /api/v1/graph/embed:
    get:
      description: Gets a list of previously created embeddable graphs.
      operationId: ListEmbeddableGraphs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddableGraphs'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Get all embeds
      tags:
      - Embeddable Graphs
    post:
      description: 'Creates a new embeddable graph.


        Note: If an embed already exists for the exact same query in a given organization,

        the older embed is returned instead of creating a new embed.


        If you are interested in using template variables, see

        [Embeddable Graphs with Template Variables](https://docs.datadoghq.com/dashboards/faq/embeddable-graphs-with-template-variables).'
      operationId: CreateEmbeddableGraph
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddableGraphPayload'
        description: Embeddable Graph body
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddableGraph'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Create embed
      tags:
      - Embeddable Graphs
      x-codegen-request-body-name: body
  /api/v1/graph/embed/{embed_id}:
    get:
      description: Get the HTML fragment for a previously generated embed with `embed_id`.
      operationId: GetEmbeddableGraph
      parameters:
      - description: Token of the embed.
        in: path
        name: embed_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddableGraph'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get specific embed
      tags:
      - Embeddable Graphs
  /api/v1/graph/embed/{embed_id}/enable:
    get:
      description: Enable a specified embed.
      operationId: EnableEmbeddableGraph
      parameters:
      - description: ID of the embed.
        in: path
        name: embed_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A JSON containing the success message
                properties:
                  success:
                    description: Message.
                    example: Embed 5f585b01c81b12ecdf5f40df0382738d0919170639985d3df5e2fc4232865b0c
                      successfully enabled.
                    type: string
                type: object
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Enable embed
      tags:
      - Embeddable Graphs
  /api/v1/graph/embed/{embed_id}/revoke:
    get:
      description: Revoke a specified embed.
      operationId: RevokeEmbeddableGraph
      parameters:
      - description: ID of the embed.
        in: path
        name: embed_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: A JSON containing the success message
                properties:
                  success:
                    description: Message.
                    example: Embed 5f585b01c81b12ecdf5f40df0382738d0919170639985d3df5e2fc4232865b0c
                      successfully revoked.
                    type: string
                type: object
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Revoke embed
      tags:
      - Embeddable Graphs
  /api/v1/graph/snapshot:
    get:
      description: 'Take graph snapshots.

        **Note**: When a snapshot is created, there is some delay before it is available.'
      operationId: GetGraphSnapshot
      parameters:
      - description: The metric query.
        in: query
        name: metric_query
        schema:
          type: string
      - description: The POSIX timestamp of the start of the query.
        in: query
        name: start
        required: true
        schema:
          format: int64
          type: integer
      - description: The POSIX timestamp of the end of the query.
        in: query
        name: end
        required: true
        schema:
          format: int64
          type: integer
      - description: A query that adds event bands to the graph.
        in: query
        name: event_query
        required: false
        schema:
          type: string
      - description: 'A JSON document defining the graph. `graph_def` can be used
          instead of `metric_query`.

          The JSON document uses the [grammar defined here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)

          and should be formatted to a single line then URL encoded.'
        in: query
        name: graph_def
        required: false
        schema:
          type: string
      - description: A title for the graph. If no title is specified, the graph does
          not have a title.
        in: query
        name: title
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphSnapshot'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Take graph snapshots
      tags:
      - Snapshots
  /api/v1/host/{host_name}/mute:
    post:
      description: Mute a host.
      operationId: MuteHost
      parameters:
      - description: Name of the host to mute.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostMuteSettings'
        description: Mute a host request body.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMuteResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Invalid Parameter Error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Mute a host
      tags:
      - Hosts
      x-codegen-request-body-name: body
  /api/v1/host/{host_name}/unmute:
    post:
      description: Unmutes a host. This endpoint takes no JSON arguments.
      operationId: UnmuteHost
      parameters:
      - description: Name of the host to unmute.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostMuteResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Invalid Parameter Error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Unmute a host
      tags:
      - Hosts
      x-codegen-request-body-name: body
  /api/v1/hosts:
    get:
      description: 'This endpoint allows searching for hosts by name, alias, or tag.

        Hosts live within the past 3 hours are included.

        Results are paginated with a max of 1000 results at a time.'
      operationId: ListHosts
      parameters:
      - description: String to filter search results.
        in: query
        name: filter
        required: false
        schema:
          type: string
      - description: Sort hosts by this field.
        in: query
        name: sort_field
        required: false
        schema:
          type: string
      - description: Direction of sort. Options include `asc` and `desc`.
        in: query
        name: sort_dir
        required: false
        schema:
          type: string
      - description: Host result to start search from.
        in: query
        name: start
        required: false
        schema:
          format: int64
          type: integer
      - description: Number of hosts to return. Max 1000.
        in: query
        name: count
        required: false
        schema:
          format: int64
          type: integer
      - description: Number of seconds since UNIX epoch from which you want to search
          your hosts.
        in: query
        name: from
        required: false
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Invalid Parameter Error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all hosts for your organization
      tags:
      - Hosts
  /api/v1/hosts/totals:
    get:
      description: 'This endpoint returns the total number of active and up hosts
        in your Datadog account.

        Active means the host has reported in the past hour, and up means it has reported
        in the past two hours.'
      operationId: GetHostTotals
      parameters:
      - description: Number of seconds from which you want to get total number of
          active hosts.
        in: query
        name: from
        required: false
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTotals'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Invalid Parameter Error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get the total number of active hosts
      tags:
      - Hosts
  /api/v1/integration/aws:
    delete:
      description: Delete a Datadog-AWS integration matching the specified `account_id`
        and `role_name parameters`.
      operationId: DeleteAWSAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Delete an AWS integration
      tags:
      - AWS Integration
      x-codegen-request-body-name: body
    get:
      description: List all Datadog-AWS integrations available in your Datadog organization.
      operationId: ListAWSAccounts
      parameters:
      - description: Only return AWS accounts that matches this `account_id`.
        in: query
        name: account_id
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this role_name.
        in: query
        name: role_name
        required: false
        schema:
          type: string
      - description: Only return AWS accounts that matches this `access_key_id`.
        in: query
        name: access_key_id
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: List all AWS integrations
      tags:
      - AWS Integration
    post:
      description: 'Create a Datadog-Amazon Web Services integration.

        Using the `POST` method updates your integration configuration

        by adding your new configuration to the existing one in your Datadog organization.'
      operationId: CreateAWSAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS Request Object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Create an AWS integration
      tags:
      - AWS Integration
      x-codegen-request-body-name: body
    put:
      description: Update a Datadog-Amazon Web Services integration.
      operationId: UpdateAWSAccount
      parameters:
      - description: Only return AWS accounts that matches this `account_id`.
        in: query
        name: account_id
        required: false
        schema:
          type: string
      - description: 'Only return AWS accounts that match this `role_name`.

          Required if `account_id` is specified.'
        in: query
        name: role_name
        required: false
        schema:
          type: string
      - description: 'Only return AWS accounts that matches this `access_key_id`.

          Required if none of the other two options are specified.'
        in: query
        name: access_key_id
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: AWS request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Update an AWS integration
      tags:
      - AWS Integration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/available_namespace_rules:
    get:
      description: List all namespace rules for a given Datadog-AWS integration. This
        endpoint takes no arguments.
      operationId: ListAvailableAWSNamespaces
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                  value:
                  - namespace1
                  - namespace2
                  - namespace3
                items:
                  type: string
                type: array
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: List namespace rules
      tags:
      - AWS Integration
  /api/v1/integration/aws/generate_new_external_id:
    put:
      description: Generate a new AWS external ID for a given AWS account ID and role
        name pair.
      operationId: CreateNewAWSExternalID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccount'
        description: 'Your Datadog role delegation name.

          For more information about your AWS account Role name,

          see the [Datadog AWS integration configuration info](https://github.com/DataDog/documentation/blob/master/integrations/amazon_web_services/#installation).'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSAccountCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Generate a new external ID
      tags:
      - AWS Integration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs:
    delete:
      description: Delete a Datadog-AWS logs configuration by removing the specific
        Lambda ARN associated with a given AWS account.
      operationId: DeleteAWSLambdaARN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: Delete AWS Lambda ARN request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Delete an AWS Logs integration
      tags:
      - AWS Logs Integration
      x-codegen-request-body-name: body
    get:
      description: List all Datadog-AWS Logs integrations configured in your Datadog
        account.
      operationId: ListAWSLogsIntegrations
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                - account_id: '123456789101'
                  lambdas: []
                  services:
                  - s3
                  - elb
                  - elbv2
                  - cloudfront
                  - redshift
                  - lambda
                items:
                  $ref: '#/components/schemas/AWSLogsListResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: List all AWS Logs integrations
      tags:
      - AWS Logs Integration
    post:
      description: Attach the Lambda ARN of the Lambda created for the Datadog-AWS
        log collection to your AWS account ID to enable log collection.
      operationId: CreateAWSLambdaARN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: AWS Log Lambda Async request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Add AWS Log Lambda ARN
      tags:
      - AWS Logs Integration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/check_async:
    post:
      description: 'Test if permissions are present to add a log-forwarding triggers
        for the given services and AWS account. The input

        is the same as for Enable an AWS service log collection. Subsequent requests
        will always repeat the above, so this

        endpoint can be polled intermittently instead of blocking.


        - Returns a status of ''created'' when it''s checking if the Lambda exists
        in the account.

        - Returns a status of ''waiting'' while checking.

        - Returns a status of ''checked and ok'' if the Lambda exists.

        - Returns a status of ''error'' if the Lambda does not exist.'
      operationId: CheckAWSLogsLambdaAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSAccountAndLambdaRequest'
        description: Check AWS Log Lambda Async request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSLogsAsyncResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Check that an AWS Lambda Function exists
      tags:
      - AWS Logs Integration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/services:
    get:
      description: Get the list of current AWS services that Datadog offers automatic
        log collection. Use returned service IDs with the services parameter for the
        Enable an AWS service log collection API endpoint.
      operationId: ListAWSLogsServices
      responses:
        '200':
          content:
            application/json:
              schema:
                example:
                - id: s3
                  label: S3 Access Logs
                - id: elb
                  label: Classic ELB Access Logs
                - id: elbv2
                  label: Application ELB Access Logs
                - id: cloudfront
                  label: CloudFront Access Logs
                - id: redshift
                  label: Redshift Logs
                - id: lambda
                  label: Lambda Cloudwatch Logs
                items:
                  $ref: '#/components/schemas/AWSLogsListServicesResponse'
                type: array
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Get list of AWS log ready services
      tags:
      - AWS Logs Integration
    post:
      description: Enable automatic log collection for a list of services. This should
        be run after running `CreateAWSLambdaARN` to save the configuration.
      operationId: EnableAWSLogServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSLogsServicesRequest'
        description: Enable AWS Log Services request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Enable an AWS Logs integration
      tags:
      - AWS Logs Integration
      x-codegen-request-body-name: body
  /api/v1/integration/aws/logs/services_async:
    post:
      description: "Test if permissions are present to add log-forwarding triggers\
        \ for the\ngiven services and AWS account. Input is the same as for `EnableAWSLogServices`.\n\
        Done async, so can be repeatedly polled in a non-blocking fashion until\n\
        the async request completes.\n\n- Returns a status of `created` when it's\
        \ checking if the permissions exists\n  in the AWS account.\n- Returns a status\
        \ of `waiting` while checking.\n- Returns a status of `checked and ok` if\
        \ the Lambda exists.\n- Returns a status of `error` if the Lambda does not\
        \ exist."
      operationId: CheckAWSLogsServicesAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AWSLogsServicesRequest'
        description: Check AWS Logs Async Services request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSLogsAsyncResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Check permissions for log services
      tags:
      - AWS Logs Integration
      x-codegen-request-body-name: body
  /api/v1/integration/azure:
    delete:
      description: Delete a given Datadog-Azure integration from your Datadog account.
      operationId: DeleteAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Delete a given Datadog-Azure integration request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Delete an Azure integration
      tags:
      - Azure Integration
      x-codegen-request-body-name: body
    get:
      description: List all Datadog-Azure integrations configured in your Datadog
        account.
      operationId: ListAzureIntegration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: List all Azure integrations
      tags:
      - Azure Integration
    post:
      description: 'Create a Datadog-Azure integration.


        Using the `POST` method updates your integration configuration by adding your
        new

        configuration to the existing one in your Datadog organization.


        Using the `PUT` method updates your integration configuration by replacing
        your

        current configuration with the new one sent to your Datadog organization.'
      operationId: CreateAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Create a Datadog-Azure integration for your Datadog account request
          body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Create an Azure integration
      tags:
      - Azure Integration
      x-codegen-request-body-name: body
    put:
      description: 'Update a Datadog-Azure integration. Requires an existing `tenant_name`
        and `client_id`.

        Any other fields supplied will overwrite existing values. To overwrite `tenant_name`
        or `client_id`,

        use `new_tenant_name` and `new_client_id`. To leave a field unchanged, do
        not supply that field in the payload.'
      operationId: UpdateAzureIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Update a Datadog-Azure integration request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Update an Azure integration
      tags:
      - Azure Integration
      x-codegen-request-body-name: body
  /api/v1/integration/azure/host_filters:
    post:
      description: Update the defined list of host filters for a given Datadog-Azure
        integration.
      operationId: UpdateAzureHostFilters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureAccount'
        description: Update a Datadog-Azure integration's host filters request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication Error
      summary: Update Azure integration host filters
      tags:
      - Azure Integration
      x-codegen-request-body-name: body
  /api/v1/integration/gcp:
    delete:
      description: Delete a given Datadog-GCP integration.
      operationId: DeleteGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Delete a given Datadog-GCP integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Delete a GCP integration
      tags:
      - GCP Integration
      x-codegen-request-body-name: body
    get:
      description: List all Datadog-GCP integrations configured in your Datadog account.
      operationId: ListGCPIntegration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GCPAccountListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: List all GCP integrations
      tags:
      - GCP Integration
    post:
      description: Create a Datadog-GCP integration.
      operationId: CreateGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Create a Datadog-Azure integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a GCP integration
      tags:
      - GCP Integration
      x-codegen-request-body-name: body
    put:
      description: 'Update a Datadog-GCP integrations host_filters and/or auto-mute.

        Requires a `project_id` and `client_email`, however these fields cannot be
        updated.

        If you need to update these fields, delete and use the create (`POST`) endpoint.

        The unspecified fields will keep their original values.'
      operationId: UpdateGCPIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GCPAccount'
        description: Update a Datadog-GCP integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                example: {}
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Update a GCP integration
      tags:
      - GCP Integration
      x-codegen-request-body-name: body
  /api/v1/integration/pagerduty/configuration/services:
    post:
      description: Create a new service object in the PagerDuty integration.
      operationId: CreatePagerDutyIntegrationService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagerDutyService'
        description: Create a new service object request body.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagerDutyServiceName'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a new service object
      tags:
      - PagerDuty Integration
      x-codegen-request-body-name: body
  /api/v1/integration/pagerduty/configuration/services/{service_name}:
    delete:
      description: Delete a single service object in the Datadog-PagerDuty integration.
      operationId: DeletePagerDutyIntegrationService
      parameters:
      - description: The service name
        in: path
        name: service_name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Delete a single service object
      tags:
      - PagerDuty Integration
    get:
      description: Get service name in the Datadog-PagerDuty integration.
      operationId: GetPagerDutyIntegrationService
      parameters:
      - description: The service name.
        in: path
        name: service_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagerDutyServiceName'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get a single service object
      tags:
      - PagerDuty Integration
    put:
      description: Update a single service object in the Datadog-PagerDuty integration.
      operationId: UpdatePagerDutyIntegrationService
      parameters:
      - description: The service name
        in: path
        name: service_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagerDutyServiceKey'
        description: Update an existing service object request body.
        required: true
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Update a single service object
      tags:
      - PagerDuty Integration
      x-codegen-request-body-name: body
  /api/v1/integration/slack:
    delete:
      description: Delete a Datadog-Slack integration.
      operationId: DeleteSlackIntegration
      responses:
        '200':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Delete a Slack integration
      tags:
      - Slack Integration
    get:
      description: Get all information about your Datadog-Slack integration.
      operationId: GetSlackIntegration
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get info about a Slack integration
      tags:
      - Slack Integration
    post:
      description: 'Create a Datadog-Slack integration. Once created, add a channel
        to it with the

        [Add channels to Slack integration endpoint](https://docs.datadoghq.com/api/?lang=bash#add-channels-to-slack-integration).


        This method updates your integration configuration by **adding**

        your new configuration to the existing one in your Datadog organization.'
      operationId: CreateSlackIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackIntegration'
        description: Create Datadog-Slack integration request body.
        required: true
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a Slack integration
      tags:
      - Slack Integration
      x-codegen-request-body-name: body
    put:
      description: 'Add channels to your existing Datadog-Slack integration.


        This method updates your integration configuration by **replacing**

        your current configuration with the new one sent to your Datadog organization.'
      operationId: UpdateSlackIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackChannels'
        description: Update an existing Datadog-Slack integration request body.
        required: true
      responses:
        '204':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Add channels to Slack integration
      tags:
      - Slack Integration
      x-codegen-request-body-name: body
  /api/v1/integration/webhooks/configuration/custom-variables:
    post:
      description: Creates an endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      operationId: CreateWebhooksIntegrationCustomVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksIntegrationCustomVariable'
        description: Define a custom variable request body.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegrationCustomVariable'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a custom variable
      tags:
      - Webhooks Integration
      x-codegen-request-body-name: body
  /api/v1/integration/webhooks/configuration/custom-variables/{custom_variable_name}:
    delete:
      description: Deletes the endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      operationId: DeleteWebhooksIntegrationCustomVariable
      parameters:
      - description: The name of the custom variable.
        in: path
        name: custom_variable_name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Delete a custom variable
      tags:
      - Webhooks Integration
    get:
      description: 'Shows the content of the custom variable with the name `<CUSTOM_VARIABLE_NAME>`.


        If the custom variable is secret, returns `null` for the `<CUSTOM_VARIABLE_VALUE>`

        in the response payload.'
      operationId: GetWebhooksIntegrationCustomVariable
      parameters:
      - description: The name of the custom variable.
        in: path
        name: custom_variable_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegrationCustomVariable'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get a custom variable
      tags:
      - Webhooks Integration
    put:
      description: Updates the endpoint with the name `<CUSTOM_VARIABLE_NAME>`.
      operationId: UpdateWebhooksIntegrationCustomVariable
      parameters:
      - description: The name of the custom variable.
        in: path
        name: custom_variable_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksIntegrationCustomVariableUpdateRequest'
        description: Update an existing custom variable request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegrationCustomVariable'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Update a custom variable
      tags:
      - Webhooks Integration
      x-codegen-request-body-name: body
  /api/v1/integration/webhooks/configuration/webhooks:
    post:
      description: Creates an endpoint with the name `<WEBHOOK_NAME>`.
      operationId: CreateWebhooksIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksIntegration'
        description: Create a webhooks integration request body.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegration'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Create a webhooks integration
      tags:
      - Webhooks Integration
      x-codegen-request-body-name: body
  /api/v1/integration/webhooks/configuration/webhooks/{webhook_name}:
    delete:
      description: Deletes the endpoint with the name `<WEBHOOK NAME>`.
      operationId: DeleteWebhooksIntegration
      parameters:
      - description: The name of the webhook.
        in: path
        name: webhook_name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Delete a webhook
      tags:
      - Webhooks Integration
    get:
      description: Gets the content of the webhook with the name `<WEBHOOK_NAME>`.
      operationId: GetWebhooksIntegration
      parameters:
      - description: The name of the webhook.
        in: path
        name: webhook_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegration'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Get a webhook integration
      tags:
      - Webhooks Integration
    put:
      description: Updates the endpoint with the name `<WEBHOOK_NAME>`.
      operationId: UpdateWebhooksIntegration
      parameters:
      - description: The name of the webhook.
        in: path
        name: webhook_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhooksIntegrationUpdateRequest'
        description: Update an existing Datadog-Webhooks integration.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksIntegration'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item Not Found
      summary: Update a webhook
      tags:
      - Webhooks Integration
      x-codegen-request-body-name: body
  /api/v1/logs-queries/list:
    post:
      description: 'List endpoint returns logs that match a log search query.

        [Results are paginated][1].


        **If you are considering archiving logs for your organization,

        consider use of the Datadog archive capabilities instead of the log list API.

        See [Datadog Logs Archive documentation][2].**


        [1]: /logs/guide/collect-multiple-logs-with-pagination

        [2]: https://docs.datadoghq.com/logs/archives'
      operationId: ListLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsListRequest'
        description: Logs filter
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Get a list of logs
      tags:
      - Logs
      x-codegen-request-body-name: body
  /api/v1/logs/config/index-order:
    get:
      description: 'Get the current order of your log indexes. This endpoint takes
        no JSON arguments.


        **Note: This endpoint is in public beta.**

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
      operationId: GetLogsIndexOrder
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsIndexesOrder'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get indexes order
      tags:
      - Logs Indexes
    put:
      description: 'This endpoint updates the index order of your organization.

        It returns the index order object passed in the request body when the request
        is successful.


        **Note: This endpoint is in public beta.**

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
      operationId: UpdateLogsIndexOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsIndexesOrder'
        description: Object containing the new ordered list of index names
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsIndexesOrder'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Update indexes order
      tags:
      - Logs Indexes
      x-codegen-request-body-name: body
  /api/v1/logs/config/indexes:
    get:
      description: 'The Index object describes the configuration of a log index.

        This endpoint returns an array of the `LogIndex` objects of your organization.'
      operationId: ListLogIndexes
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsIndexListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all indexes
      tags:
      - Logs Indexes
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v1/logs/config/indexes/{name}:
    get:
      description: Get one log index from your organization. This endpoint takes no
        JSON arguments.
      operationId: GetLogsIndex
      parameters:
      - description: Name of the log index.
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsIndex'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Not Found
      summary: Get an index
      tags:
      - Logs Indexes
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
    put:
      description: "Update an index as identified by its name.\nReturns the Index\
        \ object passed in the request body when the request is successful.\n\nUsing\
        \ the `PUT` method updates your index\u2019s configuration by **replacing**\n\
        your current configuration with the new one sent to your Datadog organization."
      operationId: UpdateLogsIndex
      parameters:
      - description: Name of the log index.
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsIndex'
        description: Object containing the new `LogsIndex`.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsIndex'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Invalid Parameter Error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Too Many Requests
      summary: Update an index
      tags:
      - Logs Indexes
      x-codegen-request-body-name: body
      x-unstable: '**Note: This endpoint is in public beta.**

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v1/logs/config/pipeline-order:
    get:
      description: 'Get the current order of your pipelines.

        This endpoint takes no JSON arguments.'
      operationId: GetLogsPipelineOrder
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelinesOrder'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get pipeline order
      tags:
      - Logs Pipelines
    put:
      description: 'Update the order of your pipelines. Since logs are processed sequentially,
        reordering a pipeline may change

        the structure and content of the data processed by other pipelines and their
        processors.


        **Note**: Using the `PUT` method updates your pipeline order by replacing
        your current order

        with the new one sent to your Datadog organization.'
      operationId: UpdateLogsPipelineOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipelinesOrder'
        description: Object containing the new ordered list of pipeline IDs.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelinesOrder'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Unprocessable Entity
      summary: Update pipeline order
      tags:
      - Logs Pipelines
      x-codegen-request-body-name: body
  /api/v1/logs/config/pipelines:
    get:
      description: 'Get all pipelines from your organization.

        This endpoint takes no JSON arguments.'
      operationId: ListLogsPipelines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipelineList'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all pipelines
      tags:
      - Logs Pipelines
    post:
      description: Create a pipeline in your organization.
      operationId: CreateLogsPipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipeline'
        description: Definition of the new pipeline.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create a pipeline
      tags:
      - Logs Pipelines
      x-codegen-request-body-name: body
  /api/v1/logs/config/pipelines/{pipeline_id}:
    delete:
      description: 'Delete a given pipeline from your organization.

        This endpoint takes no JSON arguments.'
      operationId: DeleteLogsPipeline
      parameters:
      - description: ID of the pipeline to delete.
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Delete a pipeline
      tags:
      - Logs Pipelines
    get:
      description: 'Get a specific pipeline from your organization.

        This endpoint takes no JSON arguments.'
      operationId: GetLogsPipeline
      parameters:
      - description: ID of the pipeline to get.
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get a pipeline
      tags:
      - Logs Pipelines
    put:
      description: "Update a given pipeline configuration to change it\u2019s processors\
        \ or their order.\n\n**Note**: Using this method updates your pipeline configuration\
        \ by **replacing**\nyour current configuration with the new one sent to your\
        \ Datadog organization."
      operationId: UpdateLogsPipeline
      parameters:
      - description: ID of the pipeline to delete.
        in: path
        name: pipeline_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsPipeline'
        description: New definition of the pipeline.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsAPIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Update a pipeline
      tags:
      - Logs Pipelines
      x-codegen-request-body-name: body
  /api/v1/metrics:
    get:
      description: Get the list of actively reporting metrics from a given time until
        now.
      operationId: ListActiveMetrics
      parameters:
      - description: Seconds since the Unix epoch.
        in: query
        name: from
        required: true
        schema:
          format: int64
          type: integer
      - description: 'Hostname for filtering the list of metrics returned.

          If set, metrics retrieved are those with the corresponding hostname tag.'
        in: query
        name: host
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get active metrics list
      tags:
      - Metrics
  /api/v1/metrics/{metric_name}:
    get:
      description: Get metadata about a specific metric.
      operationId: GetMetricMetadata
      parameters:
      - description: Name of the metric for which to get metadata.
        in: path
        name: metric_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricMetadata'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get metric metadata
      tags:
      - Metrics
    put:
      description: Edit metadata of a specific metric. Find out more about [supported
        types](https://docs.datadoghq.com/developers/metrics).
      operationId: UpdateMetricMetadata
      parameters:
      - description: Name of the metric for which to edit metadata.
        in: path
        name: metric_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricMetadata'
        description: New metadata.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricMetadata'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Edit metric metadata
      tags:
      - Metrics
      x-codegen-request-body-name: body
  /api/v1/monitor:
    get:
      description: Get details about the specified monitor from your organization.
      operationId: ListMonitors
      parameters:
      - description: 'When specified, shows additional information about the group
          states.

          Choose one or more from `all`, `alert`, `warn`, and `no data`.'
        in: query
        name: group_states
        required: false
        schema:
          type: string
      - description: A string to filter monitors by name.
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: 'A comma separated list indicating what tags, if any, should
          be used to filter the list of monitors by scope.

          For example, `host:host0`.'
        in: query
        name: tags
        required: false
        schema:
          type: string
      - description: 'A comma separated list indicating what service and/or custom
          tags, if any, should be used to filter the list of monitors.

          Tags created in the Datadog UI automatically have the service key prepended.
          For example, `service:my-app`.'
        in: query
        name: monitor_tags
        required: false
        schema:
          type: string
      - description: If this argument is set to true, then the returned data includes
          all current downtimes for each monitor.
        in: query
        name: with_downtimes
        required: false
        schema:
          type: boolean
      - description: The time (in seconds) to delay the monitor evaluation compared
          to the latest data timestamp received.
        in: query
        name: id_offset
        required: false
        schema:
          format: int64
          type: integer
      - description: The page to start paginating from. If this argument is not specified,
          the request returns all monitors without pagination.
        in: query
        name: page
        required: false
        schema:
          format: int64
          type: integer
      - description: The number of monitors to return per page. If the page argument
          is not specified, the default behavior returns all monitors without a `page_size`
          limit. However, if page is specified and `page_size` is not, the argument
          defaults to 100.
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 1000
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Monitor'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get all monitor details
      tags:
      - Monitors
    post:
      description: 'Create a monitor using the specified options.


        #### Monitor Types


        The type of monitor chosen from:


        - anomaly: `query alert`

        - APM: `query alert`

        - composite: `composite`

        - custom: `service check`

        - event: `event alert`

        - forecast: `query alert`

        - host: `service check`

        - integration: `query alert` or `service check`

        - live process: `process alert`

        - logs: `logs alert`

        - metric: `metric alert`

        - network: `service check`

        - outlier: `query alert`

        - process: `service query`

        - rum: `alert`

        - watchdog: `event alert`


        #### Query Types


        **Metric Alert Query**


        Example: `time_aggr(time_window):space_aggr:metric{tags} [by {key}] operator
        #`


        - `time_aggr`: avg, sum, max, min, change, or pct_change

        - `time_window`: `last_#m` (with `#` being 5, 10, 15, or 30) or `last_#h`(with
        `#` being 1, 2, or 4), or `last_1d`

        - `space_aggr`: avg, sum, min, or max

        - `tags`: one or more tags (comma-separated), or *

        - `key`: a ''key'' in key:value tag syntax; defines a separate alert for each
        tag in the group (multi-alert)

        - `operator`: <, <=, >, >=, ==, or !=

        - `#`: an integer or decimal number used to set the threshold


        If you are using the `_change_` or `_pct_change_` time aggregator, instead
        use `change_aggr(time_aggr(time_window),

        timeshift):space_aggr:metric{tags} [by {key}] operator #` with:


        - `change_aggr` change, pct_change

        - `time_aggr` avg, sum, max, min [Learn more](https://docs.datadoghq.com/monitors/monitor_types/#define-the-conditions)

        - `time_window` last\_#m (1, 5, 10, 15, or 30), last\_#h (1, 2, or 4), or
        last_#d (1 or 2)

        - `timeshift` #m_ago (5, 10, 15, or 30), #h_ago (1, 2, or 4), or 1d_ago


        Use this to create an outlier monitor using the following query:

        `avg(last_30m):outliers(avg:system.cpu.user{role:es-events-data} by {host},
        ''dbscan'', 7) > 0`


        **Service Check Query**


        Example: `"check".over(tags).last(count).count_by_status()`


        - **`check`** name of the check, e.g. `datadog.agent.up`

        - **`tags`** one or more quoted tags (comma-separated), or "*". e.g.: `.over("env:prod",
        "role:db")`

        - **`count`** must be at >= your max threshold (defined in the `options`).

        e.g. if you want to notify on 1 critical, 3 ok and 2 warn statuses count should
        be 3. It is limited to 100.


        **Event Alert Query**


        Example: `events(''sources:nagios status:error,warning priority:normal tags:
        "string query"'').rollup("count").last("1h")"`


        - **`event`**, the event query string:

        - **`string_query`** free text query to match against event title and text.

        - **`sources`** event sources (comma-separated).

        - **`status`** event statuses (comma-separated). Valid options: error, warn,
        and info.

        - **`priority`** event priorities (comma-separated). Valid options: low, normal,
        all.

        - **`host`** event reporting host (comma-separated).

        - **`tags`** event tags (comma-separated).

        - **`excluded_tags`** excluded event tags (comma-separated).

        - **`rollup`** the stats roll-up method. `count` is the only supported method
        now.

        - **`last`** the timeframe to roll up the counts. Examples: 60s, 4h. Supported
        timeframes: s, m, h and d. This value should not exceed 48 hours.


        **Process Alert Query**


        Example: `processes(search).over(tags).rollup(''count'').last(timeframe) operator
        #`


        - **`search`** free text search string for querying processes.

        Matching processes match results on the [Live Processes](https://docs.datadoghq.com/infrastructure/process/?tab=linuxwindows)
        page.

        - **`tags`** one or more tags (comma-separated)

        - **`timeframe`** the timeframe to roll up the counts. Examples: 60s, 4h.
        Supported timeframes: s, m, h and d

        - **`operator`** <, <=, >, >=, ==, or !=

        - **`#`** an integer or decimal number used to set the threshold


        **Logs Alert Query**


        Example: `logs(query).index(index_name).rollup(rollup_method[, measure]).last(time_window)
        operator #`


        - **`query`** The search query - following the [Log search syntax](https://docs.datadoghq.com/logs/search_syntax/).

        - **`index_name`** For multi-index organizations, the log index in which the
        request is performed.

        - **`rollup_method`** The stats roll-up method - supports `count`, `avg` and
        `cardinality`.

        - **`measure`** For `avg` and cardinality `rollup_method` - specify the measure
        or the facet name you want to use.

        - **`time_window`** #m (5, 10, 15, or 30), #h (1, 2, or 4, 24)

        - **`operator`** `<`, `<=`, `>`, `>=`, `==`, or `!=`.

        - **`#`** an integer or decimal number used to set the threshold.


        **Composite Query**


        Example: `12345 && 67890`, where `12345` and `67890` are the IDs of non-composite
        monitors


        * **`name`** [*required*, *default* = **dynamic, based on query**]: The name
        of the alert.

        * **`message`** [*required*, *default* = **dynamic, based on query**]: A message
        to include with notifications for this monitor.

        Email notifications can be sent to specific users by using the same ''@username''
        notation as events.

        * **`tags`** [*optional*, *default* = **empty list**]: A list of tags to associate
        with your monitor.

        When getting all monitor details via the API, use the `monitor_tags` argument
        to filter results by these tags.

        It is only available via the API and isn''t visible or editable in the Datadog
        UI.'
      operationId: CreateMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Create a monitor request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create a monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/can_delete:
    get:
      description: Check if the given monitors can be deleted.
      operationId: CheckCanDeleteMonitor
      parameters:
      - description: The IDs of the monitor to check.
        in: query
        name: monitor_ids
        required: true
        schema:
          items:
            format: int64
            type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCanDeleteMonitorResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCanDeleteMonitorResponse'
          description: Deletion conflict error
      summary: Check if a monitor can be deleted
      tags:
      - Monitors
  /api/v1/monitor/validate:
    post:
      description: Validate the monitor provided in the request.
      operationId: ValidateMonitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Monitor'
        description: Monitor request object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Invalid JSON
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Validate a monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/{monitor_id}:
    delete:
      description: Delete the specified monitor
      operationId: DeleteMonitor
      parameters:
      - description: The ID of the monitor.
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      - description: Delete the monitor even if it's referenced by other resources
          (e.g. SLO, composite monitor).
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedMonitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Item not found error
      summary: Delete a monitor
      tags:
      - Monitors
    get:
      description: Get details about the specified monitor from your organization.
      operationId: GetMonitor
      parameters:
      - description: The ID of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      - description: When specified, shows additional information about the group
          states. Choose one or more from `all`, `alert`, `warn`, and `no data`.
        in: query
        name: group_states
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Monitor Not Found error
      summary: Get a monitor's details
      tags:
      - Monitors
    put:
      description: Edit the specified monitor.
      operationId: UpdateMonitor
      parameters:
      - description: The ID of the monitor.
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitorUpdateRequest'
        description: Edit a monitor request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Monitor Not Found error
      summary: Edit a monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/{monitor_id}/mute:
    post:
      description: Mute the specified monitor.
      operationId: MuteMonitor
      parameters:
      - description: The id of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      - description: 'The scope to apply the mute to.

          For example, if your alert is grouped by `{host}`, you might mute `host:app1`.'
        example: role:db
        in: query
        name: scope
        schema:
          type: string
      - description: A POSIX timestamp for when the mute should end.
        in: query
        name: end
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Monitor Not Found error
      summary: Mute a monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/monitor/{monitor_id}/unmute:
    post:
      description: Mute the specified monitor.
      operationId: UnmuteMonitor
      parameters:
      - description: The id of the monitor
        in: path
        name: monitor_id
        required: true
        schema:
          format: int64
          type: integer
      - description: 'The scope to apply the mute to.

          For example, if your alert is grouped by `{host}`, you might mute `host:app1`.'
        example: role:db
        in: query
        name: scope
        schema:
          type: string
      - description: Clear muting across all scopes. Default is `false`.
        example: false
        in: query
        name: all_scopes
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Monitor Not Found error
      summary: Unmute a monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /api/v1/org:
    get:
      description: List your managed organizations.
      operationId: ListOrgs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: List your managed organizations
      tags:
      - Organizations
    post:
      description: 'Create a child organization.


        This endpoint requires the

        [multi-organization account](https://docs.datadoghq.com/account_management/multi_organization/)

        feature and must be enabled by

        [contacting support](https://docs.datadoghq.com/help/).


        Once a new child organization is created, you can interact with it

        by using the `org.public_id`, `pi_key.key`, and

        `application_key.hash` provided in the response.'
      operationId: CreateChildOrg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateBody'
        description: Organization object that needs to be created
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreateResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create a child organization
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /api/v1/org/{public_id}:
    get:
      description: Get organization information.
      operationId: GetOrg
      parameters:
      - description: The `public_id` of the organization you are operating within.
        in: path
        name: public_id
        required: true
        schema:
          example: abc123
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get organization information
      tags:
      - Organizations
    put:
      description: Update your organization.
      operationId: UpdateOrg
      parameters:
      - description: The `public_id` of the organization you are operating within.
        in: path
        name: public_id
        required: true
        schema:
          example: abc123
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Update your organization
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /api/v1/org/{public_id}/idp_metadata:
    post:
      description: 'There are a couple of options for updating the Identity Provider
        (IdP)

        metadata from your SAML IdP.


        * **Multipart Form-Data**: Post the IdP metadata file using a form post.


        * **XML Body:** Post the IdP metadata file as the body of the request.'
      operationId: UploadIdPForOrg
      parameters:
      - description: The `public_id` of the organization you are operating with
        in: path
        name: public_id
        required: true
        schema:
          example: abc123
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IdpFormData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdpResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Unsupported Media Type
      summary: Upload IdP metadata
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /api/v1/query:
    get:
      description: Query timeseries points.
      operationId: QueryMetrics
      parameters:
      - description: Start of the queried time period, seconds since the Unix epoch.
        in: query
        name: from
        required: true
        schema:
          format: int64
          type: integer
      - description: End of the queried time period, seconds since the Unix epoch.
        in: query
        name: to
        required: true
        schema:
          format: int64
          type: integer
      - description: Query string.
        in: query
        name: query
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsQueryResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Query timeseries points
      tags:
      - Metrics
  /api/v1/search:
    get:
      description: Search for metrics from the last 24 hours in Datadog.
      operationId: ListMetrics
      parameters:
      - description: Query string to search metrics upon. Must be prefixed with `metrics:`.
        in: query
        name: q
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricSearchResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Search metrics
      tags:
      - Metrics
  /api/v1/series:
    post:
      description: "The metrics end-point allows you to post time-series data that\
        \ can be graphed on Datadog\u2019s dashboards.\nThe limit for compressed payloads\
        \ is 3.2 megabytes (3200000), and 62 megabytes (62914560) for decompressed\
        \ payloads.\n\nIf you\u2019re submitting metrics directly to the Datadog API\
        \ without using DogStatsD, expect\n\n- 64 bits for the timestamp\n- 64 bits\
        \ for the value\n- 20 bytes for the metric names\n- 50 bytes for the timeseries\n\
        - The full payload is approximately ~ 100 bytes. However, with the DogStatsD\
        \ API,\ncompression is applied, which reduces the payload size."
      operationId: SubmitMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsPayload'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntakePayloadAccepted'
          description: Payload accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Request timeout
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Payload too large
      security:
      - apiKeyAuthQuery: []
      summary: Submit metrics
      tags:
      - Metrics
      x-codegen-request-body-name: body
  /api/v1/slo:
    get:
      description: Get multiple service level objective objects by their IDs.
      operationId: ListSLOs
      parameters:
      - description: A comma separated list of the IDs of the service level objectives
          objects.
        example: id1, id2, id3
        in: query
        name: ids
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Search SLOs
      tags:
      - Service Level Objectives
    post:
      description: Create a service level objective object.
      operationId: CreateSLO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceLevelObjectiveRequest'
        description: Service level objective request object.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create a SLO object
      tags:
      - Service Level Objectives
      x-codegen-request-body-name: body
  /api/v1/slo/bulk_delete:
    post:
      description: 'Delete (or partially delete) multiple service level objective
        objects.


        This endpoint facilitates deletion of one or more thresholds for one or more

        service level objective objects. If all thresholds are deleted, the service
        level

        objective object is deleted as well.'
      operationId: DeleteSLOTimeframeInBulk
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SLOBulkDelete'
        description: Delete multiple service level objective objects request body.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOBulkDeleteResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Bulk Delete SLO Timeframes
      tags:
      - Service Level Objectives
      x-codegen-request-body-name: body
  /api/v1/slo/can_delete:
    get:
      description: 'Check if a SLO can be safely deleted. For example,

        assure an SLO can be deleted without disrupting a dashboard.'
      operationId: CheckCanDeleteSLO
      parameters:
      - description: A comma separated list of the IDs of the service level objectives
          objects.
        example: id1, id2, id3
        in: query
        name: ids
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCanDeleteSLOResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCanDeleteSLOResponse'
          description: Conflict
      summary: Check if SLOs can be safely deleted
      tags:
      - Service Level Objectives
  /api/v1/slo/{slo_id}:
    delete:
      description: 'Permanently delete the specified service level objective object.


        If an SLO is used in a dashboard, the `DELETE /v1/slo/` endpoint returns

        a 409 conflict error because the SLO is referenced in a dashboard.'
      operationId: DeleteSLO
      parameters:
      - description: The ID of the service level objective.
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      - description: Delete the monitor even if it's referenced by other resources
          (e.g. SLO, composite monitor).
        in: query
        name: force
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLODeleteResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLODeleteResponse'
          description: Conflict
      summary: Delete a SLO
      tags:
      - Service Level Objectives
    get:
      description: Get a service level objective object.
      operationId: GetSLO
      parameters:
      - description: The ID of the service level objective object.
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not found
      summary: Get a SLO's details
      tags:
      - Service Level Objectives
    put:
      description: Update the specified service level objective object.
      operationId: UpdateSLO
      parameters:
      - description: The ID of the service level objective object.
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceLevelObjective'
        description: The edited service level objective request object.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update a SLO
      tags:
      - Service Level Objectives
      x-codegen-request-body-name: body
  /api/v1/slo/{slo_id}/history:
    get:
      description: "Get a specific SLO\u2019s history, regardless of its SLO type.\n\
        \nThe detailed history data is structured according to the source data type.\n\
        For example, metric data is included for event SLOs that use\nthe metric source,\
        \ and monitor SLO types include the monitor transition history.\n\n**Note:**\
        \ There are different response formats for event based and time based SLOs.\n\
        Examples of both are shown."
      operationId: GetSLOHistory
      parameters:
      - description: The ID of the service level objective object.
        in: path
        name: slo_id
        required: true
        schema:
          type: string
      - description: The `from` timestamp for the query window in epoch seconds.
        in: query
        name: from_ts
        required: true
        schema:
          format: int64
          type: integer
      - description: The `to` timestamp for the query window in epoch seconds.
        in: query
        name: to_ts
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SLOHistoryResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get an SLO's history
      tags:
      - Service Level Objectives
      x-unstable: '**Note**: This endpoint is in public beta.

        If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).'
  /api/v1/synthetics/tests:
    get:
      description: Get the list of all Synthetic tests (can be filtered by type).
      operationId: ListTests
      parameters:
      - description: API or browser to filter the list by type, undefined to get the
          unfiltered list.
        in: query
        name: check_type
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsListTestsResponse'
          description: OK - Returns the list of all Synthetic test (properly filtered
            by type).
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Synthetic is not activated for the user.
      summary: Get a list of all tests
      tags:
      - Synthetics
    post:
      description: Create (or clone) a Synthetics test.
      operationId: CreateTest
      parameters:
      - description: Public ID of the test to clone, undefined if the test is newly
          created.
        in: query
        name: from_test_id
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyntheticsTestDetails'
        description: Details of the test to create.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsTestDetails'
          description: OK - Returns the created/cloned test details.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- JSON format is wrong

            - Creation/cloning failed'
        '402':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Test quota is reached
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Create or clone a test
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/synthetics/tests/browser/{public_id}/results:
    get:
      description: Get the latest results (as summaries) from a given browser Synthetic
        test.
      operationId: GetBrowserTestLatestResults
      parameters:
      - description: The public ID of the browser test for which to search results
          for.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      - description: Timestamp from which to start querying results.
        in: query
        name: from_ts
        required: false
        schema:
          format: int64
          type: integer
      - description: Timestamp up to which to query results.
        in: query
        name: to_ts
        required: false
        schema:
          format: int64
          type: integer
      - description: Locations for which to query results.
        in: query
        name: probe_dc
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsGetBrowserTestLatestResultsResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test is not owned by the user'
      summary: Get test latest results (as summaries)
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/synthetics/tests/browser/{public_id}/results/{result_id}:
    get:
      description: Get a specific full result from a given (browser) Synthetic test.
      operationId: GetBrowserTestResult
      parameters:
      - description: The public ID of the browser test to which the target result
          belongs.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      - description: The ID of the result to get.
        in: path
        name: result_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsBrowserTestResultFull'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test or result is not owned by the user'
      summary: Get test result (browser)
      tags:
      - Synthetics
  /api/v1/synthetics/tests/delete:
    post:
      description: Delete multiple Synthetic tests by ID.
      operationId: DeleteTests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyntheticsDeleteTestsPayload'
        description: Public ID list of the Synthetics tests to be deleted.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsDeleteTestsResponse'
          description: OK.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- JSON format is wrong

            - Test cannot be deleted as it''s used elsewhere (as a sub-test or in
            an uptime widget)

            - Some IDs are not owned by the user'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Tests to be deleted can''t be found

            - Synthetics is not activated for the user'
      summary: Delete multiple tests
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/synthetics/tests/{public_id}:
    get:
      description: Get the details of a specific Synthetic test.
      operationId: GetTest
      parameters:
      - description: The public ID of the test to get details from.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsTestDetails'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test is not owned by the user'
      summary: Get test
      tags:
      - Synthetics
    put:
      description: Update the details of a specific Synthetic test.
      operationId: UpdateTest
      parameters:
      - description: The public ID of the test to get details from.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyntheticsTestDetails'
        description: New test details to be saved.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsTestDetails'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- JSON format is wrong

            - Updating sub-type is forbidden'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test is not owned by the user

            - Test can''t be found'
      summary: Update test
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/synthetics/tests/{public_id}/results:
    get:
      description: Get the latest results (as summaries) from a given API Synthetic
        test.
      operationId: GetAPITestLatestResults
      parameters:
      - description: The public ID of the test for which to search results for.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      - description: Timestamp from which to start querying results.
        in: query
        name: from_ts
        required: false
        schema:
          format: int64
          type: integer
      - description: Timestamp up to which to query results.
        in: query
        name: to_ts
        required: false
        schema:
          format: int64
          type: integer
      - description: Locations for which to query results.
        in: query
        name: probe_dc
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsGetAPITestLatestResultsResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test is not owned by the user'
      summary: Get test latest results (as summaries)
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/synthetics/tests/{public_id}/results/{result_id}:
    get:
      description: Get a specific full result from a given (API) Synthetic test.
      operationId: GetAPITestResult
      parameters:
      - description: The public ID of the API test to which the target result belongs.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      - description: The ID of the result to get.
        in: path
        name: result_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntheticsAPITestResultFull'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test or result is not owned by the user'
      summary: Get test result (API)
      tags:
      - Synthetics
  /api/v1/synthetics/tests/{public_id}/status:
    put:
      description: Change pause/live status of a given Synthetic test.
      operationId: UpdateTestPauseStatus
      parameters:
      - description: The public ID of the Synthetic test to update.
        in: path
        name: public_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyntheticsUpdateTestPauseStatusPayload'
        description: Pause/live status to set the given Synthetic test to.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: boolean
          description: OK - Returns a boolean indicating if the update was successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: JSON format is wrong.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: '- Synthetic is not activated for the user

            - Test is not owned by the user'
      summary: Change test pause/live status
      tags:
      - Synthetics
      x-codegen-request-body-name: body
  /api/v1/tags/hosts:
    get:
      description: Return a mapping of tags to hosts for your whole infrastructure.
      operationId: ListHostTags
      parameters:
      - description: When specified, filters host list to those tags with the specified
          source.
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagToHosts'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get Tags
      tags:
      - Tags
  /api/v1/tags/hosts/{host_name}:
    delete:
      description: 'This endpoint allows you to remove all user-assigned tags

        for a single host.'
      operationId: DeleteHostTags
      parameters:
      - description: This endpoint allows you to remove all user-assigned tags for
          a single host.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: 'The source of the tags (e.g. chef, puppet).

          [Complete list of source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).'
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '204':
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Remove host tags
      tags:
      - Tags
    get:
      description: Return the list of tags that apply to a given host.
      operationId: GetHostTags
      parameters:
      - description: When specified, filters list of tags to those tags with the specified
          source.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: Source to filter.
        in: query
        name: source
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get host tags
      tags:
      - Tags
    post:
      description: 'This endpoint allows you to add new tags to a host,

        optionally specifying where these tags come from.'
      operationId: CreateHostTags
      parameters:
      - description: This endpoint allows you to add new tags to a host, optionally
          specifying where the tags came from.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: 'The source of the tags.

          [Complete list of source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).'
        example: chef
        in: query
        name: source
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostTags'
        description: Update host tags request body.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: Created
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Add tags to a host
      tags:
      - Tags
      x-codegen-request-body-name: body
    put:
      description: 'This endpoint allows you to update/replace all tags in

        an integration source with those supplied in the request.'
      operationId: UpdateHostTags
      parameters:
      - description: This endpoint allows you to update/replace all in an integration
          source with those supplied in the request.
        in: path
        name: host_name
        required: true
        schema:
          type: string
      - description: 'The source of the tags (e.g. chef, puppet).

          [Complete list of source attribute values](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value)'
        in: query
        name: source
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostTags'
        description: Add tags to host
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostTags'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update host tags
      tags:
      - Tags
      x-codegen-request-body-name: body
  /api/v1/usage/aws_lambda:
    get:
      description: Get hourly usage for lambda.
      operationId: GetUsageLambda
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageLambdaResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Lambda
      tags:
      - Usage Metering
  /api/v1/usage/fargate:
    get:
      description: Get hourly usage for [Fargate](https://docs.datadoghq.com/integrations/ecs_fargate/).
      operationId: GetUsageFargate
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageFargateResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Fargate
      tags:
      - Usage Metering
  /api/v1/usage/hosts:
    get:
      description: Get hourly usage for hosts and containers.
      operationId: GetUsageHosts
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageHostsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for hosts and containers
      tags:
      - Usage Metering
  /api/v1/usage/logs:
    get:
      description: Get hourly usage for logs.
      operationId: GetUsageLogs
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageLogsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Logs
      tags:
      - Usage Metering
  /api/v1/usage/logs_by_index:
    get:
      description: Get hourly usage for logs by index.
      operationId: GetUsageLogsByIndex
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      - description: Comma-separated list of log index names.
        in: query
        name: index_name
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageLogsByIndexResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Logs by Index
      tags:
      - Usage Metering
  /api/v1/usage/network_flows:
    get:
      description: Get hourly usage for network flows.
      operationId: GetUsageNetworkFlows
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]`
          for usage ending

          BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageNetworkFlowsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Network Flows
      tags:
      - Usage Metering
  /api/v1/usage/network_hosts:
    get:
      description: Get hourly usage for network hosts.
      operationId: GetUsageNetworkHosts
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageNetworkHostsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Network Hosts
      tags:
      - Usage Metering
  /api/v1/usage/rum_sessions:
    get:
      description: Get hourly usage for [RUM](https://docs.datadoghq.com/real_user_monitoring/)
        Sessions.
      operationId: GetUsageRumSessions
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageRumSessionsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for RUM Sessions
      tags:
      - Usage Metering
  /api/v1/usage/summary:
    get:
      description: Get usage across your multi-org account.
      operationId: GetUsageSummary
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]`
          for usage beginning in this month.

          Maximum of 15 months ago.'
        in: query
        name: start_month
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]`
          for usage ending this month.'
        in: query
        name: end_month
        required: false
        schema:
          format: date-time
          type: string
      - description: Include usage summaries for each sub-org.
        in: query
        name: include_org_details
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSummaryResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get usage across your multi-org account
      tags:
      - Usage Metering
  /api/v1/usage/synthetics:
    get:
      deprecated: true
      description: Get hourly usage for [Synthetics API checks](https://docs.datadoghq.com/synthetics/).
      operationId: GetUsageSynthetics
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSyntheticsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Synthetics API Checks
      tags:
      - Usage Metering
  /api/v1/usage/synthetics_api:
    get:
      description: Get hourly usage for [synthetics API checks](https://docs.datadoghq.com/synthetics/).
      operationId: GetUsageSyntheticsAPI
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSyntheticsAPIResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Synthetics API Checks
      tags:
      - Usage Metering
  /api/v1/usage/synthetics_browser:
    get:
      description: Get hourly usage for synthetics browser checks.
      operationId: GetUsageSyntheticsBrowser
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageSyntheticsBrowserResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Synthetics Browser Checks
      tags:
      - Usage Metering
  /api/v1/usage/timeseries:
    get:
      description: Get hourly usage for [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/).
      operationId: GetUsageTimeseries
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTimeseriesResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for custom metrics
      tags:
      - Usage Metering
  /api/v1/usage/top_avg_metrics:
    get:
      description: Get top [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/)
        by hourly average.
      operationId: GetUsageTopAvgMetrics
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM]
          for usage beginning at this hour.'
        in: query
        name: month
        required: true
        schema:
          format: date-time
          type: string
      - description: Comma-separated list of metric names.
        in: query
        name: names
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTopAvgMetricsResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get top 500 custom metrics by hourly average
      tags:
      - Usage Metering
  /api/v1/usage/traces:
    get:
      description: Get hourly usage for trace search.
      operationId: GetUsageTrace
      parameters:
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage beginning at this hour.'
        in: query
        name: start_hr
        required: true
        schema:
          format: date-time
          type: string
      - description: 'Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh]
          for usage ending BEFORE this hour.'
        in: query
        name: end_hr
        required: false
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/UsageTraceResponse'
          description: OK
        '400':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json;datetime-format=rfc3339:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Forbidden
      summary: Get hourly usage for Trace Search
      tags:
      - Usage Metering
  /api/v1/user:
    get:
      description: Get all users for your organization.
      operationId: ListUsers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
          description: OK
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Get all users
      tags:
      - Users
    post:
      description: 'Create a user for your organization.


        **Note**: Users can only be created with the admin access role

        if application keys belong to administrators.'
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object that needs to be created.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Conflict
      summary: Create a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /api/v1/user/{user_handle}:
    delete:
      description: 'Delete a user from an organization.


        **Note**: This endpoint can only be used with application keys belonging to

        administrators.'
      operationId: DisableUser
      parameters:
      - description: The handle of the user.
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      responses:
        '200':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/UserDisableResponse'
          description: User disabled
        '400':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Disable a user
      tags:
      - Users
    get:
      description: Get a user's details.
      operationId: GetUser
      parameters:
      - description: The ID of the user.
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: OK for get user
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Get user details
      tags:
      - Users
    put:
      description: 'Update a user information.


        **Note**: It can only be used with application keys belonging to administrators.'
      operationId: UpdateUser
      parameters:
      - description: The ID of the user.
        in: path
        name: user_handle
        required: true
        schema:
          example: test@datadoghq.com
          format: email
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Description of the update.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: User updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Not Found
      summary: Update a user
      tags:
      - Users
      x-codegen-request-body-name: body
  /monitor/bulk_resolve:
    post:
      deprecated: true
      description: Resolve monitor.
      operationId: ResolveMonitor
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
              type: array
        description: 'Array of group(s) to resolve for a given monitor_id, e.g.:

          `{"monitor_id": "group_to_resolve"}`.


          It supports multiple groups per monitor, e.g.:

          `resolve: [{"monitor_id": "group_1"}, {"monitor_id": "group_2"}]`.


          It can also resolve all triggered groups with the pseudo-group `ALL_GROUPS`:

          `resolve: [{"monitor_id": "ALL_GROUPS"}]`.'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: OK
      summary: Resolve Monitor
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /v0.3/traces:
    put:
      description: "Datadog\u2019s APM allows you to collect performance metrics by\
        \ tracing your code\nto determine which parts of your application are slow\
        \ or inefficient.\n\nTracing data is sent to the Datadog Agent via an HTTP\
        \ API.\nWe provide some [official libraries](https://docs.datadoghq.com/tracing/#instrument-your-application)\n\
        that simplify sending metrics to the Datadog Agent, however you may want to\n\
        interact directly with the API to instrument applications that cannot use\n\
        the libraries or are written in languages that don\u2019t yet have an official\n\
        Datadog Tracing library."
      operationId: SubmitTraces
      requestBody:
        content:
          application/json:
            schema:
              description: An array of traces.
              items:
                description: An array of spans.
                items:
                  $ref: '#/components/schemas/Span'
                type: array
              type: array
        description: "Traces can be sent as an array of traces:\n\n    [ trace1, trace2,\
          \ trace3 ]\n\nand each trace is an array of spans:\n\n    trace1 = [ span,\
          \ span2, span3 ]\n\nand each span is a dictionary with a `trace_id`, `span_id`,\
          \ `resource`...\n\n[Learn more about the APM & Distributed Tracing terminology](https://docs.datadoghq.com/tracing/visualization/services_list)\n\
          \n**Note:** Each span within a trace should use the same `trace_id`.\nHowever,\
          \ `trace_id` and `span_id` must have different values."
        required: true
      responses:
        '200':
          description: OK
      security: []
      servers:
      - url: http://{site}
        variables:
          site:
            default: localhost:8126
            description: Local Agent endpoint.
      - url: '{protocol}://{name}'
        variables:
          name:
            default: localhost:8126
            description: Full site DNS name.
          protocol:
            default: http
            description: The protocol for accessing the API.
      summary: Send traces
      tags:
      - Tracing
      x-codegen-request-body-name: body
  /v1/input:
    post:
      description: 'Send your logs to your Datadog platform over HTTP. Limits per
        HTTP request are as follows.

        - Maximum content size per payload is 5MB.

        - Maximum size for a single log is 256kB.

        - Maximum array size if sending multiple logs in an array is 500 entries.


        Any log exceeding 256KB is accepted and truncated by server

        - For a single log request, the API truncates the log at 256KB and returns
        a 2xx.

        - For a multi-logs request, the API processes all logs,

        truncates only logs larger than 256KB, and returns a 2xx.


        **Note**: If you are in the Datadog EU site (`app.datadoghq.eu`),

        the HTTP log endpoint is `http-intake.logs.datadoghq.eu`.'
      operationId: SubmitLog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HTTPLog'
        description: Log to send (JSON format).
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Response from server (always 200 empty JSON).
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPLogError'
          description: unexpected error
      security:
      - apiKeyAuth: []
      servers:
      - url: https://{subdomain}.{site}
        variables:
          site:
            default: datadoghq.com
            description: The regional site for our customers.
            enum:
            - datadoghq.com
            - datadoghq.eu
          subdomain:
            default: http-intake.logs
            description: The subdomain where the API is deployed.
      - url: '{protocol}://{name}'
        variables:
          name:
            default: http-intake.logs.datadoghq.com
            description: Full site DNS name.
          protocol:
            default: https
            description: The protocol for accessing the API.
      summary: Send logs
      tags:
      - Logs
      x-codegen-request-body-name: body
  /v1/monitor/mute_all:
    post:
      deprecated: true
      description: 'Muting prevents all monitors from notifying through email and
        posts to the

        [event stream](https://docs.datadoghq.com/events).

        State changes are only visible by checking the alert page.'
      operationId: MuteAllMonitors
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Mute all monitors
      tags:
      - Monitors
      x-codegen-request-body-name: body
  /v1/monitor/unmute_all:
    post:
      deprecated: true
      description: 'Disables muting all monitors. Throws an error if mute all

        was not enabled previously.'
      operationId: UnmuteAllMonitors
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResponse'
          description: Authentication error
      summary: Unmute all monitors
      tags:
      - Monitors
      x-codegen-request-body-name: body
security:
- apiKeyAuth: []
  appKeyAuth: []
servers:
- url: https://{subdomain}.{site}
  variables:
    site:
      default: datadoghq.com
      description: The regional site for a Datadog customer.
      enum:
      - datadoghq.com
      - datadoghq.eu
    subdomain:
      default: api
      description: The subdomain where the API is deployed.
- url: '{protocol}://{name}'
  variables:
    name:
      default: api.datadoghq.com
      description: Full site DNS name.
    protocol:
      default: https
      description: The protocol for accessing the API.
tags:
- description: 'Configure your Datadog-AWS integration directly through the Datadog
    API.

    For more information, see the [AWS integration page](https://docs.datadoghq.com/integrations/amazon_web_services).'
  name: AWS Integration
- description: 'Configure your Datadog-AWS-Logs integration directly through Datadog
    API.

    For more information, see the [AWS integration page](https://docs.datadoghq.com/api/?lang=bash#integration-aws-logs).'
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-aws-logs
  name: AWS Logs Integration
- description: 'Configure your Datadog-Azure integration directly through the Datadog
    API.

    For more information, see the [Datadog-Azure integration page](https://docs.datadoghq.com/integrations/azure).'
  externalDocs:
    url: https://docs.datadoghq.com/integrations/azure
  name: Azure Integration
- description: Interact with your dashboard lists through the API to make it easier
    to organize, find, and share all of your dashboards with your team and organization.
  name: Dashboard Lists
- description: 'Interact with your dashboard lists through the API to make it easier
    to organize,

    find, and share all of your dashboards with your team and organization.'
  name: Dashboards
- description: '[Downtiming](https://docs.datadoghq.com/monitors/downtimes) gives

    you greater control over monitor notifications by allowing you to globally exclude

    scopes from alerting. Downtime settings, which can be scheduled with start and

    end times, prevent all alerting related to specified Datadog tags.'
  name: Downtimes
- description: Interact with embeddable graphs through the API.
  name: Embeddable Graphs
- description: 'The events service allows you to programmatically post events to the
    event stream

    and fetch events from the event stream. Events are limited to 4000 characters.
    If an event is sent out with a message

    containing more than 4000 characters only the 4000 first characters are displayed.'
  name: Events
- description: 'Configure your Datadog-Google Cloud Platform (GCP) integration directly

    through the Datadog API. Read more about the [Datadog-Google Cloud Platform integration](https://docs.datadoghq.com/integrations/google_cloud_platform).'
  externalDocs:
    url: https://docs.datadoghq.com/integrations/google_cloud_platform
  name: GCP Integration
- description: Get information about your live hosts in Datadog.
  name: Hosts
- description: Get a list of IP prefixes belonging to Datadog.
  name: IP Ranges
- description: 'Manage your Datadog API and application keys.


    You need an API and applications key with Admin rights

    to interact with this endpoint. The full list of keys can be seen on your

    [Datadog API page](https://app.datadoghq.com/account/settings#api).'
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/api-app-keys/
  name: Key Management
- description: 'Send your logs to your Datadog platform over HTTP. Limits per HTTP
    request are:


    - Maximum content size per payload: 5MB

    - Maximum size for a single log: 256kB

    - Maximum array size if sending multiple logs in an array: 500 entries


    Any log exceeding 256KB is accepted and truncated by Datadog:

    - For a single log request, the API truncates the log at 256KB and returns a 2xx.

    - For a multi-logs request, the API processes all logs, truncates only logs larger
    than 256KB, and returns a 2xx.


    **Note**: If you are in the Datadog EU site (`app.datadoghq.eu`), the HTTP log
    endpoint is `http-intake.logs.datadoghq.eu`.'
  name: Logs
- description: 'Manage configuration of [log indexes](https://docs.datadoghq.com/logs/indexes/).

    You need an API and application key with Admin rights to interact with this endpoint.'
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/logs/indexes/
  name: Logs Indexes
- description: "Pipelines and processors operate on incoming logs, parsing\nand transforming\
    \ them into structured attributes for easier querying.\n\n- See the [pipelines\
    \ configuration page](https://app.datadoghq.com/logs/pipelines)\n  for a list\
    \ of the pipelines and processors currently configured in our UI.\n\n- For more\
    \ information about Pipelines, see the\n  [pipeline documentation](https://docs.datadoghq.com/logs/processing).\n\
    \n**Note:** These endpoints are only available for admin users.\nMake sure to\
    \ use an application key created by an admin."
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/logs/processing/
  name: Logs Pipelines
- description: "The metrics endpoint allows you to:\n\n- Post metrics data so it can\
    \ be graphed on Datadog\u2019s dashboards\n- Query metrics from any time period\n\
    \n**Note**: A graph can only contain a set number of points\nand as the timeframe\
    \ over which a metric is viewed increases,\naggregation between points occurs\
    \ to stay below that set number.\n\nDatadog has a soft limit of 100 timeseries\
    \ per host\nwhere a timeseries is defined as a unique combination of metric name\
    \ and tag."
  name: Metrics
- description: '[Monitors](https://docs.datadoghq.com/monitors) allow you to watch
    a metric or check that you care about,

    notifying your team when some defined threshold is exceeded.

    Refer to the Creating Monitors page for more information on creating monitors.'
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/monitors/monitor_types/
  name: Monitors
- description: Create, edit, and manage your organizations. Read more about [multi-org
    accounts](https://docs.datadoghq.com/account_management/multi_organization).
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/multi_organization
  name: Organizations
- description: 'Configure your [Datadog-PagerDuty integration](https://docs.datadoghq.com/api/?lang=bash#integration-pagerduty)

    directly through the Datadog API.'
  externalDocs:
    url: https://docs.datadoghq.com/api/?lang=bash#integration-pagerduty
  name: PagerDuty Integration
- description: '[Check API version 2](/api/v2/roles/).'
  name: Roles
- description: This endpoint is outdated. Use the [new Dashboard endpoint](https://docs.datadoghq.com/api/#dashboards)
    instead.
  externalDocs:
    description: Documentation for old endpoints is available in the
    url: https://docs.datadoghq.com/dashboards/guide/screenboard-api-doc/
  name: Screenboards
  x-deprecated: true
- description: 'The service check endpoint allows you to post check statuses for use
    with monitors.

    Service check messages are limited to 500 characters. If a check is posted with
    a message

    containing more than 500 characters, only the first 500 characters are displayed.


    - [Read more about Service Check monitors.][1]

    - [Read more about Process Check monitors.][2]

    - [Read more about Network Check monitors.][3]

    - [Read more about Custom Check monitors.][4]


    [1]: https://docs.datadoghq.com/monitors/monitor_types/host/?tab=checkalert

    [2]: https://docs.datadoghq.com/monitors/monitor_types/process_check/?tab=checkalert

    [3]: https://docs.datadoghq.com/monitors/monitor_types/network/?tab=checkalert

    [4]: https://docs.datadoghq.com/monitors/monitor_types/custom_check/?tab=checkalert'
  name: Service Checks
- description: '[Service Level Objectives](https://docs.datadoghq.com/monitors/service_level_objectives/#configuration)

    (or SLOs) are a key part of the site reliability engineering toolkit.

    SLOs provide a framework for defining clear targets around application performance,

    which ultimately help teams provide a consistent customer experience,

    balance feature development with platform stability,

    and improve communication with internal and external users.'
  name: Service Level Objectives
- description: 'Configure your [Datadog-Slack integration](https://docs.datadoghq.com/integrations/slack)

    directly through Datadog API.'
  externalDocs:
    description: For more information about the Datadog-Slack integration, see the
      integration page.
    url: https://docs.datadoghq.com/integrations/slack
  name: Slack Integration
- description: Take graph snapshots using the API.
  name: Snapshots
- description: "Datadog Synthetics uses simulated user requests and browser rendering\
    \ to help you ensure uptime,\nidentify regional issues, and track your application\
    \ performance. You can use Datadog\u2019s API to\ncreate Synthetics API and browser\
    \ tests programmatically. Synthetics tests are HTTP requests executed by Datadog\
    \ to\nyour web properties or application endpoints at configurable periodic intervals\
    \ from multiple\nlocations around the world. These tests verify that your applications\
    \ are responding to requests,\nas well as that they meet any conditions you define\u2014\
    such as response time, HTTP status code, and\nheader or body contents.\n\nFor\
    \ more information about Synthetics, see the [Synthetics overview](https://docs.datadoghq.com/synthetics/)."
  name: Synthetics
- description: 'The tag endpoint allows you to tag hosts with keywords

    meaningful to you, like `role:database`. All metrics sent

    from a host have its tags applied. When fetching and applying

    tags to a particular host, refer to hosts by name (`yourhost.example.com`).


    The component of your infrastructure responsible for a tag is identified

    by a source. For example, some valid sources include nagios, hudson, jenkins,

    users, feed, chef, puppet, git, bitbucket, fabric, capistrano, etc.


    Read more about tags on the dedicated

    [documentation page](https://docs.datadoghq.com/tagging).'
  name: Tags
- description: This endpoint is outdated. Use the [new Dashboard endpoint](https://docs.datadoghq.com/api/#dashboards)
    instead.
  externalDocs:
    description: Documentation for old endpoints is available in the
    url: https://docs.datadoghq.com/dashboards/guide/screenboard-api-doc/
  name: Timeboards
  x-deprecated: true
- description: 'Learn more about [tracing with Datadog](https://docs.datadoghq.com/tracing)

    and [the APM terminology](https://docs.datadoghq.com/tracing/visualization/services_list).


    The tracing API is an Agent API rather than a service side API.

    Submit your traces to the `http://localhost:8126/v0.3/traces` local endpoint

    so your Agent can forward them to Datadog.'
  name: Tracing
- description: 'The usage metering API allows you to get hourly, daily, and

    monthly usage across multiple facets of Datadog.

    This API is available to all Pro and Enterprise customers.

    Usage is only accessible for [parent-level organizations](https://docs.datadoghq.com/account_management/multi_organization/).


    **Note**: Usage data is delayed by up to 72 hours from when it was incurred.

    It is retained for the past 15 months.'
  externalDocs:
    description: Find out more at
    url: https://docs.datadoghq.com/account_management/billing/usage_details/
  name: Usage Metering
- description: 'Create, edit, and disable users. [Read more about team management][1].


    [1]: https://docs.datadoghq.com/account_management/team'
  name: Users
- description: 'Configure your Datadog-Webhooks integration directly through the Datadog
    API.

    For more information about the Datadog-Webhooks integration,

    see the [integration page](https://docs.datadoghq.com/integrations/webhooks).'
  externalDocs:
    url: https://docs.datadoghq.com/integrations/webhooks
  name: Webhooks Integration
x-group-parameters: true

{
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {
      "ArchiveID": {
        "description": "The ID of the archive.",
        "in": "path",
        "name": "archive_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PageNumber": {
        "description": "Specific page number to return.",
        "in": "query",
        "name": "page[number]",
        "required": false,
        "schema": {
          "default": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "PageOffset": {
        "description": "Specific offset to use as the beginning of the returned page.",
        "in": "query",
        "name": "page[offset]",
        "required": false,
        "schema": {
          "default": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "PageSize": {
        "description": "Size for a given page.",
        "in": "query",
        "name": "page[size]",
        "required": false,
        "schema": {
          "default": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "RestrictionQueryID": {
        "description": "The ID of the restriction query.",
        "in": "path",
        "name": "restriction_query_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RestrictionQueryRoleID": {
        "description": "The ID of the role.",
        "in": "path",
        "name": "role_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RestrictionQueryUserID": {
        "description": "The ID of the user.",
        "in": "path",
        "name": "user_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RoleID": {
        "description": "The ID of the role.",
        "in": "path",
        "name": "role_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SecurityMonitoringRuleID": {
        "description": "The ID of the rule.",
        "in": "path",
        "name": "rule_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ServiceIDPathParameter": {
        "description": "The ID of the service.",
        "in": "path",
        "name": "service_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ServiceIncludeQueryParameter": {
        "description": "Specifies which types of related objects should be included in the response.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "enum": [
            "users"
          ],
          "type": "string"
        }
      },
      "TeamIDPathParameter": {
        "description": "The ID of the team.",
        "in": "path",
        "name": "team_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "TeamIncludeQueryParameter": {
        "description": "Specifies which types of related objects should be included in the response.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "enum": [
            "users"
          ],
          "type": "string"
        }
      },
      "UserID": {
        "description": "The ID of the user.",
        "in": "path",
        "name": "user_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "BadRequestResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Bad Request"
      },
      "ConcurrentModificationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Concurrent Modification"
      },
      "ForbiddenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Forbidden"
      },
      "NotAuthorizedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Not Authorized"
      },
      "NotFoundResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Not Found"
      },
      "UnauthorizedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Unauthorized"
      }
    },
    "schemas": {
      "APIErrorResponse": {
        "description": "API error response.",
        "properties": {
          "errors": {
            "description": "A list of errors.",
            "items": {
              "description": "A list of items.",
              "example": "Bad Request",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors"
        ],
        "type": "object"
      },
      "Creator": {
        "description": "Creator of the object.",
        "properties": {
          "email": {
            "description": "Email of the creator.",
            "type": "string"
          },
          "handle": {
            "description": "Handle of the creator.",
            "type": "string"
          },
          "name": {
            "description": "Name of the creator.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardListAddItemsRequest": {
        "description": "Request containing a list of dashboards to add.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to add the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListAddItemsResponse": {
        "description": "Response containing a list of added dashboards.",
        "properties": {
          "added_dashboards_to_list": {
            "description": "List of dashboards added to the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListDeleteItemsRequest": {
        "description": "Request containing a list of dashboards to delete.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to delete from the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListDeleteItemsResponse": {
        "description": "Response containing a list of deleted dashboards.",
        "properties": {
          "deleted_dashboards_from_list": {
            "description": "List of dashboards deleted from the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListItem": {
        "description": "A dashboard within a list.",
        "properties": {
          "author": {
            "description": "Creator of the object.",
            "properties": {
              "email": {
                "description": "Email of the creator.",
                "type": "string"
              },
              "handle": {
                "description": "Handle of the creator.",
                "type": "string"
              },
              "name": {
                "description": "Name of the creator.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "created": {
            "description": "Date of creation of the dashboard.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "icon": {
            "description": "URL to the icon of the dashboard.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "type": "string"
          },
          "is_favorite": {
            "description": "Whether or not the dashboard is in the favorites.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_read_only": {
            "description": "Whether or not the dashboard is read only.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_shared": {
            "description": "Whether the dashboard is publicly shared or not.",
            "readOnly": true,
            "type": "boolean"
          },
          "modified": {
            "description": "Date of last edition of the dashboard.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "popularity": {
            "description": "Popularity of the dashboard.",
            "format": "int32",
            "maximum": 5,
            "readOnly": true,
            "type": "integer"
          },
          "title": {
            "description": "Title of the dashboard.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          },
          "url": {
            "description": "URL path to the dashboard.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItemRequest": {
        "description": "A dashboard within a list.",
        "properties": {
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItemResponse": {
        "description": "A dashboard within a list.",
        "properties": {
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItems": {
        "description": "Dashboards within a list.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards in the dashboard list.",
            "example": [],
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "author": {
                  "description": "Creator of the object.",
                  "properties": {
                    "email": {
                      "description": "Email of the creator.",
                      "type": "string"
                    },
                    "handle": {
                      "description": "Handle of the creator.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the creator.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "created": {
                  "description": "Date of creation of the dashboard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "icon": {
                  "description": "URL to the icon of the dashboard.",
                  "readOnly": true,
                  "type": "string"
                },
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "is_favorite": {
                  "description": "Whether or not the dashboard is in the favorites.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "is_read_only": {
                  "description": "Whether or not the dashboard is read only.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "is_shared": {
                  "description": "Whether the dashboard is publicly shared or not.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "modified": {
                  "description": "Date of last edition of the dashboard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "popularity": {
                  "description": "Popularity of the dashboard.",
                  "format": "int32",
                  "maximum": 5,
                  "readOnly": true,
                  "type": "integer"
                },
                "title": {
                  "description": "Title of the dashboard.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                },
                "url": {
                  "description": "URL path to the dashboard.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "description": "Number of dashboards in the dashboard list.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          }
        },
        "required": [
          "dashboards"
        ],
        "type": "object"
      },
      "DashboardListUpdateItemsRequest": {
        "description": "Request containing the list of dashboards to update to.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to update the dashboard list to.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListUpdateItemsResponse": {
        "description": "Response containing a list of updated dashboards.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards in the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardType": {
        "description": "The type of the dashboard.",
        "enum": [
          "custom_timeboard",
          "custom_screenboard",
          "integration_screenboard",
          "integration_timeboard",
          "host_timeboard"
        ],
        "type": "string",
        "x-enum-varnames": [
          "CUSTOM_TIMEBOARD",
          "CUSTOM_SCREENBOARD",
          "INTEGRATION_SCREENBOARD",
          "INTEGRATION_TIMEBOARD",
          "HOST_TIMEBOARD"
        ]
      },
      "Log": {
        "description": "Object description of a log after being processed and stored by Datadog.",
        "properties": {
          "attributes": {
            "description": "JSON object containing all log attributes and their associated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "JSON object of attributes from your log.",
                "example": {
                  "customAttribute": 123,
                  "duration": 2345
                },
                "type": "object"
              },
              "host": {
                "description": "Name of the machine from where the logs are being sent.",
                "example": "i-0123",
                "type": "string"
              },
              "message": {
                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                "example": "Host connected to remote",
                "type": "string"
              },
              "service": {
                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                "example": "agent",
                "type": "string"
              },
              "status": {
                "description": "Status of the message associated with your log.",
                "example": "INFO",
                "type": "string"
              },
              "tags": {
                "description": "Array of tags associated with your log.",
                "example": [
                  "team:A"
                ],
                "items": {
                  "description": "Tag associated with your log.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "Timestamp of your log.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the Log.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "log",
            "description": "Type of the event.",
            "enum": [
              "log"
            ],
            "example": "log",
            "type": "string",
            "x-enum-varnames": [
              "LOG"
            ]
          }
        },
        "type": "object"
      },
      "LogType": {
        "default": "log",
        "description": "Type of the event.",
        "enum": [
          "log"
        ],
        "example": "log",
        "type": "string",
        "x-enum-varnames": [
          "LOG"
        ]
      },
      "LogsAggregateBucket": {
        "description": "A bucket values",
        "properties": {
          "by": {
            "additionalProperties": {
              "description": "The values for each group by",
              "type": "string"
            },
            "description": "The key, value pairs for each group by",
            "example": {
              "@state": "success",
              "@version": "abc"
            },
            "type": "object"
          },
          "computes": {
            "additionalProperties": {
              "description": "A bucket value, can be either a timeseries or a single value",
              "oneOf": [
                {
                  "description": "A single string value",
                  "type": "string"
                },
                {
                  "description": "A single number value",
                  "format": "double",
                  "type": "number"
                },
                {
                  "description": "A timeseries array",
                  "items": {
                    "description": "A timeseries point",
                    "properties": {
                      "time": {
                        "description": "The time value for this point",
                        "example": "2020-06-08T11:55:00Z",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value for this point",
                        "example": 19,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-generate-alias-as-model": true
                }
              ]
            },
            "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateBucketValue": {
        "description": "A bucket value, can be either a timeseries or a single value",
        "oneOf": [
          {
            "description": "A single string value",
            "type": "string"
          },
          {
            "description": "A single number value",
            "format": "double",
            "type": "number"
          },
          {
            "description": "A timeseries array",
            "items": {
              "description": "A timeseries point",
              "properties": {
                "time": {
                  "description": "The time value for this point",
                  "example": "2020-06-08T11:55:00Z",
                  "type": "string"
                },
                "value": {
                  "description": "The value for this point",
                  "example": 19,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-generate-alias-as-model": true
          }
        ]
      },
      "LogsAggregateBucketValueSingleNumber": {
        "description": "A single number value",
        "format": "double",
        "type": "number"
      },
      "LogsAggregateBucketValueSingleString": {
        "description": "A single string value",
        "type": "string"
      },
      "LogsAggregateBucketValueTimeseries": {
        "description": "A timeseries array",
        "items": {
          "description": "A timeseries point",
          "properties": {
            "time": {
              "description": "The time value for this point",
              "example": "2020-06-08T11:55:00Z",
              "type": "string"
            },
            "value": {
              "description": "The value for this point",
              "example": 19,
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array",
        "x-generate-alias-as-model": true
      },
      "LogsAggregateBucketValueTimeseriesPoint": {
        "description": "A timeseries point",
        "properties": {
          "time": {
            "description": "The time value for this point",
            "example": "2020-06-08T11:55:00Z",
            "type": "string"
          },
          "value": {
            "description": "The value for this point",
            "example": 19,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LogsAggregateRequest": {
        "description": "The object sent with the request to retrieve a list of logs from your organization.",
        "properties": {
          "compute": {
            "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
            "items": {
              "description": "A compute rule to compute metrics or timeseries",
              "properties": {
                "aggregation": {
                  "description": "An aggregation function",
                  "enum": [
                    "count",
                    "cardinality",
                    "pc75",
                    "pc90",
                    "pc95",
                    "pc98",
                    "pc99",
                    "sum",
                    "min",
                    "max",
                    "avg"
                  ],
                  "example": "pc90",
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "PERCENTILE_75",
                    "PERCENTILE_90",
                    "PERCENTILE_95",
                    "PERCENTILE_98",
                    "PERCENTILE_99",
                    "SUM",
                    "MIN",
                    "MAX",
                    "AVG"
                  ]
                },
                "interval": {
                  "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
                  "example": "5m",
                  "type": "string"
                },
                "metric": {
                  "description": "The metric to use",
                  "example": "@duration",
                  "type": "string"
                },
                "type": {
                  "default": "total",
                  "description": "The type of compute",
                  "enum": [
                    "timeseries",
                    "total"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "TIMESERIES",
                    "TOTAL"
                  ]
                }
              },
              "required": [
                "aggregation"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filter": {
            "description": "The search and filter query settings",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested logs, supports date math and regular timestamps",
                "example": "now-15m",
                "type": "string"
              },
              "indexes": {
                "default": [
                  "*"
                ],
                "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                "example": [
                  "main",
                  "web"
                ],
                "items": {
                  "description": "The name of a log index.",
                  "type": "string"
                },
                "type": "array"
              },
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested logs, supports date math and regular timestamps",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by",
            "items": {
              "description": "A group by rule",
              "properties": {
                "facet": {
                  "description": "The name of the facet to use (required)",
                  "example": "host",
                  "type": "string"
                },
                "histogram": {
                  "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                  "properties": {
                    "interval": {
                      "description": "The bin size of the histogram buckets",
                      "example": 10,
                      "format": "double",
                      "type": "number"
                    },
                    "max": {
                      "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                      "example": 100,
                      "format": "double",
                      "type": "number"
                    },
                    "min": {
                      "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                      "example": 50,
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": [
                    "interval",
                    "min",
                    "max"
                  ],
                  "type": "object"
                },
                "limit": {
                  "default": 10,
                  "description": "The maximum buckets to return for this group by",
                  "type": "integer"
                },
                "missing": {
                  "description": "The value to use for logs that don't have the facet used to group by",
                  "oneOf": [
                    {
                      "description": "The missing value to use if there is string valued facet.",
                      "type": "string"
                    },
                    {
                      "description": "The missing value to use if there is a number valued facet.",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                },
                "sort": {
                  "description": "A sort rule",
                  "example": {
                    "aggregation": "count",
                    "order": "asc"
                  },
                  "properties": {
                    "aggregation": {
                      "description": "An aggregation function",
                      "enum": [
                        "count",
                        "cardinality",
                        "pc75",
                        "pc90",
                        "pc95",
                        "pc98",
                        "pc99",
                        "sum",
                        "min",
                        "max",
                        "avg"
                      ],
                      "example": "pc90",
                      "type": "string",
                      "x-enum-varnames": [
                        "COUNT",
                        "CARDINALITY",
                        "PERCENTILE_75",
                        "PERCENTILE_90",
                        "PERCENTILE_95",
                        "PERCENTILE_98",
                        "PERCENTILE_99",
                        "SUM",
                        "MIN",
                        "MAX",
                        "AVG"
                      ]
                    },
                    "metric": {
                      "description": "The metric to sort by (only used for type=metric)",
                      "example": "@duration",
                      "type": "string"
                    },
                    "order": {
                      "description": "The order to use, ascending or descending",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "example": "asc",
                      "type": "string",
                      "x-enum-varnames": [
                        "ASCENDING",
                        "DESCENDING"
                      ]
                    },
                    "type": {
                      "default": "alphabetical",
                      "description": "The type of sorting algorithm",
                      "enum": [
                        "alphabetical",
                        "measure"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "ALPHABETICAL",
                        "MEASURE"
                      ]
                    }
                  },
                  "type": "object"
                },
                "total": {
                  "default": false,
                  "description": "A resulting object to put the given computes in over all the matching records.",
                  "oneOf": [
                    {
                      "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                      "type": "boolean"
                    },
                    {
                      "description": "A string to use as the key value for the total bucket",
                      "type": "string"
                    },
                    {
                      "description": "A number to use as the key value for the total bucket",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                }
              },
              "required": [
                "facet"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
            "properties": {
              "timeOffset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "paging": {
            "description": "Paging settings",
            "properties": {
              "after": {
                "description": "The returned paging point to use to get the next results",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateResponse": {
        "description": "The response object for the logs aggregate API endpoint",
        "properties": {
          "data": {
            "description": "The query results",
            "properties": {
              "buckets": {
                "description": "The list of matching buckets, one item per bucket",
                "items": {
                  "description": "A bucket values",
                  "properties": {
                    "by": {
                      "additionalProperties": {
                        "description": "The values for each group by",
                        "type": "string"
                      },
                      "description": "The key, value pairs for each group by",
                      "example": {
                        "@state": "success",
                        "@version": "abc"
                      },
                      "type": "object"
                    },
                    "computes": {
                      "additionalProperties": {
                        "description": "A bucket value, can be either a timeseries or a single value",
                        "oneOf": [
                          {
                            "description": "A single string value",
                            "type": "string"
                          },
                          {
                            "description": "A single number value",
                            "format": "double",
                            "type": "number"
                          },
                          {
                            "description": "A timeseries array",
                            "items": {
                              "description": "A timeseries point",
                              "properties": {
                                "time": {
                                  "description": "The time value for this point",
                                  "example": "2020-06-08T11:55:00Z",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The value for this point",
                                  "example": 19,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-generate-alias-as-model": true
                          }
                        ]
                      },
                      "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds",
                "example": 132,
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateResponseStatus": {
        "description": "The status of the response",
        "enum": [
          "done",
          "timeout"
        ],
        "example": "done",
        "type": "string",
        "x-enum-varnames": [
          "DONE",
          "TIMEOUT"
        ]
      },
      "LogsAggregateSort": {
        "description": "A sort rule",
        "example": {
          "aggregation": "count",
          "order": "asc"
        },
        "properties": {
          "aggregation": {
            "description": "An aggregation function",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG"
            ]
          },
          "metric": {
            "description": "The metric to sort by (only used for type=metric)",
            "example": "@duration",
            "type": "string"
          },
          "order": {
            "description": "The order to use, ascending or descending",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "asc",
            "type": "string",
            "x-enum-varnames": [
              "ASCENDING",
              "DESCENDING"
            ]
          },
          "type": {
            "default": "alphabetical",
            "description": "The type of sorting algorithm",
            "enum": [
              "alphabetical",
              "measure"
            ],
            "type": "string",
            "x-enum-varnames": [
              "ALPHABETICAL",
              "MEASURE"
            ]
          }
        },
        "type": "object"
      },
      "LogsAggregateSortType": {
        "default": "alphabetical",
        "description": "The type of sorting algorithm",
        "enum": [
          "alphabetical",
          "measure"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ALPHABETICAL",
          "MEASURE"
        ]
      },
      "LogsAggregationFunction": {
        "description": "An aggregation function",
        "enum": [
          "count",
          "cardinality",
          "pc75",
          "pc90",
          "pc95",
          "pc98",
          "pc99",
          "sum",
          "min",
          "max",
          "avg"
        ],
        "example": "pc90",
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "CARDINALITY",
          "PERCENTILE_75",
          "PERCENTILE_90",
          "PERCENTILE_95",
          "PERCENTILE_98",
          "PERCENTILE_99",
          "SUM",
          "MIN",
          "MAX",
          "AVG"
        ]
      },
      "LogsArchive": {
        "description": "The logs archive.",
        "properties": {
          "data": {
            "description": "The definition of an archive.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive.",
                "properties": {
                  "destination": {
                    "description": "An archive's destination.",
                    "nullable": true,
                    "oneOf": [
                      {
                        "description": "The Azure archive destination.",
                        "properties": {
                          "container": {
                            "description": "The container where the archive will be stored.",
                            "example": "container-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The Azure archive's integration destination.",
                            "properties": {
                              "client_id": {
                                "description": "A client ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "A tenant ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              }
                            },
                            "required": [
                              "tenant_id",
                              "client_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region where the archive will be stored.",
                            "type": "string"
                          },
                          "storage_account": {
                            "description": "The associated storage account.",
                            "example": "account-name",
                            "type": "string"
                          },
                          "type": {
                            "default": "azure",
                            "description": "Type of the Azure archive destination.",
                            "enum": [
                              "azure"
                            ],
                            "example": "azure",
                            "type": "string",
                            "x-enum-varnames": [
                              "AZURE"
                            ]
                          }
                        },
                        "required": [
                          "storage_account",
                          "container",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The GCS archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The GCS archive's integration destination.",
                            "properties": {
                              "client_email": {
                                "description": "A client email.",
                                "example": "youremail@example.com",
                                "type": "string"
                              },
                              "project_id": {
                                "description": "A project ID.",
                                "example": "project-id",
                                "type": "string"
                              }
                            },
                            "required": [
                              "project_id",
                              "client_email"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "gcs",
                            "description": "Type of the GCS archive destination.",
                            "enum": [
                              "gcs"
                            ],
                            "example": "gcs",
                            "type": "string",
                            "x-enum-varnames": [
                              "GCS"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The S3 archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The S3 Archive's integration destination.",
                            "properties": {
                              "account_id": {
                                "description": "The account ID for the integration.",
                                "example": "123456789012",
                                "type": "string"
                              },
                              "role_name": {
                                "description": "The path of the integration.",
                                "example": "role-name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "role_name",
                              "account_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "s3",
                            "description": "Type of the S3 archive destination.",
                            "enum": [
                              "s3"
                            ],
                            "example": "s3",
                            "type": "string",
                            "x-enum-varnames": [
                              "S3"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "required": [
                      "type",
                      "integration"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "The archive name.",
                    "example": "Nginx Archive",
                    "type": "string"
                  },
                  "query": {
                    "description": "The archive query/filter. Logs matching this query are included in the archive.",
                    "example": "source:nginx",
                    "type": "string"
                  },
                  "rehydration_tags": {
                    "description": "An array of tags to add to rehydrated logs from an archive.",
                    "example": [
                      "team:intake",
                      "team:app"
                    ],
                    "items": {
                      "description": "A given tag in the `<KEY>:<VALUE>` format.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "state": {
                    "description": "The state of the archive.",
                    "enum": [
                      "UNKNOWN",
                      "WORKING",
                      "FAILING",
                      "WORKING_AUTH_LEGACY"
                    ],
                    "example": "WORKING",
                    "type": "string",
                    "x-enum-varnames": [
                      "UNKNOWN",
                      "WORKING",
                      "FAILING",
                      "WORKING_AUTH_LEGACY"
                    ]
                  }
                },
                "required": [
                  "name",
                  "query",
                  "destination"
                ],
                "type": "object"
              },
              "id": {
                "description": "The archive ID.",
                "example": "a2zcMylnM4OCHpYusxIi3g",
                "readOnly": true,
                "type": "string"
              },
              "type": {
                "default": "archives",
                "description": "The type of the resource. The value should always be archives.",
                "example": "archives",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveAttributes": {
        "description": "The attributes associated with the archive.",
        "properties": {
          "destination": {
            "description": "An archive's destination.",
            "nullable": true,
            "oneOf": [
              {
                "description": "The Azure archive destination.",
                "properties": {
                  "container": {
                    "description": "The container where the archive will be stored.",
                    "example": "container-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The Azure archive's integration destination.",
                    "properties": {
                      "client_id": {
                        "description": "A client ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "A tenant ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenant_id",
                      "client_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region where the archive will be stored.",
                    "type": "string"
                  },
                  "storage_account": {
                    "description": "The associated storage account.",
                    "example": "account-name",
                    "type": "string"
                  },
                  "type": {
                    "default": "azure",
                    "description": "Type of the Azure archive destination.",
                    "enum": [
                      "azure"
                    ],
                    "example": "azure",
                    "type": "string",
                    "x-enum-varnames": [
                      "AZURE"
                    ]
                  }
                },
                "required": [
                  "storage_account",
                  "container",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The GCS archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The GCS archive's integration destination.",
                    "properties": {
                      "client_email": {
                        "description": "A client email.",
                        "example": "youremail@example.com",
                        "type": "string"
                      },
                      "project_id": {
                        "description": "A project ID.",
                        "example": "project-id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_id",
                      "client_email"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "gcs",
                    "description": "Type of the GCS archive destination.",
                    "enum": [
                      "gcs"
                    ],
                    "example": "gcs",
                    "type": "string",
                    "x-enum-varnames": [
                      "GCS"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The S3 archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The S3 Archive's integration destination.",
                    "properties": {
                      "account_id": {
                        "description": "The account ID for the integration.",
                        "example": "123456789012",
                        "type": "string"
                      },
                      "role_name": {
                        "description": "The path of the integration.",
                        "example": "role-name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_name",
                      "account_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "s3",
                    "description": "Type of the S3 archive destination.",
                    "enum": [
                      "s3"
                    ],
                    "example": "s3",
                    "type": "string",
                    "x-enum-varnames": [
                      "S3"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              }
            ],
            "required": [
              "type",
              "integration"
            ],
            "type": "object"
          },
          "name": {
            "description": "The archive name.",
            "example": "Nginx Archive",
            "type": "string"
          },
          "query": {
            "description": "The archive query/filter. Logs matching this query are included in the archive.",
            "example": "source:nginx",
            "type": "string"
          },
          "rehydration_tags": {
            "description": "An array of tags to add to rehydrated logs from an archive.",
            "example": [
              "team:intake",
              "team:app"
            ],
            "items": {
              "description": "A given tag in the `<KEY>:<VALUE>` format.",
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "description": "The state of the archive.",
            "enum": [
              "UNKNOWN",
              "WORKING",
              "FAILING",
              "WORKING_AUTH_LEGACY"
            ],
            "example": "WORKING",
            "type": "string",
            "x-enum-varnames": [
              "UNKNOWN",
              "WORKING",
              "FAILING",
              "WORKING_AUTH_LEGACY"
            ]
          }
        },
        "required": [
          "name",
          "query",
          "destination"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequest": {
        "description": "The logs archive.",
        "properties": {
          "data": {
            "description": "The definition of an archive.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive.",
                "properties": {
                  "destination": {
                    "description": "An archive's destination.",
                    "oneOf": [
                      {
                        "description": "The Azure archive destination.",
                        "properties": {
                          "container": {
                            "description": "The container where the archive will be stored.",
                            "example": "container-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The Azure archive's integration destination.",
                            "properties": {
                              "client_id": {
                                "description": "A client ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "A tenant ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              }
                            },
                            "required": [
                              "tenant_id",
                              "client_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region where the archive will be stored.",
                            "type": "string"
                          },
                          "storage_account": {
                            "description": "The associated storage account.",
                            "example": "account-name",
                            "type": "string"
                          },
                          "type": {
                            "default": "azure",
                            "description": "Type of the Azure archive destination.",
                            "enum": [
                              "azure"
                            ],
                            "example": "azure",
                            "type": "string",
                            "x-enum-varnames": [
                              "AZURE"
                            ]
                          }
                        },
                        "required": [
                          "storage_account",
                          "container",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The GCS archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The GCS archive's integration destination.",
                            "properties": {
                              "client_email": {
                                "description": "A client email.",
                                "example": "youremail@example.com",
                                "type": "string"
                              },
                              "project_id": {
                                "description": "A project ID.",
                                "example": "project-id",
                                "type": "string"
                              }
                            },
                            "required": [
                              "project_id",
                              "client_email"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "gcs",
                            "description": "Type of the GCS archive destination.",
                            "enum": [
                              "gcs"
                            ],
                            "example": "gcs",
                            "type": "string",
                            "x-enum-varnames": [
                              "GCS"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The S3 archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The S3 Archive's integration destination.",
                            "properties": {
                              "account_id": {
                                "description": "The account ID for the integration.",
                                "example": "123456789012",
                                "type": "string"
                              },
                              "role_name": {
                                "description": "The path of the integration.",
                                "example": "role-name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "role_name",
                              "account_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "s3",
                            "description": "Type of the S3 archive destination.",
                            "enum": [
                              "s3"
                            ],
                            "example": "s3",
                            "type": "string",
                            "x-enum-varnames": [
                              "S3"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "required": [
                      "type",
                      "integration"
                    ],
                    "type": "object"
                  },
                  "name": {
                    "description": "The archive name.",
                    "example": "Nginx Archive",
                    "type": "string"
                  },
                  "query": {
                    "description": "The archive query/filter. Logs matching this query are included in the archive.",
                    "example": "source:nginx",
                    "type": "string"
                  },
                  "rehydration_tags": {
                    "description": "An array of tags to add to rehydrated logs from an archive.",
                    "example": [
                      "team:intake",
                      "team:app"
                    ],
                    "items": {
                      "description": "A given tag in the `<KEY>:<VALUE>` format.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "query",
                  "destination"
                ],
                "type": "object"
              },
              "type": {
                "default": "archives",
                "description": "The type of the resource. The value should always be archives.",
                "example": "archives",
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveCreateRequestAttributes": {
        "description": "The attributes associated with the archive.",
        "properties": {
          "destination": {
            "description": "An archive's destination.",
            "oneOf": [
              {
                "description": "The Azure archive destination.",
                "properties": {
                  "container": {
                    "description": "The container where the archive will be stored.",
                    "example": "container-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The Azure archive's integration destination.",
                    "properties": {
                      "client_id": {
                        "description": "A client ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "A tenant ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenant_id",
                      "client_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region where the archive will be stored.",
                    "type": "string"
                  },
                  "storage_account": {
                    "description": "The associated storage account.",
                    "example": "account-name",
                    "type": "string"
                  },
                  "type": {
                    "default": "azure",
                    "description": "Type of the Azure archive destination.",
                    "enum": [
                      "azure"
                    ],
                    "example": "azure",
                    "type": "string",
                    "x-enum-varnames": [
                      "AZURE"
                    ]
                  }
                },
                "required": [
                  "storage_account",
                  "container",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The GCS archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The GCS archive's integration destination.",
                    "properties": {
                      "client_email": {
                        "description": "A client email.",
                        "example": "youremail@example.com",
                        "type": "string"
                      },
                      "project_id": {
                        "description": "A project ID.",
                        "example": "project-id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_id",
                      "client_email"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "gcs",
                    "description": "Type of the GCS archive destination.",
                    "enum": [
                      "gcs"
                    ],
                    "example": "gcs",
                    "type": "string",
                    "x-enum-varnames": [
                      "GCS"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The S3 archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The S3 Archive's integration destination.",
                    "properties": {
                      "account_id": {
                        "description": "The account ID for the integration.",
                        "example": "123456789012",
                        "type": "string"
                      },
                      "role_name": {
                        "description": "The path of the integration.",
                        "example": "role-name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_name",
                      "account_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "s3",
                    "description": "Type of the S3 archive destination.",
                    "enum": [
                      "s3"
                    ],
                    "example": "s3",
                    "type": "string",
                    "x-enum-varnames": [
                      "S3"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              }
            ],
            "required": [
              "type",
              "integration"
            ],
            "type": "object"
          },
          "name": {
            "description": "The archive name.",
            "example": "Nginx Archive",
            "type": "string"
          },
          "query": {
            "description": "The archive query/filter. Logs matching this query are included in the archive.",
            "example": "source:nginx",
            "type": "string"
          },
          "rehydration_tags": {
            "description": "An array of tags to add to rehydrated logs from an archive.",
            "example": [
              "team:intake",
              "team:app"
            ],
            "items": {
              "description": "A given tag in the `<KEY>:<VALUE>` format.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "query",
          "destination"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequestDefinition": {
        "description": "The definition of an archive.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive.",
            "properties": {
              "destination": {
                "description": "An archive's destination.",
                "oneOf": [
                  {
                    "description": "The Azure archive destination.",
                    "properties": {
                      "container": {
                        "description": "The container where the archive will be stored.",
                        "example": "container-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The Azure archive's integration destination.",
                        "properties": {
                          "client_id": {
                            "description": "A client ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          },
                          "tenant_id": {
                            "description": "A tenant ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenant_id",
                          "client_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region where the archive will be stored.",
                        "type": "string"
                      },
                      "storage_account": {
                        "description": "The associated storage account.",
                        "example": "account-name",
                        "type": "string"
                      },
                      "type": {
                        "default": "azure",
                        "description": "Type of the Azure archive destination.",
                        "enum": [
                          "azure"
                        ],
                        "example": "azure",
                        "type": "string",
                        "x-enum-varnames": [
                          "AZURE"
                        ]
                      }
                    },
                    "required": [
                      "storage_account",
                      "container",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The GCS archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The GCS archive's integration destination.",
                        "properties": {
                          "client_email": {
                            "description": "A client email.",
                            "example": "youremail@example.com",
                            "type": "string"
                          },
                          "project_id": {
                            "description": "A project ID.",
                            "example": "project-id",
                            "type": "string"
                          }
                        },
                        "required": [
                          "project_id",
                          "client_email"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "gcs",
                        "description": "Type of the GCS archive destination.",
                        "enum": [
                          "gcs"
                        ],
                        "example": "gcs",
                        "type": "string",
                        "x-enum-varnames": [
                          "GCS"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The S3 archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The S3 Archive's integration destination.",
                        "properties": {
                          "account_id": {
                            "description": "The account ID for the integration.",
                            "example": "123456789012",
                            "type": "string"
                          },
                          "role_name": {
                            "description": "The path of the integration.",
                            "example": "role-name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "role_name",
                          "account_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "s3",
                        "description": "Type of the S3 archive destination.",
                        "enum": [
                          "s3"
                        ],
                        "example": "s3",
                        "type": "string",
                        "x-enum-varnames": [
                          "S3"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  }
                ],
                "required": [
                  "type",
                  "integration"
                ],
                "type": "object"
              },
              "name": {
                "description": "The archive name.",
                "example": "Nginx Archive",
                "type": "string"
              },
              "query": {
                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                "example": "source:nginx",
                "type": "string"
              },
              "rehydration_tags": {
                "description": "An array of tags to add to rehydrated logs from an archive.",
                "example": [
                  "team:intake",
                  "team:app"
                ],
                "items": {
                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "name",
              "query",
              "destination"
            ],
            "type": "object"
          },
          "type": {
            "default": "archives",
            "description": "The type of the resource. The value should always be archives.",
            "example": "archives",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequestDestination": {
        "description": "An archive's destination.",
        "oneOf": [
          {
            "description": "The Azure archive destination.",
            "properties": {
              "container": {
                "description": "The container where the archive will be stored.",
                "example": "container-name",
                "type": "string"
              },
              "integration": {
                "description": "The Azure archive's integration destination.",
                "properties": {
                  "client_id": {
                    "description": "A client ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "A tenant ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  }
                },
                "required": [
                  "tenant_id",
                  "client_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "region": {
                "description": "The region where the archive will be stored.",
                "type": "string"
              },
              "storage_account": {
                "description": "The associated storage account.",
                "example": "account-name",
                "type": "string"
              },
              "type": {
                "default": "azure",
                "description": "Type of the Azure archive destination.",
                "enum": [
                  "azure"
                ],
                "example": "azure",
                "type": "string",
                "x-enum-varnames": [
                  "AZURE"
                ]
              }
            },
            "required": [
              "storage_account",
              "container",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The GCS archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The GCS archive's integration destination.",
                "properties": {
                  "client_email": {
                    "description": "A client email.",
                    "example": "youremail@example.com",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "A project ID.",
                    "example": "project-id",
                    "type": "string"
                  }
                },
                "required": [
                  "project_id",
                  "client_email"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "gcs",
                "description": "Type of the GCS archive destination.",
                "enum": [
                  "gcs"
                ],
                "example": "gcs",
                "type": "string",
                "x-enum-varnames": [
                  "GCS"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The S3 archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The S3 Archive's integration destination.",
                "properties": {
                  "account_id": {
                    "description": "The account ID for the integration.",
                    "example": "123456789012",
                    "type": "string"
                  },
                  "role_name": {
                    "description": "The path of the integration.",
                    "example": "role-name",
                    "type": "string"
                  }
                },
                "required": [
                  "role_name",
                  "account_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "s3",
                "description": "Type of the S3 archive destination.",
                "enum": [
                  "s3"
                ],
                "example": "s3",
                "type": "string",
                "x-enum-varnames": [
                  "S3"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          }
        ],
        "required": [
          "type",
          "integration"
        ],
        "type": "object"
      },
      "LogsArchiveDefinition": {
        "description": "The definition of an archive.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive.",
            "properties": {
              "destination": {
                "description": "An archive's destination.",
                "nullable": true,
                "oneOf": [
                  {
                    "description": "The Azure archive destination.",
                    "properties": {
                      "container": {
                        "description": "The container where the archive will be stored.",
                        "example": "container-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The Azure archive's integration destination.",
                        "properties": {
                          "client_id": {
                            "description": "A client ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          },
                          "tenant_id": {
                            "description": "A tenant ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenant_id",
                          "client_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region where the archive will be stored.",
                        "type": "string"
                      },
                      "storage_account": {
                        "description": "The associated storage account.",
                        "example": "account-name",
                        "type": "string"
                      },
                      "type": {
                        "default": "azure",
                        "description": "Type of the Azure archive destination.",
                        "enum": [
                          "azure"
                        ],
                        "example": "azure",
                        "type": "string",
                        "x-enum-varnames": [
                          "AZURE"
                        ]
                      }
                    },
                    "required": [
                      "storage_account",
                      "container",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The GCS archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The GCS archive's integration destination.",
                        "properties": {
                          "client_email": {
                            "description": "A client email.",
                            "example": "youremail@example.com",
                            "type": "string"
                          },
                          "project_id": {
                            "description": "A project ID.",
                            "example": "project-id",
                            "type": "string"
                          }
                        },
                        "required": [
                          "project_id",
                          "client_email"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "gcs",
                        "description": "Type of the GCS archive destination.",
                        "enum": [
                          "gcs"
                        ],
                        "example": "gcs",
                        "type": "string",
                        "x-enum-varnames": [
                          "GCS"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The S3 archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The S3 Archive's integration destination.",
                        "properties": {
                          "account_id": {
                            "description": "The account ID for the integration.",
                            "example": "123456789012",
                            "type": "string"
                          },
                          "role_name": {
                            "description": "The path of the integration.",
                            "example": "role-name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "role_name",
                          "account_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "s3",
                        "description": "Type of the S3 archive destination.",
                        "enum": [
                          "s3"
                        ],
                        "example": "s3",
                        "type": "string",
                        "x-enum-varnames": [
                          "S3"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  }
                ],
                "required": [
                  "type",
                  "integration"
                ],
                "type": "object"
              },
              "name": {
                "description": "The archive name.",
                "example": "Nginx Archive",
                "type": "string"
              },
              "query": {
                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                "example": "source:nginx",
                "type": "string"
              },
              "rehydration_tags": {
                "description": "An array of tags to add to rehydrated logs from an archive.",
                "example": [
                  "team:intake",
                  "team:app"
                ],
                "items": {
                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                  "type": "string"
                },
                "type": "array"
              },
              "state": {
                "description": "The state of the archive.",
                "enum": [
                  "UNKNOWN",
                  "WORKING",
                  "FAILING",
                  "WORKING_AUTH_LEGACY"
                ],
                "example": "WORKING",
                "type": "string",
                "x-enum-varnames": [
                  "UNKNOWN",
                  "WORKING",
                  "FAILING",
                  "WORKING_AUTH_LEGACY"
                ]
              }
            },
            "required": [
              "name",
              "query",
              "destination"
            ],
            "type": "object"
          },
          "id": {
            "description": "The archive ID.",
            "example": "a2zcMylnM4OCHpYusxIi3g",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "default": "archives",
            "description": "The type of the resource. The value should always be archives.",
            "example": "archives",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestination": {
        "description": "An archive's destination.",
        "nullable": true,
        "oneOf": [
          {
            "description": "The Azure archive destination.",
            "properties": {
              "container": {
                "description": "The container where the archive will be stored.",
                "example": "container-name",
                "type": "string"
              },
              "integration": {
                "description": "The Azure archive's integration destination.",
                "properties": {
                  "client_id": {
                    "description": "A client ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "A tenant ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  }
                },
                "required": [
                  "tenant_id",
                  "client_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "region": {
                "description": "The region where the archive will be stored.",
                "type": "string"
              },
              "storage_account": {
                "description": "The associated storage account.",
                "example": "account-name",
                "type": "string"
              },
              "type": {
                "default": "azure",
                "description": "Type of the Azure archive destination.",
                "enum": [
                  "azure"
                ],
                "example": "azure",
                "type": "string",
                "x-enum-varnames": [
                  "AZURE"
                ]
              }
            },
            "required": [
              "storage_account",
              "container",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The GCS archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The GCS archive's integration destination.",
                "properties": {
                  "client_email": {
                    "description": "A client email.",
                    "example": "youremail@example.com",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "A project ID.",
                    "example": "project-id",
                    "type": "string"
                  }
                },
                "required": [
                  "project_id",
                  "client_email"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "gcs",
                "description": "Type of the GCS archive destination.",
                "enum": [
                  "gcs"
                ],
                "example": "gcs",
                "type": "string",
                "x-enum-varnames": [
                  "GCS"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The S3 archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The S3 Archive's integration destination.",
                "properties": {
                  "account_id": {
                    "description": "The account ID for the integration.",
                    "example": "123456789012",
                    "type": "string"
                  },
                  "role_name": {
                    "description": "The path of the integration.",
                    "example": "role-name",
                    "type": "string"
                  }
                },
                "required": [
                  "role_name",
                  "account_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "s3",
                "description": "Type of the S3 archive destination.",
                "enum": [
                  "s3"
                ],
                "example": "s3",
                "type": "string",
                "x-enum-varnames": [
                  "S3"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          }
        ],
        "required": [
          "type",
          "integration"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationAzure": {
        "description": "The Azure archive destination.",
        "properties": {
          "container": {
            "description": "The container where the archive will be stored.",
            "example": "container-name",
            "type": "string"
          },
          "integration": {
            "description": "The Azure archive's integration destination.",
            "properties": {
              "client_id": {
                "description": "A client ID.",
                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                "type": "string"
              },
              "tenant_id": {
                "description": "A tenant ID.",
                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                "type": "string"
              }
            },
            "required": [
              "tenant_id",
              "client_id"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "region": {
            "description": "The region where the archive will be stored.",
            "type": "string"
          },
          "storage_account": {
            "description": "The associated storage account.",
            "example": "account-name",
            "type": "string"
          },
          "type": {
            "default": "azure",
            "description": "Type of the Azure archive destination.",
            "enum": [
              "azure"
            ],
            "example": "azure",
            "type": "string",
            "x-enum-varnames": [
              "AZURE"
            ]
          }
        },
        "required": [
          "storage_account",
          "container",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationAzureType": {
        "default": "azure",
        "description": "Type of the Azure archive destination.",
        "enum": [
          "azure"
        ],
        "example": "azure",
        "type": "string",
        "x-enum-varnames": [
          "AZURE"
        ]
      },
      "LogsArchiveDestinationGCS": {
        "description": "The GCS archive destination.",
        "properties": {
          "bucket": {
            "description": "The bucket where the archive will be stored.",
            "example": "bucket-name",
            "type": "string"
          },
          "integration": {
            "description": "The GCS archive's integration destination.",
            "properties": {
              "client_email": {
                "description": "A client email.",
                "example": "youremail@example.com",
                "type": "string"
              },
              "project_id": {
                "description": "A project ID.",
                "example": "project-id",
                "type": "string"
              }
            },
            "required": [
              "project_id",
              "client_email"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "type": {
            "default": "gcs",
            "description": "Type of the GCS archive destination.",
            "enum": [
              "gcs"
            ],
            "example": "gcs",
            "type": "string",
            "x-enum-varnames": [
              "GCS"
            ]
          }
        },
        "required": [
          "bucket",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationGCSType": {
        "default": "gcs",
        "description": "Type of the GCS archive destination.",
        "enum": [
          "gcs"
        ],
        "example": "gcs",
        "type": "string",
        "x-enum-varnames": [
          "GCS"
        ]
      },
      "LogsArchiveDestinationS3": {
        "description": "The S3 archive destination.",
        "properties": {
          "bucket": {
            "description": "The bucket where the archive will be stored.",
            "example": "bucket-name",
            "type": "string"
          },
          "integration": {
            "description": "The S3 Archive's integration destination.",
            "properties": {
              "account_id": {
                "description": "The account ID for the integration.",
                "example": "123456789012",
                "type": "string"
              },
              "role_name": {
                "description": "The path of the integration.",
                "example": "role-name",
                "type": "string"
              }
            },
            "required": [
              "role_name",
              "account_id"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "type": {
            "default": "s3",
            "description": "Type of the S3 archive destination.",
            "enum": [
              "s3"
            ],
            "example": "s3",
            "type": "string",
            "x-enum-varnames": [
              "S3"
            ]
          }
        },
        "required": [
          "bucket",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationS3Type": {
        "default": "s3",
        "description": "Type of the S3 archive destination.",
        "enum": [
          "s3"
        ],
        "example": "s3",
        "type": "string",
        "x-enum-varnames": [
          "S3"
        ]
      },
      "LogsArchiveIntegrationAzure": {
        "description": "The Azure archive's integration destination.",
        "properties": {
          "client_id": {
            "description": "A client ID.",
            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
            "type": "string"
          },
          "tenant_id": {
            "description": "A tenant ID.",
            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
            "type": "string"
          }
        },
        "required": [
          "tenant_id",
          "client_id"
        ],
        "type": "object"
      },
      "LogsArchiveIntegrationGCS": {
        "description": "The GCS archive's integration destination.",
        "properties": {
          "client_email": {
            "description": "A client email.",
            "example": "youremail@example.com",
            "type": "string"
          },
          "project_id": {
            "description": "A project ID.",
            "example": "project-id",
            "type": "string"
          }
        },
        "required": [
          "project_id",
          "client_email"
        ],
        "type": "object"
      },
      "LogsArchiveIntegrationS3": {
        "description": "The S3 Archive's integration destination.",
        "properties": {
          "account_id": {
            "description": "The account ID for the integration.",
            "example": "123456789012",
            "type": "string"
          },
          "role_name": {
            "description": "The path of the integration.",
            "example": "role-name",
            "type": "string"
          }
        },
        "required": [
          "role_name",
          "account_id"
        ],
        "type": "object"
      },
      "LogsArchiveOrder": {
        "description": "A ordered list of archive IDs.",
        "properties": {
          "data": {
            "description": "The definition of an archive order.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive order.",
                "properties": {
                  "archive_ids": {
                    "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                    "example": [
                      "a2zcMylnM4OCHpYusxIi1g",
                      "a2zcMylnM4OCHpYusxIi2g",
                      "a2zcMylnM4OCHpYusxIi3g"
                    ],
                    "items": {
                      "description": "A given archive ID.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "archive_ids"
                ],
                "type": "object"
              },
              "type": {
                "default": "archive_order",
                "description": "Type of the archive order definition.",
                "enum": [
                  "archive_order"
                ],
                "example": "archive_order",
                "type": "string",
                "x-enum-varnames": [
                  "ARCHIVE_ORDER"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveOrderAttributes": {
        "description": "The attributes associated with the archive order.",
        "properties": {
          "archive_ids": {
            "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
            "example": [
              "a2zcMylnM4OCHpYusxIi1g",
              "a2zcMylnM4OCHpYusxIi2g",
              "a2zcMylnM4OCHpYusxIi3g"
            ],
            "items": {
              "description": "A given archive ID.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "archive_ids"
        ],
        "type": "object"
      },
      "LogsArchiveOrderDefinition": {
        "description": "The definition of an archive order.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive order.",
            "properties": {
              "archive_ids": {
                "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                "example": [
                  "a2zcMylnM4OCHpYusxIi1g",
                  "a2zcMylnM4OCHpYusxIi2g",
                  "a2zcMylnM4OCHpYusxIi3g"
                ],
                "items": {
                  "description": "A given archive ID.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "archive_ids"
            ],
            "type": "object"
          },
          "type": {
            "default": "archive_order",
            "description": "Type of the archive order definition.",
            "enum": [
              "archive_order"
            ],
            "example": "archive_order",
            "type": "string",
            "x-enum-varnames": [
              "ARCHIVE_ORDER"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "LogsArchiveOrderDefinitionType": {
        "default": "archive_order",
        "description": "Type of the archive order definition.",
        "enum": [
          "archive_order"
        ],
        "example": "archive_order",
        "type": "string",
        "x-enum-varnames": [
          "ARCHIVE_ORDER"
        ]
      },
      "LogsArchiveState": {
        "description": "The state of the archive.",
        "enum": [
          "UNKNOWN",
          "WORKING",
          "FAILING",
          "WORKING_AUTH_LEGACY"
        ],
        "example": "WORKING",
        "type": "string",
        "x-enum-varnames": [
          "UNKNOWN",
          "WORKING",
          "FAILING",
          "WORKING_AUTH_LEGACY"
        ]
      },
      "LogsArchives": {
        "description": "The available archives.",
        "properties": {
          "data": {
            "description": "A list of archives.",
            "items": {
              "description": "The definition of an archive.",
              "properties": {
                "attributes": {
                  "description": "The attributes associated with the archive.",
                  "properties": {
                    "destination": {
                      "description": "An archive's destination.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "description": "The Azure archive destination.",
                          "properties": {
                            "container": {
                              "description": "The container where the archive will be stored.",
                              "example": "container-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The Azure archive's integration destination.",
                              "properties": {
                                "client_id": {
                                  "description": "A client ID.",
                                  "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "description": "A tenant ID.",
                                  "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "tenant_id",
                                "client_id"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "region": {
                              "description": "The region where the archive will be stored.",
                              "type": "string"
                            },
                            "storage_account": {
                              "description": "The associated storage account.",
                              "example": "account-name",
                              "type": "string"
                            },
                            "type": {
                              "default": "azure",
                              "description": "Type of the Azure archive destination.",
                              "enum": [
                                "azure"
                              ],
                              "example": "azure",
                              "type": "string",
                              "x-enum-varnames": [
                                "AZURE"
                              ]
                            }
                          },
                          "required": [
                            "storage_account",
                            "container",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The GCS archive destination.",
                          "properties": {
                            "bucket": {
                              "description": "The bucket where the archive will be stored.",
                              "example": "bucket-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The GCS archive's integration destination.",
                              "properties": {
                                "client_email": {
                                  "description": "A client email.",
                                  "example": "youremail@example.com",
                                  "type": "string"
                                },
                                "project_id": {
                                  "description": "A project ID.",
                                  "example": "project-id",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "project_id",
                                "client_email"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "type": {
                              "default": "gcs",
                              "description": "Type of the GCS archive destination.",
                              "enum": [
                                "gcs"
                              ],
                              "example": "gcs",
                              "type": "string",
                              "x-enum-varnames": [
                                "GCS"
                              ]
                            }
                          },
                          "required": [
                            "bucket",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The S3 archive destination.",
                          "properties": {
                            "bucket": {
                              "description": "The bucket where the archive will be stored.",
                              "example": "bucket-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The S3 Archive's integration destination.",
                              "properties": {
                                "account_id": {
                                  "description": "The account ID for the integration.",
                                  "example": "123456789012",
                                  "type": "string"
                                },
                                "role_name": {
                                  "description": "The path of the integration.",
                                  "example": "role-name",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "role_name",
                                "account_id"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "type": {
                              "default": "s3",
                              "description": "Type of the S3 archive destination.",
                              "enum": [
                                "s3"
                              ],
                              "example": "s3",
                              "type": "string",
                              "x-enum-varnames": [
                                "S3"
                              ]
                            }
                          },
                          "required": [
                            "bucket",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        }
                      ],
                      "required": [
                        "type",
                        "integration"
                      ],
                      "type": "object"
                    },
                    "name": {
                      "description": "The archive name.",
                      "example": "Nginx Archive",
                      "type": "string"
                    },
                    "query": {
                      "description": "The archive query/filter. Logs matching this query are included in the archive.",
                      "example": "source:nginx",
                      "type": "string"
                    },
                    "rehydration_tags": {
                      "description": "An array of tags to add to rehydrated logs from an archive.",
                      "example": [
                        "team:intake",
                        "team:app"
                      ],
                      "items": {
                        "description": "A given tag in the `<KEY>:<VALUE>` format.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "state": {
                      "description": "The state of the archive.",
                      "enum": [
                        "UNKNOWN",
                        "WORKING",
                        "FAILING",
                        "WORKING_AUTH_LEGACY"
                      ],
                      "example": "WORKING",
                      "type": "string",
                      "x-enum-varnames": [
                        "UNKNOWN",
                        "WORKING",
                        "FAILING",
                        "WORKING_AUTH_LEGACY"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "query",
                    "destination"
                  ],
                  "type": "object"
                },
                "id": {
                  "description": "The archive ID.",
                  "example": "a2zcMylnM4OCHpYusxIi3g",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "default": "archives",
                  "description": "The type of the resource. The value should always be archives.",
                  "example": "archives",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsCompute": {
        "description": "A compute rule to compute metrics or timeseries",
        "properties": {
          "aggregation": {
            "description": "An aggregation function",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG"
            ]
          },
          "interval": {
            "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
            "example": "5m",
            "type": "string"
          },
          "metric": {
            "description": "The metric to use",
            "example": "@duration",
            "type": "string"
          },
          "type": {
            "default": "total",
            "description": "The type of compute",
            "enum": [
              "timeseries",
              "total"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESERIES",
              "TOTAL"
            ]
          }
        },
        "required": [
          "aggregation"
        ],
        "type": "object"
      },
      "LogsComputeType": {
        "default": "total",
        "description": "The type of compute",
        "enum": [
          "timeseries",
          "total"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESERIES",
          "TOTAL"
        ]
      },
      "LogsGroupBy": {
        "description": "A group by rule",
        "properties": {
          "facet": {
            "description": "The name of the facet to use (required)",
            "example": "host",
            "type": "string"
          },
          "histogram": {
            "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
            "properties": {
              "interval": {
                "description": "The bin size of the histogram buckets",
                "example": 10,
                "format": "double",
                "type": "number"
              },
              "max": {
                "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                "example": 100,
                "format": "double",
                "type": "number"
              },
              "min": {
                "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                "example": 50,
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "interval",
              "min",
              "max"
            ],
            "type": "object"
          },
          "limit": {
            "default": 10,
            "description": "The maximum buckets to return for this group by",
            "type": "integer"
          },
          "missing": {
            "description": "The value to use for logs that don't have the facet used to group by",
            "oneOf": [
              {
                "description": "The missing value to use if there is string valued facet.",
                "type": "string"
              },
              {
                "description": "The missing value to use if there is a number valued facet.",
                "format": "double",
                "type": "number"
              }
            ]
          },
          "sort": {
            "description": "A sort rule",
            "example": {
              "aggregation": "count",
              "order": "asc"
            },
            "properties": {
              "aggregation": {
                "description": "An aggregation function",
                "enum": [
                  "count",
                  "cardinality",
                  "pc75",
                  "pc90",
                  "pc95",
                  "pc98",
                  "pc99",
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "example": "pc90",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT",
                  "CARDINALITY",
                  "PERCENTILE_75",
                  "PERCENTILE_90",
                  "PERCENTILE_95",
                  "PERCENTILE_98",
                  "PERCENTILE_99",
                  "SUM",
                  "MIN",
                  "MAX",
                  "AVG"
                ]
              },
              "metric": {
                "description": "The metric to sort by (only used for type=metric)",
                "example": "@duration",
                "type": "string"
              },
              "order": {
                "description": "The order to use, ascending or descending",
                "enum": [
                  "asc",
                  "desc"
                ],
                "example": "asc",
                "type": "string",
                "x-enum-varnames": [
                  "ASCENDING",
                  "DESCENDING"
                ]
              },
              "type": {
                "default": "alphabetical",
                "description": "The type of sorting algorithm",
                "enum": [
                  "alphabetical",
                  "measure"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "ALPHABETICAL",
                  "MEASURE"
                ]
              }
            },
            "type": "object"
          },
          "total": {
            "default": false,
            "description": "A resulting object to put the given computes in over all the matching records.",
            "oneOf": [
              {
                "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                "type": "boolean"
              },
              {
                "description": "A string to use as the key value for the total bucket",
                "type": "string"
              },
              {
                "description": "A number to use as the key value for the total bucket",
                "format": "double",
                "type": "number"
              }
            ]
          }
        },
        "required": [
          "facet"
        ],
        "type": "object"
      },
      "LogsGroupByMissing": {
        "description": "The value to use for logs that don't have the facet used to group by",
        "oneOf": [
          {
            "description": "The missing value to use if there is string valued facet.",
            "type": "string"
          },
          {
            "description": "The missing value to use if there is a number valued facet.",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "LogsGroupByMissingNumber": {
        "description": "The missing value to use if there is a number valued facet.",
        "format": "double",
        "type": "number"
      },
      "LogsGroupByMissingString": {
        "description": "The missing value to use if there is string valued facet.",
        "type": "string"
      },
      "LogsGroupByTotal": {
        "default": false,
        "description": "A resulting object to put the given computes in over all the matching records.",
        "oneOf": [
          {
            "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
            "type": "boolean"
          },
          {
            "description": "A string to use as the key value for the total bucket",
            "type": "string"
          },
          {
            "description": "A number to use as the key value for the total bucket",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "LogsGroupByTotalBoolean": {
        "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
        "type": "boolean"
      },
      "LogsGroupByTotalNumber": {
        "description": "A number to use as the key value for the total bucket",
        "format": "double",
        "type": "number"
      },
      "LogsGroupByTotalString": {
        "description": "A string to use as the key value for the total bucket",
        "type": "string"
      },
      "LogsListRequest": {
        "description": "The request for a logs list.",
        "properties": {
          "filter": {
            "description": "The search and filter query settings",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested logs, supports date math and regular timestamps",
                "example": "now-15m",
                "type": "string"
              },
              "indexes": {
                "default": [
                  "*"
                ],
                "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                "example": [
                  "main",
                  "web"
                ],
                "items": {
                  "description": "The name of a log index.",
                  "type": "string"
                },
                "type": "array"
              },
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested logs, supports date math and regular timestamps",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
            "properties": {
              "timeOffset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging attributes for listing logs.",
            "properties": {
              "cursor": {
                "description": "List following results with a cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "Maximum number of logs in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "Sort parameters when querying logs.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "LogsListResponse": {
        "description": "Response object with all logs matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "Array of logs matching the request.",
            "items": {
              "description": "Object description of a log after being processed and stored by Datadog.",
              "properties": {
                "attributes": {
                  "description": "JSON object containing all log attributes and their associated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "JSON object of attributes from your log.",
                      "example": {
                        "customAttribute": 123,
                        "duration": 2345
                      },
                      "type": "object"
                    },
                    "host": {
                      "description": "Name of the machine from where the logs are being sent.",
                      "example": "i-0123",
                      "type": "string"
                    },
                    "message": {
                      "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                      "example": "Host connected to remote",
                      "type": "string"
                    },
                    "service": {
                      "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                      "example": "agent",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the message associated with your log.",
                      "example": "INFO",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Array of tags associated with your log.",
                      "example": [
                        "team:A"
                      ],
                      "items": {
                        "description": "Tag associated with your log.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "Timestamp of your log.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the Log.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "log",
                  "description": "Type of the event.",
                  "enum": [
                    "log"
                  ],
                  "example": "log",
                  "type": "string",
                  "x-enum-varnames": [
                    "LOG"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds",
                "example": 132,
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsQueryFilter": {
        "description": "The search and filter query settings",
        "properties": {
          "from": {
            "default": "now-15m",
            "description": "The minimum time for the requested logs, supports date math and regular timestamps",
            "example": "now-15m",
            "type": "string"
          },
          "indexes": {
            "default": [
              "*"
            ],
            "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
            "example": [
              "main",
              "web"
            ],
            "items": {
              "description": "The name of a log index.",
              "type": "string"
            },
            "type": "array"
          },
          "query": {
            "default": "*",
            "description": "The search query - following the log search syntax.",
            "example": "service:web* AND @http.status_code:[200 TO 299]",
            "type": "string"
          },
          "to": {
            "default": "now",
            "description": "The maximum time for the requested logs, supports date math and regular timestamps",
            "example": "now",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsQueryOptions": {
        "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
        "properties": {
          "timeOffset": {
            "description": "The time offset (in seconds) to apply to the query.",
            "type": "integer"
          },
          "timezone": {
            "default": "UTC",
            "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
            "example": "GMT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsResponseMetadata": {
        "description": "The metadata associated with a request",
        "properties": {
          "elapsed": {
            "description": "The time elapsed in milliseconds",
            "example": 132,
            "type": "integer"
          },
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "request_id": {
            "description": "The identifier of the request",
            "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
            "type": "string"
          },
          "status": {
            "description": "The status of the response",
            "enum": [
              "done",
              "timeout"
            ],
            "example": "done",
            "type": "string",
            "x-enum-varnames": [
              "DONE",
              "TIMEOUT"
            ]
          },
          "warnings": {
            "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
            "items": {
              "description": "A warning message indicating something that went wrong with the query",
              "properties": {
                "code": {
                  "description": "A unique code for this type of warning",
                  "example": "unknown_index",
                  "type": "string"
                },
                "detail": {
                  "description": "A detailed explanation of this specific warning",
                  "example": "indexes: foo, bar",
                  "type": "string"
                },
                "title": {
                  "description": "A short human-readable summary of the warning",
                  "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsRestrictionQueriesType": {
        "default": "logs_restriction_queries",
        "description": "Restriction query resource type.",
        "enum": [
          "logs_restriction_queries"
        ],
        "example": "logs_restriction_queries",
        "type": "string",
        "x-enum-varnames": [
          "LOGS_RESTRICTION_QUERIES"
        ]
      },
      "LogsSort": {
        "description": "Sort parameters when querying logs.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "LogsSortOrder": {
        "description": "The order to use, ascending or descending",
        "enum": [
          "asc",
          "desc"
        ],
        "example": "asc",
        "type": "string",
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "LogsWarning": {
        "description": "A warning message indicating something that went wrong with the query",
        "properties": {
          "code": {
            "description": "A unique code for this type of warning",
            "example": "unknown_index",
            "type": "string"
          },
          "detail": {
            "description": "A detailed explanation of this specific warning",
            "example": "indexes: foo, bar",
            "type": "string"
          },
          "title": {
            "description": "A short human-readable summary of the warning",
            "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "description": "Organization object.",
        "properties": {
          "attributes": {
            "description": "Attributes of the organization.",
            "properties": {
              "created_at": {
                "description": "Creation time of the organization.",
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "description": "Description of the organization.",
                "type": "string"
              },
              "disabled": {
                "description": "Whether or not the organization is disabled.",
                "type": "boolean"
              },
              "modified_at": {
                "description": "Time of last organization modification.",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "Name of the organization.",
                "type": "string"
              },
              "public_id": {
                "description": "Public ID of the organization.",
                "type": "string"
              },
              "sharing": {
                "description": "Sharing type of the organization.",
                "type": "string"
              },
              "url": {
                "description": "URL of the site that this organization exists at.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the organization.",
            "type": "string"
          },
          "type": {
            "default": "orgs",
            "description": "Organizations resource type.",
            "enum": [
              "orgs"
            ],
            "example": "orgs",
            "type": "string",
            "x-enum-varnames": [
              "ORGS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "OrganizationAttributes": {
        "description": "Attributes of the organization.",
        "properties": {
          "created_at": {
            "description": "Creation time of the organization.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the organization.",
            "type": "string"
          },
          "disabled": {
            "description": "Whether or not the organization is disabled.",
            "type": "boolean"
          },
          "modified_at": {
            "description": "Time of last organization modification.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the organization.",
            "type": "string"
          },
          "public_id": {
            "description": "Public ID of the organization.",
            "type": "string"
          },
          "sharing": {
            "description": "Sharing type of the organization.",
            "type": "string"
          },
          "url": {
            "description": "URL of the site that this organization exists at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationsType": {
        "default": "orgs",
        "description": "Organizations resource type.",
        "enum": [
          "orgs"
        ],
        "example": "orgs",
        "type": "string",
        "x-enum-varnames": [
          "ORGS"
        ]
      },
      "Pagination": {
        "description": "Pagination object.",
        "properties": {
          "total_count": {
            "description": "Total count.",
            "format": "int64",
            "type": "integer"
          },
          "total_filtered_count": {
            "description": "Total count of elements matched by the filter.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Permission": {
        "description": "Permission object.",
        "properties": {
          "attributes": {
            "description": "Attributes of a permission.",
            "properties": {
              "created": {
                "description": "Creation time of the permission.",
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "description": "Description of the permission.",
                "type": "string"
              },
              "display_name": {
                "description": "Displayed name for the permission.",
                "type": "string"
              },
              "display_type": {
                "description": "Display type.",
                "type": "string"
              },
              "group_name": {
                "description": "Name of the permission group.",
                "type": "string"
              },
              "name": {
                "description": "Name of the permission.",
                "type": "string"
              },
              "restricted": {
                "description": "Whether or not the permission is restricted.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the permission.",
            "type": "string"
          },
          "type": {
            "default": "permissions",
            "description": "Permissions resource type.",
            "enum": [
              "permissions"
            ],
            "example": "permissions",
            "type": "string",
            "x-enum-varnames": [
              "PERMISSIONS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "PermissionAttributes": {
        "description": "Attributes of a permission.",
        "properties": {
          "created": {
            "description": "Creation time of the permission.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the permission.",
            "type": "string"
          },
          "display_name": {
            "description": "Displayed name for the permission.",
            "type": "string"
          },
          "display_type": {
            "description": "Display type.",
            "type": "string"
          },
          "group_name": {
            "description": "Name of the permission group.",
            "type": "string"
          },
          "name": {
            "description": "Name of the permission.",
            "type": "string"
          },
          "restricted": {
            "description": "Whether or not the permission is restricted.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PermissionsResponse": {
        "description": "Payload with API-returned permissions.",
        "properties": {
          "data": {
            "description": "Array of permissions.",
            "items": {
              "description": "Permission object.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a permission.",
                  "properties": {
                    "created": {
                      "description": "Creation time of the permission.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the permission.",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "Displayed name for the permission.",
                      "type": "string"
                    },
                    "display_type": {
                      "description": "Display type.",
                      "type": "string"
                    },
                    "group_name": {
                      "description": "Name of the permission group.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the permission.",
                      "type": "string"
                    },
                    "restricted": {
                      "description": "Whether or not the permission is restricted.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the permission.",
                  "type": "string"
                },
                "type": {
                  "default": "permissions",
                  "description": "Permissions resource type.",
                  "enum": [
                    "permissions"
                  ],
                  "example": "permissions",
                  "type": "string",
                  "x-enum-varnames": [
                    "PERMISSIONS"
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PermissionsType": {
        "default": "permissions",
        "description": "Permissions resource type.",
        "enum": [
          "permissions"
        ],
        "example": "permissions",
        "type": "string",
        "x-enum-varnames": [
          "PERMISSIONS"
        ]
      },
      "QuerySortOrder": {
        "default": "desc",
        "description": "Direction of sort.",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ASC",
          "DESC"
        ]
      },
      "RelationshipToOrganization": {
        "description": "Relationship to an organization.",
        "properties": {
          "data": {
            "description": "Relationship to organization object.",
            "properties": {
              "id": {
                "description": "ID of the organization.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "orgs",
                "description": "Organizations resource type.",
                "enum": [
                  "orgs"
                ],
                "example": "orgs",
                "type": "string",
                "x-enum-varnames": [
                  "ORGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToOrganizationData": {
        "description": "Relationship to organization object.",
        "properties": {
          "id": {
            "description": "ID of the organization.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "orgs",
            "description": "Organizations resource type.",
            "enum": [
              "orgs"
            ],
            "example": "orgs",
            "type": "string",
            "x-enum-varnames": [
              "ORGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToOrganizations": {
        "description": "Relationship to organizations.",
        "properties": {
          "data": {
            "description": "Relationships to organization objects.",
            "example": [],
            "items": {
              "description": "Relationship to organization object.",
              "properties": {
                "id": {
                  "description": "ID of the organization.",
                  "example": "00000000-0000-0000-0000-000000000000",
                  "type": "string"
                },
                "type": {
                  "default": "orgs",
                  "description": "Organizations resource type.",
                  "enum": [
                    "orgs"
                  ],
                  "example": "orgs",
                  "type": "string",
                  "x-enum-varnames": [
                    "ORGS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToPermission": {
        "description": "Relationship to a permissions object.",
        "properties": {
          "data": {
            "description": "Relationship to permission object.",
            "properties": {
              "id": {
                "description": "ID of the permission.",
                "type": "string"
              },
              "type": {
                "default": "permissions",
                "description": "Permissions resource type.",
                "enum": [
                  "permissions"
                ],
                "example": "permissions",
                "type": "string",
                "x-enum-varnames": [
                  "PERMISSIONS"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RelationshipToPermissionData": {
        "description": "Relationship to permission object.",
        "properties": {
          "id": {
            "description": "ID of the permission.",
            "type": "string"
          },
          "type": {
            "default": "permissions",
            "description": "Permissions resource type.",
            "enum": [
              "permissions"
            ],
            "example": "permissions",
            "type": "string",
            "x-enum-varnames": [
              "PERMISSIONS"
            ]
          }
        },
        "type": "object"
      },
      "RelationshipToPermissions": {
        "description": "Relationship to multiple permissions objects.",
        "properties": {
          "data": {
            "description": "Relationships to permission objects.",
            "items": {
              "description": "Relationship to permission object.",
              "properties": {
                "id": {
                  "description": "ID of the permission.",
                  "type": "string"
                },
                "type": {
                  "default": "permissions",
                  "description": "Permissions resource type.",
                  "enum": [
                    "permissions"
                  ],
                  "example": "permissions",
                  "type": "string",
                  "x-enum-varnames": [
                    "PERMISSIONS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RelationshipToRole": {
        "description": "Relationship to role.",
        "properties": {
          "data": {
            "description": "Relationship to role object.",
            "properties": {
              "id": {
                "description": "ID of the role.",
                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RelationshipToRoleData": {
        "description": "Relationship to role object.",
        "properties": {
          "id": {
            "description": "ID of the role.",
            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "type": "object"
      },
      "RelationshipToRoles": {
        "description": "Relationship to roles.",
        "properties": {
          "data": {
            "description": "An array containing type and ID of a role.",
            "items": {
              "description": "Relationship to role object.",
              "properties": {
                "id": {
                  "description": "ID of the role.",
                  "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                  "type": "string"
                },
                "type": {
                  "default": "roles",
                  "description": "Roles type.",
                  "enum": [
                    "roles"
                  ],
                  "example": "roles",
                  "type": "string",
                  "x-enum-varnames": [
                    "ROLES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RelationshipToUser": {
        "description": "Relationship to user.",
        "properties": {
          "data": {
            "description": "Relationship to user object.",
            "properties": {
              "id": {
                "description": "A unique identifier that represents the user.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToUserData": {
        "description": "Relationship to user object.",
        "properties": {
          "id": {
            "description": "A unique identifier that represents the user.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToUsers": {
        "description": "Relationship to users.",
        "properties": {
          "data": {
            "description": "Relationships to user objects.",
            "example": [],
            "items": {
              "description": "Relationship to user object.",
              "properties": {
                "id": {
                  "description": "A unique identifier that represents the user.",
                  "example": "00000000-0000-0000-0000-000000000000",
                  "type": "string"
                },
                "type": {
                  "default": "users",
                  "description": "Users resource type.",
                  "enum": [
                    "users"
                  ],
                  "example": "users",
                  "type": "string",
                  "x-enum-varnames": [
                    "USERS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ResponseMetaAttributes": {
        "description": "Object describing meta attributes of response.",
        "properties": {
          "page": {
            "description": "Pagination object.",
            "properties": {
              "total_count": {
                "description": "Total count.",
                "format": "int64",
                "type": "integer"
              },
              "total_filtered_count": {
                "description": "Total count of elements matched by the filter.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryAttributes": {
        "description": "Attributes of the restriction query.",
        "properties": {
          "created_at": {
            "description": "Creation time of the restriction query.",
            "example": "2020-03-17T21:06:44Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last restriction query modification.",
            "example": "2020-03-17T21:15:15Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "restriction_query": {
            "description": "The query that defines the restriction. Only the content matching the query can be returned.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreateAttributes": {
        "description": "Attributes of the created restriction query.",
        "properties": {
          "restriction_query": {
            "description": "The restriction query.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreateData": {
        "description": "Data related to the creation of a restriction query.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created restriction query.",
            "properties": {
              "restriction_query": {
                "description": "The restriction query.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreatePayload": {
        "description": "Create a restriction query.",
        "properties": {
          "data": {
            "description": "Data related to the creation of a restriction query.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created restriction query.",
                "properties": {
                  "restriction_query": {
                    "description": "The restriction query.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryListResponse": {
        "description": "Response containing information about multiple restriction queries.",
        "properties": {
          "data": {
            "description": "Array of returned restriction queries.",
            "items": {
              "description": "Restriction query object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the restriction query.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the restriction query.",
                      "example": "2020-03-17T21:06:44Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time of last restriction query modification.",
                      "example": "2020-03-17T21:15:15Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "restriction_query": {
                      "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                      "example": "env:sandbox",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the restriction query.",
                  "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                  "type": "string"
                },
                "type": {
                  "default": "logs_restriction_queries",
                  "description": "Restriction queries type.",
                  "example": "logs_restriction_queries",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRelationships": {
        "description": "Relationships of the restriction query object.",
        "properties": {
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and ID of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "ID of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryResponseIncludedItem": {
        "description": "An object related to a restriction query.",
        "discriminator": {
          "mapping": {
            "roles": "#/components/schemas/RestrictionQueryRole"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "description": "Partial role object.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role for a restriction query.",
                "properties": {
                  "name": {
                    "description": "The role name.",
                    "example": "Datadog Admin Role",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "example": "<ROLE_ID>",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Role resource type.",
                "example": "roles",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "RestrictionQueryRole": {
        "description": "Partial role object.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role for a restriction query.",
            "properties": {
              "name": {
                "description": "The role name.",
                "example": "Datadog Admin Role",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the role.",
            "example": "<ROLE_ID>",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Role resource type.",
            "example": "roles",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRoleAttribute": {
        "description": "Attributes of the role for a restriction query.",
        "properties": {
          "name": {
            "description": "The role name.",
            "example": "Datadog Admin Role",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRolesResponse": {
        "description": "Response containing information about roles attached to a restriction query.",
        "properties": {
          "data": {
            "description": "Array of roles.",
            "items": {
              "description": "Partial role object.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the role for a restriction query.",
                  "properties": {
                    "name": {
                      "description": "The role name.",
                      "example": "Datadog Admin Role",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the role.",
                  "example": "<ROLE_ID>",
                  "type": "string"
                },
                "type": {
                  "default": "roles",
                  "description": "Role resource type.",
                  "example": "roles",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdateAttributes": {
        "description": "Attributes of the edited restriction query.",
        "properties": {
          "restriction_query": {
            "description": "The restriction query.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdateData": {
        "description": "Data related to the update of a restriction query.",
        "properties": {
          "attributes": {
            "description": "Attributes of the edited restriction query.",
            "properties": {
              "restriction_query": {
                "description": "The restriction query.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdatePayload": {
        "description": "Update a restriction query.",
        "properties": {
          "data": {
            "description": "Data related to the update of a restriction query.",
            "properties": {
              "attributes": {
                "description": "Attributes of the edited restriction query.",
                "properties": {
                  "restriction_query": {
                    "description": "The restriction query.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithRelationships": {
        "description": "Restriction query object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the restriction query.",
            "properties": {
              "created_at": {
                "description": "Creation time of the restriction query.",
                "example": "2020-03-17T21:06:44Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last restriction query modification.",
                "example": "2020-03-17T21:15:15Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "restriction_query": {
                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the restriction query.",
            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the restriction query object.",
            "properties": {
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and ID of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "ID of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithRelationshipsResponse": {
        "description": "Response containing information about a single restriction query.",
        "properties": {
          "data": {
            "description": "Restriction query object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the restriction query.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the restriction query.",
                    "example": "2020-03-17T21:06:44Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last restriction query modification.",
                    "example": "2020-03-17T21:15:15Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "restriction_query": {
                    "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the restriction query.",
                "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the restriction query object.",
                "properties": {
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and ID of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "ID of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the restriction query.",
            "items": {
              "description": "An object related to a restriction query.",
              "discriminator": {
                "mapping": {
                  "roles": "#/components/schemas/RestrictionQueryRole"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "description": "Partial role object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role for a restriction query.",
                      "properties": {
                        "name": {
                          "description": "The role name.",
                          "example": "Datadog Admin Role",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the role.",
                      "example": "<ROLE_ID>",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Role resource type.",
                      "example": "roles",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithoutRelationships": {
        "description": "Restriction query object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the restriction query.",
            "properties": {
              "created_at": {
                "description": "Creation time of the restriction query.",
                "example": "2020-03-17T21:06:44Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last restriction query modification.",
                "example": "2020-03-17T21:15:15Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "restriction_query": {
                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the restriction query.",
            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
            "type": "string"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction queries type.",
            "example": "logs_restriction_queries",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithoutRelationshipsResponse": {
        "description": "Response containing information about a single restriction query.",
        "properties": {
          "data": {
            "description": "Restriction query object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the restriction query.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the restriction query.",
                    "example": "2020-03-17T21:06:44Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last restriction query modification.",
                    "example": "2020-03-17T21:15:15Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "restriction_query": {
                    "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the restriction query.",
                "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                "type": "string"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction queries type.",
                "example": "logs_restriction_queries",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Role": {
        "description": "Role object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "type": "string"
              },
              "user_count": {
                "description": "Number of users with that role.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the role.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the role object returned by the API.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RoleAttributes": {
        "description": "Attributes of the role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "type": "string"
          },
          "user_count": {
            "description": "Number of users with that role.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RoleCreateAttributes": {
        "description": "Attributes of the created role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "developers",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RoleCreateData": {
        "description": "Data related to the creation of a role.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "example": "developers",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "Relationships of the role object.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "users": {
                "description": "Relationship to users.",
                "properties": {
                  "data": {
                    "description": "Relationships to user objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to user object.",
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the user.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "RoleCreateRequest": {
        "description": "Create a role.",
        "properties": {
          "data": {
            "description": "Data related to the creation of a role.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "example": "developers",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "Relationships of the role object.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RoleCreateResponse": {
        "description": "Response containing information about a created role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "example": "developers",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleRelationships": {
        "description": "Relationships of the role object.",
        "properties": {
          "permissions": {
            "description": "Relationship to multiple permissions objects.",
            "properties": {
              "data": {
                "description": "Relationships to permission objects.",
                "items": {
                  "description": "Relationship to permission object.",
                  "properties": {
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "users": {
            "description": "Relationship to users.",
            "properties": {
              "data": {
                "description": "Relationships to user objects.",
                "example": [],
                "items": {
                  "description": "Relationship to user object.",
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the user.",
                      "example": "00000000-0000-0000-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleResponse": {
        "description": "Response containing information about a single role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleResponseRelationships": {
        "description": "Relationships of the role object returned by the API.",
        "properties": {
          "permissions": {
            "description": "Relationship to multiple permissions objects.",
            "properties": {
              "data": {
                "description": "Relationships to permission objects.",
                "items": {
                  "description": "Relationship to permission object.",
                  "properties": {
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleUpdateAttributes": {
        "description": "Attributes of the role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleUpdateData": {
        "description": "Data related to the update of a role.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the role.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "attributes",
          "type",
          "id"
        ],
        "type": "object"
      },
      "RoleUpdateRequest": {
        "description": "Update a role.",
        "properties": {
          "data": {
            "description": "Data related to the update of a role.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "attributes",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RoleUpdateResponse": {
        "description": "Response containing information about an updated role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RolesResponse": {
        "description": "Response containing information about multiple roles.",
        "properties": {
          "data": {
            "description": "Array of returned roles.",
            "items": {
              "description": "Role object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the role.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the role.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time of last role modification.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the role.",
                      "type": "string"
                    },
                    "user_count": {
                      "description": "Number of users with that role.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the role.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Relationships of the role object returned by the API.",
                  "properties": {
                    "permissions": {
                      "description": "Relationship to multiple permissions objects.",
                      "properties": {
                        "data": {
                          "description": "Relationships to permission objects.",
                          "items": {
                            "description": "Relationship to permission object.",
                            "properties": {
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "roles",
                  "description": "Roles type.",
                  "enum": [
                    "roles"
                  ],
                  "example": "roles",
                  "type": "string",
                  "x-enum-varnames": [
                    "ROLES"
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RolesSort": {
        "default": "name",
        "description": "Sorting options for roles.",
        "enum": [
          "name",
          "-name",
          "modified_at",
          "-modified_at",
          "user_count",
          "-user_count"
        ],
        "type": "string",
        "x-enum-varnames": [
          "NAME_ASCENDING",
          "NAME_DESCENDING",
          "MODIFIED_AT_ASCENDING",
          "MODIFIED_AT_DESCENDING",
          "USER_COUNT_ASCENDING",
          "USER_COUNT_DESCENDING"
        ]
      },
      "RolesType": {
        "default": "roles",
        "description": "Roles type.",
        "enum": [
          "roles"
        ],
        "example": "roles",
        "type": "string",
        "x-enum-varnames": [
          "ROLES"
        ]
      },
      "SecurityMonitoringListRulesResponse": {
        "description": "List of rules.",
        "properties": {
          "data": {
            "description": "TODO.",
            "items": {
              "description": "Detection rule.",
              "properties": {
                "cases": {
                  "description": "Cases for generating signals.",
                  "items": {
                    "description": "Case when signal is generated.",
                    "properties": {
                      "condition": {
                        "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the case.",
                        "type": "string"
                      },
                      "notifications": {
                        "description": "Notification targets for each rule case.",
                        "items": {
                          "description": "Notification.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "Severity of the Security Signal.",
                        "enum": [
                          "info",
                          "low",
                          "medium",
                          "high",
                          "critical"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "INFO",
                          "LOW",
                          "MEDIUM",
                          "HIGH",
                          "CRITICAL"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "createdAt": {
                  "description": "When the rule was created, timestamp in milliseconds.",
                  "format": "int64",
                  "type": "integer"
                },
                "creationAuthorId": {
                  "description": "User ID of the user who created the rule.",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "The ID of the rule.",
                  "type": "string"
                },
                "isDefault": {
                  "description": "Whether the rule is included by default.",
                  "type": "boolean"
                },
                "isDeleted": {
                  "description": "Whether the rule has been deleted.",
                  "type": "boolean"
                },
                "isEnabled": {
                  "description": "Whether the rule is enabled.",
                  "type": "boolean"
                },
                "message": {
                  "description": "Message for generated signals.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the rule.",
                  "type": "string"
                },
                "options": {
                  "description": "Options on rules.",
                  "properties": {
                    "evaluationWindow": {
                      "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS"
                      ]
                    },
                    "keepAlive": {
                      "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200,
                        10800,
                        21600
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS",
                        "THREE_HOURS",
                        "SIX_HOURS"
                      ]
                    },
                    "maxSignalDuration": {
                      "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200,
                        10800,
                        21600,
                        43200,
                        86400
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS",
                        "THREE_HOURS",
                        "SIX_HOURS",
                        "TWELVE_HOURS",
                        "ONE_DAY"
                      ]
                    }
                  },
                  "type": "object"
                },
                "queries": {
                  "description": "Queries for selecting logs which are part of the rule.",
                  "items": {
                    "description": "Query for matching rule.",
                    "properties": {
                      "aggregation": {
                        "description": "The aggregation type.",
                        "enum": [
                          "count",
                          "cardinality",
                          "sum",
                          "max"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "COUNT",
                          "CARDINALITY",
                          "SUM",
                          "MAX"
                        ]
                      },
                      "distinctFields": {
                        "description": "Field for which the cardinality is measured. Sent as an array.",
                        "items": {
                          "description": "Field.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "groupByFields": {
                        "description": "Fields to group by.",
                        "items": {
                          "description": "Field.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metric": {
                        "description": "The target field to aggregate over when using the sum or max\naggregations.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the query.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Query to run on logs.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "tags": {
                  "description": "Tags for generated signals.",
                  "items": {
                    "description": "Tag.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "The version of the rule.",
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleCase": {
        "description": "Case when signal is generated.",
        "properties": {
          "condition": {
            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
            "type": "string"
          },
          "name": {
            "description": "Name of the case.",
            "type": "string"
          },
          "notifications": {
            "description": "Notification targets for each rule case.",
            "items": {
              "description": "Notification.",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Severity of the Security Signal.",
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "type": "string",
            "x-enum-varnames": [
              "INFO",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleCaseCreate": {
        "description": "Case when signal is generated.",
        "properties": {
          "condition": {
            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
            "type": "string"
          },
          "name": {
            "description": "Name of the case.",
            "type": "string"
          },
          "notifications": {
            "description": "Notification targets for each rule case.",
            "items": {
              "description": "Notification.",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Severity of the Security Signal.",
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "type": "string",
            "x-enum-varnames": [
              "INFO",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleCreatePayload": {
        "description": "Create a new rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "example": [],
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "example": true,
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "example": "",
            "type": "string"
          },
          "name": {
            "description": "The name of the rule.",
            "example": "",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "example": [],
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "example": "a < 3",
                  "type": "string"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "example": [
              "env:prod",
              "team:security"
            ],
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "isEnabled",
          "queries",
          "options",
          "cases",
          "message"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleEvaluationWindow": {
        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS"
        ]
      },
      "SecurityMonitoringRuleKeepAlive": {
        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200,
          10800,
          21600
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS",
          "THREE_HOURS",
          "SIX_HOURS"
        ]
      },
      "SecurityMonitoringRuleMaxSignalDuration": {
        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200,
          10800,
          21600,
          43200,
          86400
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS",
          "THREE_HOURS",
          "SIX_HOURS",
          "TWELVE_HOURS",
          "ONE_DAY"
        ]
      },
      "SecurityMonitoringRuleOptions": {
        "description": "Options on rules.",
        "properties": {
          "evaluationWindow": {
            "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS"
            ]
          },
          "keepAlive": {
            "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200,
              10800,
              21600
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS",
              "THREE_HOURS",
              "SIX_HOURS"
            ]
          },
          "maxSignalDuration": {
            "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200,
              10800,
              21600,
              43200,
              86400
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS",
              "THREE_HOURS",
              "SIX_HOURS",
              "TWELVE_HOURS",
              "ONE_DAY"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleQuery": {
        "description": "Query for matching rule.",
        "properties": {
          "aggregation": {
            "description": "The aggregation type.",
            "enum": [
              "count",
              "cardinality",
              "sum",
              "max"
            ],
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "SUM",
              "MAX"
            ]
          },
          "distinctFields": {
            "description": "Field for which the cardinality is measured. Sent as an array.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "groupByFields": {
            "description": "Fields to group by.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "metric": {
            "description": "The target field to aggregate over when using the sum or max\naggregations.",
            "type": "string"
          },
          "name": {
            "description": "Name of the query.",
            "type": "string"
          },
          "query": {
            "description": "Query to run on logs.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleQueryAggregation": {
        "description": "The aggregation type.",
        "enum": [
          "count",
          "cardinality",
          "sum",
          "max"
        ],
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "CARDINALITY",
          "SUM",
          "MAX"
        ]
      },
      "SecurityMonitoringRuleQueryCreate": {
        "description": "Query for matching rule.",
        "properties": {
          "aggregation": {
            "description": "The aggregation type.",
            "enum": [
              "count",
              "cardinality",
              "sum",
              "max"
            ],
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "SUM",
              "MAX"
            ]
          },
          "distinctFields": {
            "description": "Field for which the cardinality is measured. Sent as an array.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "groupByFields": {
            "description": "Fields to group by.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "metric": {
            "description": "The target field to aggregate over when using the sum or max\naggregations.",
            "type": "string"
          },
          "name": {
            "description": "Name of the query.",
            "type": "string"
          },
          "query": {
            "description": "Query to run on logs.",
            "example": "a < 3",
            "type": "string"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleResponse": {
        "description": "Detection rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "When the rule was created, timestamp in milliseconds.",
            "format": "int64",
            "type": "integer"
          },
          "creationAuthorId": {
            "description": "User ID of the user who created the rule.",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "The ID of the rule.",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether the rule is included by default.",
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Whether the rule has been deleted.",
            "type": "boolean"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "type": "string"
          },
          "name": {
            "description": "The name of the rule.",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "description": "The version of the rule.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SecurityMonitoringRuleSeverity": {
        "description": "Severity of the Security Signal.",
        "enum": [
          "info",
          "low",
          "medium",
          "high",
          "critical"
        ],
        "type": "string",
        "x-enum-varnames": [
          "INFO",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ]
      },
      "SecurityMonitoringRuleUpdatePayload": {
        "description": "Update an existing rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "type": "string"
          },
          "name": {
            "description": "Name of the rule.",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignal": {
        "description": "Object description of a security signal.",
        "properties": {
          "attributes": {
            "description": "The object containing all signal attributes and their\nassociated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "A JSON object of attributes in the security signal.",
                "example": {
                  "workflow": {
                    "first_seen": "2020-06-23T14:46:01.000Z",
                    "last_seen": "2020-06-23T14:46:49.000Z",
                    "rule": {
                      "id": "0f5-e0c-805",
                      "name": "Brute Force Attack Grouped By User ",
                      "version": 12
                    }
                  }
                },
                "type": "object"
              },
              "message": {
                "description": "The message in the security signal defined by the rule that generated the signal.",
                "example": "Detect Account Take Over (ATO) through brute force attempts",
                "type": "string"
              },
              "tags": {
                "description": "An array of tags associated with the security signal.",
                "example": [
                  "security:attack",
                  "technique:T1110-brute-force"
                ],
                "format": "array",
                "items": {
                  "description": "The tag associated with the security signal.",
                  "format": "string"
                }
              },
              "timestamp": {
                "description": "The timestamp of the security signal.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique ID of the security signal.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "signal",
            "description": "The type of event.",
            "enum": [
              "signal"
            ],
            "example": "signal",
            "type": "string",
            "x-enum-varnames": [
              "SIGNAL"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalListRequest": {
        "description": "The request for a security signal list.",
        "properties": {
          "filter": {
            "description": "Search filters for listing security signals.",
            "properties": {
              "from": {
                "description": "The minimum timestamp for requested security signals.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              },
              "query": {
                "description": "Search query for listing security signals.",
                "example": "security:attack status:high",
                "type": "string"
              },
              "to": {
                "description": "The maximum timestamp for requested security signals.",
                "example": "2019-01-03T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "The paging attributes for listing security signals.",
            "properties": {
              "cursor": {
                "description": "A list of results using the cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "The maximum number of security signals in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "The sort parameters used for querying security signals.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalType": {
        "default": "signal",
        "description": "The type of event.",
        "enum": [
          "signal"
        ],
        "example": "signal",
        "type": "string",
        "x-enum-varnames": [
          "SIGNAL"
        ]
      },
      "SecurityMonitoringSignalsListResponse": {
        "description": "The response object with all security signals matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "An array of security signals matching the request.",
            "items": {
              "description": "Object description of a security signal.",
              "properties": {
                "attributes": {
                  "description": "The object containing all signal attributes and their\nassociated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "A JSON object of attributes in the security signal.",
                      "example": {
                        "workflow": {
                          "first_seen": "2020-06-23T14:46:01.000Z",
                          "last_seen": "2020-06-23T14:46:49.000Z",
                          "rule": {
                            "id": "0f5-e0c-805",
                            "name": "Brute Force Attack Grouped By User ",
                            "version": 12
                          }
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "The message in the security signal defined by the rule that generated the signal.",
                      "example": "Detect Account Take Over (ATO) through brute force attempts",
                      "type": "string"
                    },
                    "tags": {
                      "description": "An array of tags associated with the security signal.",
                      "example": [
                        "security:attack",
                        "technique:T1110-brute-force"
                      ],
                      "format": "array",
                      "items": {
                        "description": "The tag associated with the security signal.",
                        "format": "string"
                      }
                    },
                    "timestamp": {
                      "description": "The timestamp of the security signal.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The unique ID of the security signal.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "signal",
                  "description": "The type of event.",
                  "enum": [
                    "signal"
                  ],
                  "example": "signal",
                  "type": "string",
                  "x-enum-varnames": [
                    "SIGNAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "Meta attributes.",
            "properties": {
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalsSort": {
        "description": "The sort parameters used for querying security signals.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "ServiceCreateAttributes": {
        "description": "The service's attributes for a create request.",
        "properties": {
          "name": {
            "description": "Name of the service.",
            "example": "an example service name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ServiceCreateData": {
        "description": "Service payload for create requests.",
        "properties": {
          "attributes": {
            "description": "The service's attributes for a create request.",
            "properties": {
              "name": {
                "description": "Name of the service.",
                "example": "an example service name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "The service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ServiceCreateRequest": {
        "description": "Create request with a service payload.",
        "properties": {
          "data": {
            "description": "Service payload for create requests.",
            "properties": {
              "attributes": {
                "description": "The service's attributes for a create request.",
                "properties": {
                  "name": {
                    "description": "Name of the service.",
                    "example": "an example service name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "The service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceIncludedItems": {
        "description": "An object related to a service which is present in the included payload.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and ID of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "ID of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ServiceRelationships": {
        "description": "The service's relationships.",
        "properties": {
          "created_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "last_modified_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "ServiceResponse": {
        "description": "Response with a service payload.",
        "properties": {
          "data": {
            "description": "Service data from responses.",
            "properties": {
              "attributes": {
                "description": "The service's attributes from a response.",
                "properties": {
                  "created": {
                    "description": "Timestamp of when the service was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified": {
                    "description": "Timestamp of when the service was modified.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the service.",
                    "example": "service name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The service's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          },
          "included": {
            "description": "Included objects from relationships.",
            "items": {
              "description": "An object related to a service which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-0000-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and ID of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServiceResponseAttributes": {
        "description": "The service's attributes from a response.",
        "properties": {
          "created": {
            "description": "Timestamp of when the service was created.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified": {
            "description": "Timestamp of when the service was modified.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the service.",
            "example": "service name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceResponseData": {
        "description": "Service data from responses.",
        "properties": {
          "attributes": {
            "description": "The service's attributes from a response.",
            "properties": {
              "created": {
                "description": "Timestamp of when the service was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified": {
                "description": "Timestamp of when the service was modified.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the service.",
                "example": "service name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The service's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ServiceType": {
        "default": "services",
        "description": "Service resource type.",
        "enum": [
          "services"
        ],
        "example": "services",
        "type": "string",
        "x-enum-varnames": [
          "SERVICES"
        ]
      },
      "ServiceUpdateAttributes": {
        "description": "The service's attributes for an update request.",
        "properties": {
          "name": {
            "description": "Name of the service.",
            "example": "an example service name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ServiceUpdateData": {
        "description": "Service payload for update requests.",
        "properties": {
          "attributes": {
            "description": "The service's attributes for an update request.",
            "properties": {
              "name": {
                "description": "Name of the service.",
                "example": "an example service name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "The service's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ServiceUpdateRequest": {
        "description": "Update request with a service payload.",
        "properties": {
          "data": {
            "description": "Service payload for update requests.",
            "properties": {
              "attributes": {
                "description": "The service's attributes for an update request.",
                "properties": {
                  "name": {
                    "description": "Name of the service.",
                    "example": "an example service name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "The service's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ServicesResponse": {
        "description": "Response with a list of service payloads.",
        "properties": {
          "data": {
            "description": "An array of services.",
            "example": [
              {
                "id": "00000000-0000-0000-0000-000000000000",
                "type": "services"
              }
            ],
            "items": {
              "description": "Service data from responses.",
              "properties": {
                "attributes": {
                  "description": "The service's attributes from a response.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when the service was created.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified": {
                      "description": "Timestamp of when the service was modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the service.",
                      "example": "service name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The service's ID.",
                  "example": "00000000-0000-0000-0000-000000000000",
                  "type": "string"
                },
                "relationships": {
                  "description": "The service's relationships.",
                  "properties": {
                    "created_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "last_modified_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "default": "services",
                  "description": "Service resource type.",
                  "enum": [
                    "services"
                  ],
                  "example": "services",
                  "type": "string",
                  "x-enum-varnames": [
                    "SERVICES"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included related resources which the user requested.",
            "items": {
              "description": "An object related to a service which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-0000-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and ID of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "meta": {
            "description": "The metadata object containing pagination metadata.",
            "properties": {
              "pagination": {
                "description": "Pagination properties.",
                "properties": {
                  "next_offset": {
                    "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "offset": {
                    "description": "The index of the first element in the results.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "size": {
                    "description": "Maximum size of pages to return.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TeamCreateAttributes": {
        "description": "The team's attributes for a create request.",
        "properties": {
          "name": {
            "description": "Name of the team.",
            "example": "team name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "TeamCreateData": {
        "description": "Team data for a create request.",
        "properties": {
          "attributes": {
            "description": "The team's attributes for a create request.",
            "properties": {
              "name": {
                "description": "Name of the team.",
                "example": "team name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "The team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TeamCreateRequest": {
        "description": "Create request with a team payload.",
        "properties": {
          "data": {
            "description": "Team data for a create request.",
            "properties": {
              "attributes": {
                "description": "The team's attributes for a create request.",
                "properties": {
                  "name": {
                    "description": "Name of the team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "The team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TeamIncludedItems": {
        "description": "An object related to a team which is present in the included payload.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and ID of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "ID of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "TeamRelationships": {
        "description": "The team's relationships.",
        "properties": {
          "created_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "last_modified_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "TeamResponse": {
        "description": "Response with a team payload.",
        "properties": {
          "data": {
            "description": "Team data from a response.",
            "properties": {
              "attributes": {
                "description": "The team's attributes from a response.",
                "properties": {
                  "created": {
                    "description": "Timestamp of when the team was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified": {
                    "description": "Timestamp of when the team was modified.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The team's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Included objects from relationships.",
            "items": {
              "description": "An object related to a team which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-0000-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and ID of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TeamResponseAttributes": {
        "description": "The team's attributes from a response.",
        "properties": {
          "created": {
            "description": "Timestamp of when the team was created.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified": {
            "description": "Timestamp of when the team was modified.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the team.",
            "example": "team name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamResponseData": {
        "description": "Team data from a response.",
        "properties": {
          "attributes": {
            "description": "The team's attributes from a response.",
            "properties": {
              "created": {
                "description": "Timestamp of when the team was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified": {
                "description": "Timestamp of when the team was modified.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the team.",
                "example": "team name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The team's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "type": "object"
      },
      "TeamType": {
        "default": "teams",
        "description": "Team resource type.",
        "enum": [
          "teams"
        ],
        "example": "teams",
        "type": "string",
        "x-enum-varnames": [
          "TEAMS"
        ]
      },
      "TeamUpdateAttributes": {
        "description": "The team's attributes for an update request.",
        "properties": {
          "name": {
            "description": "Name of the team.",
            "example": "team name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "TeamUpdateData": {
        "description": "Team data for an update request.",
        "properties": {
          "attributes": {
            "description": "The team's attributes for an update request.",
            "properties": {
              "name": {
                "description": "Name of the team.",
                "example": "team name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "The team's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "TeamUpdateRequest": {
        "description": "Update request with a team payload.",
        "properties": {
          "data": {
            "description": "Team data for an update request.",
            "properties": {
              "attributes": {
                "description": "The team's attributes for an update request.",
                "properties": {
                  "name": {
                    "description": "Name of the team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "The team's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "TeamsResponse": {
        "description": "Response with a list of team payloads.",
        "properties": {
          "data": {
            "description": "An array of teams.",
            "example": [
              {
                "attributes": {
                  "name": "team name"
                },
                "id": "00000000-0000-0000-0000-000000000000",
                "type": "teams"
              }
            ],
            "items": {
              "description": "Team data from a response.",
              "properties": {
                "attributes": {
                  "description": "The team's attributes from a response.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when the team was created.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified": {
                      "description": "Timestamp of when the team was modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the team.",
                      "example": "team name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The team's ID.",
                  "example": "00000000-0000-0000-0000-000000000000",
                  "type": "string"
                },
                "relationships": {
                  "description": "The team's relationships.",
                  "properties": {
                    "created_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "last_modified_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "default": "teams",
                  "description": "Team resource type.",
                  "enum": [
                    "teams"
                  ],
                  "example": "teams",
                  "type": "string",
                  "x-enum-varnames": [
                    "TEAMS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included related resources which the user requested.",
            "items": {
              "description": "An object related to a team which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "type": "string"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-0000-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and ID of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "meta": {
            "description": "The metadata object containing pagination metadata.",
            "properties": {
              "pagination": {
                "description": "Pagination properties.",
                "properties": {
                  "next_offset": {
                    "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "offset": {
                    "description": "The index of the first element in the results.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "size": {
                    "description": "Maximum size of pages to return.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "User": {
        "description": "User object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of user object returned by the API.",
            "properties": {
              "created_at": {
                "description": "Creation time of the user.",
                "format": "date-time",
                "type": "string"
              },
              "disabled": {
                "description": "Whether the user is disabled.",
                "type": "boolean"
              },
              "email": {
                "description": "Email of the user.",
                "type": "string"
              },
              "handle": {
                "description": "Handle of the user.",
                "type": "string"
              },
              "icon": {
                "description": "URL of the user's icon.",
                "type": "string"
              },
              "name": {
                "description": "Name of the user.",
                "type": "string"
              },
              "status": {
                "description": "Status of the user.",
                "type": "string"
              },
              "title": {
                "description": "Title of the user.",
                "type": "string"
              },
              "verified": {
                "description": "Whether the user is verified.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the user object returned by the API.",
            "properties": {
              "org": {
                "description": "Relationship to an organization.",
                "properties": {
                  "data": {
                    "description": "Relationship to organization object.",
                    "properties": {
                      "id": {
                        "description": "ID of the organization.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "orgs",
                        "description": "Organizations resource type.",
                        "enum": [
                          "orgs"
                        ],
                        "example": "orgs",
                        "type": "string",
                        "x-enum-varnames": [
                          "ORGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "other_orgs": {
                "description": "Relationship to organizations.",
                "properties": {
                  "data": {
                    "description": "Relationships to organization objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to organization object.",
                      "properties": {
                        "id": {
                          "description": "ID of the organization.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "orgs",
                          "description": "Organizations resource type.",
                          "enum": [
                            "orgs"
                          ],
                          "example": "orgs",
                          "type": "string",
                          "x-enum-varnames": [
                            "ORGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "other_users": {
                "description": "Relationship to users.",
                "properties": {
                  "data": {
                    "description": "Relationships to user objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to user object.",
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the user.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and ID of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "ID of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "type": "object"
      },
      "UserAttributes": {
        "description": "Attributes of user object returned by the API.",
        "properties": {
          "created_at": {
            "description": "Creation time of the user.",
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "description": "Whether the user is disabled.",
            "type": "boolean"
          },
          "email": {
            "description": "Email of the user.",
            "type": "string"
          },
          "handle": {
            "description": "Handle of the user.",
            "type": "string"
          },
          "icon": {
            "description": "URL of the user's icon.",
            "type": "string"
          },
          "name": {
            "description": "Name of the user.",
            "type": "string"
          },
          "status": {
            "description": "Status of the user.",
            "type": "string"
          },
          "title": {
            "description": "Title of the user.",
            "type": "string"
          },
          "verified": {
            "description": "Whether the user is verified.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserCreateAttributes": {
        "description": "Attributes of the created user.",
        "properties": {
          "email": {
            "description": "The email of the user.",
            "example": "joe.doe@example.com",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          },
          "title": {
            "description": "The title of the user.",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserCreateData": {
        "description": "Object to create a user.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created user.",
            "properties": {
              "email": {
                "description": "The email of the user.",
                "example": "joe.doe@example.com",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "type": "string"
              },
              "title": {
                "description": "The title of the user.",
                "type": "string"
              }
            },
            "required": [
              "email"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "Relationships of the user object.",
            "properties": {
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and ID of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "ID of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "UserCreateRequest": {
        "description": "Create a user.",
        "properties": {
          "data": {
            "description": "Object to create a user.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created user.",
                "properties": {
                  "email": {
                    "description": "The email of the user.",
                    "example": "joe.doe@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "Relationships of the user object.",
                "properties": {
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and ID of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "ID of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UserInvitationData": {
        "description": "Object to create a user invitation.",
        "properties": {
          "relationships": {
            "description": "Relationships data for user invitation.",
            "properties": {
              "user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "required": [
              "user"
            ],
            "type": "object"
          },
          "type": {
            "default": "user_invitations",
            "description": "User invitations type.",
            "enum": [
              "user_invitations"
            ],
            "example": "user_invitations",
            "type": "string",
            "x-enum-varnames": [
              "USER_INVITATIONS"
            ]
          }
        },
        "required": [
          "type",
          "relationships"
        ],
        "type": "object"
      },
      "UserInvitationDataAttributes": {
        "description": "Attributes of a user invitation.",
        "properties": {
          "created_at": {
            "description": "Creation time of the user invitation.",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "Time of invitation expiration.",
            "format": "date-time",
            "type": "string"
          },
          "invite_type": {
            "description": "Type of invitation.",
            "type": "string"
          },
          "uuid": {
            "description": "UUID of the user invitation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInvitationRelationships": {
        "description": "Relationships data for user invitation.",
        "properties": {
          "user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "user"
        ],
        "type": "object"
      },
      "UserInvitationResponse": {
        "description": "User invitation as returned by the API.",
        "properties": {
          "data": {
            "description": "Object of a user invitation returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of a user invitation.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user invitation.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "expires_at": {
                    "description": "Time of invitation expiration.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "invite_type": {
                    "description": "Type of invitation.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID of the user invitation.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user invitation.",
                "type": "string"
              },
              "type": {
                "default": "user_invitations",
                "description": "User invitations type.",
                "enum": [
                  "user_invitations"
                ],
                "example": "user_invitations",
                "type": "string",
                "x-enum-varnames": [
                  "USER_INVITATIONS"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserInvitationResponseData": {
        "description": "Object of a user invitation returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of a user invitation.",
            "properties": {
              "created_at": {
                "description": "Creation time of the user invitation.",
                "format": "date-time",
                "type": "string"
              },
              "expires_at": {
                "description": "Time of invitation expiration.",
                "format": "date-time",
                "type": "string"
              },
              "invite_type": {
                "description": "Type of invitation.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID of the user invitation.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user invitation.",
            "type": "string"
          },
          "type": {
            "default": "user_invitations",
            "description": "User invitations type.",
            "enum": [
              "user_invitations"
            ],
            "example": "user_invitations",
            "type": "string",
            "x-enum-varnames": [
              "USER_INVITATIONS"
            ]
          }
        },
        "type": "object"
      },
      "UserInvitationsRequest": {
        "description": "Object to invite users to join the organization.",
        "properties": {
          "data": {
            "description": "List of user invitations.",
            "example": [],
            "items": {
              "description": "Object to create a user invitation.",
              "properties": {
                "relationships": {
                  "description": "Relationships data for user invitation.",
                  "properties": {
                    "user": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object"
                },
                "type": {
                  "default": "user_invitations",
                  "description": "User invitations type.",
                  "enum": [
                    "user_invitations"
                  ],
                  "example": "user_invitations",
                  "type": "string",
                  "x-enum-varnames": [
                    "USER_INVITATIONS"
                  ]
                }
              },
              "required": [
                "type",
                "relationships"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UserInvitationsResponse": {
        "description": "User invitations as returned by the API.",
        "properties": {
          "data": {
            "description": "Array of user invitations.",
            "items": {
              "description": "Object of a user invitation returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a user invitation.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the user invitation.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expires_at": {
                      "description": "Time of invitation expiration.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "invite_type": {
                      "description": "Type of invitation.",
                      "type": "string"
                    },
                    "uuid": {
                      "description": "UUID of the user invitation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the user invitation.",
                  "type": "string"
                },
                "type": {
                  "default": "user_invitations",
                  "description": "User invitations type.",
                  "enum": [
                    "user_invitations"
                  ],
                  "example": "user_invitations",
                  "type": "string",
                  "x-enum-varnames": [
                    "USER_INVITATIONS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserInvitationsType": {
        "default": "user_invitations",
        "description": "User invitations type.",
        "enum": [
          "user_invitations"
        ],
        "example": "user_invitations",
        "type": "string",
        "x-enum-varnames": [
          "USER_INVITATIONS"
        ]
      },
      "UserRelationships": {
        "description": "Relationships of the user object.",
        "properties": {
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and ID of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "ID of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserResponse": {
        "description": "Response containing information about a single user.",
        "properties": {
          "data": {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "type": "string"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and ID of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "ID of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the user.",
            "items": {
              "description": "An object related to a user.",
              "oneOf": [
                {
                  "description": "Organization object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the organization.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the organization.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the organization.",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether or not the organization is disabled.",
                          "type": "boolean"
                        },
                        "modified_at": {
                          "description": "Time of last organization modification.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the organization.",
                          "type": "string"
                        },
                        "public_id": {
                          "description": "Public ID of the organization.",
                          "type": "string"
                        },
                        "sharing": {
                          "description": "Sharing type of the organization.",
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the site that this organization exists at.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the organization.",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Permission object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of a permission.",
                      "properties": {
                        "created": {
                          "description": "Creation time of the permission.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the permission.",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "Displayed name for the permission.",
                          "type": "string"
                        },
                        "display_type": {
                          "description": "Display type.",
                          "type": "string"
                        },
                        "group_name": {
                          "description": "Name of the permission group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the permission.",
                          "type": "string"
                        },
                        "restricted": {
                          "description": "Whether or not the permission is restricted.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserResponseIncludedItem": {
        "description": "An object related to a user.",
        "oneOf": [
          {
            "description": "Organization object.",
            "properties": {
              "attributes": {
                "description": "Attributes of the organization.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the organization.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the organization.",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether or not the organization is disabled.",
                    "type": "boolean"
                  },
                  "modified_at": {
                    "description": "Time of last organization modification.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the organization.",
                    "type": "string"
                  },
                  "public_id": {
                    "description": "Public ID of the organization.",
                    "type": "string"
                  },
                  "sharing": {
                    "description": "Sharing type of the organization.",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL of the site that this organization exists at.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the organization.",
                "type": "string"
              },
              "type": {
                "default": "orgs",
                "description": "Organizations resource type.",
                "enum": [
                  "orgs"
                ],
                "example": "orgs",
                "type": "string",
                "x-enum-varnames": [
                  "ORGS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          {
            "description": "Permission object.",
            "properties": {
              "attributes": {
                "description": "Attributes of a permission.",
                "properties": {
                  "created": {
                    "description": "Creation time of the permission.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the permission.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Displayed name for the permission.",
                    "type": "string"
                  },
                  "display_type": {
                    "description": "Display type.",
                    "type": "string"
                  },
                  "group_name": {
                    "description": "Name of the permission group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the permission.",
                    "type": "string"
                  },
                  "restricted": {
                    "description": "Whether or not the permission is restricted.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the permission.",
                "type": "string"
              },
              "type": {
                "default": "permissions",
                "description": "Permissions resource type.",
                "enum": [
                  "permissions"
                ],
                "example": "permissions",
                "type": "string",
                "x-enum-varnames": [
                  "PERMISSIONS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "UserResponseRelationships": {
        "description": "Relationships of the user object returned by the API.",
        "properties": {
          "org": {
            "description": "Relationship to an organization.",
            "properties": {
              "data": {
                "description": "Relationship to organization object.",
                "properties": {
                  "id": {
                    "description": "ID of the organization.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "orgs",
                    "description": "Organizations resource type.",
                    "enum": [
                      "orgs"
                    ],
                    "example": "orgs",
                    "type": "string",
                    "x-enum-varnames": [
                      "ORGS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "other_orgs": {
            "description": "Relationship to organizations.",
            "properties": {
              "data": {
                "description": "Relationships to organization objects.",
                "example": [],
                "items": {
                  "description": "Relationship to organization object.",
                  "properties": {
                    "id": {
                      "description": "ID of the organization.",
                      "example": "00000000-0000-0000-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "other_users": {
            "description": "Relationship to users.",
            "properties": {
              "data": {
                "description": "Relationships to user objects.",
                "example": [],
                "items": {
                  "description": "Relationship to user object.",
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the user.",
                      "example": "00000000-0000-0000-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and ID of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "ID of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserUpdateAttributes": {
        "description": "Attributes of the edited user.",
        "properties": {
          "disabled": {
            "description": "If the user is enabled or disabled.",
            "type": "boolean"
          },
          "email": {
            "description": "The email of the user.",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUpdateData": {
        "description": "Object to update a user.",
        "properties": {
          "attributes": {
            "description": "Attributes of the edited user.",
            "properties": {
              "disabled": {
                "description": "If the user is enabled or disabled.",
                "type": "boolean"
              },
              "email": {
                "description": "The email of the user.",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "attributes",
          "type",
          "id"
        ],
        "type": "object"
      },
      "UserUpdateRequest": {
        "description": "Update a user.",
        "properties": {
          "data": {
            "description": "Object to update a user.",
            "properties": {
              "attributes": {
                "description": "Attributes of the edited user.",
                "properties": {
                  "disabled": {
                    "description": "If the user is enabled or disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "The email of the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "attributes",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UsersResponse": {
        "description": "Response containing information about multiple users.",
        "properties": {
          "data": {
            "description": "Array of returned users.",
            "items": {
              "description": "User object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of user object returned by the API.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the user.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "Whether the user is disabled.",
                      "type": "boolean"
                    },
                    "email": {
                      "description": "Email of the user.",
                      "type": "string"
                    },
                    "handle": {
                      "description": "Handle of the user.",
                      "type": "string"
                    },
                    "icon": {
                      "description": "URL of the user's icon.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the user.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the user.",
                      "type": "string"
                    },
                    "title": {
                      "description": "Title of the user.",
                      "type": "string"
                    },
                    "verified": {
                      "description": "Whether the user is verified.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the user.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Relationships of the user object returned by the API.",
                  "properties": {
                    "org": {
                      "description": "Relationship to an organization.",
                      "properties": {
                        "data": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "other_orgs": {
                      "description": "Relationship to organizations.",
                      "properties": {
                        "data": {
                          "description": "Relationships to organization objects.",
                          "example": [],
                          "items": {
                            "description": "Relationship to organization object.",
                            "properties": {
                              "id": {
                                "description": "ID of the organization.",
                                "example": "00000000-0000-0000-0000-000000000000",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "other_users": {
                      "description": "Relationship to users.",
                      "properties": {
                        "data": {
                          "description": "Relationships to user objects.",
                          "example": [],
                          "items": {
                            "description": "Relationship to user object.",
                            "properties": {
                              "id": {
                                "description": "A unique identifier that represents the user.",
                                "example": "00000000-0000-0000-0000-000000000000",
                                "type": "string"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "roles": {
                      "description": "Relationship to roles.",
                      "properties": {
                        "data": {
                          "description": "An array containing type and ID of a role.",
                          "items": {
                            "description": "Relationship to role object.",
                            "properties": {
                              "id": {
                                "description": "ID of the role.",
                                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                "type": "string"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "users",
                  "description": "Users resource type.",
                  "enum": [
                    "users"
                  ],
                  "example": "users",
                  "type": "string",
                  "x-enum-varnames": [
                    "USERS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Array of objects related to the users.",
            "items": {
              "description": "An object related to a user.",
              "oneOf": [
                {
                  "description": "Organization object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the organization.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the organization.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the organization.",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether or not the organization is disabled.",
                          "type": "boolean"
                        },
                        "modified_at": {
                          "description": "Time of last organization modification.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the organization.",
                          "type": "string"
                        },
                        "public_id": {
                          "description": "Public ID of the organization.",
                          "type": "string"
                        },
                        "sharing": {
                          "description": "Sharing type of the organization.",
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the site that this organization exists at.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the organization.",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Permission object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of a permission.",
                      "properties": {
                        "created": {
                          "description": "Creation time of the permission.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the permission.",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "Displayed name for the permission.",
                          "type": "string"
                        },
                        "display_type": {
                          "description": "Display type.",
                          "type": "string"
                        },
                        "group_name": {
                          "description": "Name of the permission group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the permission.",
                          "type": "string"
                        },
                        "restricted": {
                          "description": "Whether or not the permission is restricted.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "UsersType": {
        "default": "users",
        "description": "Users resource type.",
        "enum": [
          "users"
        ],
        "example": "users",
        "type": "string",
        "x-enum-varnames": [
          "USERS"
        ]
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "description": "Your Datadog API Key.",
        "in": "header",
        "name": "DD-API-KEY",
        "type": "apiKey",
        "x-env-name": "DD_CLIENT_API_KEY"
      },
      "appKeyAuth": {
        "description": "Your Datadog APP Key.",
        "in": "header",
        "name": "DD-APPLICATION-KEY",
        "type": "apiKey",
        "x-env-name": "DD_CLIENT_APP_KEY"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@datadoghq.com",
      "name": "Datadog Support",
      "url": "https://www.datadoghq.com/support/"
    },
    "description": "Collection of all Datadog Public endpoints.",
    "title": "Datadog API V2 Collection",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards": {
      "delete": {
        "description": "Delete dashboards from an existing dashboard list.",
        "operationId": "DeleteDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to delete items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing a list of dashboards to delete.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to delete from the dashboard list.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dashboards to delete from the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of deleted dashboards.",
                  "properties": {
                    "deleted_dashboards_from_list": {
                      "description": "List of dashboards deleted from the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Delete items from a dashboard list",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "description": "Fetch the dashboard list’s dashboard definitions.",
        "operationId": "GetDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to get items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dashboards within a list.",
                  "properties": {
                    "dashboards": {
                      "description": "List of dashboards in the dashboard list.",
                      "example": [],
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "author": {
                            "description": "Creator of the object.",
                            "properties": {
                              "email": {
                                "description": "Email of the creator.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the creator.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the creator.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "created": {
                            "description": "Date of creation of the dashboard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "icon": {
                            "description": "URL to the icon of the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "type": "string"
                          },
                          "is_favorite": {
                            "description": "Whether or not the dashboard is in the favorites.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "is_read_only": {
                            "description": "Whether or not the dashboard is read only.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "is_shared": {
                            "description": "Whether the dashboard is publicly shared or not.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "modified": {
                            "description": "Date of last edition of the dashboard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "popularity": {
                            "description": "Popularity of the dashboard.",
                            "format": "int32",
                            "maximum": 5,
                            "readOnly": true,
                            "type": "integer"
                          },
                          "title": {
                            "description": "Title of the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          },
                          "url": {
                            "description": "URL path to the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "description": "Number of dashboards in the dashboard list.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "dashboards"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a Dashboard List",
        "tags": [
          "Dashboard Lists"
        ]
      },
      "post": {
        "description": "Add dashboards to an existing dashboard list.",
        "operationId": "CreateDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to add items to.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing a list of dashboards to add.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to add the dashboard list.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dashboards to add to the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of added dashboards.",
                  "properties": {
                    "added_dashboards_to_list": {
                      "description": "List of dashboards added to the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Add Items to a Dashboard List",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "description": "Update dashboards of an existing dashboard list.",
        "operationId": "UpdateDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to update items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing the list of dashboards to update to.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to update the dashboard list to.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New dashboards of the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of updated dashboards.",
                  "properties": {
                    "dashboards": {
                      "description": "List of dashboards in the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Update items of a dashboard list",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/logs/analytics/aggregate": {
      "post": {
        "description": "The API endpoint to aggregate events into buckets and compute metrics and timeseries.",
        "operationId": "AggregateLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The object sent with the request to retrieve a list of logs from your organization.",
                "properties": {
                  "compute": {
                    "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
                    "items": {
                      "description": "A compute rule to compute metrics or timeseries",
                      "properties": {
                        "aggregation": {
                          "description": "An aggregation function",
                          "enum": [
                            "count",
                            "cardinality",
                            "pc75",
                            "pc90",
                            "pc95",
                            "pc98",
                            "pc99",
                            "sum",
                            "min",
                            "max",
                            "avg"
                          ],
                          "example": "pc90",
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "PERCENTILE_75",
                            "PERCENTILE_90",
                            "PERCENTILE_95",
                            "PERCENTILE_98",
                            "PERCENTILE_99",
                            "SUM",
                            "MIN",
                            "MAX",
                            "AVG"
                          ]
                        },
                        "interval": {
                          "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
                          "example": "5m",
                          "type": "string"
                        },
                        "metric": {
                          "description": "The metric to use",
                          "example": "@duration",
                          "type": "string"
                        },
                        "type": {
                          "default": "total",
                          "description": "The type of compute",
                          "enum": [
                            "timeseries",
                            "total"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "TIMESERIES",
                            "TOTAL"
                          ]
                        }
                      },
                      "required": [
                        "aggregation"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filter": {
                    "description": "The search and filter query settings",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested logs, supports date math and regular timestamps",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "indexes": {
                        "default": [
                          "*"
                        ],
                        "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                        "example": [
                          "main",
                          "web"
                        ],
                        "items": {
                          "description": "The name of a log index.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested logs, supports date math and regular timestamps",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by",
                    "items": {
                      "description": "A group by rule",
                      "properties": {
                        "facet": {
                          "description": "The name of the facet to use (required)",
                          "example": "host",
                          "type": "string"
                        },
                        "histogram": {
                          "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                          "properties": {
                            "interval": {
                              "description": "The bin size of the histogram buckets",
                              "example": 10,
                              "format": "double",
                              "type": "number"
                            },
                            "max": {
                              "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                              "example": 100,
                              "format": "double",
                              "type": "number"
                            },
                            "min": {
                              "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                              "example": 50,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "interval",
                            "min",
                            "max"
                          ],
                          "type": "object"
                        },
                        "limit": {
                          "default": 10,
                          "description": "The maximum buckets to return for this group by",
                          "type": "integer"
                        },
                        "missing": {
                          "description": "The value to use for logs that don't have the facet used to group by",
                          "oneOf": [
                            {
                              "description": "The missing value to use if there is string valued facet.",
                              "type": "string"
                            },
                            {
                              "description": "The missing value to use if there is a number valued facet.",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        },
                        "sort": {
                          "description": "A sort rule",
                          "example": {
                            "aggregation": "count",
                            "order": "asc"
                          },
                          "properties": {
                            "aggregation": {
                              "description": "An aggregation function",
                              "enum": [
                                "count",
                                "cardinality",
                                "pc75",
                                "pc90",
                                "pc95",
                                "pc98",
                                "pc99",
                                "sum",
                                "min",
                                "max",
                                "avg"
                              ],
                              "example": "pc90",
                              "type": "string",
                              "x-enum-varnames": [
                                "COUNT",
                                "CARDINALITY",
                                "PERCENTILE_75",
                                "PERCENTILE_90",
                                "PERCENTILE_95",
                                "PERCENTILE_98",
                                "PERCENTILE_99",
                                "SUM",
                                "MIN",
                                "MAX",
                                "AVG"
                              ]
                            },
                            "metric": {
                              "description": "The metric to sort by (only used for type=metric)",
                              "example": "@duration",
                              "type": "string"
                            },
                            "order": {
                              "description": "The order to use, ascending or descending",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "example": "asc",
                              "type": "string",
                              "x-enum-varnames": [
                                "ASCENDING",
                                "DESCENDING"
                              ]
                            },
                            "type": {
                              "default": "alphabetical",
                              "description": "The type of sorting algorithm",
                              "enum": [
                                "alphabetical",
                                "measure"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "ALPHABETICAL",
                                "MEASURE"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "default": false,
                          "description": "A resulting object to put the given computes in over all the matching records.",
                          "oneOf": [
                            {
                              "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                              "type": "boolean"
                            },
                            {
                              "description": "A string to use as the key value for the total bucket",
                              "type": "string"
                            },
                            {
                              "description": "A number to use as the key value for the total bucket",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        }
                      },
                      "required": [
                        "facet"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
                    "properties": {
                      "timeOffset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "paging": {
                    "description": "Paging settings",
                    "properties": {
                      "after": {
                        "description": "The returned paging point to use to get the next results",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object for the logs aggregate API endpoint",
                  "properties": {
                    "data": {
                      "description": "The query results",
                      "properties": {
                        "buckets": {
                          "description": "The list of matching buckets, one item per bucket",
                          "items": {
                            "description": "A bucket values",
                            "properties": {
                              "by": {
                                "additionalProperties": {
                                  "description": "The values for each group by",
                                  "type": "string"
                                },
                                "description": "The key, value pairs for each group by",
                                "example": {
                                  "@state": "success",
                                  "@version": "abc"
                                },
                                "type": "object"
                              },
                              "computes": {
                                "additionalProperties": {
                                  "description": "A bucket value, can be either a timeseries or a single value",
                                  "oneOf": [
                                    {
                                      "description": "A single string value",
                                      "type": "string"
                                    },
                                    {
                                      "description": "A single number value",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    {
                                      "description": "A timeseries array",
                                      "items": {
                                        "description": "A timeseries point",
                                        "properties": {
                                          "time": {
                                            "description": "The time value for this point",
                                            "example": "2020-06-08T11:55:00Z",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The value for this point",
                                            "example": 19,
                                            "format": "double",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array",
                                      "x-generate-alias-as-model": true
                                    }
                                  ]
                                },
                                "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Aggregate events",
        "tags": [
          "Logs"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/logs/config/archive-order": {
      "get": {
        "description": "Get the current order of your archives.\nThis endpoint takes no JSON arguments.",
        "operationId": "GetLogsArchiveOrder",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A ordered list of archive IDs.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive order.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive order.",
                          "properties": {
                            "archive_ids": {
                              "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                              "example": [
                                "a2zcMylnM4OCHpYusxIi1g",
                                "a2zcMylnM4OCHpYusxIi2g",
                                "a2zcMylnM4OCHpYusxIi3g"
                              ],
                              "items": {
                                "description": "A given archive ID.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "archive_ids"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "archive_order",
                          "description": "Type of the archive order definition.",
                          "enum": [
                            "archive_order"
                          ],
                          "example": "archive_order",
                          "type": "string",
                          "x-enum-varnames": [
                            "ARCHIVE_ORDER"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get archive order",
        "tags": [
          "Logs Archives"
        ]
      },
      "put": {
        "description": "Update the order of your archives. Since logs are processed sequentially, reordering an archive may change\nthe structure and content of the data processed by other archives.\n\n**Note**: Using the `PUT` method updates your archive's order by replacing the current order\nwith the new one.",
        "operationId": "UpdateLogsArchiveOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A ordered list of archive IDs.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive order.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive order.",
                        "properties": {
                          "archive_ids": {
                            "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                            "example": [
                              "a2zcMylnM4OCHpYusxIi1g",
                              "a2zcMylnM4OCHpYusxIi2g",
                              "a2zcMylnM4OCHpYusxIi3g"
                            ],
                            "items": {
                              "description": "A given archive ID.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "archive_ids"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archive_order",
                        "description": "Type of the archive order definition.",
                        "enum": [
                          "archive_order"
                        ],
                        "example": "archive_order",
                        "type": "string",
                        "x-enum-varnames": [
                          "ARCHIVE_ORDER"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "An object containing the new ordered list of archive IDs.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A ordered list of archive IDs.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive order.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive order.",
                          "properties": {
                            "archive_ids": {
                              "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                              "example": [
                                "a2zcMylnM4OCHpYusxIi1g",
                                "a2zcMylnM4OCHpYusxIi2g",
                                "a2zcMylnM4OCHpYusxIi3g"
                              ],
                              "items": {
                                "description": "A given archive ID.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "archive_ids"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "archive_order",
                          "description": "Type of the archive order definition.",
                          "enum": [
                            "archive_order"
                          ],
                          "example": "archive_order",
                          "type": "string",
                          "x-enum-varnames": [
                            "ARCHIVE_ORDER"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "summary": "Update archive order",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/logs/config/archives": {
      "get": {
        "description": "Get the list of configured logs archives with their definitions.",
        "operationId": "ListLogsArchives",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The available archives.",
                  "properties": {
                    "data": {
                      "description": "A list of archives.",
                      "items": {
                        "description": "The definition of an archive.",
                        "properties": {
                          "attributes": {
                            "description": "The attributes associated with the archive.",
                            "properties": {
                              "destination": {
                                "description": "An archive's destination.",
                                "nullable": true,
                                "oneOf": [
                                  {
                                    "description": "The Azure archive destination.",
                                    "properties": {
                                      "container": {
                                        "description": "The container where the archive will be stored.",
                                        "example": "container-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The Azure archive's integration destination.",
                                        "properties": {
                                          "client_id": {
                                            "description": "A client ID.",
                                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                            "type": "string"
                                          },
                                          "tenant_id": {
                                            "description": "A tenant ID.",
                                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "tenant_id",
                                          "client_id"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "region": {
                                        "description": "The region where the archive will be stored.",
                                        "type": "string"
                                      },
                                      "storage_account": {
                                        "description": "The associated storage account.",
                                        "example": "account-name",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "azure",
                                        "description": "Type of the Azure archive destination.",
                                        "enum": [
                                          "azure"
                                        ],
                                        "example": "azure",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "AZURE"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "storage_account",
                                      "container",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The GCS archive destination.",
                                    "properties": {
                                      "bucket": {
                                        "description": "The bucket where the archive will be stored.",
                                        "example": "bucket-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The GCS archive's integration destination.",
                                        "properties": {
                                          "client_email": {
                                            "description": "A client email.",
                                            "example": "youremail@example.com",
                                            "type": "string"
                                          },
                                          "project_id": {
                                            "description": "A project ID.",
                                            "example": "project-id",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "project_id",
                                          "client_email"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "gcs",
                                        "description": "Type of the GCS archive destination.",
                                        "enum": [
                                          "gcs"
                                        ],
                                        "example": "gcs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "GCS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "bucket",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The S3 archive destination.",
                                    "properties": {
                                      "bucket": {
                                        "description": "The bucket where the archive will be stored.",
                                        "example": "bucket-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The S3 Archive's integration destination.",
                                        "properties": {
                                          "account_id": {
                                            "description": "The account ID for the integration.",
                                            "example": "123456789012",
                                            "type": "string"
                                          },
                                          "role_name": {
                                            "description": "The path of the integration.",
                                            "example": "role-name",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "role_name",
                                          "account_id"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "s3",
                                        "description": "Type of the S3 archive destination.",
                                        "enum": [
                                          "s3"
                                        ],
                                        "example": "s3",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "S3"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "bucket",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                ],
                                "required": [
                                  "type",
                                  "integration"
                                ],
                                "type": "object"
                              },
                              "name": {
                                "description": "The archive name.",
                                "example": "Nginx Archive",
                                "type": "string"
                              },
                              "query": {
                                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                                "example": "source:nginx",
                                "type": "string"
                              },
                              "rehydration_tags": {
                                "description": "An array of tags to add to rehydrated logs from an archive.",
                                "example": [
                                  "team:intake",
                                  "team:app"
                                ],
                                "items": {
                                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "state": {
                                "description": "The state of the archive.",
                                "enum": [
                                  "UNKNOWN",
                                  "WORKING",
                                  "FAILING",
                                  "WORKING_AUTH_LEGACY"
                                ],
                                "example": "WORKING",
                                "type": "string",
                                "x-enum-varnames": [
                                  "UNKNOWN",
                                  "WORKING",
                                  "FAILING",
                                  "WORKING_AUTH_LEGACY"
                                ]
                              }
                            },
                            "required": [
                              "name",
                              "query",
                              "destination"
                            ],
                            "type": "object"
                          },
                          "id": {
                            "description": "The archive ID.",
                            "example": "a2zcMylnM4OCHpYusxIi3g",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "default": "archives",
                            "description": "The type of the resource. The value should always be archives.",
                            "example": "archives",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Get all archives",
        "tags": [
          "Logs Archives"
        ]
      },
      "post": {
        "description": "Create an archive in your organization.",
        "operationId": "CreateLogsArchive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The logs archive.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive.",
                        "properties": {
                          "destination": {
                            "description": "An archive's destination.",
                            "oneOf": [
                              {
                                "description": "The Azure archive destination.",
                                "properties": {
                                  "container": {
                                    "description": "The container where the archive will be stored.",
                                    "example": "container-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The Azure archive's integration destination.",
                                    "properties": {
                                      "client_id": {
                                        "description": "A client ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      },
                                      "tenant_id": {
                                        "description": "A tenant ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "tenant_id",
                                      "client_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "region": {
                                    "description": "The region where the archive will be stored.",
                                    "type": "string"
                                  },
                                  "storage_account": {
                                    "description": "The associated storage account.",
                                    "example": "account-name",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "azure",
                                    "description": "Type of the Azure archive destination.",
                                    "enum": [
                                      "azure"
                                    ],
                                    "example": "azure",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AZURE"
                                    ]
                                  }
                                },
                                "required": [
                                  "storage_account",
                                  "container",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The GCS archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The GCS archive's integration destination.",
                                    "properties": {
                                      "client_email": {
                                        "description": "A client email.",
                                        "example": "youremail@example.com",
                                        "type": "string"
                                      },
                                      "project_id": {
                                        "description": "A project ID.",
                                        "example": "project-id",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "project_id",
                                      "client_email"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "gcs",
                                    "description": "Type of the GCS archive destination.",
                                    "enum": [
                                      "gcs"
                                    ],
                                    "example": "gcs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "GCS"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The S3 archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The S3 Archive's integration destination.",
                                    "properties": {
                                      "account_id": {
                                        "description": "The account ID for the integration.",
                                        "example": "123456789012",
                                        "type": "string"
                                      },
                                      "role_name": {
                                        "description": "The path of the integration.",
                                        "example": "role-name",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "role_name",
                                      "account_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "s3",
                                    "description": "Type of the S3 archive destination.",
                                    "enum": [
                                      "s3"
                                    ],
                                    "example": "s3",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "S3"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              }
                            ],
                            "required": [
                              "type",
                              "integration"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "The archive name.",
                            "example": "Nginx Archive",
                            "type": "string"
                          },
                          "query": {
                            "description": "The archive query/filter. Logs matching this query are included in the archive.",
                            "example": "source:nginx",
                            "type": "string"
                          },
                          "rehydration_tags": {
                            "description": "An array of tags to add to rehydrated logs from an archive.",
                            "example": [
                              "team:intake",
                              "team:app"
                            ],
                            "items": {
                              "description": "A given tag in the `<KEY>:<VALUE>` format.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name",
                          "query",
                          "destination"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archives",
                        "description": "The type of the resource. The value should always be archives.",
                        "example": "archives",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The definition of the new archive.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          }
        },
        "summary": "Create an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/logs/config/archives/{archive_id}": {
      "delete": {
        "description": "Delete a given archive from your organization.",
        "operationId": "DeleteLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Delete an archive",
        "tags": [
          "Logs Archives"
        ]
      },
      "get": {
        "description": "Get a specific archive from your organization.",
        "operationId": "GetLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get an archive",
        "tags": [
          "Logs Archives"
        ]
      },
      "put": {
        "description": "Update a given archive configuration.\n\n**Note**: Using this method updates your archive configuration by **replacing**\nyour current configuration with the new one sent to your Datadog organization.",
        "operationId": "UpdateLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The logs archive.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive.",
                        "properties": {
                          "destination": {
                            "description": "An archive's destination.",
                            "oneOf": [
                              {
                                "description": "The Azure archive destination.",
                                "properties": {
                                  "container": {
                                    "description": "The container where the archive will be stored.",
                                    "example": "container-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The Azure archive's integration destination.",
                                    "properties": {
                                      "client_id": {
                                        "description": "A client ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      },
                                      "tenant_id": {
                                        "description": "A tenant ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "tenant_id",
                                      "client_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "region": {
                                    "description": "The region where the archive will be stored.",
                                    "type": "string"
                                  },
                                  "storage_account": {
                                    "description": "The associated storage account.",
                                    "example": "account-name",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "azure",
                                    "description": "Type of the Azure archive destination.",
                                    "enum": [
                                      "azure"
                                    ],
                                    "example": "azure",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AZURE"
                                    ]
                                  }
                                },
                                "required": [
                                  "storage_account",
                                  "container",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The GCS archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The GCS archive's integration destination.",
                                    "properties": {
                                      "client_email": {
                                        "description": "A client email.",
                                        "example": "youremail@example.com",
                                        "type": "string"
                                      },
                                      "project_id": {
                                        "description": "A project ID.",
                                        "example": "project-id",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "project_id",
                                      "client_email"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "gcs",
                                    "description": "Type of the GCS archive destination.",
                                    "enum": [
                                      "gcs"
                                    ],
                                    "example": "gcs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "GCS"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The S3 archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The S3 Archive's integration destination.",
                                    "properties": {
                                      "account_id": {
                                        "description": "The account ID for the integration.",
                                        "example": "123456789012",
                                        "type": "string"
                                      },
                                      "role_name": {
                                        "description": "The path of the integration.",
                                        "example": "role-name",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "role_name",
                                      "account_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "s3",
                                    "description": "Type of the S3 archive destination.",
                                    "enum": [
                                      "s3"
                                    ],
                                    "example": "s3",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "S3"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              }
                            ],
                            "required": [
                              "type",
                              "integration"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "The archive name.",
                            "example": "Nginx Archive",
                            "type": "string"
                          },
                          "query": {
                            "description": "The archive query/filter. Logs matching this query are included in the archive.",
                            "example": "source:nginx",
                            "type": "string"
                          },
                          "rehydration_tags": {
                            "description": "An array of tags to add to rehydrated logs from an archive.",
                            "example": [
                              "team:intake",
                              "team:app"
                            ],
                            "items": {
                              "description": "A given tag in the `<KEY>:<VALUE>` format.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name",
                          "query",
                          "destination"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archives",
                        "description": "The type of the resource. The value should always be archives.",
                        "example": "archives",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New definition of the archive.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Update an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/logs/config/archives/{archive_id}/readers": {
      "delete": {
        "description": "Removes a role from an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))",
        "operationId": "RemoveRoleFromArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "ID of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Revoke role from an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Returns all read roles a given archive is restricted to.",
        "operationId": "ListArchiveReadRoles",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple roles.",
                  "properties": {
                    "data": {
                      "description": "Array of returned roles.",
                      "items": {
                        "description": "Role object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the role.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last role modification.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the role.",
                                "type": "string"
                              },
                              "user_count": {
                                "description": "Number of users with that role.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the role.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the role object returned by the API.",
                            "properties": {
                              "permissions": {
                                "description": "Relationship to multiple permissions objects.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to permission objects.",
                                    "items": {
                                      "description": "Relationship to permission object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the permission.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "permissions",
                                          "description": "Permissions resource type.",
                                          "enum": [
                                            "permissions"
                                          ],
                                          "example": "permissions",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "PERMISSIONS"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "List read roles for an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Adds a read role to an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))",
        "operationId": "AddReadRoleToArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "ID of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Grant role to an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries": {
      "get": {
        "description": "Returns all restriction queries, including their names and IDs.",
        "operationId": "ListRestrictionQueries",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "List restriction queries",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Create a new restriction query for your organization.",
        "operationId": "CreateRestrictionQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a restriction query.",
                "properties": {
                  "data": {
                    "description": "Data related to the creation of a restriction query.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created restriction query.",
                        "properties": {
                          "restriction_query": {
                            "description": "The restriction query.",
                            "example": "env:sandbox",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "logs_restriction_queries",
                        "description": "Restriction query resource type.",
                        "enum": [
                          "logs_restriction_queries"
                        ],
                        "example": "logs_restriction_queries",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_RESTRICTION_QUERIES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction queries type.",
                          "example": "logs_restriction_queries",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Create a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/role/{role_id}": {
      "get": {
        "description": "Get restriction query for a given role.",
        "operationId": "GetRoleRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Get restriction query for a given role",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/user/{user_id}": {
      "get": {
        "description": "Get all restriction queries for a given user.",
        "operationId": "ListUserRestrictionQueries",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Get all restriction queries for a given user",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/{restriction_query_id}": {
      "delete": {
        "description": "Deletes a restriction query.",
        "operationId": "DeleteRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Delete a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get a restriction query in the organization specified by the restriction query's `restriction_query_id`.",
        "operationId": "GetRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the restriction query object.",
                          "properties": {
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and ID of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction query resource type.",
                          "enum": [
                            "logs_restriction_queries"
                          ],
                          "example": "logs_restriction_queries",
                          "type": "string",
                          "x-enum-varnames": [
                            "LOGS_RESTRICTION_QUERIES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the restriction query.",
                      "items": {
                        "description": "An object related to a restriction query.",
                        "discriminator": {
                          "mapping": {
                            "roles": "#/components/schemas/RestrictionQueryRole"
                          },
                          "propertyName": "type"
                        },
                        "oneOf": [
                          {
                            "description": "Partial role object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role for a restriction query.",
                                "properties": {
                                  "name": {
                                    "description": "The role name.",
                                    "example": "Datadog Admin Role",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "example": "<ROLE_ID>",
                                "type": "string"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Role resource type.",
                                "example": "roles",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Edit a restriction query.",
        "operationId": "UpdateRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a restriction query.",
                "properties": {
                  "data": {
                    "description": "Data related to the update of a restriction query.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the edited restriction query.",
                        "properties": {
                          "restriction_query": {
                            "description": "The restriction query.",
                            "example": "env:sandbox",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "logs_restriction_queries",
                        "description": "Restriction query resource type.",
                        "enum": [
                          "logs_restriction_queries"
                        ],
                        "example": "logs_restriction_queries",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_RESTRICTION_QUERIES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction queries type.",
                          "example": "logs_restriction_queries",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Update a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/{restriction_query_id}/roles": {
      "delete": {
        "description": "Removes a role from a restriction query.",
        "operationId": "RemoveRoleFromRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "ID of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Revoke role from a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Returns all roles that have a given restriction query.",
        "operationId": "ListRestrictionQueryRoles",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about roles attached to a restriction query.",
                  "properties": {
                    "data": {
                      "description": "Array of roles.",
                      "items": {
                        "description": "Partial role object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role for a restriction query.",
                            "properties": {
                              "name": {
                                "description": "The role name.",
                                "example": "Datadog Admin Role",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the role.",
                            "example": "<ROLE_ID>",
                            "type": "string"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Role resource type.",
                            "example": "roles",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "List roles for a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Adds a role to a restriction query.",
        "operationId": "AddRoleToRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "ID of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Grant role to a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/events": {
      "get": {
        "description": "List endpoint returns logs that match a log search query.\n[Results are paginated][1].\n\nBoth this endpoint and the POST endpoint can be used interchangeably when listing\nlogs.\n\n**If you are considering archiving logs for your organization,\nconsider use of the Datadog archive capabilities instead of the log list API.\nSee [Datadog Logs Archive documentation][2].**\n\n[1]: /logs/guide/collect-multiple-logs-with-pagination\n[2]: https://docs.datadoghq.com/logs/archives",
        "operationId": "ListLogsGet",
        "parameters": [
          {
            "description": "Search query following logs syntax.",
            "example": "@datacenter:us @role:db",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "For customers with multiple indexes, the indexes to search\nDefaults to '*' which means all indexes",
            "example": "main",
            "in": "query",
            "name": "filter[index]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum timestamp for requested logs.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum timestamp for requested logs.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Order of logs in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "Sort parameters when querying logs.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of logs in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all logs matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of logs matching the request.",
                      "items": {
                        "description": "Object description of a log after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all log attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from your log.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "host": {
                                "description": "Name of the machine from where the logs are being sent.",
                                "example": "i-0123",
                                "type": "string"
                              },
                              "message": {
                                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                                "example": "Host connected to remote",
                                "type": "string"
                              },
                              "service": {
                                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "agent",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the message associated with your log.",
                                "example": "INFO",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your log.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your log.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your log.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the Log.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "log",
                            "description": "Type of the event.",
                            "enum": [
                              "log"
                            ],
                            "example": "log",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Get a quick list of logs",
        "tags": [
          "Logs"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/events/search": {
      "post": {
        "description": "List endpoint returns logs that match a log search query.\n[Results are paginated][1].\n\nBoth this endpoint and the GET endpoint can be used interchangeably when listing\nlogs.\n\n**If you are considering archiving logs for your organization,\nconsider use of the Datadog archive capabilities instead of the log list API.\nSee [Datadog Logs Archive documentation][2].**\n\n[1]: /logs/guide/collect-multiple-logs-with-pagination\n[2]: https://docs.datadoghq.com/logs/archives",
        "operationId": "ListLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a logs list.",
                "properties": {
                  "filter": {
                    "description": "The search and filter query settings",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested logs, supports date math and regular timestamps",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "indexes": {
                        "default": [
                          "*"
                        ],
                        "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                        "example": [
                          "main",
                          "web"
                        ],
                        "items": {
                          "description": "The name of a log index.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested logs, supports date math and regular timestamps",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
                    "properties": {
                      "timeOffset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging attributes for listing logs.",
                    "properties": {
                      "cursor": {
                        "description": "List following results with a cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of logs in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "Sort parameters when querying logs.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all logs matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of logs matching the request.",
                      "items": {
                        "description": "Object description of a log after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all log attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from your log.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "host": {
                                "description": "Name of the machine from where the logs are being sent.",
                                "example": "i-0123",
                                "type": "string"
                              },
                              "message": {
                                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                                "example": "Host connected to remote",
                                "type": "string"
                              },
                              "service": {
                                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "agent",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the message associated with your log.",
                                "example": "INFO",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your log.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your log.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your log.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the Log.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "log",
                            "description": "Type of the event.",
                            "enum": [
                              "log"
                            ],
                            "example": "log",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Get a list of logs",
        "tags": [
          "Logs"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/permissions": {
      "get": {
        "description": "Returns a list of all permissions, including name, description, and ID.",
        "operationId": "ListPermissions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "List permissions",
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/v2/roles": {
      "get": {
        "description": "Returns all roles, including their names and IDs.",
        "operationId": "ListRoles",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sort roles depending on the given field. Sort order is **ascending** by default.\nSort order is **descending** if the field is prefixed by a negative sign, for example:\n`sort=-name`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options for roles.",
              "enum": [
                "name",
                "-name",
                "modified_at",
                "-modified_at",
                "user_count",
                "-user_count"
              ],
              "type": "string",
              "x-enum-varnames": [
                "NAME_ASCENDING",
                "NAME_DESCENDING",
                "MODIFIED_AT_ASCENDING",
                "MODIFIED_AT_DESCENDING",
                "USER_COUNT_ASCENDING",
                "USER_COUNT_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter all roles by the given string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple roles.",
                  "properties": {
                    "data": {
                      "description": "Array of returned roles.",
                      "items": {
                        "description": "Role object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the role.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last role modification.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the role.",
                                "type": "string"
                              },
                              "user_count": {
                                "description": "Number of users with that role.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the role.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the role object returned by the API.",
                            "properties": {
                              "permissions": {
                                "description": "Relationship to multiple permissions objects.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to permission objects.",
                                    "items": {
                                      "description": "Relationship to permission object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the permission.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "permissions",
                                          "description": "Permissions resource type.",
                                          "enum": [
                                            "permissions"
                                          ],
                                          "example": "permissions",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "PERMISSIONS"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "List roles",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "description": "Create a new role for your organization.",
        "operationId": "CreateRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a role.",
                "properties": {
                  "data": {
                    "description": "Data related to the creation of a role.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created role.",
                        "properties": {
                          "created_at": {
                            "description": "Creation time of the role.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modified_at": {
                            "description": "Time of last role modification.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.",
                            "example": "developers",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationships of the role object.",
                        "properties": {
                          "permissions": {
                            "description": "Relationship to multiple permissions objects.",
                            "properties": {
                              "data": {
                                "description": "Relationships to permission objects.",
                                "items": {
                                  "description": "Relationship to permission object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the permission.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "permissions",
                                      "description": "Permissions resource type.",
                                      "enum": [
                                        "permissions"
                                      ],
                                      "example": "permissions",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "PERMISSIONS"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "users": {
                            "description": "Relationship to users.",
                            "properties": {
                              "data": {
                                "description": "Relationships to user objects.",
                                "example": [],
                                "items": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a created role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the created role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the role.",
                              "example": "developers",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Create role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/roles/{role_id}": {
      "delete": {
        "description": "Disables a role.",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Delete role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "description": "Get a role in the organization specified by the role’s `role_id`.",
        "operationId": "GetRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the role.",
                              "type": "string"
                            },
                            "user_count": {
                              "description": "Number of users with that role.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "description": "Edit a role. Can only be used with application keys belonging to administrators.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a role.",
                "properties": {
                  "data": {
                    "description": "Data related to the update of a role.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the role.",
                        "properties": {
                          "created_at": {
                            "description": "Creation time of the role.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modified_at": {
                            "description": "Time of last role modification.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the role.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type",
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about an updated role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the role.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "summary": "Update a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/roles/{role_id}/permissions": {
      "delete": {
        "description": "Removes a permission from a role.",
        "operationId": "RemovePermissionFromRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to a permissions object.",
                "properties": {
                  "data": {
                    "description": "Relationship to permission object.",
                    "properties": {
                      "id": {
                        "description": "ID of the permission.",
                        "type": "string"
                      },
                      "type": {
                        "default": "permissions",
                        "description": "Permissions resource type.",
                        "enum": [
                          "permissions"
                        ],
                        "example": "permissions",
                        "type": "string",
                        "x-enum-varnames": [
                          "PERMISSIONS"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Revoke permission",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "description": "Returns a list of all permissions for a single role.",
        "operationId": "ListRolePermissions",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "List permissions for a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "description": "Adds a permission to a role.",
        "operationId": "AddPermissionToRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to a permissions object.",
                "properties": {
                  "data": {
                    "description": "Relationship to permission object.",
                    "properties": {
                      "id": {
                        "description": "ID of the permission.",
                        "type": "string"
                      },
                      "type": {
                        "default": "permissions",
                        "description": "Permissions resource type.",
                        "enum": [
                          "permissions"
                        ],
                        "example": "permissions",
                        "type": "string",
                        "x-enum-varnames": [
                          "PERMISSIONS"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Grant permission to a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/roles/{role_id}/users": {
      "delete": {
        "description": "Removes a user from a role.",
        "operationId": "RemoveUserFromRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and ID of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Remove a user from a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "description": "Gets all users of a role.",
        "operationId": "ListRoleUsers",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "User attribute to order results by. Sort order is **ascending** by default.\nSort order is **descending** if the field is prefixed by a negative sign,\nfor example `sort=-name`. Options: `name`, `email`, `status`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "type": "string"
            }
          },
          {
            "description": "Filter all users by the given string. Defaults to no filtering.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and ID of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get all users of a role",
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "description": "Adds a user to a role.",
        "operationId": "AddUserToRole",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and ID of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Add a user to a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/security_monitoring/rules": {
      "get": {
        "description": "List rules.",
        "operationId": "ListSecurityMonitoringRules",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of rules.",
                  "properties": {
                    "data": {
                      "description": "TODO.",
                      "items": {
                        "description": "Detection rule.",
                        "properties": {
                          "cases": {
                            "description": "Cases for generating signals.",
                            "items": {
                              "description": "Case when signal is generated.",
                              "properties": {
                                "condition": {
                                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the case.",
                                  "type": "string"
                                },
                                "notifications": {
                                  "description": "Notification targets for each rule case.",
                                  "items": {
                                    "description": "Notification.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "status": {
                                  "description": "Severity of the Security Signal.",
                                  "enum": [
                                    "info",
                                    "low",
                                    "medium",
                                    "high",
                                    "critical"
                                  ],
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "INFO",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH",
                                    "CRITICAL"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "createdAt": {
                            "description": "When the rule was created, timestamp in milliseconds.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "creationAuthorId": {
                            "description": "User ID of the user who created the rule.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "The ID of the rule.",
                            "type": "string"
                          },
                          "isDefault": {
                            "description": "Whether the rule is included by default.",
                            "type": "boolean"
                          },
                          "isDeleted": {
                            "description": "Whether the rule has been deleted.",
                            "type": "boolean"
                          },
                          "isEnabled": {
                            "description": "Whether the rule is enabled.",
                            "type": "boolean"
                          },
                          "message": {
                            "description": "Message for generated signals.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the rule.",
                            "type": "string"
                          },
                          "options": {
                            "description": "Options on rules.",
                            "properties": {
                              "evaluationWindow": {
                                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS"
                                ]
                              },
                              "keepAlive": {
                                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200,
                                  10800,
                                  21600
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS",
                                  "THREE_HOURS",
                                  "SIX_HOURS"
                                ]
                              },
                              "maxSignalDuration": {
                                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200,
                                  10800,
                                  21600,
                                  43200,
                                  86400
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS",
                                  "THREE_HOURS",
                                  "SIX_HOURS",
                                  "TWELVE_HOURS",
                                  "ONE_DAY"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "queries": {
                            "description": "Queries for selecting logs which are part of the rule.",
                            "items": {
                              "description": "Query for matching rule.",
                              "properties": {
                                "aggregation": {
                                  "description": "The aggregation type.",
                                  "enum": [
                                    "count",
                                    "cardinality",
                                    "sum",
                                    "max"
                                  ],
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "COUNT",
                                    "CARDINALITY",
                                    "SUM",
                                    "MAX"
                                  ]
                                },
                                "distinctFields": {
                                  "description": "Field for which the cardinality is measured. Sent as an array.",
                                  "items": {
                                    "description": "Field.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "groupByFields": {
                                  "description": "Fields to group by.",
                                  "items": {
                                    "description": "Field.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "metric": {
                                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the query.",
                                  "type": "string"
                                },
                                "query": {
                                  "description": "Query to run on logs.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "tags": {
                            "description": "Tags for generated signals.",
                            "items": {
                              "description": "Tag.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "version": {
                            "description": "The version of the rule.",
                            "format": "int64",
                            "type": "integer"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          }
        },
        "summary": "List rules",
        "tags": [
          "Security Monitoring"
        ]
      },
      "post": {
        "description": "Create a detection rule.",
        "operationId": "CreateSecurityMonitoringRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a new rule.",
                "properties": {
                  "cases": {
                    "description": "Cases for generating signals.",
                    "example": [],
                    "items": {
                      "description": "Case when signal is generated.",
                      "properties": {
                        "condition": {
                          "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the case.",
                          "type": "string"
                        },
                        "notifications": {
                          "description": "Notification targets for each rule case.",
                          "items": {
                            "description": "Notification.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "Severity of the Security Signal.",
                          "enum": [
                            "info",
                            "low",
                            "medium",
                            "high",
                            "critical"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "INFO",
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "CRITICAL"
                          ]
                        }
                      },
                      "required": [
                        "status"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "isEnabled": {
                    "description": "Whether the rule is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Message for generated signals.",
                    "example": "",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the rule.",
                    "example": "",
                    "type": "string"
                  },
                  "options": {
                    "description": "Options on rules.",
                    "properties": {
                      "evaluationWindow": {
                        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS"
                        ]
                      },
                      "keepAlive": {
                        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS"
                        ]
                      },
                      "maxSignalDuration": {
                        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600,
                          43200,
                          86400
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS",
                          "TWELVE_HOURS",
                          "ONE_DAY"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "queries": {
                    "description": "Queries for selecting logs which are part of the rule.",
                    "example": [],
                    "items": {
                      "description": "Query for matching rule.",
                      "properties": {
                        "aggregation": {
                          "description": "The aggregation type.",
                          "enum": [
                            "count",
                            "cardinality",
                            "sum",
                            "max"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "SUM",
                            "MAX"
                          ]
                        },
                        "distinctFields": {
                          "description": "Field for which the cardinality is measured. Sent as an array.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "groupByFields": {
                          "description": "Fields to group by.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "metric": {
                          "description": "The target field to aggregate over when using the sum or max\naggregations.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the query.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query to run on logs.",
                          "example": "a < 3",
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "tags": {
                    "description": "Tags for generated signals.",
                    "example": [
                      "env:prod",
                      "team:security"
                    ],
                    "items": {
                      "description": "Tag.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "isEnabled",
                  "queries",
                  "options",
                  "cases",
                  "message"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Detection rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Create a detection rule",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/security_monitoring/rules/{rule_id}": {
      "delete": {
        "description": "Delete an existing rule. Default rules cannot be deleted.",
        "operationId": "DeleteSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Delete an existing rule",
        "tags": [
          "Security Monitoring"
        ]
      },
      "get": {
        "description": "Get a rule's details.",
        "operationId": "GetSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Detection rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a rule's details",
        "tags": [
          "Security Monitoring"
        ]
      },
      "put": {
        "description": "Update an existing rule. When updating `cases`, `queries` or `options`, the whole field\nmust be included. For example, when modifying a query all queries must be included.\nDefault rules can only be updated to be enabled and to change notifications.",
        "operationId": "UpdateSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update an existing rule.",
                "properties": {
                  "cases": {
                    "description": "Cases for generating signals.",
                    "items": {
                      "description": "Case when signal is generated.",
                      "properties": {
                        "condition": {
                          "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the case.",
                          "type": "string"
                        },
                        "notifications": {
                          "description": "Notification targets for each rule case.",
                          "items": {
                            "description": "Notification.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "Severity of the Security Signal.",
                          "enum": [
                            "info",
                            "low",
                            "medium",
                            "high",
                            "critical"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "INFO",
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "CRITICAL"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "isEnabled": {
                    "description": "Whether the rule is enabled.",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Message for generated signals.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the rule.",
                    "type": "string"
                  },
                  "options": {
                    "description": "Options on rules.",
                    "properties": {
                      "evaluationWindow": {
                        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS"
                        ]
                      },
                      "keepAlive": {
                        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS"
                        ]
                      },
                      "maxSignalDuration": {
                        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600,
                          43200,
                          86400
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS",
                          "TWELVE_HOURS",
                          "ONE_DAY"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "queries": {
                    "description": "Queries for selecting logs which are part of the rule.",
                    "items": {
                      "description": "Query for matching rule.",
                      "properties": {
                        "aggregation": {
                          "description": "The aggregation type.",
                          "enum": [
                            "count",
                            "cardinality",
                            "sum",
                            "max"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "SUM",
                            "MAX"
                          ]
                        },
                        "distinctFields": {
                          "description": "Field for which the cardinality is measured. Sent as an array.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "groupByFields": {
                          "description": "Fields to group by.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "metric": {
                          "description": "The target field to aggregate over when using the sum or max\naggregations.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the query.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query to run on logs.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "tags": {
                    "description": "Tags for generated signals.",
                    "items": {
                      "description": "Tag.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Detection rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Concurrent Modification"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Update an existing rule",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/security_monitoring/signals": {
      "get": {
        "description": "The list endpoint returns security signals that match a search query.\nBoth this endpoint and the POST endpoint can be used interchangeably when listing\nsecurity signals.",
        "operationId": "ListSecurityMonitoringSignals",
        "parameters": [
          {
            "description": "The search query for security signals.",
            "example": "security:attack status:high",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The minimum timestamp for requested security signals.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The maximum timestamp for requested security signals.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The order of the security signals in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "The sort parameters used for querying security signals.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "A list of results using the cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of security signals in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all security signals matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of security signals matching the request.",
                      "items": {
                        "description": "Object description of a security signal.",
                        "properties": {
                          "attributes": {
                            "description": "The object containing all signal attributes and their\nassociated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "A JSON object of attributes in the security signal.",
                                "example": {
                                  "workflow": {
                                    "first_seen": "2020-06-23T14:46:01.000Z",
                                    "last_seen": "2020-06-23T14:46:49.000Z",
                                    "rule": {
                                      "id": "0f5-e0c-805",
                                      "name": "Brute Force Attack Grouped By User ",
                                      "version": 12
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "message": {
                                "description": "The message in the security signal defined by the rule that generated the signal.",
                                "example": "Detect Account Take Over (ATO) through brute force attempts",
                                "type": "string"
                              },
                              "tags": {
                                "description": "An array of tags associated with the security signal.",
                                "example": [
                                  "security:attack",
                                  "technique:T1110-brute-force"
                                ],
                                "format": "array",
                                "items": {
                                  "description": "The tag associated with the security signal.",
                                  "format": "string"
                                }
                              },
                              "timestamp": {
                                "description": "The timestamp of the security signal.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique ID of the security signal.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "signal",
                            "description": "The type of event.",
                            "enum": [
                              "signal"
                            ],
                            "example": "signal",
                            "type": "string",
                            "x-enum-varnames": [
                              "SIGNAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Meta attributes.",
                      "properties": {
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Get a quick list of security signals",
        "tags": [
          "Security Monitoring"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/security_monitoring/signals/search": {
      "post": {
        "description": "Returns security signals that match a search query.\nBoth this endpoint and the GET endpoint can be used interchangeably for listing\nsecurity signals.",
        "operationId": "SearchSecurityMonitoringSignals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a security signal list.",
                "properties": {
                  "filter": {
                    "description": "Search filters for listing security signals.",
                    "properties": {
                      "from": {
                        "description": "The minimum timestamp for requested security signals.",
                        "example": "2019-01-02T09:42:36.320Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "query": {
                        "description": "Search query for listing security signals.",
                        "example": "security:attack status:high",
                        "type": "string"
                      },
                      "to": {
                        "description": "The maximum timestamp for requested security signals.",
                        "example": "2019-01-03T09:42:36.320Z",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "The paging attributes for listing security signals.",
                    "properties": {
                      "cursor": {
                        "description": "A list of results using the cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "The maximum number of security signals in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "The sort parameters used for querying security signals.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all security signals matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of security signals matching the request.",
                      "items": {
                        "description": "Object description of a security signal.",
                        "properties": {
                          "attributes": {
                            "description": "The object containing all signal attributes and their\nassociated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "A JSON object of attributes in the security signal.",
                                "example": {
                                  "workflow": {
                                    "first_seen": "2020-06-23T14:46:01.000Z",
                                    "last_seen": "2020-06-23T14:46:49.000Z",
                                    "rule": {
                                      "id": "0f5-e0c-805",
                                      "name": "Brute Force Attack Grouped By User ",
                                      "version": 12
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "message": {
                                "description": "The message in the security signal defined by the rule that generated the signal.",
                                "example": "Detect Account Take Over (ATO) through brute force attempts",
                                "type": "string"
                              },
                              "tags": {
                                "description": "An array of tags associated with the security signal.",
                                "example": [
                                  "security:attack",
                                  "technique:T1110-brute-force"
                                ],
                                "format": "array",
                                "items": {
                                  "description": "The tag associated with the security signal.",
                                  "format": "string"
                                }
                              },
                              "timestamp": {
                                "description": "The timestamp of the security signal.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique ID of the security signal.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "signal",
                            "description": "The type of event.",
                            "enum": [
                              "signal"
                            ],
                            "example": "signal",
                            "type": "string",
                            "x-enum-varnames": [
                              "SIGNAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Meta attributes.",
                      "properties": {
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          }
        },
        "summary": "Get a list of security signals",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/services": {
      "get": {
        "description": "Get all services for the requesting user's organization. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these services.",
        "operationId": "GetServices",
        "parameters": [
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "enum": [
                "users"
              ],
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific offset to use as the beginning of the returned page.",
            "in": "query",
            "name": "page[offset]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of service payloads.",
                  "properties": {
                    "data": {
                      "description": "An array of services.",
                      "example": [
                        {
                          "id": "00000000-0000-0000-0000-000000000000",
                          "type": "services"
                        }
                      ],
                      "items": {
                        "description": "Service data from responses.",
                        "properties": {
                          "attributes": {
                            "description": "The service's attributes from a response.",
                            "properties": {
                              "created": {
                                "description": "Timestamp of when the service was created.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified": {
                                "description": "Timestamp of when the service was modified.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the service.",
                                "example": "service name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The service's ID.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "The service's relationships.",
                            "properties": {
                              "created_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "last_modified_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "default": "services",
                            "description": "Service resource type.",
                            "enum": [
                              "services"
                            ],
                            "example": "services",
                            "type": "string",
                            "x-enum-varnames": [
                              "SERVICES"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included related resources which the user requested.",
                      "items": {
                        "description": "An object related to a service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "meta": {
                      "description": "The metadata object containing pagination metadata.",
                      "properties": {
                        "pagination": {
                          "description": "Pagination properties.",
                          "properties": {
                            "next_offset": {
                              "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            },
                            "offset": {
                              "description": "The index of the first element in the results.",
                              "example": 10,
                              "format": "int64",
                              "type": "integer"
                            },
                            "size": {
                              "description": "Maximum size of pages to return.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a list of all services",
        "tags": [
          "Services"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Creates a new service.",
        "operationId": "CreateService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request with a service payload.",
                "properties": {
                  "data": {
                    "description": "Service payload for create requests.",
                    "properties": {
                      "attributes": {
                        "description": "The service's attributes for a create request.",
                        "properties": {
                          "name": {
                            "description": "Name of the service.",
                            "example": "an example service name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "The service's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "services",
                        "description": "Service resource type.",
                        "enum": [
                          "services"
                        ],
                        "example": "services",
                        "type": "string",
                        "x-enum-varnames": [
                          "SERVICES"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Service Payload.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a service payload.",
                  "properties": {
                    "data": {
                      "description": "Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Create a new service",
        "tags": [
          "Services"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/services/{service_id}": {
      "delete": {
        "description": "Deletes an existing service.",
        "operationId": "DeleteService",
        "parameters": [
          {
            "description": "The ID of the service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Delete an existing service",
        "tags": [
          "Services"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get details of a service. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these services",
        "operationId": "GetService",
        "parameters": [
          {
            "description": "The ID of the service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "enum": [
                "users"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a service payload.",
                  "properties": {
                    "data": {
                      "description": "Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get details of a service",
        "tags": [
          "Services"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Updates an existing service. Only provide the attributes which should be updated as this request is a partial update.",
        "operationId": "UpdateService",
        "parameters": [
          {
            "description": "The ID of the service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request with a service payload.",
                "properties": {
                  "data": {
                    "description": "Service payload for update requests.",
                    "properties": {
                      "attributes": {
                        "description": "The service's attributes for an update request.",
                        "properties": {
                          "name": {
                            "description": "Name of the service.",
                            "example": "an example service name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The service's ID.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "The service's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "services",
                        "description": "Service resource type.",
                        "enum": [
                          "services"
                        ],
                        "example": "services",
                        "type": "string",
                        "x-enum-varnames": [
                          "SERVICES"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Service Payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a service payload.",
                  "properties": {
                    "data": {
                      "description": "Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Update an existing service",
        "tags": [
          "Services"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/teams": {
      "get": {
        "description": "Get all teams for the requesting user's organization. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these teams.",
        "operationId": "GetTeams",
        "parameters": [
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "enum": [
                "users"
              ],
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific offset to use as the beginning of the returned page.",
            "in": "query",
            "name": "page[offset]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of team payloads.",
                  "properties": {
                    "data": {
                      "description": "An array of teams.",
                      "example": [
                        {
                          "attributes": {
                            "name": "team name"
                          },
                          "id": "00000000-0000-0000-0000-000000000000",
                          "type": "teams"
                        }
                      ],
                      "items": {
                        "description": "Team data from a response.",
                        "properties": {
                          "attributes": {
                            "description": "The team's attributes from a response.",
                            "properties": {
                              "created": {
                                "description": "Timestamp of when the team was created.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified": {
                                "description": "Timestamp of when the team was modified.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the team.",
                                "example": "team name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The team's ID.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "The team's relationships.",
                            "properties": {
                              "created_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "last_modified_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "default": "teams",
                            "description": "Team resource type.",
                            "enum": [
                              "teams"
                            ],
                            "example": "teams",
                            "type": "string",
                            "x-enum-varnames": [
                              "TEAMS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included related resources which the user requested.",
                      "items": {
                        "description": "An object related to a team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "meta": {
                      "description": "The metadata object containing pagination metadata.",
                      "properties": {
                        "pagination": {
                          "description": "Pagination properties.",
                          "properties": {
                            "next_offset": {
                              "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            },
                            "offset": {
                              "description": "The index of the first element in the results.",
                              "example": 10,
                              "format": "int64",
                              "type": "integer"
                            },
                            "size": {
                              "description": "Maximum size of pages to return.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get a list of all teams",
        "tags": [
          "Teams"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Creates a new team.",
        "operationId": "CreateTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request with a team payload.",
                "properties": {
                  "data": {
                    "description": "Team data for a create request.",
                    "properties": {
                      "attributes": {
                        "description": "The team's attributes for a create request.",
                        "properties": {
                          "name": {
                            "description": "Name of the team.",
                            "example": "team name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "The team's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "teams",
                        "description": "Team resource type.",
                        "enum": [
                          "teams"
                        ],
                        "example": "teams",
                        "type": "string",
                        "x-enum-varnames": [
                          "TEAMS"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Teams Payload.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a team payload.",
                  "properties": {
                    "data": {
                      "description": "Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The team's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Create a new team",
        "tags": [
          "Teams"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/teams/{team_id}": {
      "delete": {
        "description": "Deletes an existing team.",
        "operationId": "DeleteTeam",
        "parameters": [
          {
            "description": "The ID of the team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Delete an existing team",
        "tags": [
          "Teams"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get details of a team. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these teams.",
        "operationId": "GetTeam",
        "parameters": [
          {
            "description": "The ID of the team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "enum": [
                "users"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a team payload.",
                  "properties": {
                    "data": {
                      "description": "Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The team's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Get details of a team",
        "tags": [
          "Teams"
        ],
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Updates an existing team. Only provide the attributes which should be updated as this request is a partial update.",
        "operationId": "UpdateTeam",
        "parameters": [
          {
            "description": "The ID of the team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request with a team payload.",
                "properties": {
                  "data": {
                    "description": "Team data for an update request.",
                    "properties": {
                      "attributes": {
                        "description": "The team's attributes for an update request.",
                        "properties": {
                          "name": {
                            "description": "Name of the team.",
                            "example": "team name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The team's ID.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "The team's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "teams",
                        "description": "Team resource type.",
                        "enum": [
                          "teams"
                        ],
                        "example": "teams",
                        "type": "string",
                        "x-enum-varnames": [
                          "TEAMS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Teams Payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a team payload.",
                  "properties": {
                    "data": {
                      "description": "Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The team's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to a team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-0000-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and ID of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          }
        },
        "summary": "Update an existing team",
        "tags": [
          "Teams"
        ],
        "x-codegen-request-body-name": "body",
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/user_invitations": {
      "post": {
        "description": "Sends emails to one or more users inviting them to join the organization.",
        "operationId": "SendInvitations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Object to invite users to join the organization.",
                "properties": {
                  "data": {
                    "description": "List of user invitations.",
                    "example": [],
                    "items": {
                      "description": "Object to create a user invitation.",
                      "properties": {
                        "relationships": {
                          "description": "Relationships data for user invitation.",
                          "properties": {
                            "user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "user"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "user_invitations",
                          "description": "User invitations type.",
                          "enum": [
                            "user_invitations"
                          ],
                          "example": "user_invitations",
                          "type": "string",
                          "x-enum-varnames": [
                            "USER_INVITATIONS"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "relationships"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "User invitations as returned by the API.",
                  "properties": {
                    "data": {
                      "description": "Array of user invitations.",
                      "items": {
                        "description": "Object of a user invitation returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a user invitation.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user invitation.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "expires_at": {
                                "description": "Time of invitation expiration.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "invite_type": {
                                "description": "Type of invitation.",
                                "type": "string"
                              },
                              "uuid": {
                                "description": "UUID of the user invitation.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user invitation.",
                            "type": "string"
                          },
                          "type": {
                            "default": "user_invitations",
                            "description": "User invitations type.",
                            "enum": [
                              "user_invitations"
                            ],
                            "example": "user_invitations",
                            "type": "string",
                            "x-enum-varnames": [
                              "USER_INVITATIONS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Send invitation emails",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/user_invitations/{user_invitation_uuid}": {
      "get": {
        "description": "Returns a single user invitation by its UUID.",
        "operationId": "GetInvitation",
        "parameters": [
          {
            "description": "The UUID of the user invitation.",
            "in": "path",
            "name": "user_invitation_uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "User invitation as returned by the API.",
                  "properties": {
                    "data": {
                      "description": "Object of a user invitation returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a user invitation.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user invitation.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "expires_at": {
                              "description": "Time of invitation expiration.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "invite_type": {
                              "description": "Type of invitation.",
                              "type": "string"
                            },
                            "uuid": {
                              "description": "UUID of the user invitation.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user invitation.",
                          "type": "string"
                        },
                        "type": {
                          "default": "user_invitations",
                          "description": "User invitations type.",
                          "enum": [
                            "user_invitations"
                          ],
                          "example": "user_invitations",
                          "type": "string",
                          "x-enum-varnames": [
                            "USER_INVITATIONS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get a user invitation",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/users": {
      "get": {
        "description": "Get the list of all users in the organization. This list includes\nall users even if they are deactivated or unverified.",
        "operationId": "ListUsers",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "User attribute to order results by. Sort order is ascending by default.\nSort order is descending if the field\nis prefixed by a negative sign, for example `sort=-name`. Options: `name`,\n`modified_at`, `user_count`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "type": "string"
            }
          },
          {
            "description": "Direction of sort. Options: `asc`, `desc`.",
            "in": "query",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "default": "desc",
              "description": "Direction of sort.",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-enum-varnames": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Filter all users by the given string. Defaults to no filtering.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter on status attribute.\nComma separated list, with possible values `Active`, `Pending`, and `Disabled`.\nDefaults to no filtering.",
            "in": "query",
            "name": "filter[status]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and ID of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "List all users",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "description": "Create a user for your organization.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a user.",
                "properties": {
                  "data": {
                    "description": "Object to create a user.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created user.",
                        "properties": {
                          "email": {
                            "description": "The email of the user.",
                            "example": "joe.doe@example.com",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the user.",
                            "type": "string"
                          },
                          "title": {
                            "description": "The title of the user.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationships of the user object.",
                        "properties": {
                          "roles": {
                            "description": "Relationship to roles.",
                            "properties": {
                              "data": {
                                "description": "An array containing type and ID of a role.",
                                "items": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and ID of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          }
        },
        "summary": "Create a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/users/{user_id}": {
      "delete": {
        "description": "Disable a user. Can only be used with an application key belonging\nto an administrator user.",
        "operationId": "DisableUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Disable a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "description": "Get a user in the organization specified by the user’s `user_id`.",
        "operationId": "GetUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and ID of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK for get user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get user details",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "description": "Edit a user. Can only be used with an application key belonging\nto an administrator user.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a user.",
                "properties": {
                  "data": {
                    "description": "Object to update a user.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the edited user.",
                        "properties": {
                          "disabled": {
                            "description": "If the user is enabled or disabled.",
                            "type": "boolean"
                          },
                          "email": {
                            "description": "The email of the user.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the user.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type",
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and ID of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "summary": "Update a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/users/{user_id}/orgs": {
      "get": {
        "description": "Get a user organization. Returns the user information and all organizations\njoined by this user.",
        "operationId": "ListUserOrganizations",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "type": "string"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and ID of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get a user organization",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/users/{user_id}/permissions": {
      "get": {
        "description": "Get a user permission set. Returns a list of the user’s permissions\ngranted by the associated user's roles.",
        "operationId": "ListUserPermissions",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Get a user permissions",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "security": [
    {
      "apiKeyAuth": [],
      "appKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://{subdomain}.{site}",
      "variables": {
        "site": {
          "default": "datadoghq.com",
          "description": "The regional site for our customers.",
          "enum": [
            "datadoghq.com",
            "datadoghq.eu"
          ]
        },
        "subdomain": {
          "default": "api",
          "description": "The subdomain where the API is deployed."
        }
      }
    },
    {
      "url": "{protocol}://{name}",
      "variables": {
        "name": {
          "default": "api.datadoghq.com",
          "description": "Full site DNS name."
        },
        "protocol": {
          "default": "https",
          "description": "The protocol for accessing the API."
        }
      }
    }
  ],
  "tags": [
    {
      "description": "[See API version 1](/api/v1/aws-integration/).",
      "name": "AWS Integration"
    },
    {
      "description": "[See API version 1](/api/v1/aws-logs-integration/).",
      "name": "AWS Logs Integration"
    },
    {
      "description": "All requests to Datadog’s API must be authenticated.\nRequests that write data require reporting access and require an `API key`.\nRequests that read data require full access and also require an `application key`.\n\n**Note:** All Datadog API clients are configured by default to consume Datadog US site APIs.\nIf you are on the Datadog EU site, set the environment variable `DATADOG_HOST` to\n`https://api.datadoghq.eu` or override this value directly when creating your client.\n\n[Manage your account’s API and application keys](https://app.datadoghq.com/account/settings#api).\n\n## Validate API key\n\n[See API version 1](/api/v1/authentication/#validate-api-key).",
      "name": "Authentication"
    },
    {
      "description": "[See API version 1](/api/v1/azure-integration/).",
      "name": "Azure Integration"
    },
    {
      "description": "Interact with your dashboard lists through the API to make it easier to\norganize, find, and share all of your dashboards with your team and\norganization. Note that you can add API v1 Dashboards to Dashboard Lists\nthat you create with API v2.",
      "name": "Dashboard Lists"
    },
    {
      "description": "[See API version 1](/api/v1/dashboards/).",
      "name": "Dashboards"
    },
    {
      "description": "[See API version 1](/api/v1/downtimes/).",
      "name": "Downtimes"
    },
    {
      "description": "[See API version 1](/api/v1/embeddable-graphs/).",
      "name": "Embeddable Graphs"
    },
    {
      "description": "[See API version 1](/api/v1/events/).",
      "name": "Events"
    },
    {
      "description": "[See API version 1](/api/v1/gcp-integration/).",
      "name": "GCP Integration"
    },
    {
      "description": "[See API version 1](/api/v1/hosts/).",
      "name": "Hosts"
    },
    {
      "description": "[See API version 1](/api/v1/ip-ranges/).",
      "name": "IP Ranges"
    },
    {
      "description": "[See API version 1](/api/v1/key-management/).",
      "name": "Key Management"
    },
    {
      "description": "Search your logs in the Datadog platform over HTTP.\n\n[See API version 1](/api/v1/logs/) for sending logs.",
      "name": "Logs"
    },
    {
      "description": "Archives forward all the logs ingested to a cloud storage system.\n\nSee the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)\nfor a list of the archives currently configured in our UI.",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/logs/archives/"
      },
      "name": "Logs Archives"
    },
    {
      "description": "[See API version 1](/api/v1/logs-indexes/).",
      "name": "Logs Indexes"
    },
    {
      "description": "[See API version 1](/api/v1/logs-pipelines/).",
      "name": "Logs Pipelines"
    },
    {
      "description": "**Note: This endpoint is in public beta. If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).**\n\nTo grant read access on log data at all, you must grant the `logs_read_data` permission.\nFrom there you can limit what data a role grants read access to by associating a Restriction Query with that role.\n\nA Restriction Query is a logs query that restricts which logs the `logs_read_data` permission grants read access to.\nFor users whose roles have Restriction Queries, any log query they make only returns those log events that also match\none of their Restriction Queries. This is true whether the user queries log events from any log-related feature, including\nthe log explorer, Live Tail, re-hydration, or a dashboard widget.\n\nRestriction Queries currently only support use of the following components of log events:\n\n- Reserved attributes\n- The log message\n- Tags\n\nThe recommended way to manage restricted read access on log data for customers with large or complicated organizational structures\nis to add a team tag to log events to indicate which team(s) own(s) them, and then to scope Restriction Queries to the appropriate\nvalues of the team tag. Tags can be applied to log events in many ways, and a log event can have multiple tags with the same key (like team)\nand different values—in this way the same log event can be visible to roles whose restriction queries are scoped to different team values.\n\nYou need an API and application key with Admin rights to interact with this endpoint.",
      "name": "Logs Restriction Queries"
    },
    {
      "description": "[See API version 1](/api/v1/metrics/).",
      "name": "Metrics"
    },
    {
      "description": "[See API version 1](/api/v1/monitors/).",
      "name": "Monitors"
    },
    {
      "description": "[See API version 1](/api/v1/organizations/).",
      "name": "Organizations"
    },
    {
      "description": "[See API version 1](/api/v1/pagerduty-integration/).",
      "name": "PagerDuty Integration"
    },
    {
      "description": "The Roles API is used to create and manage Datadog roles, what\n[global permissions](https://docs.datadoghq.com/account_management/rbac/)\nthey grant, and which users belong to them.\n\nPermissions related to specific account assets can be granted to roles\nin the Datadog application without using this API. For example, granting\nread access on a specific log index to a role can be done in Datadog from the\n[Pipelines page](https://app.datadoghq.com/logs/pipelines).",
      "name": "Roles"
    },
    {
      "description": "[See API version 1](/api/v1/screenboards/).",
      "name": "Screenboards"
    },
    {
      "description": "Detection rules for generating signals and listing of generated\nsignals.",
      "name": "Security Monitoring"
    },
    {
      "description": "[See API version 1](/api/v1/service-checks/).",
      "name": "Service Checks"
    },
    {
      "description": "[See API version 1](/api/v1/service-dependencies/).",
      "name": "Service Dependencies"
    },
    {
      "description": "[See API version 1](/api/v1/service-level-objectives/).",
      "name": "Service Level Objectives"
    },
    {
      "description": "Create, update, delete and retrieve your organizations services.",
      "name": "Services"
    },
    {
      "description": "[See API version 1](/api/v1/slack-integration/).",
      "name": "Slack Integration"
    },
    {
      "description": "[See API version 1](/api/v1/snapshots/).",
      "name": "Snapshots"
    },
    {
      "description": "[See API version 1](/api/v1/synthetics/).",
      "name": "Synthetics"
    },
    {
      "description": "[See API version 1](/api/v1/tags/).",
      "name": "Tags"
    },
    {
      "description": "Create, update, delete and retrieve your organizations Teams.",
      "name": "Teams"
    },
    {
      "description": "[See API version 1](/api/v1/timeboards/).",
      "name": "Timeboards"
    },
    {
      "description": "[See API version 1](/api/v1/tracing/).",
      "name": "Tracing"
    },
    {
      "description": "[See API version 1](/api/v1/usage-metering/).",
      "name": "Usage Metering"
    },
    {
      "description": "Create, edit, and disable users.",
      "externalDocs": {
        "url": "https://docs.datadoghq.com/account_management/users"
      },
      "name": "Users"
    },
    {
      "description": "[See API version 1](/api/v1/webhooks-integration/).",
      "name": "Webhooks Integration"
    }
  ],
  "x-group-parameters": true
}
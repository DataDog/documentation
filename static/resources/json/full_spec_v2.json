{
  "components": {
    "callbacks": {},
    "examples": {},
    "headers": {},
    "links": {},
    "parameters": {
      "APIKeyFilterCreatedAtEndParameter": {
        "description": "Only include API keys created on or before the specified date.",
        "in": "query",
        "name": "filter[created_at][end]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "APIKeyFilterCreatedAtStartParameter": {
        "description": "Only include API keys created on or after the specified date.",
        "in": "query",
        "name": "filter[created_at][start]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "APIKeyFilterModifiedAtEndParameter": {
        "description": "Only include API keys modified on or before the specified date.",
        "in": "query",
        "name": "filter[modified_at][end]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "APIKeyFilterModifiedAtStartParameter": {
        "description": "Only include API keys modified on or after the specified date.",
        "in": "query",
        "name": "filter[modified_at][start]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "APIKeyFilterParameter": {
        "description": "Filter API keys by the specified string.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "APIKeyId": {
        "description": "The ID of the API key.",
        "in": "path",
        "name": "api_key_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "APIKeyIncludeParameter": {
        "description": "Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "example": "created_by,modified_by",
          "type": "string"
        }
      },
      "APIKeysSortParameter": {
        "description": "API key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "default": "name",
          "description": "Sorting options",
          "enum": [
            "created_at",
            "-created_at",
            "last4",
            "-last4",
            "modified_at",
            "-modified_at",
            "name",
            "-name"
          ],
          "type": "string",
          "x-enum-varnames": [
            "CREATED_AT_ASCENDING",
            "CREATED_AT_DESCENDING",
            "LAST4_ASCENDING",
            "LAST4_DESCENDING",
            "MODIFIED_AT_ASCENDING",
            "MODIFIED_AT_DESCENDING",
            "NAME_ASCENDING",
            "NAME_DESCENDING"
          ]
        }
      },
      "ApplicationKeyFilterCreatedAtEndParameter": {
        "description": "Only include application keys created on or before the specified date.",
        "in": "query",
        "name": "filter[created_at][end]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "ApplicationKeyFilterCreatedAtStartParameter": {
        "description": "Only include application keys created on or after the specified date.",
        "in": "query",
        "name": "filter[created_at][start]",
        "required": false,
        "schema": {
          "example": "2020-11-24T18:46:21+00:00",
          "type": "string"
        }
      },
      "ApplicationKeyFilterParameter": {
        "description": "Filter application keys by the specified string.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "ApplicationKeyID": {
        "description": "The ID of the application key.",
        "in": "path",
        "name": "app_key_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ApplicationKeyIncludeParameter": {
        "description": "Resource path for related resources to include in the response. Only `owned_by` is supported.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "example": "owned_by",
          "type": "string"
        }
      },
      "ApplicationKeysSortParameter": {
        "description": "Application key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "default": "name",
          "description": "Sorting options",
          "enum": [
            "created_at",
            "-created_at",
            "last4",
            "-last4",
            "name",
            "-name"
          ],
          "type": "string",
          "x-enum-varnames": [
            "CREATED_AT_ASCENDING",
            "CREATED_AT_DESCENDING",
            "LAST4_ASCENDING",
            "LAST4_DESCENDING",
            "NAME_ASCENDING",
            "NAME_DESCENDING"
          ]
        }
      },
      "ArchiveID": {
        "description": "The ID of the archive.",
        "in": "path",
        "name": "archive_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AuthNMappingID": {
        "description": "The UUID of the AuthN Mapping.",
        "in": "path",
        "name": "authn_mapping_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CloudWorkloadSecurityAgentRuleID": {
        "description": "The ID of the Agent rule.",
        "example": "3b5-v82-ns6",
        "in": "path",
        "name": "agent_rule_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "IncidentIDPathParameter": {
        "description": "The UUID of the incident.",
        "in": "path",
        "name": "incident_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "IncidentIncludeQueryParameter": {
        "description": "Specifies which types of related objects should be included in the response.",
        "explode": false,
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "items": {
            "description": "Object related to an incident.",
            "enum": [
              "users"
            ],
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          },
          "type": "array"
        }
      },
      "IncidentServiceIDPathParameter": {
        "description": "The ID of the incident service.",
        "in": "path",
        "name": "service_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "IncidentServiceIncludeQueryParameter": {
        "description": "Specifies which types of related objects should be included in the response.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "description": "Object related to an incident.",
          "enum": [
            "users"
          ],
          "type": "string",
          "x-enum-varnames": [
            "USERS"
          ]
        }
      },
      "IncidentServiceSearchQueryParameter": {
        "description": "A search query that filters services by name.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "example": "ExampleServiceName",
          "type": "string"
        }
      },
      "IncidentTeamIDPathParameter": {
        "description": "The ID of the incident team.",
        "in": "path",
        "name": "team_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "IncidentTeamIncludeQueryParameter": {
        "description": "Specifies which types of related objects should be included in the response.",
        "in": "query",
        "name": "include",
        "required": false,
        "schema": {
          "description": "Object related to an incident.",
          "enum": [
            "users"
          ],
          "type": "string",
          "x-enum-varnames": [
            "USERS"
          ]
        }
      },
      "IncidentTeamSearchQueryParameter": {
        "description": "A search query that filters teams by name.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "example": "ExampleTeamName",
          "type": "string"
        }
      },
      "MetricID": {
        "description": "The name of the log-based metric.",
        "in": "path",
        "name": "metric_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MetricName": {
        "description": "The name of the metric.",
        "example": "dist.http.endpoint.request",
        "in": "path",
        "name": "metric_name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "OpsgenieServiceIDPathParameter": {
        "description": "The UUID of the service.",
        "in": "path",
        "name": "integration_service_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PageNumber": {
        "description": "Specific page number to return.",
        "in": "query",
        "name": "page[number]",
        "required": false,
        "schema": {
          "default": 0,
          "example": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "PageOffset": {
        "description": "Specific offset to use as the beginning of the returned page.",
        "in": "query",
        "name": "page[offset]",
        "required": false,
        "schema": {
          "default": 0,
          "example": 0,
          "format": "int64",
          "type": "integer"
        }
      },
      "PageSize": {
        "description": "Size for a given page.",
        "in": "query",
        "name": "page[size]",
        "required": false,
        "schema": {
          "default": 10,
          "example": 10,
          "format": "int64",
          "type": "integer"
        }
      },
      "RestrictionQueryID": {
        "description": "The ID of the restriction query.",
        "in": "path",
        "name": "restriction_query_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RestrictionQueryRoleID": {
        "description": "The ID of the role.",
        "in": "path",
        "name": "role_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RestrictionQueryUserID": {
        "description": "The ID of the user.",
        "in": "path",
        "name": "user_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RoleID": {
        "description": "The unique identifier of the role.",
        "in": "path",
        "name": "role_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SecurityFilterID": {
        "description": "The ID of the security filter.",
        "in": "path",
        "name": "security_filter_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SecurityMonitoringRuleID": {
        "description": "The ID of the rule.",
        "in": "path",
        "name": "rule_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ServiceAccountID": {
        "description": "The ID of the service account.",
        "in": "path",
        "name": "service_account_id",
        "required": true,
        "schema": {
          "example": "00000000-0000-1234-0000-000000000000",
          "type": "string"
        }
      },
      "SignalID": {
        "description": "The ID of the signal.",
        "in": "path",
        "name": "signal_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "UserID": {
        "description": "The ID of the user.",
        "in": "path",
        "name": "user_id",
        "required": true,
        "schema": {
          "example": "00000000-0000-9999-0000-000000000000",
          "type": "string"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "BadRequestResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Bad Request"
      },
      "ConcurrentModificationResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Concurrent Modification"
      },
      "ConflictResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Conflict"
      },
      "ForbiddenResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Forbidden"
      },
      "NotAuthorizedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Not Authorized"
      },
      "NotFoundResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Not Found"
      },
      "TooManyRequestsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Too many requests"
      },
      "UnauthorizedResponse": {
        "content": {
          "application/json": {
            "schema": {
              "description": "API error response.",
              "properties": {
                "errors": {
                  "description": "A list of errors.",
                  "items": {
                    "description": "A list of items.",
                    "example": "Bad Request",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "errors"
              ],
              "type": "object"
            }
          }
        },
        "description": "Unauthorized"
      }
    },
    "schemas": {
      "APIErrorResponse": {
        "description": "API error response.",
        "properties": {
          "errors": {
            "description": "A list of errors.",
            "items": {
              "description": "A list of items.",
              "example": "Bad Request",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "errors"
        ],
        "type": "object"
      },
      "APIKeyCreateAttributes": {
        "description": "Attributes used to create an API Key.",
        "properties": {
          "name": {
            "description": "Name of the API key.",
            "example": "API Key for submitting metrics",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "APIKeyCreateData": {
        "description": "Object used to create an API key.",
        "properties": {
          "attributes": {
            "description": "Attributes used to create an API Key.",
            "properties": {
              "name": {
                "description": "Name of the API key.",
                "example": "API Key for submitting metrics",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": {
            "default": "api_keys",
            "description": "API Keys resource type.",
            "enum": [
              "api_keys"
            ],
            "example": "api_keys",
            "type": "string",
            "x-enum-varnames": [
              "API_KEYS"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "APIKeyCreateRequest": {
        "description": "Request used to create an API key.",
        "properties": {
          "data": {
            "description": "Object used to create an API key.",
            "properties": {
              "attributes": {
                "description": "Attributes used to create an API Key.",
                "properties": {
                  "name": {
                    "description": "Name of the API key.",
                    "example": "API Key for submitting metrics",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": {
                "default": "api_keys",
                "description": "API Keys resource type.",
                "enum": [
                  "api_keys"
                ],
                "example": "api_keys",
                "type": "string",
                "x-enum-varnames": [
                  "API_KEYS"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "APIKeyRelationships": {
        "description": "Resources related to the API key.",
        "properties": {
          "created_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "modified_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "APIKeyResponse": {
        "description": "Response for retrieving an API key.",
        "properties": {
          "data": {
            "description": "Datadog API key.",
            "properties": {
              "attributes": {
                "description": "Attributes of a full API key.",
                "properties": {
                  "created_at": {
                    "description": "Creation date of the API key.",
                    "example": "2020-11-23T10:00:00.000Z",
                    "readOnly": true,
                    "type": "string"
                  },
                  "key": {
                    "description": "The API key.",
                    "readOnly": true,
                    "type": "string",
                    "x-secret": true
                  },
                  "last4": {
                    "description": "The last four characters of the API key.",
                    "example": "abcd",
                    "maxLength": 4,
                    "minLength": 4,
                    "readOnly": true,
                    "type": "string",
                    "x-secret": true
                  },
                  "modified_at": {
                    "description": "Date the API key was last modified.",
                    "example": "2020-11-23T10:00:00.000Z",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the API key.",
                    "example": "API Key for submitting metrics",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the API key.",
                "type": "string"
              },
              "relationships": {
                "description": "Resources related to the API key.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "api_keys",
                "description": "API Keys resource type.",
                "enum": [
                  "api_keys"
                ],
                "example": "api_keys",
                "type": "string",
                "x-enum-varnames": [
                  "API_KEYS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the API key.",
            "items": {
              "description": "An object related to an API key.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "APIKeyResponseIncludedItem": {
        "description": "An object related to an API key.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "APIKeyUpdateAttributes": {
        "description": "Attributes used to update an API Key.",
        "properties": {
          "name": {
            "description": "Name of the API key.",
            "example": "API Key for submitting metrics",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "APIKeyUpdateData": {
        "description": "Object used to update an API key.",
        "properties": {
          "attributes": {
            "description": "Attributes used to update an API Key.",
            "properties": {
              "name": {
                "description": "Name of the API key.",
                "example": "API Key for submitting metrics",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "ID of the API key.",
            "example": "00112233-4455-6677-8899-aabbccddeeff",
            "type": "string"
          },
          "type": {
            "default": "api_keys",
            "description": "API Keys resource type.",
            "enum": [
              "api_keys"
            ],
            "example": "api_keys",
            "type": "string",
            "x-enum-varnames": [
              "API_KEYS"
            ]
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "APIKeyUpdateRequest": {
        "description": "Request used to update an API key.",
        "properties": {
          "data": {
            "description": "Object used to update an API key.",
            "properties": {
              "attributes": {
                "description": "Attributes used to update an API Key.",
                "properties": {
                  "name": {
                    "description": "Name of the API key.",
                    "example": "API Key for submitting metrics",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "ID of the API key.",
                "example": "00112233-4455-6677-8899-aabbccddeeff",
                "type": "string"
              },
              "type": {
                "default": "api_keys",
                "description": "API Keys resource type.",
                "enum": [
                  "api_keys"
                ],
                "example": "api_keys",
                "type": "string",
                "x-enum-varnames": [
                  "API_KEYS"
                ]
              }
            },
            "required": [
              "attributes",
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "APIKeysResponse": {
        "description": "Response for a list of API keys.",
        "properties": {
          "data": {
            "description": "Array of API keys.",
            "items": {
              "description": "Partial Datadog API key.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a partial API key.",
                  "properties": {
                    "created_at": {
                      "description": "Creation date of the API key.",
                      "example": "2020-11-23T10:00:00.000Z",
                      "readOnly": true,
                      "type": "string"
                    },
                    "last4": {
                      "description": "The last four characters of the API key.",
                      "example": "abcd",
                      "maxLength": 4,
                      "minLength": 4,
                      "readOnly": true,
                      "type": "string",
                      "x-secret": true
                    },
                    "modified_at": {
                      "description": "Date the API key was last modified.",
                      "example": "2020-11-23T10:00:00.000Z",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the API key.",
                      "example": "API Key for submitting metrics",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the API key.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Resources related to the API key.",
                  "properties": {
                    "created_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "modified_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "api_keys",
                  "description": "API Keys resource type.",
                  "enum": [
                    "api_keys"
                  ],
                  "example": "api_keys",
                  "type": "string",
                  "x-enum-varnames": [
                    "API_KEYS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Array of objects related to the API key.",
            "items": {
              "description": "An object related to an API key.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "APIKeysSort": {
        "default": "name",
        "description": "Sorting options",
        "enum": [
          "created_at",
          "-created_at",
          "last4",
          "-last4",
          "modified_at",
          "-modified_at",
          "name",
          "-name"
        ],
        "type": "string",
        "x-enum-varnames": [
          "CREATED_AT_ASCENDING",
          "CREATED_AT_DESCENDING",
          "LAST4_ASCENDING",
          "LAST4_DESCENDING",
          "MODIFIED_AT_ASCENDING",
          "MODIFIED_AT_DESCENDING",
          "NAME_ASCENDING",
          "NAME_DESCENDING"
        ]
      },
      "APIKeysType": {
        "default": "api_keys",
        "description": "API Keys resource type.",
        "enum": [
          "api_keys"
        ],
        "example": "api_keys",
        "type": "string",
        "x-enum-varnames": [
          "API_KEYS"
        ]
      },
      "ApplicationKeyCreateAttributes": {
        "description": "Attributes used to create an application Key.",
        "properties": {
          "name": {
            "description": "Name of the application key.",
            "example": "Application Key for managing dashboards",
            "type": "string"
          },
          "scopes": {
            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
            "example": [
              "dashboards_read",
              "dashboards_write",
              "dashboards_public_share"
            ],
            "items": {
              "description": "Name of scope.",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ApplicationKeyCreateData": {
        "description": "Object used to create an application key.",
        "properties": {
          "attributes": {
            "description": "Attributes used to create an application Key.",
            "properties": {
              "name": {
                "description": "Name of the application key.",
                "example": "Application Key for managing dashboards",
                "type": "string"
              },
              "scopes": {
                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                "example": [
                  "dashboards_read",
                  "dashboards_write",
                  "dashboards_public_share"
                ],
                "items": {
                  "description": "Name of scope.",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": {
            "default": "application_keys",
            "description": "Application Keys resource type.",
            "enum": [
              "application_keys"
            ],
            "example": "application_keys",
            "type": "string",
            "x-enum-varnames": [
              "APPLICATION_KEYS"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "ApplicationKeyCreateRequest": {
        "description": "Request used to create an application key.",
        "properties": {
          "data": {
            "description": "Object used to create an application key.",
            "properties": {
              "attributes": {
                "description": "Attributes used to create an application Key.",
                "properties": {
                  "name": {
                    "description": "Name of the application key.",
                    "example": "Application Key for managing dashboards",
                    "type": "string"
                  },
                  "scopes": {
                    "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                    "example": [
                      "dashboards_read",
                      "dashboards_write",
                      "dashboards_public_share"
                    ],
                    "items": {
                      "description": "Name of scope.",
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": {
                "default": "application_keys",
                "description": "Application Keys resource type.",
                "enum": [
                  "application_keys"
                ],
                "example": "application_keys",
                "type": "string",
                "x-enum-varnames": [
                  "APPLICATION_KEYS"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ApplicationKeyRelationships": {
        "description": "Resources related to the application key.",
        "properties": {
          "owned_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "ApplicationKeyResponse": {
        "description": "Response for retrieving an application key.",
        "properties": {
          "data": {
            "description": "Datadog application key.",
            "properties": {
              "attributes": {
                "description": "Attributes of a full application key.",
                "properties": {
                  "created_at": {
                    "description": "Creation date of the application key.",
                    "example": "2020-11-23T10:00:00.000Z",
                    "readOnly": true,
                    "type": "string"
                  },
                  "key": {
                    "description": "The application key.",
                    "readOnly": true,
                    "type": "string",
                    "x-secret": true
                  },
                  "last4": {
                    "description": "The last four characters of the application key.",
                    "example": "abcd",
                    "maxLength": 4,
                    "minLength": 4,
                    "readOnly": true,
                    "type": "string",
                    "x-secret": true
                  },
                  "name": {
                    "description": "Name of the application key.",
                    "example": "Application Key for managing dashboards",
                    "type": "string"
                  },
                  "scopes": {
                    "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                    "example": [
                      "dashboards_read",
                      "dashboards_write",
                      "dashboards_public_share"
                    ],
                    "items": {
                      "description": "Name of scope.",
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the application key.",
                "type": "string"
              },
              "relationships": {
                "description": "Resources related to the application key.",
                "properties": {
                  "owned_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "application_keys",
                "description": "Application Keys resource type.",
                "enum": [
                  "application_keys"
                ],
                "example": "application_keys",
                "type": "string",
                "x-enum-varnames": [
                  "APPLICATION_KEYS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the application key.",
            "items": {
              "description": "An object related to an application key.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApplicationKeyResponseIncludedItem": {
        "description": "An object related to an application key.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          },
          {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "ApplicationKeyUpdateAttributes": {
        "description": "Attributes used to update an application Key.",
        "properties": {
          "name": {
            "description": "Name of the application key.",
            "example": "Application Key for managing dashboards",
            "type": "string"
          },
          "scopes": {
            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
            "example": [
              "dashboards_read",
              "dashboards_write",
              "dashboards_public_share"
            ],
            "items": {
              "description": "Name of scope.",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApplicationKeyUpdateData": {
        "description": "Object used to update an application key.",
        "properties": {
          "attributes": {
            "description": "Attributes used to update an application Key.",
            "properties": {
              "name": {
                "description": "Name of the application key.",
                "example": "Application Key for managing dashboards",
                "type": "string"
              },
              "scopes": {
                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                "example": [
                  "dashboards_read",
                  "dashboards_write",
                  "dashboards_public_share"
                ],
                "items": {
                  "description": "Name of scope.",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the application key.",
            "example": "00112233-4455-6677-8899-aabbccddeeff",
            "type": "string"
          },
          "type": {
            "default": "application_keys",
            "description": "Application Keys resource type.",
            "enum": [
              "application_keys"
            ],
            "example": "application_keys",
            "type": "string",
            "x-enum-varnames": [
              "APPLICATION_KEYS"
            ]
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "ApplicationKeyUpdateRequest": {
        "description": "Request used to update an application key.",
        "properties": {
          "data": {
            "description": "Object used to update an application key.",
            "properties": {
              "attributes": {
                "description": "Attributes used to update an application Key.",
                "properties": {
                  "name": {
                    "description": "Name of the application key.",
                    "example": "Application Key for managing dashboards",
                    "type": "string"
                  },
                  "scopes": {
                    "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                    "example": [
                      "dashboards_read",
                      "dashboards_write",
                      "dashboards_public_share"
                    ],
                    "items": {
                      "description": "Name of scope.",
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the application key.",
                "example": "00112233-4455-6677-8899-aabbccddeeff",
                "type": "string"
              },
              "type": {
                "default": "application_keys",
                "description": "Application Keys resource type.",
                "enum": [
                  "application_keys"
                ],
                "example": "application_keys",
                "type": "string",
                "x-enum-varnames": [
                  "APPLICATION_KEYS"
                ]
              }
            },
            "required": [
              "attributes",
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ApplicationKeysSort": {
        "default": "name",
        "description": "Sorting options",
        "enum": [
          "created_at",
          "-created_at",
          "last4",
          "-last4",
          "name",
          "-name"
        ],
        "type": "string",
        "x-enum-varnames": [
          "CREATED_AT_ASCENDING",
          "CREATED_AT_DESCENDING",
          "LAST4_ASCENDING",
          "LAST4_DESCENDING",
          "NAME_ASCENDING",
          "NAME_DESCENDING"
        ]
      },
      "ApplicationKeysType": {
        "default": "application_keys",
        "description": "Application Keys resource type.",
        "enum": [
          "application_keys"
        ],
        "example": "application_keys",
        "type": "string",
        "x-enum-varnames": [
          "APPLICATION_KEYS"
        ]
      },
      "AuditLogsEvent": {
        "description": "Object description of an Audit Logs event after it is processed and stored by Datadog.",
        "properties": {
          "attributes": {
            "description": "JSON object containing all event attributes and their associated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "JSON object of attributes from Audit Logs events.",
                "example": {
                  "customAttribute": 123,
                  "duration": 2345
                },
                "type": "object"
              },
              "service": {
                "description": "Name of the application or service generating Audit Logs events.\nThis name is used to correlate Audit Logs to APM, so make sure you specify the same\nvalue when you use both products.",
                "example": "web-app",
                "type": "string"
              },
              "tags": {
                "description": "Array of tags associated with your event.",
                "example": [
                  "team:A"
                ],
                "items": {
                  "description": "Tag associated with your event.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "Timestamp of your event.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the event.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "audit",
            "description": "Type of the event.",
            "enum": [
              "audit"
            ],
            "example": "audit",
            "type": "string",
            "x-enum-varnames": [
              "Audit"
            ]
          }
        },
        "type": "object"
      },
      "AuditLogsEventAttributes": {
        "description": "JSON object containing all event attributes and their associated values.",
        "properties": {
          "attributes": {
            "additionalProperties": {},
            "description": "JSON object of attributes from Audit Logs events.",
            "example": {
              "customAttribute": 123,
              "duration": 2345
            },
            "type": "object"
          },
          "service": {
            "description": "Name of the application or service generating Audit Logs events.\nThis name is used to correlate Audit Logs to APM, so make sure you specify the same\nvalue when you use both products.",
            "example": "web-app",
            "type": "string"
          },
          "tags": {
            "description": "Array of tags associated with your event.",
            "example": [
              "team:A"
            ],
            "items": {
              "description": "Tag associated with your event.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "Timestamp of your event.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuditLogsEventType": {
        "default": "audit",
        "description": "Type of the event.",
        "enum": [
          "audit"
        ],
        "example": "audit",
        "type": "string",
        "x-enum-varnames": [
          "Audit"
        ]
      },
      "AuditLogsEventsResponse": {
        "description": "Response object with all events matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "Array of events matching the request.",
            "items": {
              "description": "Object description of an Audit Logs event after it is processed and stored by Datadog.",
              "properties": {
                "attributes": {
                  "description": "JSON object containing all event attributes and their associated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "JSON object of attributes from Audit Logs events.",
                      "example": {
                        "customAttribute": 123,
                        "duration": 2345
                      },
                      "type": "object"
                    },
                    "service": {
                      "description": "Name of the application or service generating Audit Logs events.\nThis name is used to correlate Audit Logs to APM, so make sure you specify the same\nvalue when you use both products.",
                      "example": "web-app",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Array of tags associated with your event.",
                      "example": [
                        "team:A"
                      ],
                      "items": {
                        "description": "Tag associated with your event.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "Timestamp of your event.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the event.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "audit",
                  "description": "Type of the event.",
                  "enum": [
                    "audit"
                  ],
                  "example": "audit",
                  "type": "string",
                  "x-enum-varnames": [
                    "Audit"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request.",
            "properties": {
              "elapsed": {
                "description": "Time elapsed in milliseconds.",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request.",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response.",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                "items": {
                  "description": "Warning message indicating something that went wrong with the query.",
                  "properties": {
                    "code": {
                      "description": "Unique code for this type of warning.",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "Detailed explanation of this specific warning.",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "Short human-readable summary of the warning.",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AuditLogsQueryFilter": {
        "description": "Search and filter query settings.",
        "properties": {
          "from": {
            "default": "now-15m",
            "description": "Minimum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
            "example": "now-15m",
            "type": "string"
          },
          "query": {
            "default": "*",
            "description": "Search query following the Audit Logs search syntax.",
            "example": "@type:session AND @session.type:user",
            "type": "string"
          },
          "to": {
            "default": "now",
            "description": "Maximum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
            "example": "now",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuditLogsQueryOptions": {
        "description": "Global query options that are used during the query.\nNote: Specify either timezone or time offset, not both. Otherwise, the query fails.",
        "properties": {
          "time_offset": {
            "description": "Time offset (in seconds) to apply to the query.",
            "format": "int64",
            "type": "integer"
          },
          "timezone": {
            "default": "UTC",
            "description": "Timezone code. Can be specified as an offset, for example: \"UTC+03:00\".",
            "example": "GMT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuditLogsQueryPageOptions": {
        "description": "Paging attributes for listing events.",
        "properties": {
          "cursor": {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          },
          "limit": {
            "default": 10,
            "description": "Maximum number of events in the response.",
            "example": 25,
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AuditLogsResponseLinks": {
        "description": "Links attributes.",
        "properties": {
          "next": {
            "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
            "example": "https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuditLogsResponseMetadata": {
        "description": "The metadata associated with a request.",
        "properties": {
          "elapsed": {
            "description": "Time elapsed in milliseconds.",
            "example": 132,
            "format": "int64",
            "type": "integer"
          },
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "request_id": {
            "description": "The identifier of the request.",
            "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
            "type": "string"
          },
          "status": {
            "description": "The status of the response.",
            "enum": [
              "done",
              "timeout"
            ],
            "example": "done",
            "type": "string",
            "x-enum-varnames": [
              "DONE",
              "TIMEOUT"
            ]
          },
          "warnings": {
            "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
            "items": {
              "description": "Warning message indicating something that went wrong with the query.",
              "properties": {
                "code": {
                  "description": "Unique code for this type of warning.",
                  "example": "unknown_index",
                  "type": "string"
                },
                "detail": {
                  "description": "Detailed explanation of this specific warning.",
                  "example": "indexes: foo, bar",
                  "type": "string"
                },
                "title": {
                  "description": "Short human-readable summary of the warning.",
                  "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AuditLogsResponsePage": {
        "description": "Paging attributes.",
        "properties": {
          "after": {
            "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuditLogsResponseStatus": {
        "description": "The status of the response.",
        "enum": [
          "done",
          "timeout"
        ],
        "example": "done",
        "type": "string",
        "x-enum-varnames": [
          "DONE",
          "TIMEOUT"
        ]
      },
      "AuditLogsSearchEventsRequest": {
        "description": "The request for a Audit Logs events list.",
        "properties": {
          "filter": {
            "description": "Search and filter query settings.",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "Minimum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
                "example": "now-15m",
                "type": "string"
              },
              "query": {
                "default": "*",
                "description": "Search query following the Audit Logs search syntax.",
                "example": "@type:session AND @session.type:user",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "Maximum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: Specify either timezone or time offset, not both. Otherwise, the query fails.",
            "properties": {
              "time_offset": {
                "description": "Time offset (in seconds) to apply to the query.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "Timezone code. Can be specified as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging attributes for listing events.",
            "properties": {
              "cursor": {
                "description": "List following results with a cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "Maximum number of events in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "Sort parameters when querying events.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "AuditLogsSort": {
        "description": "Sort parameters when querying events.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "AuditLogsWarning": {
        "description": "Warning message indicating something that went wrong with the query.",
        "properties": {
          "code": {
            "description": "Unique code for this type of warning.",
            "example": "unknown_index",
            "type": "string"
          },
          "detail": {
            "description": "Detailed explanation of this specific warning.",
            "example": "indexes: foo, bar",
            "type": "string"
          },
          "title": {
            "description": "Short human-readable summary of the warning.",
            "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthNMapping": {
        "description": "The AuthN Mapping object returned by API.",
        "properties": {
          "attributes": {
            "description": "Attributes of AuthN Mapping.",
            "properties": {
              "attribute_key": {
                "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "member-of",
                "type": "string"
              },
              "attribute_value": {
                "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "Development",
                "type": "string"
              },
              "created_at": {
                "description": "Creation time of the AuthN Mapping.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last AuthN Mapping modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "saml_assertion_attribute_id": {
                "description": "The ID of the SAML assertion attribute.",
                "example": "0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the AuthN Mapping.",
            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
            "type": "string"
          },
          "relationships": {
            "description": "All relationships associated with AuthN Mapping.",
            "properties": {
              "role": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "saml_assertion_attribute": {
                "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                "properties": {
                  "data": {
                    "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                    "properties": {
                      "id": {
                        "description": "The ID of the SAML assertion attribute.",
                        "example": "0",
                        "type": "string"
                      },
                      "type": {
                        "default": "saml_assertion_attributes",
                        "description": "SAML assertion attributes resource type.",
                        "enum": [
                          "saml_assertion_attributes"
                        ],
                        "example": "saml_assertion_attributes",
                        "type": "string",
                        "x-enum-varnames": [
                          "SAML_ASSERTION_ATTRIBUTES"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "authn_mappings",
            "description": "AuthN Mappings resource type.",
            "enum": [
              "authn_mappings"
            ],
            "example": "authn_mappings",
            "type": "string",
            "x-enum-varnames": [
              "AUTHN_MAPPINGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "AuthNMappingAttributes": {
        "description": "Attributes of AuthN Mapping.",
        "properties": {
          "attribute_key": {
            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "member-of",
            "type": "string"
          },
          "attribute_value": {
            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "Development",
            "type": "string"
          },
          "created_at": {
            "description": "Creation time of the AuthN Mapping.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last AuthN Mapping modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "saml_assertion_attribute_id": {
            "description": "The ID of the SAML assertion attribute.",
            "example": "0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthNMappingCreateAttributes": {
        "description": "Key/Value pair of attributes used for create request.",
        "properties": {
          "attribute_key": {
            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "member-of",
            "type": "string"
          },
          "attribute_value": {
            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "Development",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthNMappingCreateData": {
        "description": "Data for creating an AuthN Mapping.",
        "properties": {
          "attributes": {
            "description": "Key/Value pair of attributes used for create request.",
            "properties": {
              "attribute_key": {
                "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "member-of",
                "type": "string"
              },
              "attribute_value": {
                "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "Development",
                "type": "string"
              }
            },
            "type": "object"
          },
          "relationships": {
            "description": "Relationship of AuthN Mapping create object to Role.",
            "properties": {
              "role": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "authn_mappings",
            "description": "AuthN Mappings resource type.",
            "enum": [
              "authn_mappings"
            ],
            "example": "authn_mappings",
            "type": "string",
            "x-enum-varnames": [
              "AUTHN_MAPPINGS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AuthNMappingCreateRelationships": {
        "description": "Relationship of AuthN Mapping create object to Role.",
        "properties": {
          "role": {
            "description": "Relationship to role.",
            "properties": {
              "data": {
                "description": "Relationship to role object.",
                "properties": {
                  "id": {
                    "description": "The unique identifier of the role.",
                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                    "type": "string"
                  },
                  "type": {
                    "default": "roles",
                    "description": "Roles type.",
                    "enum": [
                      "roles"
                    ],
                    "example": "roles",
                    "type": "string",
                    "x-enum-varnames": [
                      "ROLES"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AuthNMappingCreateRequest": {
        "description": "Request for creating an AuthN Mapping.",
        "properties": {
          "data": {
            "description": "Data for creating an AuthN Mapping.",
            "properties": {
              "attributes": {
                "description": "Key/Value pair of attributes used for create request.",
                "properties": {
                  "attribute_key": {
                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "member-of",
                    "type": "string"
                  },
                  "attribute_value": {
                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "Development",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "relationships": {
                "description": "Relationship of AuthN Mapping create object to Role.",
                "properties": {
                  "role": {
                    "description": "Relationship to role.",
                    "properties": {
                      "data": {
                        "description": "Relationship to role object.",
                        "properties": {
                          "id": {
                            "description": "The unique identifier of the role.",
                            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                            "type": "string"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "authn_mappings",
                "description": "AuthN Mappings resource type.",
                "enum": [
                  "authn_mappings"
                ],
                "example": "authn_mappings",
                "type": "string",
                "x-enum-varnames": [
                  "AUTHN_MAPPINGS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "AuthNMappingIncluded": {
        "description": "Included data in the AuthN Mapping response.",
        "oneOf": [
          {
            "description": "SAML assertion attribute.",
            "properties": {
              "attributes": {
                "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                "properties": {
                  "attribute_key": {
                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "member-of",
                    "type": "string"
                  },
                  "attribute_value": {
                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "Development",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The ID of the SAML assertion attribute.",
                "example": "0",
                "type": "string"
              },
              "type": {
                "default": "saml_assertion_attributes",
                "description": "SAML assertion attributes resource type.",
                "enum": [
                  "saml_assertion_attributes"
                ],
                "example": "saml_assertion_attributes",
                "type": "string",
                "x-enum-varnames": [
                  "SAML_ASSERTION_ATTRIBUTES"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "properties": {},
        "type": "object"
      },
      "AuthNMappingRelationships": {
        "description": "All relationships associated with AuthN Mapping.",
        "properties": {
          "role": {
            "description": "Relationship to role.",
            "properties": {
              "data": {
                "description": "Relationship to role object.",
                "properties": {
                  "id": {
                    "description": "The unique identifier of the role.",
                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                    "type": "string"
                  },
                  "type": {
                    "default": "roles",
                    "description": "Roles type.",
                    "enum": [
                      "roles"
                    ],
                    "example": "roles",
                    "type": "string",
                    "x-enum-varnames": [
                      "ROLES"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "saml_assertion_attribute": {
            "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
            "properties": {
              "data": {
                "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                "properties": {
                  "id": {
                    "description": "The ID of the SAML assertion attribute.",
                    "example": "0",
                    "type": "string"
                  },
                  "type": {
                    "default": "saml_assertion_attributes",
                    "description": "SAML assertion attributes resource type.",
                    "enum": [
                      "saml_assertion_attributes"
                    ],
                    "example": "saml_assertion_attributes",
                    "type": "string",
                    "x-enum-varnames": [
                      "SAML_ASSERTION_ATTRIBUTES"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "AuthNMappingResponse": {
        "description": "AuthN Mapping response from the API.",
        "properties": {
          "data": {
            "description": "The AuthN Mapping object returned by API.",
            "properties": {
              "attributes": {
                "description": "Attributes of AuthN Mapping.",
                "properties": {
                  "attribute_key": {
                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "member-of",
                    "type": "string"
                  },
                  "attribute_value": {
                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "Development",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "Creation time of the AuthN Mapping.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last AuthN Mapping modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "saml_assertion_attribute_id": {
                    "description": "The ID of the SAML assertion attribute.",
                    "example": "0",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the AuthN Mapping.",
                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                "type": "string"
              },
              "relationships": {
                "description": "All relationships associated with AuthN Mapping.",
                "properties": {
                  "role": {
                    "description": "Relationship to role.",
                    "properties": {
                      "data": {
                        "description": "Relationship to role object.",
                        "properties": {
                          "id": {
                            "description": "The unique identifier of the role.",
                            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                            "type": "string"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "saml_assertion_attribute": {
                    "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                    "properties": {
                      "data": {
                        "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                        "properties": {
                          "id": {
                            "description": "The ID of the SAML assertion attribute.",
                            "example": "0",
                            "type": "string"
                          },
                          "type": {
                            "default": "saml_assertion_attributes",
                            "description": "SAML assertion attributes resource type.",
                            "enum": [
                              "saml_assertion_attributes"
                            ],
                            "example": "saml_assertion_attributes",
                            "type": "string",
                            "x-enum-varnames": [
                              "SAML_ASSERTION_ATTRIBUTES"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "authn_mappings",
                "description": "AuthN Mappings resource type.",
                "enum": [
                  "authn_mappings"
                ],
                "example": "authn_mappings",
                "type": "string",
                "x-enum-varnames": [
                  "AUTHN_MAPPINGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          },
          "included": {
            "description": "Included data in the AuthN Mapping response.",
            "items": {
              "description": "Included data in the AuthN Mapping response.",
              "oneOf": [
                {
                  "description": "SAML assertion attribute.",
                  "properties": {
                    "attributes": {
                      "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                      "properties": {
                        "attribute_key": {
                          "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                          "example": "member-of",
                          "type": "string"
                        },
                        "attribute_value": {
                          "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                          "example": "Development",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The ID of the SAML assertion attribute.",
                      "example": "0",
                      "type": "string"
                    },
                    "type": {
                      "default": "saml_assertion_attributes",
                      "description": "SAML assertion attributes resource type.",
                      "enum": [
                        "saml_assertion_attributes"
                      ],
                      "example": "saml_assertion_attributes",
                      "type": "string",
                      "x-enum-varnames": [
                        "SAML_ASSERTION_ATTRIBUTES"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "properties": {},
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AuthNMappingUpdateAttributes": {
        "description": "Key/Value pair of attributes used for update request.",
        "properties": {
          "attribute_key": {
            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "member-of",
            "type": "string"
          },
          "attribute_value": {
            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "Development",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthNMappingUpdateData": {
        "description": "Data for updating an AuthN Mapping.",
        "properties": {
          "attributes": {
            "description": "Key/Value pair of attributes used for update request.",
            "properties": {
              "attribute_key": {
                "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "member-of",
                "type": "string"
              },
              "attribute_value": {
                "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "Development",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the AuthN Mapping.",
            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
            "type": "string"
          },
          "relationships": {
            "description": "Relationship of AuthN Mapping update object to Role.",
            "properties": {
              "role": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "authn_mappings",
            "description": "AuthN Mappings resource type.",
            "enum": [
              "authn_mappings"
            ],
            "example": "authn_mappings",
            "type": "string",
            "x-enum-varnames": [
              "AUTHN_MAPPINGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "AuthNMappingUpdateRelationships": {
        "description": "Relationship of AuthN Mapping update object to Role.",
        "properties": {
          "role": {
            "description": "Relationship to role.",
            "properties": {
              "data": {
                "description": "Relationship to role object.",
                "properties": {
                  "id": {
                    "description": "The unique identifier of the role.",
                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                    "type": "string"
                  },
                  "type": {
                    "default": "roles",
                    "description": "Roles type.",
                    "enum": [
                      "roles"
                    ],
                    "example": "roles",
                    "type": "string",
                    "x-enum-varnames": [
                      "ROLES"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AuthNMappingUpdateRequest": {
        "description": "Request to update an AuthN Mapping.",
        "properties": {
          "data": {
            "description": "Data for updating an AuthN Mapping.",
            "properties": {
              "attributes": {
                "description": "Key/Value pair of attributes used for update request.",
                "properties": {
                  "attribute_key": {
                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "member-of",
                    "type": "string"
                  },
                  "attribute_value": {
                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                    "example": "Development",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the AuthN Mapping.",
                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                "type": "string"
              },
              "relationships": {
                "description": "Relationship of AuthN Mapping update object to Role.",
                "properties": {
                  "role": {
                    "description": "Relationship to role.",
                    "properties": {
                      "data": {
                        "description": "Relationship to role object.",
                        "properties": {
                          "id": {
                            "description": "The unique identifier of the role.",
                            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                            "type": "string"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "authn_mappings",
                "description": "AuthN Mappings resource type.",
                "enum": [
                  "authn_mappings"
                ],
                "example": "authn_mappings",
                "type": "string",
                "x-enum-varnames": [
                  "AUTHN_MAPPINGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "AuthNMappingsResponse": {
        "description": "Array of AuthN Mappings response.",
        "properties": {
          "data": {
            "description": "Array of returned AuthN Mappings.",
            "items": {
              "description": "The AuthN Mapping object returned by API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of AuthN Mapping.",
                  "properties": {
                    "attribute_key": {
                      "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                      "example": "member-of",
                      "type": "string"
                    },
                    "attribute_value": {
                      "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                      "example": "Development",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "Creation time of the AuthN Mapping.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time of last AuthN Mapping modification.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "saml_assertion_attribute_id": {
                      "description": "The ID of the SAML assertion attribute.",
                      "example": "0",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the AuthN Mapping.",
                  "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                  "type": "string"
                },
                "relationships": {
                  "description": "All relationships associated with AuthN Mapping.",
                  "properties": {
                    "role": {
                      "description": "Relationship to role.",
                      "properties": {
                        "data": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "saml_assertion_attribute": {
                      "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                      "properties": {
                        "data": {
                          "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                          "properties": {
                            "id": {
                              "description": "The ID of the SAML assertion attribute.",
                              "example": "0",
                              "type": "string"
                            },
                            "type": {
                              "default": "saml_assertion_attributes",
                              "description": "SAML assertion attributes resource type.",
                              "enum": [
                                "saml_assertion_attributes"
                              ],
                              "example": "saml_assertion_attributes",
                              "type": "string",
                              "x-enum-varnames": [
                                "SAML_ASSERTION_ATTRIBUTES"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "authn_mappings",
                  "description": "AuthN Mappings resource type.",
                  "enum": [
                    "authn_mappings"
                  ],
                  "example": "authn_mappings",
                  "type": "string",
                  "x-enum-varnames": [
                    "AUTHN_MAPPINGS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included data in the AuthN Mapping response.",
            "items": {
              "description": "Included data in the AuthN Mapping response.",
              "oneOf": [
                {
                  "description": "SAML assertion attribute.",
                  "properties": {
                    "attributes": {
                      "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                      "properties": {
                        "attribute_key": {
                          "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                          "example": "member-of",
                          "type": "string"
                        },
                        "attribute_value": {
                          "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                          "example": "Development",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The ID of the SAML assertion attribute.",
                      "example": "0",
                      "type": "string"
                    },
                    "type": {
                      "default": "saml_assertion_attributes",
                      "description": "SAML assertion attributes resource type.",
                      "enum": [
                        "saml_assertion_attributes"
                      ],
                      "example": "saml_assertion_attributes",
                      "type": "string",
                      "x-enum-varnames": [
                        "SAML_ASSERTION_ATTRIBUTES"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "properties": {},
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AuthNMappingsSort": {
        "description": "Sorting options for AuthN Mappings.",
        "enum": [
          "created_at",
          "-created_at",
          "role_id",
          "-role_id",
          "saml_assertion_attribute_id",
          "-saml_assertion_attribute_id",
          "role.name",
          "-role.name",
          "saml_assertion_attribute.attribute_key",
          "-saml_assertion_attribute.attribute_key",
          "saml_assertion_attribute.attribute_value",
          "-saml_assertion_attribute.attribute_value"
        ],
        "type": "string",
        "x-enum-varnames": [
          "CREATED_AT_ASCENDING",
          "CREATED_AT_DESCENDING",
          "ROLE_ID_ASCENDING",
          "ROLE_ID_DESCENDING",
          "SAML_ASSERTION_ATTRIBUTE_ID_ASCENDING",
          "SAML_ASSERTION_ATTRIBUTE_ID_DESCENDING",
          "ROLE_NAME_ASCENDING",
          "ROLE_NAME_DESCENDING",
          "SAML_ASSERTION_ATTRIBUTE_KEY_ASCENDING",
          "SAML_ASSERTION_ATTRIBUTE_KEY_DESCENDING",
          "SAML_ASSERTION_ATTRIBUTE_VALUE_ASCENDING",
          "SAML_ASSERTION_ATTRIBUTE_VALUE_DESCENDING"
        ]
      },
      "AuthNMappingsType": {
        "default": "authn_mappings",
        "description": "AuthN Mappings resource type.",
        "enum": [
          "authn_mappings"
        ],
        "example": "authn_mappings",
        "type": "string",
        "x-enum-varnames": [
          "AUTHN_MAPPINGS"
        ]
      },
      "ChargebackBreakdown": {
        "description": "Charges breakdown.",
        "properties": {
          "charge_type": {
            "description": "The type of charge for a particular product.",
            "example": "on_demand",
            "type": "string"
          },
          "cost": {
            "description": "The cost for a particular product and charge type during a given month.",
            "format": "double",
            "type": "number"
          },
          "product_name": {
            "description": "The product for which cost is being reported.",
            "example": "infra_host",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleAttributes": {
        "description": "A Cloud Workload Security Agent rule returned by the API.",
        "properties": {
          "category": {
            "description": "The category of the Agent rule.",
            "example": "Process Activity",
            "type": "string"
          },
          "creationDate": {
            "description": "When the Agent rule was created, timestamp in milliseconds.",
            "example": 1624366480320,
            "format": "int64",
            "type": "integer"
          },
          "creator": {
            "description": "The attributes of the user who created the Agent rule.",
            "properties": {
              "handle": {
                "description": "The handle of the user.",
                "example": "datadog.user@example.com",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "example": "Datadog User",
                "type": "string"
              }
            },
            "type": "object"
          },
          "defaultRule": {
            "description": "Whether the rule is included by default.",
            "example": false,
            "type": "boolean"
          },
          "description": {
            "description": "The description of the Agent rule.",
            "example": "My Agent rule",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the Agent rule is enabled.",
            "example": true,
            "type": "boolean"
          },
          "expression": {
            "description": "The SECL expression of the Agent rule.",
            "example": "exec.file.name == \\\"sh\\\"",
            "type": "string"
          },
          "name": {
            "description": "The name of the Agent rule.",
            "example": "my_agent_rule",
            "type": "string"
          },
          "updatedAt": {
            "description": "When the Agent rule was last updated, timestamp in milliseconds.",
            "example": 1624366480320,
            "format": "int64",
            "type": "integer"
          },
          "updater": {
            "description": "The attributes of the user who last updated the Agent rule.",
            "properties": {
              "handle": {
                "description": "The handle of the user.",
                "example": "datadog.user@example.com",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "example": "Datadog User",
                "type": "string"
              }
            },
            "type": "object"
          },
          "version": {
            "description": "The version of the Agent rule.",
            "example": 23,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleCreateAttributes": {
        "description": "Create a new Cloud Workload Security Agent rule.",
        "properties": {
          "description": {
            "description": "The description of the Agent rule.",
            "example": "My Agent rule",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the Agent rule is enabled.",
            "example": true,
            "type": "boolean"
          },
          "expression": {
            "description": "The SECL expression of the Agent rule.",
            "example": "exec.file.name == \\\"sh\\\"",
            "type": "string"
          },
          "name": {
            "description": "The name of the Agent rule.",
            "example": "my_agent_rule",
            "type": "string"
          }
        },
        "required": [
          "name",
          "expression"
        ],
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleCreateData": {
        "description": "Object for a single Agent rule.",
        "properties": {
          "attributes": {
            "description": "Create a new Cloud Workload Security Agent rule.",
            "properties": {
              "description": {
                "description": "The description of the Agent rule.",
                "example": "My Agent rule",
                "type": "string"
              },
              "enabled": {
                "description": "Whether the Agent rule is enabled.",
                "example": true,
                "type": "boolean"
              },
              "expression": {
                "description": "The SECL expression of the Agent rule.",
                "example": "exec.file.name == \\\"sh\\\"",
                "type": "string"
              },
              "name": {
                "description": "The name of the Agent rule.",
                "example": "my_agent_rule",
                "type": "string"
              }
            },
            "required": [
              "name",
              "expression"
            ],
            "type": "object"
          },
          "type": {
            "default": "agent_rule",
            "description": "The type of the resource. The value should always be `agent_rule`.",
            "enum": [
              "agent_rule"
            ],
            "example": "agent_rule",
            "type": "string",
            "x-enum-varnames": [
              "AGENT_RULE"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleCreateRequest": {
        "description": "Request object that includes the Agent rule to create.",
        "properties": {
          "data": {
            "description": "Object for a single Agent rule.",
            "properties": {
              "attributes": {
                "description": "Create a new Cloud Workload Security Agent rule.",
                "properties": {
                  "description": {
                    "description": "The description of the Agent rule.",
                    "example": "My Agent rule",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Whether the Agent rule is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "expression": {
                    "description": "The SECL expression of the Agent rule.",
                    "example": "exec.file.name == \\\"sh\\\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Agent rule.",
                    "example": "my_agent_rule",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "expression"
                ],
                "type": "object"
              },
              "type": {
                "default": "agent_rule",
                "description": "The type of the resource. The value should always be `agent_rule`.",
                "enum": [
                  "agent_rule"
                ],
                "example": "agent_rule",
                "type": "string",
                "x-enum-varnames": [
                  "AGENT_RULE"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleCreatorAttributes": {
        "description": "The attributes of the user who created the Agent rule.",
        "properties": {
          "handle": {
            "description": "The handle of the user.",
            "example": "datadog.user@example.com",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "example": "Datadog User",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleData": {
        "description": "Object for a single Agent rule.",
        "properties": {
          "attributes": {
            "description": "A Cloud Workload Security Agent rule returned by the API.",
            "properties": {
              "category": {
                "description": "The category of the Agent rule.",
                "example": "Process Activity",
                "type": "string"
              },
              "creationDate": {
                "description": "When the Agent rule was created, timestamp in milliseconds.",
                "example": 1624366480320,
                "format": "int64",
                "type": "integer"
              },
              "creator": {
                "description": "The attributes of the user who created the Agent rule.",
                "properties": {
                  "handle": {
                    "description": "The handle of the user.",
                    "example": "datadog.user@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "example": "Datadog User",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "defaultRule": {
                "description": "Whether the rule is included by default.",
                "example": false,
                "type": "boolean"
              },
              "description": {
                "description": "The description of the Agent rule.",
                "example": "My Agent rule",
                "type": "string"
              },
              "enabled": {
                "description": "Whether the Agent rule is enabled.",
                "example": true,
                "type": "boolean"
              },
              "expression": {
                "description": "The SECL expression of the Agent rule.",
                "example": "exec.file.name == \\\"sh\\\"",
                "type": "string"
              },
              "name": {
                "description": "The name of the Agent rule.",
                "example": "my_agent_rule",
                "type": "string"
              },
              "updatedAt": {
                "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                "example": 1624366480320,
                "format": "int64",
                "type": "integer"
              },
              "updater": {
                "description": "The attributes of the user who last updated the Agent rule.",
                "properties": {
                  "handle": {
                    "description": "The handle of the user.",
                    "example": "datadog.user@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "example": "Datadog User",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "version": {
                "description": "The version of the Agent rule.",
                "example": 23,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The ID of the Agent rule.",
            "example": "3dd-0uc-h1s",
            "type": "string"
          },
          "type": {
            "default": "agent_rule",
            "description": "The type of the resource. The value should always be `agent_rule`.",
            "enum": [
              "agent_rule"
            ],
            "example": "agent_rule",
            "type": "string",
            "x-enum-varnames": [
              "AGENT_RULE"
            ]
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleResponse": {
        "description": "Response object that includes an Agent rule.",
        "properties": {
          "data": {
            "description": "Object for a single Agent rule.",
            "properties": {
              "attributes": {
                "description": "A Cloud Workload Security Agent rule returned by the API.",
                "properties": {
                  "category": {
                    "description": "The category of the Agent rule.",
                    "example": "Process Activity",
                    "type": "string"
                  },
                  "creationDate": {
                    "description": "When the Agent rule was created, timestamp in milliseconds.",
                    "example": 1624366480320,
                    "format": "int64",
                    "type": "integer"
                  },
                  "creator": {
                    "description": "The attributes of the user who created the Agent rule.",
                    "properties": {
                      "handle": {
                        "description": "The handle of the user.",
                        "example": "datadog.user@example.com",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the user.",
                        "example": "Datadog User",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "defaultRule": {
                    "description": "Whether the rule is included by default.",
                    "example": false,
                    "type": "boolean"
                  },
                  "description": {
                    "description": "The description of the Agent rule.",
                    "example": "My Agent rule",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Whether the Agent rule is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "expression": {
                    "description": "The SECL expression of the Agent rule.",
                    "example": "exec.file.name == \\\"sh\\\"",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the Agent rule.",
                    "example": "my_agent_rule",
                    "type": "string"
                  },
                  "updatedAt": {
                    "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                    "example": 1624366480320,
                    "format": "int64",
                    "type": "integer"
                  },
                  "updater": {
                    "description": "The attributes of the user who last updated the Agent rule.",
                    "properties": {
                      "handle": {
                        "description": "The handle of the user.",
                        "example": "datadog.user@example.com",
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the user.",
                        "example": "Datadog User",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "version": {
                    "description": "The version of the Agent rule.",
                    "example": 23,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The ID of the Agent rule.",
                "example": "3dd-0uc-h1s",
                "type": "string"
              },
              "type": {
                "default": "agent_rule",
                "description": "The type of the resource. The value should always be `agent_rule`.",
                "enum": [
                  "agent_rule"
                ],
                "example": "agent_rule",
                "type": "string",
                "x-enum-varnames": [
                  "AGENT_RULE"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleType": {
        "default": "agent_rule",
        "description": "The type of the resource. The value should always be `agent_rule`.",
        "enum": [
          "agent_rule"
        ],
        "example": "agent_rule",
        "type": "string",
        "x-enum-varnames": [
          "AGENT_RULE"
        ]
      },
      "CloudWorkloadSecurityAgentRuleUpdateAttributes": {
        "description": "Update an existing Cloud Workload Security Agent rule.",
        "properties": {
          "description": {
            "description": "The description of the Agent rule.",
            "example": "My Agent rule",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the Agent rule is enabled.",
            "example": true,
            "type": "boolean"
          },
          "expression": {
            "description": "The SECL expression of the Agent rule.",
            "example": "exec.file.name == \\\"sh\\\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleUpdateData": {
        "description": "Object for a single Agent rule.",
        "properties": {
          "attributes": {
            "description": "Update an existing Cloud Workload Security Agent rule.",
            "properties": {
              "description": {
                "description": "The description of the Agent rule.",
                "example": "My Agent rule",
                "type": "string"
              },
              "enabled": {
                "description": "Whether the Agent rule is enabled.",
                "example": true,
                "type": "boolean"
              },
              "expression": {
                "description": "The SECL expression of the Agent rule.",
                "example": "exec.file.name == \\\"sh\\\"",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "agent_rule",
            "description": "The type of the resource. The value should always be `agent_rule`.",
            "enum": [
              "agent_rule"
            ],
            "example": "agent_rule",
            "type": "string",
            "x-enum-varnames": [
              "AGENT_RULE"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleUpdateRequest": {
        "description": "Request object that includes the Agent rule with the attributes to update.",
        "properties": {
          "data": {
            "description": "Object for a single Agent rule.",
            "properties": {
              "attributes": {
                "description": "Update an existing Cloud Workload Security Agent rule.",
                "properties": {
                  "description": {
                    "description": "The description of the Agent rule.",
                    "example": "My Agent rule",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Whether the Agent rule is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "expression": {
                    "description": "The SECL expression of the Agent rule.",
                    "example": "exec.file.name == \\\"sh\\\"",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "agent_rule",
                "description": "The type of the resource. The value should always be `agent_rule`.",
                "enum": [
                  "agent_rule"
                ],
                "example": "agent_rule",
                "type": "string",
                "x-enum-varnames": [
                  "AGENT_RULE"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRuleUpdaterAttributes": {
        "description": "The attributes of the user who last updated the Agent rule.",
        "properties": {
          "handle": {
            "description": "The handle of the user.",
            "example": "datadog.user@example.com",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "example": "Datadog User",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudWorkloadSecurityAgentRulesListResponse": {
        "description": "Response object that includes a list of Agent rule.",
        "properties": {
          "data": {
            "description": "A list of Agent rules objects.",
            "items": {
              "description": "Object for a single Agent rule.",
              "properties": {
                "attributes": {
                  "description": "A Cloud Workload Security Agent rule returned by the API.",
                  "properties": {
                    "category": {
                      "description": "The category of the Agent rule.",
                      "example": "Process Activity",
                      "type": "string"
                    },
                    "creationDate": {
                      "description": "When the Agent rule was created, timestamp in milliseconds.",
                      "example": 1624366480320,
                      "format": "int64",
                      "type": "integer"
                    },
                    "creator": {
                      "description": "The attributes of the user who created the Agent rule.",
                      "properties": {
                        "handle": {
                          "description": "The handle of the user.",
                          "example": "datadog.user@example.com",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the user.",
                          "example": "Datadog User",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "defaultRule": {
                      "description": "Whether the rule is included by default.",
                      "example": false,
                      "type": "boolean"
                    },
                    "description": {
                      "description": "The description of the Agent rule.",
                      "example": "My Agent rule",
                      "type": "string"
                    },
                    "enabled": {
                      "description": "Whether the Agent rule is enabled.",
                      "example": true,
                      "type": "boolean"
                    },
                    "expression": {
                      "description": "The SECL expression of the Agent rule.",
                      "example": "exec.file.name == \\\"sh\\\"",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the Agent rule.",
                      "example": "my_agent_rule",
                      "type": "string"
                    },
                    "updatedAt": {
                      "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                      "example": 1624366480320,
                      "format": "int64",
                      "type": "integer"
                    },
                    "updater": {
                      "description": "The attributes of the user who last updated the Agent rule.",
                      "properties": {
                        "handle": {
                          "description": "The handle of the user.",
                          "example": "datadog.user@example.com",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the user.",
                          "example": "Datadog User",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "version": {
                      "description": "The version of the Agent rule.",
                      "example": 23,
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The ID of the Agent rule.",
                  "example": "3dd-0uc-h1s",
                  "type": "string"
                },
                "type": {
                  "default": "agent_rule",
                  "description": "The type of the resource. The value should always be `agent_rule`.",
                  "enum": [
                    "agent_rule"
                  ],
                  "example": "agent_rule",
                  "type": "string",
                  "x-enum-varnames": [
                    "AGENT_RULE"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ContentEncoding": {
        "description": "HTTP header used to compress the media-type.",
        "enum": [
          "gzip",
          "deflate"
        ],
        "type": "string",
        "x-enum-varnames": [
          "GZIP",
          "DEFLATE"
        ]
      },
      "CostByOrg": {
        "description": "Cost data.",
        "properties": {
          "attributes": {
            "description": "Cost attributes data.",
            "properties": {
              "charges": {
                "description": "List of charges data reported for the requested month.",
                "items": {
                  "description": "Charges breakdown.",
                  "properties": {
                    "charge_type": {
                      "description": "The type of charge for a particular product.",
                      "example": "on_demand",
                      "type": "string"
                    },
                    "cost": {
                      "description": "The cost for a particular product and charge type during a given month.",
                      "format": "double",
                      "type": "number"
                    },
                    "product_name": {
                      "description": "The product for which cost is being reported.",
                      "example": "infra_host",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "date": {
                "description": "The month requested.",
                "format": "date-time",
                "type": "string"
              },
              "org_name": {
                "description": "The organization name.",
                "type": "string"
              },
              "public_id": {
                "description": "The organization public ID.",
                "type": "string"
              },
              "total_cost": {
                "description": "The total cost of products for the month.",
                "format": "double",
                "type": "number"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the response.",
            "type": "string"
          },
          "type": {
            "default": "cost_by_org",
            "description": "Type of cost data.",
            "enum": [
              "cost_by_org"
            ],
            "example": "cost_by_org",
            "type": "string",
            "x-enum-varnames": [
              "COST_BY_ORG"
            ]
          }
        },
        "type": "object"
      },
      "CostByOrgAttributes": {
        "description": "Cost attributes data.",
        "properties": {
          "charges": {
            "description": "List of charges data reported for the requested month.",
            "items": {
              "description": "Charges breakdown.",
              "properties": {
                "charge_type": {
                  "description": "The type of charge for a particular product.",
                  "example": "on_demand",
                  "type": "string"
                },
                "cost": {
                  "description": "The cost for a particular product and charge type during a given month.",
                  "format": "double",
                  "type": "number"
                },
                "product_name": {
                  "description": "The product for which cost is being reported.",
                  "example": "infra_host",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "date": {
            "description": "The month requested.",
            "format": "date-time",
            "type": "string"
          },
          "org_name": {
            "description": "The organization name.",
            "type": "string"
          },
          "public_id": {
            "description": "The organization public ID.",
            "type": "string"
          },
          "total_cost": {
            "description": "The total cost of products for the month.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CostByOrgResponse": {
        "description": "Chargeback Summary response.",
        "properties": {
          "data": {
            "description": "Response containing Chargeback Summary.",
            "items": {
              "description": "Cost data.",
              "properties": {
                "attributes": {
                  "description": "Cost attributes data.",
                  "properties": {
                    "charges": {
                      "description": "List of charges data reported for the requested month.",
                      "items": {
                        "description": "Charges breakdown.",
                        "properties": {
                          "charge_type": {
                            "description": "The type of charge for a particular product.",
                            "example": "on_demand",
                            "type": "string"
                          },
                          "cost": {
                            "description": "The cost for a particular product and charge type during a given month.",
                            "format": "double",
                            "type": "number"
                          },
                          "product_name": {
                            "description": "The product for which cost is being reported.",
                            "example": "infra_host",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "date": {
                      "description": "The month requested.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "org_name": {
                      "description": "The organization name.",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The organization public ID.",
                      "type": "string"
                    },
                    "total_cost": {
                      "description": "The total cost of products for the month.",
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the response.",
                  "type": "string"
                },
                "type": {
                  "default": "cost_by_org",
                  "description": "Type of cost data.",
                  "enum": [
                    "cost_by_org"
                  ],
                  "example": "cost_by_org",
                  "type": "string",
                  "x-enum-varnames": [
                    "COST_BY_ORG"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CostByOrgType": {
        "default": "cost_by_org",
        "description": "Type of cost data.",
        "enum": [
          "cost_by_org"
        ],
        "example": "cost_by_org",
        "type": "string",
        "x-enum-varnames": [
          "COST_BY_ORG"
        ]
      },
      "Creator": {
        "description": "Creator of the object.",
        "properties": {
          "email": {
            "description": "Email of the creator.",
            "type": "string"
          },
          "handle": {
            "description": "Handle of the creator.",
            "type": "string"
          },
          "name": {
            "description": "Name of the creator.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardListAddItemsRequest": {
        "description": "Request containing a list of dashboards to add.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to add the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListAddItemsResponse": {
        "description": "Response containing a list of added dashboards.",
        "properties": {
          "added_dashboards_to_list": {
            "description": "List of dashboards added to the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListDeleteItemsRequest": {
        "description": "Request containing a list of dashboards to delete.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to delete from the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListDeleteItemsResponse": {
        "description": "Response containing a list of deleted dashboards.",
        "properties": {
          "deleted_dashboards_from_list": {
            "description": "List of dashboards deleted from the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListItem": {
        "description": "A dashboard within a list.",
        "properties": {
          "author": {
            "description": "Creator of the object.",
            "properties": {
              "email": {
                "description": "Email of the creator.",
                "type": "string"
              },
              "handle": {
                "description": "Handle of the creator.",
                "type": "string"
              },
              "name": {
                "description": "Name of the creator.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "created": {
            "description": "Date of creation of the dashboard.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "icon": {
            "description": "URL to the icon of the dashboard.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "type": "string"
          },
          "is_favorite": {
            "description": "Whether or not the dashboard is in the favorites.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_read_only": {
            "description": "Whether or not the dashboard is read only.",
            "readOnly": true,
            "type": "boolean"
          },
          "is_shared": {
            "description": "Whether the dashboard is publicly shared or not.",
            "readOnly": true,
            "type": "boolean"
          },
          "modified": {
            "description": "Date of last edition of the dashboard.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "popularity": {
            "description": "Popularity of the dashboard.",
            "format": "int32",
            "maximum": 5,
            "readOnly": true,
            "type": "integer"
          },
          "title": {
            "description": "Title of the dashboard.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "example": "host_timeboard",
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          },
          "url": {
            "description": "URL path to the dashboard.",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItemRequest": {
        "description": "A dashboard within a list.",
        "properties": {
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "example": "host_timeboard",
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItemResponse": {
        "description": "A dashboard within a list.",
        "properties": {
          "id": {
            "description": "ID of the dashboard.",
            "example": "q5j-nti-fv6",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the dashboard.",
            "enum": [
              "custom_timeboard",
              "custom_screenboard",
              "integration_screenboard",
              "integration_timeboard",
              "host_timeboard"
            ],
            "example": "host_timeboard",
            "type": "string",
            "x-enum-varnames": [
              "CUSTOM_TIMEBOARD",
              "CUSTOM_SCREENBOARD",
              "INTEGRATION_SCREENBOARD",
              "INTEGRATION_TIMEBOARD",
              "HOST_TIMEBOARD"
            ]
          }
        },
        "required": [
          "type",
          "id"
        ],
        "type": "object"
      },
      "DashboardListItems": {
        "description": "Dashboards within a list.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards in the dashboard list.",
            "example": [],
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "author": {
                  "description": "Creator of the object.",
                  "properties": {
                    "email": {
                      "description": "Email of the creator.",
                      "type": "string"
                    },
                    "handle": {
                      "description": "Handle of the creator.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the creator.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "created": {
                  "description": "Date of creation of the dashboard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "icon": {
                  "description": "URL to the icon of the dashboard.",
                  "readOnly": true,
                  "type": "string"
                },
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "is_favorite": {
                  "description": "Whether or not the dashboard is in the favorites.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "is_read_only": {
                  "description": "Whether or not the dashboard is read only.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "is_shared": {
                  "description": "Whether the dashboard is publicly shared or not.",
                  "readOnly": true,
                  "type": "boolean"
                },
                "modified": {
                  "description": "Date of last edition of the dashboard.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string"
                },
                "popularity": {
                  "description": "Popularity of the dashboard.",
                  "format": "int32",
                  "maximum": 5,
                  "readOnly": true,
                  "type": "integer"
                },
                "title": {
                  "description": "Title of the dashboard.",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                },
                "url": {
                  "description": "URL path to the dashboard.",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "total": {
            "description": "Number of dashboards in the dashboard list.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          }
        },
        "required": [
          "dashboards"
        ],
        "type": "object"
      },
      "DashboardListUpdateItemsRequest": {
        "description": "Request containing the list of dashboards to update to.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards to update the dashboard list to.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardListUpdateItemsResponse": {
        "description": "Response containing a list of updated dashboards.",
        "properties": {
          "dashboards": {
            "description": "List of dashboards in the dashboard list.",
            "items": {
              "description": "A dashboard within a list.",
              "properties": {
                "id": {
                  "description": "ID of the dashboard.",
                  "example": "q5j-nti-fv6",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "description": "The type of the dashboard.",
                  "enum": [
                    "custom_timeboard",
                    "custom_screenboard",
                    "integration_screenboard",
                    "integration_timeboard",
                    "host_timeboard"
                  ],
                  "example": "host_timeboard",
                  "type": "string",
                  "x-enum-varnames": [
                    "CUSTOM_TIMEBOARD",
                    "CUSTOM_SCREENBOARD",
                    "INTEGRATION_SCREENBOARD",
                    "INTEGRATION_TIMEBOARD",
                    "HOST_TIMEBOARD"
                  ]
                }
              },
              "required": [
                "type",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DashboardType": {
        "description": "The type of the dashboard.",
        "enum": [
          "custom_timeboard",
          "custom_screenboard",
          "integration_screenboard",
          "integration_timeboard",
          "host_timeboard"
        ],
        "example": "host_timeboard",
        "type": "string",
        "x-enum-varnames": [
          "CUSTOM_TIMEBOARD",
          "CUSTOM_SCREENBOARD",
          "INTEGRATION_SCREENBOARD",
          "INTEGRATION_TIMEBOARD",
          "HOST_TIMEBOARD"
        ]
      },
      "Event": {
        "description": "The metadata associated with a request.",
        "properties": {
          "id": {
            "description": "Event ID.",
            "example": "6509751066204996294",
            "type": "string"
          },
          "name": {
            "description": "The event name.",
            "type": "string"
          },
          "source_id": {
            "description": "Event source ID.",
            "example": 36,
            "type": "integer"
          },
          "type": {
            "description": "Event type.",
            "example": "error_tracking_alert",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventAttributes": {
        "description": "Object description of attributes from your event.",
        "properties": {
          "aggregation_key": {
            "description": "Aggregation key of the event.",
            "type": "string"
          },
          "date_happened": {
            "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
            "format": "int64",
            "type": "integer"
          },
          "device_name": {
            "description": "A device name.",
            "type": "string"
          },
          "duration": {
            "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
            "format": "int64",
            "type": "integer"
          },
          "event_object": {
            "description": "The event title.",
            "example": "Did you hear the news today?",
            "type": "string"
          },
          "evt": {
            "description": "The metadata associated with a request.",
            "properties": {
              "id": {
                "description": "Event ID.",
                "example": "6509751066204996294",
                "type": "string"
              },
              "name": {
                "description": "The event name.",
                "type": "string"
              },
              "source_id": {
                "description": "Event source ID.",
                "example": 36,
                "type": "integer"
              },
              "type": {
                "description": "Event type.",
                "example": "error_tracking_alert",
                "type": "string"
              }
            },
            "type": "object"
          },
          "hostname": {
            "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
            "type": "string"
          },
          "monitor": {
            "description": "Attributes from the monitor that triggered the event.",
            "nullable": true,
            "properties": {
              "created_at": {
                "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                "example": 1646318692000,
                "type": "integer"
              },
              "group_status": {
                "description": "Monitor group status used when there is no `result_groups`.",
                "type": "integer"
              },
              "groups": {
                "description": "Groups to which the monitor belongs.",
                "items": {
                  "description": "A group.",
                  "type": "string"
                },
                "type": "array"
              },
              "id": {
                "description": "The monitor ID.",
                "type": "integer"
              },
              "message": {
                "description": "The monitor message.",
                "type": "string"
              },
              "modified": {
                "description": "The monitor's last-modified timestamp.",
                "type": "integer"
              },
              "name": {
                "description": "The monitor name.",
                "type": "string"
              },
              "query": {
                "description": "The query that triggers the alert.",
                "type": "string"
              },
              "tags": {
                "description": "A list of tags attached to the monitor.",
                "example": [
                  "environment:test"
                ],
                "items": {
                  "description": "A tag.",
                  "type": "string"
                },
                "type": "array"
              },
              "templated_name": {
                "description": "The templated name of the monitor before resolving any template variables.",
                "type": "string"
              },
              "type": {
                "description": "The monitor type.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "monitor_groups": {
            "description": "List of groups referred to in the event.",
            "items": {
              "description": "Group referred to in the event.",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "monitor_id": {
            "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
            "nullable": true,
            "type": "integer"
          },
          "priority": {
            "description": "The priority of the event's monitor. For example, `normal` or `low`.",
            "enum": [
              "normal",
              "low"
            ],
            "example": "normal",
            "nullable": true,
            "type": "string",
            "x-enum-varnames": [
              "NORMAL",
              "LOW"
            ]
          },
          "related_event_id": {
            "description": "Related event ID.",
            "type": "integer"
          },
          "service": {
            "description": "Service that triggered the event.",
            "example": "datadog-api",
            "type": "string"
          },
          "source_type_name": {
            "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
            "type": "string"
          },
          "sourcecategory": {
            "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
            "type": "string"
          },
          "status": {
            "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
            "enum": [
              "failure",
              "error",
              "warning",
              "info",
              "success",
              "user_update",
              "recommendation",
              "snapshot"
            ],
            "example": "info",
            "type": "string",
            "x-enum-varnames": [
              "FAILURE",
              "ERROR",
              "WARNING",
              "INFO",
              "SUCCESS",
              "USER_UPDATE",
              "RECOMMENDATION",
              "SNAPSHOT"
            ]
          },
          "tags": {
            "description": "A list of tags to apply to the event.",
            "example": [
              "environment:test"
            ],
            "items": {
              "description": "A tag.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "POSIX timestamp of your event in milliseconds.",
            "example": 1652274265000,
            "format": "int64",
            "type": "integer"
          },
          "title": {
            "description": "The event title.",
            "example": "Oh boy!",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPriority": {
        "description": "The priority of the event's monitor. For example, `normal` or `low`.",
        "enum": [
          "normal",
          "low"
        ],
        "example": "normal",
        "nullable": true,
        "type": "string",
        "x-enum-varnames": [
          "NORMAL",
          "LOW"
        ]
      },
      "EventResponse": {
        "description": "The object description of an event after being processed and stored by Datadog.",
        "properties": {
          "attributes": {
            "description": "The object description of an event response attribute.",
            "properties": {
              "attributes": {
                "description": "Object description of attributes from your event.",
                "properties": {
                  "aggregation_key": {
                    "description": "Aggregation key of the event.",
                    "type": "string"
                  },
                  "date_happened": {
                    "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "device_name": {
                    "description": "A device name.",
                    "type": "string"
                  },
                  "duration": {
                    "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "event_object": {
                    "description": "The event title.",
                    "example": "Did you hear the news today?",
                    "type": "string"
                  },
                  "evt": {
                    "description": "The metadata associated with a request.",
                    "properties": {
                      "id": {
                        "description": "Event ID.",
                        "example": "6509751066204996294",
                        "type": "string"
                      },
                      "name": {
                        "description": "The event name.",
                        "type": "string"
                      },
                      "source_id": {
                        "description": "Event source ID.",
                        "example": 36,
                        "type": "integer"
                      },
                      "type": {
                        "description": "Event type.",
                        "example": "error_tracking_alert",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "hostname": {
                    "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
                    "type": "string"
                  },
                  "monitor": {
                    "description": "Attributes from the monitor that triggered the event.",
                    "nullable": true,
                    "properties": {
                      "created_at": {
                        "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                        "example": 1646318692000,
                        "type": "integer"
                      },
                      "group_status": {
                        "description": "Monitor group status used when there is no `result_groups`.",
                        "type": "integer"
                      },
                      "groups": {
                        "description": "Groups to which the monitor belongs.",
                        "items": {
                          "description": "A group.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "The monitor ID.",
                        "type": "integer"
                      },
                      "message": {
                        "description": "The monitor message.",
                        "type": "string"
                      },
                      "modified": {
                        "description": "The monitor's last-modified timestamp.",
                        "type": "integer"
                      },
                      "name": {
                        "description": "The monitor name.",
                        "type": "string"
                      },
                      "query": {
                        "description": "The query that triggers the alert.",
                        "type": "string"
                      },
                      "tags": {
                        "description": "A list of tags attached to the monitor.",
                        "example": [
                          "environment:test"
                        ],
                        "items": {
                          "description": "A tag.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "templated_name": {
                        "description": "The templated name of the monitor before resolving any template variables.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The monitor type.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "monitor_groups": {
                    "description": "List of groups referred to in the event.",
                    "items": {
                      "description": "Group referred to in the event.",
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "monitor_id": {
                    "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
                    "nullable": true,
                    "type": "integer"
                  },
                  "priority": {
                    "description": "The priority of the event's monitor. For example, `normal` or `low`.",
                    "enum": [
                      "normal",
                      "low"
                    ],
                    "example": "normal",
                    "nullable": true,
                    "type": "string",
                    "x-enum-varnames": [
                      "NORMAL",
                      "LOW"
                    ]
                  },
                  "related_event_id": {
                    "description": "Related event ID.",
                    "type": "integer"
                  },
                  "service": {
                    "description": "Service that triggered the event.",
                    "example": "datadog-api",
                    "type": "string"
                  },
                  "source_type_name": {
                    "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
                    "type": "string"
                  },
                  "sourcecategory": {
                    "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
                    "type": "string"
                  },
                  "status": {
                    "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
                    "enum": [
                      "failure",
                      "error",
                      "warning",
                      "info",
                      "success",
                      "user_update",
                      "recommendation",
                      "snapshot"
                    ],
                    "example": "info",
                    "type": "string",
                    "x-enum-varnames": [
                      "FAILURE",
                      "ERROR",
                      "WARNING",
                      "INFO",
                      "SUCCESS",
                      "USER_UPDATE",
                      "RECOMMENDATION",
                      "SNAPSHOT"
                    ]
                  },
                  "tags": {
                    "description": "A list of tags to apply to the event.",
                    "example": [
                      "environment:test"
                    ],
                    "items": {
                      "description": "A tag.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "timestamp": {
                    "description": "POSIX timestamp of your event in milliseconds.",
                    "example": 1652274265000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The event title.",
                    "example": "Oh boy!",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tags": {
                "description": "An array of tags associated with the event.",
                "example": [
                  "team:A"
                ],
                "items": {
                  "description": "The tag associated with the event.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "The timestamp of the event.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "the unique ID of the event.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "event",
            "description": "Type of the event.",
            "enum": [
              "event"
            ],
            "example": "event",
            "type": "string",
            "x-enum-varnames": [
              "EVENT"
            ]
          }
        },
        "type": "object"
      },
      "EventResponseAttributes": {
        "description": "The object description of an event response attribute.",
        "properties": {
          "attributes": {
            "description": "Object description of attributes from your event.",
            "properties": {
              "aggregation_key": {
                "description": "Aggregation key of the event.",
                "type": "string"
              },
              "date_happened": {
                "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
                "format": "int64",
                "type": "integer"
              },
              "device_name": {
                "description": "A device name.",
                "type": "string"
              },
              "duration": {
                "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
                "format": "int64",
                "type": "integer"
              },
              "event_object": {
                "description": "The event title.",
                "example": "Did you hear the news today?",
                "type": "string"
              },
              "evt": {
                "description": "The metadata associated with a request.",
                "properties": {
                  "id": {
                    "description": "Event ID.",
                    "example": "6509751066204996294",
                    "type": "string"
                  },
                  "name": {
                    "description": "The event name.",
                    "type": "string"
                  },
                  "source_id": {
                    "description": "Event source ID.",
                    "example": 36,
                    "type": "integer"
                  },
                  "type": {
                    "description": "Event type.",
                    "example": "error_tracking_alert",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "hostname": {
                "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
                "type": "string"
              },
              "monitor": {
                "description": "Attributes from the monitor that triggered the event.",
                "nullable": true,
                "properties": {
                  "created_at": {
                    "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                    "example": 1646318692000,
                    "type": "integer"
                  },
                  "group_status": {
                    "description": "Monitor group status used when there is no `result_groups`.",
                    "type": "integer"
                  },
                  "groups": {
                    "description": "Groups to which the monitor belongs.",
                    "items": {
                      "description": "A group.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "id": {
                    "description": "The monitor ID.",
                    "type": "integer"
                  },
                  "message": {
                    "description": "The monitor message.",
                    "type": "string"
                  },
                  "modified": {
                    "description": "The monitor's last-modified timestamp.",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The monitor name.",
                    "type": "string"
                  },
                  "query": {
                    "description": "The query that triggers the alert.",
                    "type": "string"
                  },
                  "tags": {
                    "description": "A list of tags attached to the monitor.",
                    "example": [
                      "environment:test"
                    ],
                    "items": {
                      "description": "A tag.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "templated_name": {
                    "description": "The templated name of the monitor before resolving any template variables.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The monitor type.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "monitor_groups": {
                "description": "List of groups referred to in the event.",
                "items": {
                  "description": "Group referred to in the event.",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "monitor_id": {
                "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
                "nullable": true,
                "type": "integer"
              },
              "priority": {
                "description": "The priority of the event's monitor. For example, `normal` or `low`.",
                "enum": [
                  "normal",
                  "low"
                ],
                "example": "normal",
                "nullable": true,
                "type": "string",
                "x-enum-varnames": [
                  "NORMAL",
                  "LOW"
                ]
              },
              "related_event_id": {
                "description": "Related event ID.",
                "type": "integer"
              },
              "service": {
                "description": "Service that triggered the event.",
                "example": "datadog-api",
                "type": "string"
              },
              "source_type_name": {
                "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
                "type": "string"
              },
              "sourcecategory": {
                "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
                "type": "string"
              },
              "status": {
                "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
                "enum": [
                  "failure",
                  "error",
                  "warning",
                  "info",
                  "success",
                  "user_update",
                  "recommendation",
                  "snapshot"
                ],
                "example": "info",
                "type": "string",
                "x-enum-varnames": [
                  "FAILURE",
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "SUCCESS",
                  "USER_UPDATE",
                  "RECOMMENDATION",
                  "SNAPSHOT"
                ]
              },
              "tags": {
                "description": "A list of tags to apply to the event.",
                "example": [
                  "environment:test"
                ],
                "items": {
                  "description": "A tag.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "POSIX timestamp of your event in milliseconds.",
                "example": 1652274265000,
                "format": "int64",
                "type": "integer"
              },
              "title": {
                "description": "The event title.",
                "example": "Oh boy!",
                "type": "string"
              }
            },
            "type": "object"
          },
          "tags": {
            "description": "An array of tags associated with the event.",
            "example": [
              "team:A"
            ],
            "items": {
              "description": "The tag associated with the event.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "The timestamp of the event.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventStatusType": {
        "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
        "enum": [
          "failure",
          "error",
          "warning",
          "info",
          "success",
          "user_update",
          "recommendation",
          "snapshot"
        ],
        "example": "info",
        "type": "string",
        "x-enum-varnames": [
          "FAILURE",
          "ERROR",
          "WARNING",
          "INFO",
          "SUCCESS",
          "USER_UPDATE",
          "RECOMMENDATION",
          "SNAPSHOT"
        ]
      },
      "EventType": {
        "default": "event",
        "description": "Type of the event.",
        "enum": [
          "event"
        ],
        "example": "event",
        "type": "string",
        "x-enum-varnames": [
          "EVENT"
        ]
      },
      "EventsListRequest": {
        "description": "The object sent with the request to retrieve a list of events from your organization.",
        "properties": {
          "filter": {
            "description": "The search and filter query settings.",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested events. Supports date math and regular timestamps in milliseconds.",
                "example": "now-15m",
                "type": "string"
              },
              "query": {
                "default": "*",
                "description": "The search query following the event search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested events. Supports date math and regular timestamps in milliseconds.",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "description": "The global query options that are used. Either provide a timezone or a time offset but not both,\notherwise the query fails.",
            "properties": {
              "timeOffset": {
                "description": "The time offset to apply to the query in seconds.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified as an offset, for example: `UTC+03:00`.",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Pagination settings.",
            "properties": {
              "cursor": {
                "description": "The returned paging point to use to get the next results.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "The maximum number of logs in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "The sort parameters when querying events.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "EventsListResponse": {
        "description": "The response object with all events matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "An array of events matching the request.",
            "items": {
              "description": "The object description of an event after being processed and stored by Datadog.",
              "properties": {
                "attributes": {
                  "description": "The object description of an event response attribute.",
                  "properties": {
                    "attributes": {
                      "description": "Object description of attributes from your event.",
                      "properties": {
                        "aggregation_key": {
                          "description": "Aggregation key of the event.",
                          "type": "string"
                        },
                        "date_happened": {
                          "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "device_name": {
                          "description": "A device name.",
                          "type": "string"
                        },
                        "duration": {
                          "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "event_object": {
                          "description": "The event title.",
                          "example": "Did you hear the news today?",
                          "type": "string"
                        },
                        "evt": {
                          "description": "The metadata associated with a request.",
                          "properties": {
                            "id": {
                              "description": "Event ID.",
                              "example": "6509751066204996294",
                              "type": "string"
                            },
                            "name": {
                              "description": "The event name.",
                              "type": "string"
                            },
                            "source_id": {
                              "description": "Event source ID.",
                              "example": 36,
                              "type": "integer"
                            },
                            "type": {
                              "description": "Event type.",
                              "example": "error_tracking_alert",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "hostname": {
                          "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
                          "type": "string"
                        },
                        "monitor": {
                          "description": "Attributes from the monitor that triggered the event.",
                          "nullable": true,
                          "properties": {
                            "created_at": {
                              "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                              "example": 1646318692000,
                              "type": "integer"
                            },
                            "group_status": {
                              "description": "Monitor group status used when there is no `result_groups`.",
                              "type": "integer"
                            },
                            "groups": {
                              "description": "Groups to which the monitor belongs.",
                              "items": {
                                "description": "A group.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "id": {
                              "description": "The monitor ID.",
                              "type": "integer"
                            },
                            "message": {
                              "description": "The monitor message.",
                              "type": "string"
                            },
                            "modified": {
                              "description": "The monitor's last-modified timestamp.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "The monitor name.",
                              "type": "string"
                            },
                            "query": {
                              "description": "The query that triggers the alert.",
                              "type": "string"
                            },
                            "tags": {
                              "description": "A list of tags attached to the monitor.",
                              "example": [
                                "environment:test"
                              ],
                              "items": {
                                "description": "A tag.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "templated_name": {
                              "description": "The templated name of the monitor before resolving any template variables.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The monitor type.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "monitor_groups": {
                          "description": "List of groups referred to in the event.",
                          "items": {
                            "description": "Group referred to in the event.",
                            "type": "string"
                          },
                          "nullable": true,
                          "type": "array"
                        },
                        "monitor_id": {
                          "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
                          "nullable": true,
                          "type": "integer"
                        },
                        "priority": {
                          "description": "The priority of the event's monitor. For example, `normal` or `low`.",
                          "enum": [
                            "normal",
                            "low"
                          ],
                          "example": "normal",
                          "nullable": true,
                          "type": "string",
                          "x-enum-varnames": [
                            "NORMAL",
                            "LOW"
                          ]
                        },
                        "related_event_id": {
                          "description": "Related event ID.",
                          "type": "integer"
                        },
                        "service": {
                          "description": "Service that triggered the event.",
                          "example": "datadog-api",
                          "type": "string"
                        },
                        "source_type_name": {
                          "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
                          "type": "string"
                        },
                        "sourcecategory": {
                          "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
                          "type": "string"
                        },
                        "status": {
                          "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
                          "enum": [
                            "failure",
                            "error",
                            "warning",
                            "info",
                            "success",
                            "user_update",
                            "recommendation",
                            "snapshot"
                          ],
                          "example": "info",
                          "type": "string",
                          "x-enum-varnames": [
                            "FAILURE",
                            "ERROR",
                            "WARNING",
                            "INFO",
                            "SUCCESS",
                            "USER_UPDATE",
                            "RECOMMENDATION",
                            "SNAPSHOT"
                          ]
                        },
                        "tags": {
                          "description": "A list of tags to apply to the event.",
                          "example": [
                            "environment:test"
                          ],
                          "items": {
                            "description": "A tag.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "timestamp": {
                          "description": "POSIX timestamp of your event in milliseconds.",
                          "example": 1652274265000,
                          "format": "int64",
                          "type": "integer"
                        },
                        "title": {
                          "description": "The event title.",
                          "example": "Oh boy!",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "tags": {
                      "description": "An array of tags associated with the event.",
                      "example": [
                        "team:A"
                      ],
                      "items": {
                        "description": "The tag associated with the event.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "The timestamp of the event.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "the unique ID of the event.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "event",
                  "description": "Type of the event.",
                  "enum": [
                    "event"
                  ],
                  "example": "event",
                  "type": "string",
                  "x-enum-varnames": [
                    "EVENT"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request.",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds.",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Pagination attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request.",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "warnings": {
                "description": "A list of warnings (non-fatal errors) encountered. Partial results might be returned if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something is wrong with the query.",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning.",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning.",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning.",
                      "example": "One or several indexes are missing or invalid. Results hold data from the other indexes.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "EventsListResponseLinks": {
        "description": "Links attributes.",
        "properties": {
          "next": {
            "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
            "example": "https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventsQueryFilter": {
        "description": "The search and filter query settings.",
        "properties": {
          "from": {
            "default": "now-15m",
            "description": "The minimum time for the requested events. Supports date math and regular timestamps in milliseconds.",
            "example": "now-15m",
            "type": "string"
          },
          "query": {
            "default": "*",
            "description": "The search query following the event search syntax.",
            "example": "service:web* AND @http.status_code:[200 TO 299]",
            "type": "string"
          },
          "to": {
            "default": "now",
            "description": "The maximum time for the requested events. Supports date math and regular timestamps in milliseconds.",
            "example": "now",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventsQueryOptions": {
        "description": "The global query options that are used. Either provide a timezone or a time offset but not both,\notherwise the query fails.",
        "properties": {
          "timeOffset": {
            "description": "The time offset to apply to the query in seconds.",
            "format": "int64",
            "type": "integer"
          },
          "timezone": {
            "default": "UTC",
            "description": "The timezone can be specified as an offset, for example: `UTC+03:00`.",
            "example": "GMT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventsRequestPage": {
        "description": "Pagination settings.",
        "properties": {
          "cursor": {
            "description": "The returned paging point to use to get the next results.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          },
          "limit": {
            "default": 10,
            "description": "The maximum number of logs in the response.",
            "example": 25,
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EventsResponseMetadata": {
        "description": "The metadata associated with a request.",
        "properties": {
          "elapsed": {
            "description": "The time elapsed in milliseconds.",
            "example": 132,
            "format": "int64",
            "type": "integer"
          },
          "page": {
            "description": "Pagination attributes.",
            "properties": {
              "after": {
                "description": "The cursor to use to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "request_id": {
            "description": "The identifier of the request.",
            "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
            "type": "string"
          },
          "warnings": {
            "description": "A list of warnings (non-fatal errors) encountered. Partial results might be returned if\nwarnings are present in the response.",
            "items": {
              "description": "A warning message indicating something is wrong with the query.",
              "properties": {
                "code": {
                  "description": "A unique code for this type of warning.",
                  "example": "unknown_index",
                  "type": "string"
                },
                "detail": {
                  "description": "A detailed explanation of this specific warning.",
                  "example": "indexes: foo, bar",
                  "type": "string"
                },
                "title": {
                  "description": "A short human-readable summary of the warning.",
                  "example": "One or several indexes are missing or invalid. Results hold data from the other indexes.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventsResponseMetadataPage": {
        "description": "Pagination attributes.",
        "properties": {
          "after": {
            "description": "The cursor to use to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventsSort": {
        "description": "The sort parameters when querying events.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "EventsWarning": {
        "description": "A warning message indicating something is wrong with the query.",
        "properties": {
          "code": {
            "description": "A unique code for this type of warning.",
            "example": "unknown_index",
            "type": "string"
          },
          "detail": {
            "description": "A detailed explanation of this specific warning.",
            "example": "indexes: foo, bar",
            "type": "string"
          },
          "title": {
            "description": "A short human-readable summary of the warning.",
            "example": "One or several indexes are missing or invalid. Results hold data from the other indexes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FullAPIKey": {
        "description": "Datadog API key.",
        "properties": {
          "attributes": {
            "description": "Attributes of a full API key.",
            "properties": {
              "created_at": {
                "description": "Creation date of the API key.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "key": {
                "description": "The API key.",
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "last4": {
                "description": "The last four characters of the API key.",
                "example": "abcd",
                "maxLength": 4,
                "minLength": 4,
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "modified_at": {
                "description": "Date the API key was last modified.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the API key.",
                "example": "API Key for submitting metrics",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the API key.",
            "type": "string"
          },
          "relationships": {
            "description": "Resources related to the API key.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "api_keys",
            "description": "API Keys resource type.",
            "enum": [
              "api_keys"
            ],
            "example": "api_keys",
            "type": "string",
            "x-enum-varnames": [
              "API_KEYS"
            ]
          }
        },
        "type": "object"
      },
      "FullAPIKeyAttributes": {
        "description": "Attributes of a full API key.",
        "properties": {
          "created_at": {
            "description": "Creation date of the API key.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "description": "The API key.",
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "last4": {
            "description": "The last four characters of the API key.",
            "example": "abcd",
            "maxLength": 4,
            "minLength": 4,
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "modified_at": {
            "description": "Date the API key was last modified.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the API key.",
            "example": "API Key for submitting metrics",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FullApplicationKey": {
        "description": "Datadog application key.",
        "properties": {
          "attributes": {
            "description": "Attributes of a full application key.",
            "properties": {
              "created_at": {
                "description": "Creation date of the application key.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "key": {
                "description": "The application key.",
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "last4": {
                "description": "The last four characters of the application key.",
                "example": "abcd",
                "maxLength": 4,
                "minLength": 4,
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "name": {
                "description": "Name of the application key.",
                "example": "Application Key for managing dashboards",
                "type": "string"
              },
              "scopes": {
                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                "example": [
                  "dashboards_read",
                  "dashboards_write",
                  "dashboards_public_share"
                ],
                "items": {
                  "description": "Name of scope.",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the application key.",
            "type": "string"
          },
          "relationships": {
            "description": "Resources related to the application key.",
            "properties": {
              "owned_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "application_keys",
            "description": "Application Keys resource type.",
            "enum": [
              "application_keys"
            ],
            "example": "application_keys",
            "type": "string",
            "x-enum-varnames": [
              "APPLICATION_KEYS"
            ]
          }
        },
        "type": "object"
      },
      "FullApplicationKeyAttributes": {
        "description": "Attributes of a full application key.",
        "properties": {
          "created_at": {
            "description": "Creation date of the application key.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "description": "The application key.",
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "last4": {
            "description": "The last four characters of the application key.",
            "example": "abcd",
            "maxLength": 4,
            "minLength": 4,
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "name": {
            "description": "Name of the application key.",
            "example": "Application Key for managing dashboards",
            "type": "string"
          },
          "scopes": {
            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
            "example": [
              "dashboards_read",
              "dashboards_write",
              "dashboards_public_share"
            ],
            "items": {
              "description": "Name of scope.",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "HTTPLog": {
        "description": "Structured log message.",
        "items": {
          "additionalProperties": {
            "description": "Additional log attributes.",
            "type": "string"
          },
          "description": "Logs that are sent over HTTP.",
          "properties": {
            "ddsource": {
              "description": "The integration name associated with your log: the technology from which the log originated.\nWhen it matches an integration name, Datadog automatically installs the corresponding parsers and facets.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
              "example": "nginx",
              "type": "string"
            },
            "ddtags": {
              "description": "Tags associated with your logs.",
              "example": "env:staging,version:5.1",
              "type": "string"
            },
            "hostname": {
              "description": "The name of the originating host of the log.",
              "example": "i-012345678",
              "type": "string"
            },
            "message": {
              "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
              "example": "2019-11-19T14:37:58,995 INFO [process.name][20081] Hello World",
              "type": "string"
            },
            "service": {
              "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same value when you use both products.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
              "example": "payment",
              "type": "string"
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "HTTPLogError": {
        "description": "List of errors.",
        "properties": {
          "detail": {
            "description": "Error message.",
            "example": "Malformed payload",
            "type": "string"
          },
          "status": {
            "description": "Error code.",
            "example": "400",
            "type": "string"
          },
          "title": {
            "description": "Error title.",
            "example": "Bad Request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPLogErrors": {
        "description": "Invalid query performed.",
        "properties": {
          "errors": {
            "description": "Structured errors.",
            "items": {
              "description": "List of errors.",
              "properties": {
                "detail": {
                  "description": "Error message.",
                  "example": "Malformed payload",
                  "type": "string"
                },
                "status": {
                  "description": "Error code.",
                  "example": "400",
                  "type": "string"
                },
                "title": {
                  "description": "Error title.",
                  "example": "Bad Request",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HTTPLogItem": {
        "additionalProperties": {
          "description": "Additional log attributes.",
          "type": "string"
        },
        "description": "Logs that are sent over HTTP.",
        "properties": {
          "ddsource": {
            "description": "The integration name associated with your log: the technology from which the log originated.\nWhen it matches an integration name, Datadog automatically installs the corresponding parsers and facets.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
            "example": "nginx",
            "type": "string"
          },
          "ddtags": {
            "description": "Tags associated with your logs.",
            "example": "env:staging,version:5.1",
            "type": "string"
          },
          "hostname": {
            "description": "The name of the originating host of the log.",
            "example": "i-012345678",
            "type": "string"
          },
          "message": {
            "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
            "example": "2019-11-19T14:37:58,995 INFO [process.name][20081] Hello World",
            "type": "string"
          },
          "service": {
            "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same value when you use both products.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
            "example": "payment",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "type": "object"
      },
      "HourlyUsage": {
        "description": "Hourly usage for a product family for an org.",
        "properties": {
          "attributes": {
            "description": "Attributes of hourly usage for a product family for an org for a time period.",
            "properties": {
              "measurements": {
                "description": "List of the measured usage values for the product family for the org for the time period.",
                "items": {
                  "description": "Usage amount for a given usage type.",
                  "properties": {
                    "usage_type": {
                      "description": "Type of usage.",
                      "type": "string"
                    },
                    "value": {
                      "description": "Contains the number measured for the given usage_type during the hour.",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "org_name": {
                "description": "The organization name.",
                "type": "string"
              },
              "product_family": {
                "description": "The product for which usage is being reported.",
                "type": "string"
              },
              "public_id": {
                "description": "The organization public ID.",
                "type": "string"
              },
              "region": {
                "description": "The region of the Datadog instance that the organization belongs to.",
                "type": "string"
              },
              "timestamp": {
                "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the response.",
            "type": "string"
          },
          "type": {
            "default": "usage_timeseries",
            "description": "Type of usage data.",
            "enum": [
              "usage_timeseries"
            ],
            "example": "usage_timeseries",
            "type": "string",
            "x-enum-varnames": [
              "USAGE_TIMESERIES"
            ]
          }
        },
        "type": "object"
      },
      "HourlyUsageAttributes": {
        "description": "Attributes of hourly usage for a product family for an org for a time period.",
        "properties": {
          "measurements": {
            "description": "List of the measured usage values for the product family for the org for the time period.",
            "items": {
              "description": "Usage amount for a given usage type.",
              "properties": {
                "usage_type": {
                  "description": "Type of usage.",
                  "type": "string"
                },
                "value": {
                  "description": "Contains the number measured for the given usage_type during the hour.",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "org_name": {
            "description": "The organization name.",
            "type": "string"
          },
          "product_family": {
            "description": "The product for which usage is being reported.",
            "type": "string"
          },
          "public_id": {
            "description": "The organization public ID.",
            "type": "string"
          },
          "region": {
            "description": "The region of the Datadog instance that the organization belongs to.",
            "type": "string"
          },
          "timestamp": {
            "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HourlyUsageMeasurement": {
        "description": "Usage amount for a given usage type.",
        "properties": {
          "usage_type": {
            "description": "Type of usage.",
            "type": "string"
          },
          "value": {
            "description": "Contains the number measured for the given usage_type during the hour.",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HourlyUsageMetadata": {
        "description": "The object containing document metadata.",
        "properties": {
          "pagination": {
            "description": "The metadata for the current pagination.",
            "properties": {
              "next_record_id": {
                "description": "The cursor to get the next results (if any). To make the next request, use the same parameters and add `next_record_id`.",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "HourlyUsagePagination": {
        "description": "The metadata for the current pagination.",
        "properties": {
          "next_record_id": {
            "description": "The cursor to get the next results (if any). To make the next request, use the same parameters and add `next_record_id`.",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HourlyUsageResponse": {
        "description": "Hourly usage response.",
        "properties": {
          "data": {
            "description": "Response containing hourly usage.",
            "items": {
              "description": "Hourly usage for a product family for an org.",
              "properties": {
                "attributes": {
                  "description": "Attributes of hourly usage for a product family for an org for a time period.",
                  "properties": {
                    "measurements": {
                      "description": "List of the measured usage values for the product family for the org for the time period.",
                      "items": {
                        "description": "Usage amount for a given usage type.",
                        "properties": {
                          "usage_type": {
                            "description": "Type of usage.",
                            "type": "string"
                          },
                          "value": {
                            "description": "Contains the number measured for the given usage_type during the hour.",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "org_name": {
                      "description": "The organization name.",
                      "type": "string"
                    },
                    "product_family": {
                      "description": "The product for which usage is being reported.",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The organization public ID.",
                      "type": "string"
                    },
                    "region": {
                      "description": "The region of the Datadog instance that the organization belongs to.",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the response.",
                  "type": "string"
                },
                "type": {
                  "default": "usage_timeseries",
                  "description": "Type of usage data.",
                  "enum": [
                    "usage_timeseries"
                  ],
                  "example": "usage_timeseries",
                  "type": "string",
                  "x-enum-varnames": [
                    "USAGE_TIMESERIES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "The object containing document metadata.",
            "properties": {
              "pagination": {
                "description": "The metadata for the current pagination.",
                "properties": {
                  "next_record_id": {
                    "description": "The cursor to get the next results (if any). To make the next request, use the same parameters and add `next_record_id`.",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "HourlyUsageType": {
        "description": "Usage type that is being measured.",
        "enum": [
          "app_sec_host_count",
          "observability_pipelines_bytes_processed",
          "lambda_traced_invocations_count"
        ],
        "example": "observability_pipelines_bytes_processed",
        "type": "string",
        "x-enum-varnames": [
          "APP_SEC_HOST_COUNT",
          "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
          "LAMBDA_TRACED_INVOCATIONS_COUNT"
        ]
      },
      "IdPMetadataFormData": {
        "description": "The form data submitted to upload IdP metadata",
        "properties": {
          "idp_file": {
            "description": "The IdP metadata XML file",
            "format": "binary",
            "type": "string",
            "x-mimetype": "application/xml"
          }
        },
        "type": "object"
      },
      "IncidentCreateAttributes": {
        "description": "The incident's attributes for a create request.",
        "properties": {
          "customer_impacted": {
            "description": "A flag indicating whether the incident caused customer impact.",
            "example": false,
            "type": "boolean"
          },
          "fields": {
            "additionalProperties": {
              "description": "Dynamic fields for which selections can be made, with field names as keys.",
              "oneOf": [
                {
                  "description": "A field with a single value selected.",
                  "properties": {
                    "type": {
                      "default": "dropdown",
                      "description": "Type of the single value field definitions.",
                      "enum": [
                        "dropdown",
                        "textbox"
                      ],
                      "example": "dropdown",
                      "type": "string",
                      "x-enum-varnames": [
                        "DROPDOWN",
                        "TEXTBOX"
                      ]
                    },
                    "value": {
                      "description": "The single value selected for this field.",
                      "example": "SEV-1",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "A field with potentially multiple values selected.",
                  "properties": {
                    "type": {
                      "default": "multiselect",
                      "description": "Type of the multiple value field definitions.",
                      "enum": [
                        "multiselect",
                        "textarray",
                        "metrictag",
                        "autocomplete"
                      ],
                      "example": "multiselect",
                      "type": "string",
                      "x-enum-varnames": [
                        "MULTISELECT",
                        "TEXTARRAY",
                        "METRICTAG",
                        "AUTOCOMPLETE"
                      ]
                    },
                    "value": {
                      "description": "The multiple values selected for this field.",
                      "example": [
                        "1.0",
                        "1.1"
                      ],
                      "items": {
                        "description": "A value which has been selected for the parent field.",
                        "example": "1.1",
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "required": [
                "type"
              ],
              "type": "object"
            },
            "description": "A condensed view of the user-defined fields for which to create initial selections.",
            "example": {
              "severity": {
                "type": "dropdown",
                "value": "SEV-5"
              }
            },
            "type": "object"
          },
          "initial_cells": {
            "description": "An array of initial timeline cells to be placed at the beginning of the incident timeline.",
            "items": {
              "description": "The timeline cell's attributes for a create request.",
              "oneOf": [
                {
                  "description": "Timeline cell data for Markdown timeline cells for a create request.",
                  "properties": {
                    "cell_type": {
                      "default": "markdown",
                      "description": "Type of the Markdown timeline cell.",
                      "enum": [
                        "markdown"
                      ],
                      "example": "markdown",
                      "type": "string",
                      "x-enum-varnames": [
                        "MARKDOWN"
                      ]
                    },
                    "content": {
                      "description": "The Markdown timeline cell contents.",
                      "properties": {
                        "content": {
                          "description": "The Markdown content of the cell.",
                          "example": "An example timeline cell message.",
                          "nullable": false,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "important": {
                      "default": false,
                      "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
                      "example": false,
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "content",
                    "cell_type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "notification_handles": {
            "description": "Notification handles that will be notified of the incident at creation.",
            "items": {
              "description": "A notification handle that will be notified at incident creation.",
              "properties": {
                "display_name": {
                  "description": "The name of the notified handle.",
                  "example": "Jane Doe",
                  "type": "string"
                },
                "handle": {
                  "description": "The email address used for the notification.",
                  "example": "@test.user@test.com",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the incident, which summarizes what happened.",
            "example": "A test incident title",
            "type": "string"
          }
        },
        "required": [
          "title",
          "customer_impacted"
        ],
        "type": "object"
      },
      "IncidentCreateData": {
        "description": "Incident data for a create request.",
        "properties": {
          "attributes": {
            "description": "The incident's attributes for a create request.",
            "properties": {
              "customer_impacted": {
                "description": "A flag indicating whether the incident caused customer impact.",
                "example": false,
                "type": "boolean"
              },
              "fields": {
                "additionalProperties": {
                  "description": "Dynamic fields for which selections can be made, with field names as keys.",
                  "oneOf": [
                    {
                      "description": "A field with a single value selected.",
                      "properties": {
                        "type": {
                          "default": "dropdown",
                          "description": "Type of the single value field definitions.",
                          "enum": [
                            "dropdown",
                            "textbox"
                          ],
                          "example": "dropdown",
                          "type": "string",
                          "x-enum-varnames": [
                            "DROPDOWN",
                            "TEXTBOX"
                          ]
                        },
                        "value": {
                          "description": "The single value selected for this field.",
                          "example": "SEV-1",
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "A field with potentially multiple values selected.",
                      "properties": {
                        "type": {
                          "default": "multiselect",
                          "description": "Type of the multiple value field definitions.",
                          "enum": [
                            "multiselect",
                            "textarray",
                            "metrictag",
                            "autocomplete"
                          ],
                          "example": "multiselect",
                          "type": "string",
                          "x-enum-varnames": [
                            "MULTISELECT",
                            "TEXTARRAY",
                            "METRICTAG",
                            "AUTOCOMPLETE"
                          ]
                        },
                        "value": {
                          "description": "The multiple values selected for this field.",
                          "example": [
                            "1.0",
                            "1.1"
                          ],
                          "items": {
                            "description": "A value which has been selected for the parent field.",
                            "example": "1.1",
                            "type": "string"
                          },
                          "nullable": true,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                "description": "A condensed view of the user-defined fields for which to create initial selections.",
                "example": {
                  "severity": {
                    "type": "dropdown",
                    "value": "SEV-5"
                  }
                },
                "type": "object"
              },
              "initial_cells": {
                "description": "An array of initial timeline cells to be placed at the beginning of the incident timeline.",
                "items": {
                  "description": "The timeline cell's attributes for a create request.",
                  "oneOf": [
                    {
                      "description": "Timeline cell data for Markdown timeline cells for a create request.",
                      "properties": {
                        "cell_type": {
                          "default": "markdown",
                          "description": "Type of the Markdown timeline cell.",
                          "enum": [
                            "markdown"
                          ],
                          "example": "markdown",
                          "type": "string",
                          "x-enum-varnames": [
                            "MARKDOWN"
                          ]
                        },
                        "content": {
                          "description": "The Markdown timeline cell contents.",
                          "properties": {
                            "content": {
                              "description": "The Markdown content of the cell.",
                              "example": "An example timeline cell message.",
                              "nullable": false,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "important": {
                          "default": false,
                          "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
                          "example": false,
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "content",
                        "cell_type"
                      ],
                      "type": "object"
                    }
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "notification_handles": {
                "description": "Notification handles that will be notified of the incident at creation.",
                "items": {
                  "description": "A notification handle that will be notified at incident creation.",
                  "properties": {
                    "display_name": {
                      "description": "The name of the notified handle.",
                      "example": "Jane Doe",
                      "type": "string"
                    },
                    "handle": {
                      "description": "The email address used for the notification.",
                      "example": "@test.user@test.com",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "title": {
                "description": "The title of the incident, which summarizes what happened.",
                "example": "A test incident title",
                "type": "string"
              }
            },
            "required": [
              "title",
              "customer_impacted"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "The relationships the incident will have with other resources once created.",
            "properties": {
              "commander_user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "required": [
              "commander_user"
            ],
            "type": "object"
          },
          "type": {
            "default": "incidents",
            "description": "Incident resource type.",
            "enum": [
              "incidents"
            ],
            "example": "incidents",
            "type": "string",
            "x-enum-varnames": [
              "INCIDENTS"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "IncidentCreateRelationships": {
        "description": "The relationships the incident will have with other resources once created.",
        "properties": {
          "commander_user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "nullable": true,
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "commander_user"
        ],
        "type": "object"
      },
      "IncidentCreateRequest": {
        "description": "Create request for an incident.",
        "properties": {
          "data": {
            "description": "Incident data for a create request.",
            "properties": {
              "attributes": {
                "description": "The incident's attributes for a create request.",
                "properties": {
                  "customer_impacted": {
                    "description": "A flag indicating whether the incident caused customer impact.",
                    "example": false,
                    "type": "boolean"
                  },
                  "fields": {
                    "additionalProperties": {
                      "description": "Dynamic fields for which selections can be made, with field names as keys.",
                      "oneOf": [
                        {
                          "description": "A field with a single value selected.",
                          "properties": {
                            "type": {
                              "default": "dropdown",
                              "description": "Type of the single value field definitions.",
                              "enum": [
                                "dropdown",
                                "textbox"
                              ],
                              "example": "dropdown",
                              "type": "string",
                              "x-enum-varnames": [
                                "DROPDOWN",
                                "TEXTBOX"
                              ]
                            },
                            "value": {
                              "description": "The single value selected for this field.",
                              "example": "SEV-1",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "A field with potentially multiple values selected.",
                          "properties": {
                            "type": {
                              "default": "multiselect",
                              "description": "Type of the multiple value field definitions.",
                              "enum": [
                                "multiselect",
                                "textarray",
                                "metrictag",
                                "autocomplete"
                              ],
                              "example": "multiselect",
                              "type": "string",
                              "x-enum-varnames": [
                                "MULTISELECT",
                                "TEXTARRAY",
                                "METRICTAG",
                                "AUTOCOMPLETE"
                              ]
                            },
                            "value": {
                              "description": "The multiple values selected for this field.",
                              "example": [
                                "1.0",
                                "1.1"
                              ],
                              "items": {
                                "description": "A value which has been selected for the parent field.",
                                "example": "1.1",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "description": "A condensed view of the user-defined fields for which to create initial selections.",
                    "example": {
                      "severity": {
                        "type": "dropdown",
                        "value": "SEV-5"
                      }
                    },
                    "type": "object"
                  },
                  "initial_cells": {
                    "description": "An array of initial timeline cells to be placed at the beginning of the incident timeline.",
                    "items": {
                      "description": "The timeline cell's attributes for a create request.",
                      "oneOf": [
                        {
                          "description": "Timeline cell data for Markdown timeline cells for a create request.",
                          "properties": {
                            "cell_type": {
                              "default": "markdown",
                              "description": "Type of the Markdown timeline cell.",
                              "enum": [
                                "markdown"
                              ],
                              "example": "markdown",
                              "type": "string",
                              "x-enum-varnames": [
                                "MARKDOWN"
                              ]
                            },
                            "content": {
                              "description": "The Markdown timeline cell contents.",
                              "properties": {
                                "content": {
                                  "description": "The Markdown content of the cell.",
                                  "example": "An example timeline cell message.",
                                  "nullable": false,
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "important": {
                              "default": false,
                              "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
                              "example": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "content",
                            "cell_type"
                          ],
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "notification_handles": {
                    "description": "Notification handles that will be notified of the incident at creation.",
                    "items": {
                      "description": "A notification handle that will be notified at incident creation.",
                      "properties": {
                        "display_name": {
                          "description": "The name of the notified handle.",
                          "example": "Jane Doe",
                          "type": "string"
                        },
                        "handle": {
                          "description": "The email address used for the notification.",
                          "example": "@test.user@test.com",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "title": {
                    "description": "The title of the incident, which summarizes what happened.",
                    "example": "A test incident title",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "customer_impacted"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "The relationships the incident will have with other resources once created.",
                "properties": {
                  "commander_user": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "commander_user"
                ],
                "type": "object"
              },
              "type": {
                "default": "incidents",
                "description": "Incident resource type.",
                "enum": [
                  "incidents"
                ],
                "example": "incidents",
                "type": "string",
                "x-enum-varnames": [
                  "INCIDENTS"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentFieldAttributes": {
        "description": "Dynamic fields for which selections can be made, with field names as keys.",
        "oneOf": [
          {
            "description": "A field with a single value selected.",
            "properties": {
              "type": {
                "default": "dropdown",
                "description": "Type of the single value field definitions.",
                "enum": [
                  "dropdown",
                  "textbox"
                ],
                "example": "dropdown",
                "type": "string",
                "x-enum-varnames": [
                  "DROPDOWN",
                  "TEXTBOX"
                ]
              },
              "value": {
                "description": "The single value selected for this field.",
                "example": "SEV-1",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "description": "A field with potentially multiple values selected.",
            "properties": {
              "type": {
                "default": "multiselect",
                "description": "Type of the multiple value field definitions.",
                "enum": [
                  "multiselect",
                  "textarray",
                  "metrictag",
                  "autocomplete"
                ],
                "example": "multiselect",
                "type": "string",
                "x-enum-varnames": [
                  "MULTISELECT",
                  "TEXTARRAY",
                  "METRICTAG",
                  "AUTOCOMPLETE"
                ]
              },
              "value": {
                "description": "The multiple values selected for this field.",
                "example": [
                  "1.0",
                  "1.1"
                ],
                "items": {
                  "description": "A value which has been selected for the parent field.",
                  "example": "1.1",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IncidentFieldAttributesMultipleValue": {
        "description": "A field with potentially multiple values selected.",
        "properties": {
          "type": {
            "default": "multiselect",
            "description": "Type of the multiple value field definitions.",
            "enum": [
              "multiselect",
              "textarray",
              "metrictag",
              "autocomplete"
            ],
            "example": "multiselect",
            "type": "string",
            "x-enum-varnames": [
              "MULTISELECT",
              "TEXTARRAY",
              "METRICTAG",
              "AUTOCOMPLETE"
            ]
          },
          "value": {
            "description": "The multiple values selected for this field.",
            "example": [
              "1.0",
              "1.1"
            ],
            "items": {
              "description": "A value which has been selected for the parent field.",
              "example": "1.1",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "IncidentFieldAttributesSingleValue": {
        "description": "A field with a single value selected.",
        "properties": {
          "type": {
            "default": "dropdown",
            "description": "Type of the single value field definitions.",
            "enum": [
              "dropdown",
              "textbox"
            ],
            "example": "dropdown",
            "type": "string",
            "x-enum-varnames": [
              "DROPDOWN",
              "TEXTBOX"
            ]
          },
          "value": {
            "description": "The single value selected for this field.",
            "example": "SEV-1",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentFieldAttributesSingleValueType": {
        "default": "dropdown",
        "description": "Type of the single value field definitions.",
        "enum": [
          "dropdown",
          "textbox"
        ],
        "example": "dropdown",
        "type": "string",
        "x-enum-varnames": [
          "DROPDOWN",
          "TEXTBOX"
        ]
      },
      "IncidentFieldAttributesValueType": {
        "default": "multiselect",
        "description": "Type of the multiple value field definitions.",
        "enum": [
          "multiselect",
          "textarray",
          "metrictag",
          "autocomplete"
        ],
        "example": "multiselect",
        "type": "string",
        "x-enum-varnames": [
          "MULTISELECT",
          "TEXTARRAY",
          "METRICTAG",
          "AUTOCOMPLETE"
        ]
      },
      "IncidentIntegrationMetadataType": {
        "default": "incident_integrations",
        "description": "Integration metadata resource type.",
        "enum": [
          "incident_integrations"
        ],
        "example": "incident_integrations",
        "type": "string",
        "x-enum-varnames": [
          "INCIDENT_INTEGRATIONS"
        ]
      },
      "IncidentNotificationHandle": {
        "description": "A notification handle that will be notified at incident creation.",
        "properties": {
          "display_name": {
            "description": "The name of the notified handle.",
            "example": "Jane Doe",
            "type": "string"
          },
          "handle": {
            "description": "The email address used for the notification.",
            "example": "@test.user@test.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentPostmortemType": {
        "default": "incident_postmortems",
        "description": "Incident postmortem resource type.",
        "enum": [
          "incident_postmortems"
        ],
        "example": "incident_postmortems",
        "type": "string",
        "x-enum-varnames": [
          "INCIDENT_POSTMORTEMS"
        ]
      },
      "IncidentRelatedObject": {
        "description": "Object related to an incident.",
        "enum": [
          "users"
        ],
        "type": "string",
        "x-enum-varnames": [
          "USERS"
        ]
      },
      "IncidentResponse": {
        "description": "Response with an incident.",
        "properties": {
          "data": {
            "description": "Incident data from a response.",
            "properties": {
              "attributes": {
                "description": "The incident's attributes from a response.",
                "properties": {
                  "created": {
                    "description": "Timestamp when the incident was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "customer_impact_duration": {
                    "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "customer_impact_end": {
                    "description": "Timestamp when customers were no longer impacted by the incident.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "customer_impact_scope": {
                    "description": "A summary of the impact customers experienced during the incident.",
                    "example": "An example customer impact scope",
                    "nullable": true,
                    "type": "string"
                  },
                  "customer_impact_start": {
                    "description": "Timestamp when customers began being impacted by the incident.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "customer_impacted": {
                    "description": "A flag indicating whether the incident caused customer impact.",
                    "example": false,
                    "type": "boolean"
                  },
                  "detected": {
                    "description": "Timestamp when the incident was detected.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "fields": {
                    "additionalProperties": {
                      "description": "Dynamic fields for which selections can be made, with field names as keys.",
                      "oneOf": [
                        {
                          "description": "A field with a single value selected.",
                          "properties": {
                            "type": {
                              "default": "dropdown",
                              "description": "Type of the single value field definitions.",
                              "enum": [
                                "dropdown",
                                "textbox"
                              ],
                              "example": "dropdown",
                              "type": "string",
                              "x-enum-varnames": [
                                "DROPDOWN",
                                "TEXTBOX"
                              ]
                            },
                            "value": {
                              "description": "The single value selected for this field.",
                              "example": "SEV-1",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "A field with potentially multiple values selected.",
                          "properties": {
                            "type": {
                              "default": "multiselect",
                              "description": "Type of the multiple value field definitions.",
                              "enum": [
                                "multiselect",
                                "textarray",
                                "metrictag",
                                "autocomplete"
                              ],
                              "example": "multiselect",
                              "type": "string",
                              "x-enum-varnames": [
                                "MULTISELECT",
                                "TEXTARRAY",
                                "METRICTAG",
                                "AUTOCOMPLETE"
                              ]
                            },
                            "value": {
                              "description": "The multiple values selected for this field.",
                              "example": [
                                "1.0",
                                "1.1"
                              ],
                              "items": {
                                "description": "A value which has been selected for the parent field.",
                                "example": "1.1",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "description": "A condensed view of the user-defined fields attached to incidents.",
                    "example": {
                      "severity": {
                        "type": "dropdown",
                        "value": "SEV-5"
                      }
                    },
                    "type": "object"
                  },
                  "modified": {
                    "description": "Timestamp when the incident was last modified.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "notification_handles": {
                    "description": "Notification handles that will be notified of the incident during update.",
                    "items": {
                      "description": "A notification handle that will be notified at incident creation.",
                      "properties": {
                        "display_name": {
                          "description": "The name of the notified handle.",
                          "example": "Jane Doe",
                          "type": "string"
                        },
                        "handle": {
                          "description": "The email address used for the notification.",
                          "example": "@test.user@test.com",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "nullable": true,
                    "type": "array"
                  },
                  "postmortem_id": {
                    "description": "The UUID of the postmortem object attached to the incident.",
                    "example": "00000000-0000-0000-7890-000000000000",
                    "type": "string"
                  },
                  "public_id": {
                    "description": "The monotonically increasing integer ID for the incident.",
                    "example": 1,
                    "format": "int64",
                    "type": "integer"
                  },
                  "resolved": {
                    "description": "Timestamp when the incident's state was set to resolved.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "time_to_detect": {
                    "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "time_to_internal_response": {
                    "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "time_to_repair": {
                    "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "time_to_resolve": {
                    "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  },
                  "title": {
                    "description": "The title of the incident, which summarizes what happened.",
                    "example": "A test incident title",
                    "type": "string"
                  }
                },
                "required": [
                  "title"
                ],
                "type": "object"
              },
              "id": {
                "description": "The incident's ID.",
                "example": "00000000-0000-0000-1234-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident's relationships from a response.",
                "properties": {
                  "commander_user": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "created_by_user": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "integrations": {
                    "description": "A relationship reference for multiple integration metadata objects.",
                    "example": {
                      "data": [
                        {
                          "id": "00000000-abcd-0005-0000-000000000000",
                          "type": "incident_integrations"
                        },
                        {
                          "id": "00000000-abcd-0006-0000-000000000000",
                          "type": "incident_integrations"
                        }
                      ]
                    },
                    "properties": {
                      "data": {
                        "description": "The integration metadata relationship array",
                        "example": [
                          {
                            "id": "00000000-abcd-0003-0000-000000000000",
                            "type": "incident_integrations"
                          },
                          {
                            "id": "00000000-abcd-0004-0000-000000000000",
                            "type": "incident_integrations"
                          }
                        ],
                        "items": {
                          "description": "A relationship reference for an integration metadata object.",
                          "example": {
                            "id": "00000000-abcd-0002-0000-000000000000",
                            "type": "incident_integrations"
                          },
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the integration metadata.",
                              "example": "00000000-abcd-0001-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "incident_integrations",
                              "description": "Integration metadata resource type.",
                              "enum": [
                                "incident_integrations"
                              ],
                              "example": "incident_integrations",
                              "type": "string",
                              "x-enum-varnames": [
                                "INCIDENT_INTEGRATIONS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by_user": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "postmortem": {
                    "description": "A relationship reference for postmortems.",
                    "example": {
                      "data": {
                        "id": "00000000-0000-abcd-3000-000000000000",
                        "type": "incident_postmortems"
                      }
                    },
                    "properties": {
                      "data": {
                        "description": "The postmortem relationship data.",
                        "example": {
                          "id": "00000000-0000-abcd-2000-000000000000",
                          "type": "incident_postmortems"
                        },
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the postmortem.",
                            "example": "00000000-0000-abcd-1000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "incident_postmortems",
                            "description": "Incident postmortem resource type.",
                            "enum": [
                              "incident_postmortems"
                            ],
                            "example": "incident_postmortems",
                            "type": "string",
                            "x-enum-varnames": [
                              "INCIDENT_POSTMORTEMS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "incidents",
                "description": "Incident resource type.",
                "enum": [
                  "incidents"
                ],
                "example": "incidents",
                "type": "string",
                "x-enum-varnames": [
                  "INCIDENTS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          },
          "included": {
            "description": "Included related resources that the user requested.",
            "items": {
              "description": "An object related to an incident that is included in the response.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentResponseAttributes": {
        "description": "The incident's attributes from a response.",
        "properties": {
          "created": {
            "description": "Timestamp when the incident was created.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "customer_impact_duration": {
            "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "customer_impact_end": {
            "description": "Timestamp when customers were no longer impacted by the incident.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "customer_impact_scope": {
            "description": "A summary of the impact customers experienced during the incident.",
            "example": "An example customer impact scope",
            "nullable": true,
            "type": "string"
          },
          "customer_impact_start": {
            "description": "Timestamp when customers began being impacted by the incident.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "customer_impacted": {
            "description": "A flag indicating whether the incident caused customer impact.",
            "example": false,
            "type": "boolean"
          },
          "detected": {
            "description": "Timestamp when the incident was detected.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "description": "Dynamic fields for which selections can be made, with field names as keys.",
              "oneOf": [
                {
                  "description": "A field with a single value selected.",
                  "properties": {
                    "type": {
                      "default": "dropdown",
                      "description": "Type of the single value field definitions.",
                      "enum": [
                        "dropdown",
                        "textbox"
                      ],
                      "example": "dropdown",
                      "type": "string",
                      "x-enum-varnames": [
                        "DROPDOWN",
                        "TEXTBOX"
                      ]
                    },
                    "value": {
                      "description": "The single value selected for this field.",
                      "example": "SEV-1",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "A field with potentially multiple values selected.",
                  "properties": {
                    "type": {
                      "default": "multiselect",
                      "description": "Type of the multiple value field definitions.",
                      "enum": [
                        "multiselect",
                        "textarray",
                        "metrictag",
                        "autocomplete"
                      ],
                      "example": "multiselect",
                      "type": "string",
                      "x-enum-varnames": [
                        "MULTISELECT",
                        "TEXTARRAY",
                        "METRICTAG",
                        "AUTOCOMPLETE"
                      ]
                    },
                    "value": {
                      "description": "The multiple values selected for this field.",
                      "example": [
                        "1.0",
                        "1.1"
                      ],
                      "items": {
                        "description": "A value which has been selected for the parent field.",
                        "example": "1.1",
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "required": [
                "type"
              ],
              "type": "object"
            },
            "description": "A condensed view of the user-defined fields attached to incidents.",
            "example": {
              "severity": {
                "type": "dropdown",
                "value": "SEV-5"
              }
            },
            "type": "object"
          },
          "modified": {
            "description": "Timestamp when the incident was last modified.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "notification_handles": {
            "description": "Notification handles that will be notified of the incident during update.",
            "items": {
              "description": "A notification handle that will be notified at incident creation.",
              "properties": {
                "display_name": {
                  "description": "The name of the notified handle.",
                  "example": "Jane Doe",
                  "type": "string"
                },
                "handle": {
                  "description": "The email address used for the notification.",
                  "example": "@test.user@test.com",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "nullable": true,
            "type": "array"
          },
          "postmortem_id": {
            "description": "The UUID of the postmortem object attached to the incident.",
            "example": "00000000-0000-0000-7890-000000000000",
            "type": "string"
          },
          "public_id": {
            "description": "The monotonically increasing integer ID for the incident.",
            "example": 1,
            "format": "int64",
            "type": "integer"
          },
          "resolved": {
            "description": "Timestamp when the incident's state was set to resolved.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "time_to_detect": {
            "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "time_to_internal_response": {
            "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "time_to_repair": {
            "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "time_to_resolve": {
            "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          },
          "title": {
            "description": "The title of the incident, which summarizes what happened.",
            "example": "A test incident title",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "IncidentResponseData": {
        "description": "Incident data from a response.",
        "properties": {
          "attributes": {
            "description": "The incident's attributes from a response.",
            "properties": {
              "created": {
                "description": "Timestamp when the incident was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "customer_impact_duration": {
                "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              },
              "customer_impact_end": {
                "description": "Timestamp when customers were no longer impacted by the incident.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "customer_impact_scope": {
                "description": "A summary of the impact customers experienced during the incident.",
                "example": "An example customer impact scope",
                "nullable": true,
                "type": "string"
              },
              "customer_impact_start": {
                "description": "Timestamp when customers began being impacted by the incident.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "customer_impacted": {
                "description": "A flag indicating whether the incident caused customer impact.",
                "example": false,
                "type": "boolean"
              },
              "detected": {
                "description": "Timestamp when the incident was detected.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "fields": {
                "additionalProperties": {
                  "description": "Dynamic fields for which selections can be made, with field names as keys.",
                  "oneOf": [
                    {
                      "description": "A field with a single value selected.",
                      "properties": {
                        "type": {
                          "default": "dropdown",
                          "description": "Type of the single value field definitions.",
                          "enum": [
                            "dropdown",
                            "textbox"
                          ],
                          "example": "dropdown",
                          "type": "string",
                          "x-enum-varnames": [
                            "DROPDOWN",
                            "TEXTBOX"
                          ]
                        },
                        "value": {
                          "description": "The single value selected for this field.",
                          "example": "SEV-1",
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "A field with potentially multiple values selected.",
                      "properties": {
                        "type": {
                          "default": "multiselect",
                          "description": "Type of the multiple value field definitions.",
                          "enum": [
                            "multiselect",
                            "textarray",
                            "metrictag",
                            "autocomplete"
                          ],
                          "example": "multiselect",
                          "type": "string",
                          "x-enum-varnames": [
                            "MULTISELECT",
                            "TEXTARRAY",
                            "METRICTAG",
                            "AUTOCOMPLETE"
                          ]
                        },
                        "value": {
                          "description": "The multiple values selected for this field.",
                          "example": [
                            "1.0",
                            "1.1"
                          ],
                          "items": {
                            "description": "A value which has been selected for the parent field.",
                            "example": "1.1",
                            "type": "string"
                          },
                          "nullable": true,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                "description": "A condensed view of the user-defined fields attached to incidents.",
                "example": {
                  "severity": {
                    "type": "dropdown",
                    "value": "SEV-5"
                  }
                },
                "type": "object"
              },
              "modified": {
                "description": "Timestamp when the incident was last modified.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "notification_handles": {
                "description": "Notification handles that will be notified of the incident during update.",
                "items": {
                  "description": "A notification handle that will be notified at incident creation.",
                  "properties": {
                    "display_name": {
                      "description": "The name of the notified handle.",
                      "example": "Jane Doe",
                      "type": "string"
                    },
                    "handle": {
                      "description": "The email address used for the notification.",
                      "example": "@test.user@test.com",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "postmortem_id": {
                "description": "The UUID of the postmortem object attached to the incident.",
                "example": "00000000-0000-0000-7890-000000000000",
                "type": "string"
              },
              "public_id": {
                "description": "The monotonically increasing integer ID for the incident.",
                "example": 1,
                "format": "int64",
                "type": "integer"
              },
              "resolved": {
                "description": "Timestamp when the incident's state was set to resolved.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "time_to_detect": {
                "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              },
              "time_to_internal_response": {
                "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              },
              "time_to_repair": {
                "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              },
              "time_to_resolve": {
                "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              },
              "title": {
                "description": "The title of the incident, which summarizes what happened.",
                "example": "A test incident title",
                "type": "string"
              }
            },
            "required": [
              "title"
            ],
            "type": "object"
          },
          "id": {
            "description": "The incident's ID.",
            "example": "00000000-0000-0000-1234-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident's relationships from a response.",
            "properties": {
              "commander_user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "created_by_user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "integrations": {
                "description": "A relationship reference for multiple integration metadata objects.",
                "example": {
                  "data": [
                    {
                      "id": "00000000-abcd-0005-0000-000000000000",
                      "type": "incident_integrations"
                    },
                    {
                      "id": "00000000-abcd-0006-0000-000000000000",
                      "type": "incident_integrations"
                    }
                  ]
                },
                "properties": {
                  "data": {
                    "description": "The integration metadata relationship array",
                    "example": [
                      {
                        "id": "00000000-abcd-0003-0000-000000000000",
                        "type": "incident_integrations"
                      },
                      {
                        "id": "00000000-abcd-0004-0000-000000000000",
                        "type": "incident_integrations"
                      }
                    ],
                    "items": {
                      "description": "A relationship reference for an integration metadata object.",
                      "example": {
                        "id": "00000000-abcd-0002-0000-000000000000",
                        "type": "incident_integrations"
                      },
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the integration metadata.",
                          "example": "00000000-abcd-0001-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "incident_integrations",
                          "description": "Integration metadata resource type.",
                          "enum": [
                            "incident_integrations"
                          ],
                          "example": "incident_integrations",
                          "type": "string",
                          "x-enum-varnames": [
                            "INCIDENT_INTEGRATIONS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by_user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "postmortem": {
                "description": "A relationship reference for postmortems.",
                "example": {
                  "data": {
                    "id": "00000000-0000-abcd-3000-000000000000",
                    "type": "incident_postmortems"
                  }
                },
                "properties": {
                  "data": {
                    "description": "The postmortem relationship data.",
                    "example": {
                      "id": "00000000-0000-abcd-2000-000000000000",
                      "type": "incident_postmortems"
                    },
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the postmortem.",
                        "example": "00000000-0000-abcd-1000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "incident_postmortems",
                        "description": "Incident postmortem resource type.",
                        "enum": [
                          "incident_postmortems"
                        ],
                        "example": "incident_postmortems",
                        "type": "string",
                        "x-enum-varnames": [
                          "INCIDENT_POSTMORTEMS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "incidents",
            "description": "Incident resource type.",
            "enum": [
              "incidents"
            ],
            "example": "incidents",
            "type": "string",
            "x-enum-varnames": [
              "INCIDENTS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "IncidentResponseIncludedItem": {
        "description": "An object related to an incident that is included in the response.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "IncidentResponseMeta": {
        "description": "The metadata object containing pagination metadata.",
        "properties": {
          "pagination": {
            "description": "Pagination properties.",
            "properties": {
              "next_offset": {
                "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                "example": 1000,
                "format": "int64",
                "type": "integer"
              },
              "offset": {
                "description": "The index of the first element in the results.",
                "example": 10,
                "format": "int64",
                "type": "integer"
              },
              "size": {
                "description": "Maximum size of pages to return.",
                "example": 1000,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "IncidentResponseMetaPagination": {
        "description": "Pagination properties.",
        "properties": {
          "next_offset": {
            "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
            "example": 1000,
            "format": "int64",
            "type": "integer"
          },
          "offset": {
            "description": "The index of the first element in the results.",
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "size": {
            "description": "Maximum size of pages to return.",
            "example": 1000,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IncidentResponseRelationships": {
        "description": "The incident's relationships from a response.",
        "properties": {
          "commander_user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "nullable": true,
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "created_by_user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "integrations": {
            "description": "A relationship reference for multiple integration metadata objects.",
            "example": {
              "data": [
                {
                  "id": "00000000-abcd-0005-0000-000000000000",
                  "type": "incident_integrations"
                },
                {
                  "id": "00000000-abcd-0006-0000-000000000000",
                  "type": "incident_integrations"
                }
              ]
            },
            "properties": {
              "data": {
                "description": "The integration metadata relationship array",
                "example": [
                  {
                    "id": "00000000-abcd-0003-0000-000000000000",
                    "type": "incident_integrations"
                  },
                  {
                    "id": "00000000-abcd-0004-0000-000000000000",
                    "type": "incident_integrations"
                  }
                ],
                "items": {
                  "description": "A relationship reference for an integration metadata object.",
                  "example": {
                    "id": "00000000-abcd-0002-0000-000000000000",
                    "type": "incident_integrations"
                  },
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the integration metadata.",
                      "example": "00000000-abcd-0001-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "incident_integrations",
                      "description": "Integration metadata resource type.",
                      "enum": [
                        "incident_integrations"
                      ],
                      "example": "incident_integrations",
                      "type": "string",
                      "x-enum-varnames": [
                        "INCIDENT_INTEGRATIONS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "last_modified_by_user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "postmortem": {
            "description": "A relationship reference for postmortems.",
            "example": {
              "data": {
                "id": "00000000-0000-abcd-3000-000000000000",
                "type": "incident_postmortems"
              }
            },
            "properties": {
              "data": {
                "description": "The postmortem relationship data.",
                "example": {
                  "id": "00000000-0000-abcd-2000-000000000000",
                  "type": "incident_postmortems"
                },
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the postmortem.",
                    "example": "00000000-0000-abcd-1000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "incident_postmortems",
                    "description": "Incident postmortem resource type.",
                    "enum": [
                      "incident_postmortems"
                    ],
                    "example": "incident_postmortems",
                    "type": "string",
                    "x-enum-varnames": [
                      "INCIDENT_POSTMORTEMS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "IncidentServiceCreateAttributes": {
        "description": "The incident service's attributes for a create request.",
        "properties": {
          "name": {
            "description": "Name of the incident service.",
            "example": "an example service name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "IncidentServiceCreateData": {
        "description": "Incident Service payload for create requests.",
        "properties": {
          "attributes": {
            "description": "The incident service's attributes for a create request.",
            "properties": {
              "name": {
                "description": "Name of the incident service.",
                "example": "an example service name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "The incident service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Incident service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IncidentServiceCreateRequest": {
        "description": "Create request with an incident service payload.",
        "properties": {
          "data": {
            "description": "Incident Service payload for create requests.",
            "properties": {
              "attributes": {
                "description": "The incident service's attributes for a create request.",
                "properties": {
                  "name": {
                    "description": "Name of the incident service.",
                    "example": "an example service name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "The incident service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Incident service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentServiceIncludedItems": {
        "description": "An object related to an incident service which is present in the included payload.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "IncidentServiceRelationships": {
        "description": "The incident service's relationships.",
        "properties": {
          "created_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "last_modified_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "IncidentServiceResponse": {
        "description": "Response with an incident service payload.",
        "properties": {
          "data": {
            "description": "Incident Service data from responses.",
            "properties": {
              "attributes": {
                "description": "The incident service's attributes from a response.",
                "properties": {
                  "created": {
                    "description": "Timestamp of when the incident service was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified": {
                    "description": "Timestamp of when the incident service was modified.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the incident service.",
                    "example": "service name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The incident service's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Incident service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          },
          "included": {
            "description": "Included objects from relationships.",
            "items": {
              "description": "An object related to an incident service which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentServiceResponseAttributes": {
        "description": "The incident service's attributes from a response.",
        "properties": {
          "created": {
            "description": "Timestamp of when the incident service was created.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified": {
            "description": "Timestamp of when the incident service was modified.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the incident service.",
            "example": "service name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentServiceResponseData": {
        "description": "Incident Service data from responses.",
        "properties": {
          "attributes": {
            "description": "The incident service's attributes from a response.",
            "properties": {
              "created": {
                "description": "Timestamp of when the incident service was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified": {
                "description": "Timestamp of when the incident service was modified.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the incident service.",
                "example": "service name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The incident service's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Incident service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "IncidentServiceType": {
        "default": "services",
        "description": "Incident service resource type.",
        "enum": [
          "services"
        ],
        "example": "services",
        "type": "string",
        "x-enum-varnames": [
          "SERVICES"
        ]
      },
      "IncidentServiceUpdateAttributes": {
        "description": "The incident service's attributes for an update request.",
        "properties": {
          "name": {
            "description": "Name of the incident service.",
            "example": "an example service name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "IncidentServiceUpdateData": {
        "description": "Incident Service payload for update requests.",
        "properties": {
          "attributes": {
            "description": "The incident service's attributes for an update request.",
            "properties": {
              "name": {
                "description": "Name of the incident service.",
                "example": "an example service name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "The incident service's ID.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident service's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "services",
            "description": "Incident service resource type.",
            "enum": [
              "services"
            ],
            "example": "services",
            "type": "string",
            "x-enum-varnames": [
              "SERVICES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IncidentServiceUpdateRequest": {
        "description": "Update request with an incident service payload.",
        "properties": {
          "data": {
            "description": "Incident Service payload for update requests.",
            "properties": {
              "attributes": {
                "description": "The incident service's attributes for an update request.",
                "properties": {
                  "name": {
                    "description": "Name of the incident service.",
                    "example": "an example service name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "The incident service's ID.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident service's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "services",
                "description": "Incident service resource type.",
                "enum": [
                  "services"
                ],
                "example": "services",
                "type": "string",
                "x-enum-varnames": [
                  "SERVICES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentServicesResponse": {
        "description": "Response with a list of incident service payloads.",
        "properties": {
          "data": {
            "description": "An array of incident services.",
            "example": [
              {
                "id": "00000000-0000-0000-0000-000000000000",
                "type": "services"
              }
            ],
            "items": {
              "description": "Incident Service data from responses.",
              "properties": {
                "attributes": {
                  "description": "The incident service's attributes from a response.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when the incident service was created.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified": {
                      "description": "Timestamp of when the incident service was modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the incident service.",
                      "example": "service name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The incident service's ID.",
                  "example": "00000000-0000-0000-0000-000000000000",
                  "type": "string"
                },
                "relationships": {
                  "description": "The incident service's relationships.",
                  "properties": {
                    "created_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "last_modified_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "default": "services",
                  "description": "Incident service resource type.",
                  "enum": [
                    "services"
                  ],
                  "example": "services",
                  "type": "string",
                  "x-enum-varnames": [
                    "SERVICES"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included related resources which the user requested.",
            "items": {
              "description": "An object related to an incident service which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "meta": {
            "description": "The metadata object containing pagination metadata.",
            "properties": {
              "pagination": {
                "description": "Pagination properties.",
                "properties": {
                  "next_offset": {
                    "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "offset": {
                    "description": "The index of the first element in the results.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "size": {
                    "description": "Maximum size of pages to return.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentTeamCreateAttributes": {
        "description": "The incident team's attributes for a create request.",
        "properties": {
          "name": {
            "description": "Name of the incident team.",
            "example": "team name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "IncidentTeamCreateData": {
        "description": "Incident Team data for a create request.",
        "properties": {
          "attributes": {
            "description": "The incident team's attributes for a create request.",
            "properties": {
              "name": {
                "description": "Name of the incident team.",
                "example": "team name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "The incident team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Incident Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IncidentTeamCreateRequest": {
        "description": "Create request with an incident team payload.",
        "properties": {
          "data": {
            "description": "Incident Team data for a create request.",
            "properties": {
              "attributes": {
                "description": "The incident team's attributes for a create request.",
                "properties": {
                  "name": {
                    "description": "Name of the incident team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "The incident team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Incident Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentTeamIncludedItems": {
        "description": "An object related to an incident team which is present in the included payload.",
        "oneOf": [
          {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "IncidentTeamRelationships": {
        "description": "The incident team's relationships.",
        "properties": {
          "created_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "last_modified_by": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "IncidentTeamResponse": {
        "description": "Response with an incident team payload.",
        "properties": {
          "data": {
            "description": "Incident Team data from a response.",
            "properties": {
              "attributes": {
                "description": "The incident team's attributes from a response.",
                "properties": {
                  "created": {
                    "description": "Timestamp of when the incident team was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified": {
                    "description": "Timestamp of when the incident team was modified.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the incident team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The incident team's ID.",
                "example": "00000000-7ea3-0000-000a-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Incident Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Included objects from relationships.",
            "items": {
              "description": "An object related to an incident team which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentTeamResponseAttributes": {
        "description": "The incident team's attributes from a response.",
        "properties": {
          "created": {
            "description": "Timestamp of when the incident team was created.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified": {
            "description": "Timestamp of when the incident team was modified.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the incident team.",
            "example": "team name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentTeamResponseData": {
        "description": "Incident Team data from a response.",
        "properties": {
          "attributes": {
            "description": "The incident team's attributes from a response.",
            "properties": {
              "created": {
                "description": "Timestamp of when the incident team was created.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified": {
                "description": "Timestamp of when the incident team was modified.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the incident team.",
                "example": "team name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The incident team's ID.",
            "example": "00000000-7ea3-0000-000a-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Incident Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "type": "object"
      },
      "IncidentTeamType": {
        "default": "teams",
        "description": "Incident Team resource type.",
        "enum": [
          "teams"
        ],
        "example": "teams",
        "type": "string",
        "x-enum-varnames": [
          "TEAMS"
        ]
      },
      "IncidentTeamUpdateAttributes": {
        "description": "The incident team's attributes for an update request.",
        "properties": {
          "name": {
            "description": "Name of the incident team.",
            "example": "team name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "IncidentTeamUpdateData": {
        "description": "Incident Team data for an update request.",
        "properties": {
          "attributes": {
            "description": "The incident team's attributes for an update request.",
            "properties": {
              "name": {
                "description": "Name of the incident team.",
                "example": "team name",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "The incident team's ID.",
            "example": "00000000-7ea3-0000-0001-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident team's relationships.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "last_modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "default": "teams",
            "description": "Incident Team resource type.",
            "enum": [
              "teams"
            ],
            "example": "teams",
            "type": "string",
            "x-enum-varnames": [
              "TEAMS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IncidentTeamUpdateRequest": {
        "description": "Update request with an incident team payload.",
        "properties": {
          "data": {
            "description": "Incident Team data for an update request.",
            "properties": {
              "attributes": {
                "description": "The incident team's attributes for an update request.",
                "properties": {
                  "name": {
                    "description": "Name of the incident team.",
                    "example": "team name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "The incident team's ID.",
                "example": "00000000-7ea3-0000-0001-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident team's relationships.",
                "properties": {
                  "created_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "last_modified_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "readOnly": true,
                "type": "object"
              },
              "type": {
                "default": "teams",
                "description": "Incident Team resource type.",
                "enum": [
                  "teams"
                ],
                "example": "teams",
                "type": "string",
                "x-enum-varnames": [
                  "TEAMS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentTeamsResponse": {
        "description": "Response with a list of incident team payloads.",
        "properties": {
          "data": {
            "description": "An array of incident teams.",
            "example": [
              {
                "attributes": {
                  "name": "team name"
                },
                "id": "00000000-7ea3-0000-0000-000000000000",
                "type": "teams"
              }
            ],
            "items": {
              "description": "Incident Team data from a response.",
              "properties": {
                "attributes": {
                  "description": "The incident team's attributes from a response.",
                  "properties": {
                    "created": {
                      "description": "Timestamp of when the incident team was created.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified": {
                      "description": "Timestamp of when the incident team was modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the incident team.",
                      "example": "team name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The incident team's ID.",
                  "example": "00000000-7ea3-0000-000a-000000000000",
                  "type": "string"
                },
                "relationships": {
                  "description": "The incident team's relationships.",
                  "properties": {
                    "created_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "last_modified_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                },
                "type": {
                  "default": "teams",
                  "description": "Incident Team resource type.",
                  "enum": [
                    "teams"
                  ],
                  "example": "teams",
                  "type": "string",
                  "x-enum-varnames": [
                    "TEAMS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included related resources which the user requested.",
            "items": {
              "description": "An object related to an incident team which is present in the included payload.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "meta": {
            "description": "The metadata object containing pagination metadata.",
            "properties": {
              "pagination": {
                "description": "Pagination properties.",
                "properties": {
                  "next_offset": {
                    "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "offset": {
                    "description": "The index of the first element in the results.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "size": {
                    "description": "Maximum size of pages to return.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentTimelineCellCreateAttributes": {
        "description": "The timeline cell's attributes for a create request.",
        "oneOf": [
          {
            "description": "Timeline cell data for Markdown timeline cells for a create request.",
            "properties": {
              "cell_type": {
                "default": "markdown",
                "description": "Type of the Markdown timeline cell.",
                "enum": [
                  "markdown"
                ],
                "example": "markdown",
                "type": "string",
                "x-enum-varnames": [
                  "MARKDOWN"
                ]
              },
              "content": {
                "description": "The Markdown timeline cell contents.",
                "properties": {
                  "content": {
                    "description": "The Markdown content of the cell.",
                    "example": "An example timeline cell message.",
                    "nullable": false,
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "important": {
                "default": false,
                "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
                "example": false,
                "type": "boolean"
              }
            },
            "required": [
              "content",
              "cell_type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "IncidentTimelineCellMarkdownContentType": {
        "default": "markdown",
        "description": "Type of the Markdown timeline cell.",
        "enum": [
          "markdown"
        ],
        "example": "markdown",
        "type": "string",
        "x-enum-varnames": [
          "MARKDOWN"
        ]
      },
      "IncidentTimelineCellMarkdownCreateAttributes": {
        "description": "Timeline cell data for Markdown timeline cells for a create request.",
        "properties": {
          "cell_type": {
            "default": "markdown",
            "description": "Type of the Markdown timeline cell.",
            "enum": [
              "markdown"
            ],
            "example": "markdown",
            "type": "string",
            "x-enum-varnames": [
              "MARKDOWN"
            ]
          },
          "content": {
            "description": "The Markdown timeline cell contents.",
            "properties": {
              "content": {
                "description": "The Markdown content of the cell.",
                "example": "An example timeline cell message.",
                "nullable": false,
                "type": "string"
              }
            },
            "type": "object"
          },
          "important": {
            "default": false,
            "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "content",
          "cell_type"
        ],
        "type": "object"
      },
      "IncidentTimelineCellMarkdownCreateAttributesContent": {
        "description": "The Markdown timeline cell contents.",
        "properties": {
          "content": {
            "description": "The Markdown content of the cell.",
            "example": "An example timeline cell message.",
            "nullable": false,
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentType": {
        "default": "incidents",
        "description": "Incident resource type.",
        "enum": [
          "incidents"
        ],
        "example": "incidents",
        "type": "string",
        "x-enum-varnames": [
          "INCIDENTS"
        ]
      },
      "IncidentUpdateAttributes": {
        "description": "The incident's attributes for an update request.",
        "properties": {
          "customer_impact_end": {
            "description": "Timestamp when customers were no longer impacted by the incident.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "customer_impact_scope": {
            "description": "A summary of the impact customers experienced during the incident.",
            "example": "Example customer impact scope",
            "type": "string"
          },
          "customer_impact_start": {
            "description": "Timestamp when customers began being impacted by the incident.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "customer_impacted": {
            "description": "A flag indicating whether the incident caused customer impact.",
            "example": false,
            "type": "boolean"
          },
          "detected": {
            "description": "Timestamp when the incident was detected.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "description": "Dynamic fields for which selections can be made, with field names as keys.",
              "oneOf": [
                {
                  "description": "A field with a single value selected.",
                  "properties": {
                    "type": {
                      "default": "dropdown",
                      "description": "Type of the single value field definitions.",
                      "enum": [
                        "dropdown",
                        "textbox"
                      ],
                      "example": "dropdown",
                      "type": "string",
                      "x-enum-varnames": [
                        "DROPDOWN",
                        "TEXTBOX"
                      ]
                    },
                    "value": {
                      "description": "The single value selected for this field.",
                      "example": "SEV-1",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "A field with potentially multiple values selected.",
                  "properties": {
                    "type": {
                      "default": "multiselect",
                      "description": "Type of the multiple value field definitions.",
                      "enum": [
                        "multiselect",
                        "textarray",
                        "metrictag",
                        "autocomplete"
                      ],
                      "example": "multiselect",
                      "type": "string",
                      "x-enum-varnames": [
                        "MULTISELECT",
                        "TEXTARRAY",
                        "METRICTAG",
                        "AUTOCOMPLETE"
                      ]
                    },
                    "value": {
                      "description": "The multiple values selected for this field.",
                      "example": [
                        "1.0",
                        "1.1"
                      ],
                      "items": {
                        "description": "A value which has been selected for the parent field.",
                        "example": "1.1",
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "required": [
                "type"
              ],
              "type": "object"
            },
            "description": "A condensed view of the user-defined fields for which to update selections.",
            "example": {
              "severity": {
                "type": "dropdown",
                "value": "SEV-5"
              }
            },
            "type": "object"
          },
          "notification_handles": {
            "description": "Notification handles that will be notified of the incident during update.",
            "items": {
              "description": "A notification handle that will be notified at incident creation.",
              "properties": {
                "display_name": {
                  "description": "The name of the notified handle.",
                  "example": "Jane Doe",
                  "type": "string"
                },
                "handle": {
                  "description": "The email address used for the notification.",
                  "example": "@test.user@test.com",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "resolved": {
            "description": "Timestamp when the incident's state was set to resolved.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "description": "The title of the incident, which summarizes what happened.",
            "example": "A test incident title",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IncidentUpdateData": {
        "description": "Incident data for an update request.",
        "properties": {
          "attributes": {
            "description": "The incident's attributes for an update request.",
            "properties": {
              "customer_impact_end": {
                "description": "Timestamp when customers were no longer impacted by the incident.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "customer_impact_scope": {
                "description": "A summary of the impact customers experienced during the incident.",
                "example": "Example customer impact scope",
                "type": "string"
              },
              "customer_impact_start": {
                "description": "Timestamp when customers began being impacted by the incident.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "customer_impacted": {
                "description": "A flag indicating whether the incident caused customer impact.",
                "example": false,
                "type": "boolean"
              },
              "detected": {
                "description": "Timestamp when the incident was detected.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "fields": {
                "additionalProperties": {
                  "description": "Dynamic fields for which selections can be made, with field names as keys.",
                  "oneOf": [
                    {
                      "description": "A field with a single value selected.",
                      "properties": {
                        "type": {
                          "default": "dropdown",
                          "description": "Type of the single value field definitions.",
                          "enum": [
                            "dropdown",
                            "textbox"
                          ],
                          "example": "dropdown",
                          "type": "string",
                          "x-enum-varnames": [
                            "DROPDOWN",
                            "TEXTBOX"
                          ]
                        },
                        "value": {
                          "description": "The single value selected for this field.",
                          "example": "SEV-1",
                          "nullable": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "description": "A field with potentially multiple values selected.",
                      "properties": {
                        "type": {
                          "default": "multiselect",
                          "description": "Type of the multiple value field definitions.",
                          "enum": [
                            "multiselect",
                            "textarray",
                            "metrictag",
                            "autocomplete"
                          ],
                          "example": "multiselect",
                          "type": "string",
                          "x-enum-varnames": [
                            "MULTISELECT",
                            "TEXTARRAY",
                            "METRICTAG",
                            "AUTOCOMPLETE"
                          ]
                        },
                        "value": {
                          "description": "The multiple values selected for this field.",
                          "example": [
                            "1.0",
                            "1.1"
                          ],
                          "items": {
                            "description": "A value which has been selected for the parent field.",
                            "example": "1.1",
                            "type": "string"
                          },
                          "nullable": true,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                "description": "A condensed view of the user-defined fields for which to update selections.",
                "example": {
                  "severity": {
                    "type": "dropdown",
                    "value": "SEV-5"
                  }
                },
                "type": "object"
              },
              "notification_handles": {
                "description": "Notification handles that will be notified of the incident during update.",
                "items": {
                  "description": "A notification handle that will be notified at incident creation.",
                  "properties": {
                    "display_name": {
                      "description": "The name of the notified handle.",
                      "example": "Jane Doe",
                      "type": "string"
                    },
                    "handle": {
                      "description": "The email address used for the notification.",
                      "example": "@test.user@test.com",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "resolved": {
                "description": "Timestamp when the incident's state was set to resolved.",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              },
              "title": {
                "description": "The title of the incident, which summarizes what happened.",
                "example": "A test incident title",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The team's ID.",
            "example": "00000000-0000-0000-4567-000000000000",
            "type": "string"
          },
          "relationships": {
            "description": "The incident's relationships for an update request.",
            "properties": {
              "commander_user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "integrations": {
                "description": "A relationship reference for multiple integration metadata objects.",
                "example": {
                  "data": [
                    {
                      "id": "00000000-abcd-0005-0000-000000000000",
                      "type": "incident_integrations"
                    },
                    {
                      "id": "00000000-abcd-0006-0000-000000000000",
                      "type": "incident_integrations"
                    }
                  ]
                },
                "properties": {
                  "data": {
                    "description": "The integration metadata relationship array",
                    "example": [
                      {
                        "id": "00000000-abcd-0003-0000-000000000000",
                        "type": "incident_integrations"
                      },
                      {
                        "id": "00000000-abcd-0004-0000-000000000000",
                        "type": "incident_integrations"
                      }
                    ],
                    "items": {
                      "description": "A relationship reference for an integration metadata object.",
                      "example": {
                        "id": "00000000-abcd-0002-0000-000000000000",
                        "type": "incident_integrations"
                      },
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the integration metadata.",
                          "example": "00000000-abcd-0001-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "incident_integrations",
                          "description": "Integration metadata resource type.",
                          "enum": [
                            "incident_integrations"
                          ],
                          "example": "incident_integrations",
                          "type": "string",
                          "x-enum-varnames": [
                            "INCIDENT_INTEGRATIONS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "postmortem": {
                "description": "A relationship reference for postmortems.",
                "example": {
                  "data": {
                    "id": "00000000-0000-abcd-3000-000000000000",
                    "type": "incident_postmortems"
                  }
                },
                "properties": {
                  "data": {
                    "description": "The postmortem relationship data.",
                    "example": {
                      "id": "00000000-0000-abcd-2000-000000000000",
                      "type": "incident_postmortems"
                    },
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the postmortem.",
                        "example": "00000000-0000-abcd-1000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "incident_postmortems",
                        "description": "Incident postmortem resource type.",
                        "enum": [
                          "incident_postmortems"
                        ],
                        "example": "incident_postmortems",
                        "type": "string",
                        "x-enum-varnames": [
                          "INCIDENT_POSTMORTEMS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "incidents",
            "description": "Incident resource type.",
            "enum": [
              "incidents"
            ],
            "example": "incidents",
            "type": "string",
            "x-enum-varnames": [
              "INCIDENTS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "IncidentUpdateRelationships": {
        "description": "The incident's relationships for an update request.",
        "properties": {
          "commander_user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "nullable": true,
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "integrations": {
            "description": "A relationship reference for multiple integration metadata objects.",
            "example": {
              "data": [
                {
                  "id": "00000000-abcd-0005-0000-000000000000",
                  "type": "incident_integrations"
                },
                {
                  "id": "00000000-abcd-0006-0000-000000000000",
                  "type": "incident_integrations"
                }
              ]
            },
            "properties": {
              "data": {
                "description": "The integration metadata relationship array",
                "example": [
                  {
                    "id": "00000000-abcd-0003-0000-000000000000",
                    "type": "incident_integrations"
                  },
                  {
                    "id": "00000000-abcd-0004-0000-000000000000",
                    "type": "incident_integrations"
                  }
                ],
                "items": {
                  "description": "A relationship reference for an integration metadata object.",
                  "example": {
                    "id": "00000000-abcd-0002-0000-000000000000",
                    "type": "incident_integrations"
                  },
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the integration metadata.",
                      "example": "00000000-abcd-0001-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "incident_integrations",
                      "description": "Integration metadata resource type.",
                      "enum": [
                        "incident_integrations"
                      ],
                      "example": "incident_integrations",
                      "type": "string",
                      "x-enum-varnames": [
                        "INCIDENT_INTEGRATIONS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "postmortem": {
            "description": "A relationship reference for postmortems.",
            "example": {
              "data": {
                "id": "00000000-0000-abcd-3000-000000000000",
                "type": "incident_postmortems"
              }
            },
            "properties": {
              "data": {
                "description": "The postmortem relationship data.",
                "example": {
                  "id": "00000000-0000-abcd-2000-000000000000",
                  "type": "incident_postmortems"
                },
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the postmortem.",
                    "example": "00000000-0000-abcd-1000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "incident_postmortems",
                    "description": "Incident postmortem resource type.",
                    "enum": [
                      "incident_postmortems"
                    ],
                    "example": "incident_postmortems",
                    "type": "string",
                    "x-enum-varnames": [
                      "INCIDENT_POSTMORTEMS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "IncidentUpdateRequest": {
        "description": "Update request for an incident.",
        "properties": {
          "data": {
            "description": "Incident data for an update request.",
            "properties": {
              "attributes": {
                "description": "The incident's attributes for an update request.",
                "properties": {
                  "customer_impact_end": {
                    "description": "Timestamp when customers were no longer impacted by the incident.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "customer_impact_scope": {
                    "description": "A summary of the impact customers experienced during the incident.",
                    "example": "Example customer impact scope",
                    "type": "string"
                  },
                  "customer_impact_start": {
                    "description": "Timestamp when customers began being impacted by the incident.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "customer_impacted": {
                    "description": "A flag indicating whether the incident caused customer impact.",
                    "example": false,
                    "type": "boolean"
                  },
                  "detected": {
                    "description": "Timestamp when the incident was detected.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "fields": {
                    "additionalProperties": {
                      "description": "Dynamic fields for which selections can be made, with field names as keys.",
                      "oneOf": [
                        {
                          "description": "A field with a single value selected.",
                          "properties": {
                            "type": {
                              "default": "dropdown",
                              "description": "Type of the single value field definitions.",
                              "enum": [
                                "dropdown",
                                "textbox"
                              ],
                              "example": "dropdown",
                              "type": "string",
                              "x-enum-varnames": [
                                "DROPDOWN",
                                "TEXTBOX"
                              ]
                            },
                            "value": {
                              "description": "The single value selected for this field.",
                              "example": "SEV-1",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "A field with potentially multiple values selected.",
                          "properties": {
                            "type": {
                              "default": "multiselect",
                              "description": "Type of the multiple value field definitions.",
                              "enum": [
                                "multiselect",
                                "textarray",
                                "metrictag",
                                "autocomplete"
                              ],
                              "example": "multiselect",
                              "type": "string",
                              "x-enum-varnames": [
                                "MULTISELECT",
                                "TEXTARRAY",
                                "METRICTAG",
                                "AUTOCOMPLETE"
                              ]
                            },
                            "value": {
                              "description": "The multiple values selected for this field.",
                              "example": [
                                "1.0",
                                "1.1"
                              ],
                              "items": {
                                "description": "A value which has been selected for the parent field.",
                                "example": "1.1",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "description": "A condensed view of the user-defined fields for which to update selections.",
                    "example": {
                      "severity": {
                        "type": "dropdown",
                        "value": "SEV-5"
                      }
                    },
                    "type": "object"
                  },
                  "notification_handles": {
                    "description": "Notification handles that will be notified of the incident during update.",
                    "items": {
                      "description": "A notification handle that will be notified at incident creation.",
                      "properties": {
                        "display_name": {
                          "description": "The name of the notified handle.",
                          "example": "Jane Doe",
                          "type": "string"
                        },
                        "handle": {
                          "description": "The email address used for the notification.",
                          "example": "@test.user@test.com",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "resolved": {
                    "description": "Timestamp when the incident's state was set to resolved.",
                    "format": "date-time",
                    "nullable": true,
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the incident, which summarizes what happened.",
                    "example": "A test incident title",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The team's ID.",
                "example": "00000000-0000-0000-4567-000000000000",
                "type": "string"
              },
              "relationships": {
                "description": "The incident's relationships for an update request.",
                "properties": {
                  "commander_user": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "integrations": {
                    "description": "A relationship reference for multiple integration metadata objects.",
                    "example": {
                      "data": [
                        {
                          "id": "00000000-abcd-0005-0000-000000000000",
                          "type": "incident_integrations"
                        },
                        {
                          "id": "00000000-abcd-0006-0000-000000000000",
                          "type": "incident_integrations"
                        }
                      ]
                    },
                    "properties": {
                      "data": {
                        "description": "The integration metadata relationship array",
                        "example": [
                          {
                            "id": "00000000-abcd-0003-0000-000000000000",
                            "type": "incident_integrations"
                          },
                          {
                            "id": "00000000-abcd-0004-0000-000000000000",
                            "type": "incident_integrations"
                          }
                        ],
                        "items": {
                          "description": "A relationship reference for an integration metadata object.",
                          "example": {
                            "id": "00000000-abcd-0002-0000-000000000000",
                            "type": "incident_integrations"
                          },
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the integration metadata.",
                              "example": "00000000-abcd-0001-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "incident_integrations",
                              "description": "Integration metadata resource type.",
                              "enum": [
                                "incident_integrations"
                              ],
                              "example": "incident_integrations",
                              "type": "string",
                              "x-enum-varnames": [
                                "INCIDENT_INTEGRATIONS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "postmortem": {
                    "description": "A relationship reference for postmortems.",
                    "example": {
                      "data": {
                        "id": "00000000-0000-abcd-3000-000000000000",
                        "type": "incident_postmortems"
                      }
                    },
                    "properties": {
                      "data": {
                        "description": "The postmortem relationship data.",
                        "example": {
                          "id": "00000000-0000-abcd-2000-000000000000",
                          "type": "incident_postmortems"
                        },
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the postmortem.",
                            "example": "00000000-0000-abcd-1000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "incident_postmortems",
                            "description": "Incident postmortem resource type.",
                            "enum": [
                              "incident_postmortems"
                            ],
                            "example": "incident_postmortems",
                            "type": "string",
                            "x-enum-varnames": [
                              "INCIDENT_POSTMORTEMS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "incidents",
                "description": "Incident resource type.",
                "enum": [
                  "incidents"
                ],
                "example": "incidents",
                "type": "string",
                "x-enum-varnames": [
                  "INCIDENTS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IncidentsResponse": {
        "description": "Response with a list of incidents.",
        "properties": {
          "data": {
            "description": "An array of incidents.",
            "example": [
              {
                "attributes": {
                  "created": "2020-04-21T15:34:08.627205+00:00",
                  "creation_idempotency_key": null,
                  "customer_impact_duration": 0,
                  "customer_impact_end": null,
                  "customer_impact_scope": null,
                  "customer_impact_start": null,
                  "customer_impacted": false,
                  "detected": "2020-04-14T00:00:00+00:00",
                  "modified": "2020-09-17T14:16:58.696424+00:00",
                  "postmortem_id": "00000000-0000-bbbb-0000-000000000000",
                  "public_id": 1,
                  "resolved": null,
                  "severity": "SEV-1",
                  "time_to_detect": 0,
                  "time_to_internal_response": 0,
                  "time_to_repair": 0,
                  "time_to_resolve": 0,
                  "title": "Example Incident"
                },
                "id": "00000000-aaaa-0000-0000-000000000000",
                "relationships": {
                  "commander_user": {
                    "data": {
                      "id": "00000000-0000-0000-cccc-000000000000",
                      "type": "users"
                    }
                  },
                  "created_by_user": {
                    "data": {
                      "id": "00000000-0000-0000-cccc-000000000000",
                      "type": "users"
                    }
                  },
                  "integrations": {
                    "data": [
                      {
                        "id": "00000000-0000-0000-4444-000000000000",
                        "type": "incident_integrations"
                      },
                      {
                        "id": "00000000-0000-0000-5555-000000000000",
                        "type": "incident_integrations"
                      }
                    ]
                  },
                  "last_modified_by_user": {
                    "data": {
                      "id": "00000000-0000-0000-cccc-000000000000",
                      "type": "users"
                    }
                  },
                  "postmortem": {
                    "data": {
                      "id": "00000000-9999-0000-0000-000000000000",
                      "type": "incident_postmortems"
                    }
                  }
                },
                "type": "incidents"
              },
              {
                "attributes": {
                  "created": "2020-04-21T15:34:08.627205+00:00",
                  "creation_idempotency_key": null,
                  "customer_impact_duration": 0,
                  "customer_impact_end": null,
                  "customer_impact_scope": null,
                  "customer_impact_start": null,
                  "customer_impacted": false,
                  "detected": "2020-04-14T00:00:00+00:00",
                  "modified": "2020-09-17T14:16:58.696424+00:00",
                  "postmortem_id": "00000000-6006-0000-0000-000000000000",
                  "public_id": 2,
                  "resolved": null,
                  "severity": "SEV-5",
                  "time_to_detect": 0,
                  "time_to_internal_response": 0,
                  "time_to_repair": 0,
                  "time_to_resolve": 0,
                  "title": "Example Incident 2"
                },
                "id": "00000000-1111-0000-0000-000000000000",
                "relationships": {
                  "commander_user": {
                    "data": {
                      "id": "00000000-aaaa-0000-0000-000000000000",
                      "type": "users"
                    }
                  },
                  "created_by_user": {
                    "data": {
                      "id": "00000000-aaaa-0000-0000-000000000000",
                      "type": "users"
                    }
                  },
                  "integrations": {
                    "data": [
                      {
                        "id": "00000000-0000-0000-0001-000000000000",
                        "type": "incident_integrations"
                      },
                      {
                        "id": "00000000-0000-0000-0002-000000000000",
                        "type": "incident_integrations"
                      }
                    ]
                  },
                  "last_modified_by_user": {
                    "data": {
                      "id": "00000000-aaaa-0000-0000-000000000000",
                      "type": "users"
                    }
                  },
                  "postmortem": {
                    "data": {
                      "id": "00000000-6006-0000-0000-000000000000",
                      "type": "incident_postmortems"
                    }
                  }
                },
                "type": "incidents"
              }
            ],
            "items": {
              "description": "Incident data from a response.",
              "properties": {
                "attributes": {
                  "description": "The incident's attributes from a response.",
                  "properties": {
                    "created": {
                      "description": "Timestamp when the incident was created.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "customer_impact_duration": {
                      "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "customer_impact_end": {
                      "description": "Timestamp when customers were no longer impacted by the incident.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_impact_scope": {
                      "description": "A summary of the impact customers experienced during the incident.",
                      "example": "An example customer impact scope",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_impact_start": {
                      "description": "Timestamp when customers began being impacted by the incident.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "customer_impacted": {
                      "description": "A flag indicating whether the incident caused customer impact.",
                      "example": false,
                      "type": "boolean"
                    },
                    "detected": {
                      "description": "Timestamp when the incident was detected.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "fields": {
                      "additionalProperties": {
                        "description": "Dynamic fields for which selections can be made, with field names as keys.",
                        "oneOf": [
                          {
                            "description": "A field with a single value selected.",
                            "properties": {
                              "type": {
                                "default": "dropdown",
                                "description": "Type of the single value field definitions.",
                                "enum": [
                                  "dropdown",
                                  "textbox"
                                ],
                                "example": "dropdown",
                                "type": "string",
                                "x-enum-varnames": [
                                  "DROPDOWN",
                                  "TEXTBOX"
                                ]
                              },
                              "value": {
                                "description": "The single value selected for this field.",
                                "example": "SEV-1",
                                "nullable": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "A field with potentially multiple values selected.",
                            "properties": {
                              "type": {
                                "default": "multiselect",
                                "description": "Type of the multiple value field definitions.",
                                "enum": [
                                  "multiselect",
                                  "textarray",
                                  "metrictag",
                                  "autocomplete"
                                ],
                                "example": "multiselect",
                                "type": "string",
                                "x-enum-varnames": [
                                  "MULTISELECT",
                                  "TEXTARRAY",
                                  "METRICTAG",
                                  "AUTOCOMPLETE"
                                ]
                              },
                              "value": {
                                "description": "The multiple values selected for this field.",
                                "example": [
                                  "1.0",
                                  "1.1"
                                ],
                                "items": {
                                  "description": "A value which has been selected for the parent field.",
                                  "example": "1.1",
                                  "type": "string"
                                },
                                "nullable": true,
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "description": "A condensed view of the user-defined fields attached to incidents.",
                      "example": {
                        "severity": {
                          "type": "dropdown",
                          "value": "SEV-5"
                        }
                      },
                      "type": "object"
                    },
                    "modified": {
                      "description": "Timestamp when the incident was last modified.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "notification_handles": {
                      "description": "Notification handles that will be notified of the incident during update.",
                      "items": {
                        "description": "A notification handle that will be notified at incident creation.",
                        "properties": {
                          "display_name": {
                            "description": "The name of the notified handle.",
                            "example": "Jane Doe",
                            "type": "string"
                          },
                          "handle": {
                            "description": "The email address used for the notification.",
                            "example": "@test.user@test.com",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "nullable": true,
                      "type": "array"
                    },
                    "postmortem_id": {
                      "description": "The UUID of the postmortem object attached to the incident.",
                      "example": "00000000-0000-0000-7890-000000000000",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The monotonically increasing integer ID for the incident.",
                      "example": 1,
                      "format": "int64",
                      "type": "integer"
                    },
                    "resolved": {
                      "description": "Timestamp when the incident's state was set to resolved.",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    },
                    "time_to_detect": {
                      "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "time_to_internal_response": {
                      "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "time_to_repair": {
                      "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "time_to_resolve": {
                      "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    },
                    "title": {
                      "description": "The title of the incident, which summarizes what happened.",
                      "example": "A test incident title",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title"
                  ],
                  "type": "object"
                },
                "id": {
                  "description": "The incident's ID.",
                  "example": "00000000-0000-0000-1234-000000000000",
                  "type": "string"
                },
                "relationships": {
                  "description": "The incident's relationships from a response.",
                  "properties": {
                    "commander_user": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "nullable": true,
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "created_by_user": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "integrations": {
                      "description": "A relationship reference for multiple integration metadata objects.",
                      "example": {
                        "data": [
                          {
                            "id": "00000000-abcd-0005-0000-000000000000",
                            "type": "incident_integrations"
                          },
                          {
                            "id": "00000000-abcd-0006-0000-000000000000",
                            "type": "incident_integrations"
                          }
                        ]
                      },
                      "properties": {
                        "data": {
                          "description": "The integration metadata relationship array",
                          "example": [
                            {
                              "id": "00000000-abcd-0003-0000-000000000000",
                              "type": "incident_integrations"
                            },
                            {
                              "id": "00000000-abcd-0004-0000-000000000000",
                              "type": "incident_integrations"
                            }
                          ],
                          "items": {
                            "description": "A relationship reference for an integration metadata object.",
                            "example": {
                              "id": "00000000-abcd-0002-0000-000000000000",
                              "type": "incident_integrations"
                            },
                            "properties": {
                              "id": {
                                "description": "A unique identifier that represents the integration metadata.",
                                "example": "00000000-abcd-0001-0000-000000000000",
                                "type": "string"
                              },
                              "type": {
                                "default": "incident_integrations",
                                "description": "Integration metadata resource type.",
                                "enum": [
                                  "incident_integrations"
                                ],
                                "example": "incident_integrations",
                                "type": "string",
                                "x-enum-varnames": [
                                  "INCIDENT_INTEGRATIONS"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "last_modified_by_user": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "postmortem": {
                      "description": "A relationship reference for postmortems.",
                      "example": {
                        "data": {
                          "id": "00000000-0000-abcd-3000-000000000000",
                          "type": "incident_postmortems"
                        }
                      },
                      "properties": {
                        "data": {
                          "description": "The postmortem relationship data.",
                          "example": {
                            "id": "00000000-0000-abcd-2000-000000000000",
                            "type": "incident_postmortems"
                          },
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the postmortem.",
                              "example": "00000000-0000-abcd-1000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "incident_postmortems",
                              "description": "Incident postmortem resource type.",
                              "enum": [
                                "incident_postmortems"
                              ],
                              "example": "incident_postmortems",
                              "type": "string",
                              "x-enum-varnames": [
                                "INCIDENT_POSTMORTEMS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "incidents",
                  "description": "Incident resource type.",
                  "enum": [
                    "incidents"
                  ],
                  "example": "incidents",
                  "type": "string",
                  "x-enum-varnames": [
                    "INCIDENTS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Included related resources that the user requested.",
            "items": {
              "description": "An object related to an incident that is included in the response.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "meta": {
            "description": "The metadata object containing pagination metadata.",
            "properties": {
              "pagination": {
                "description": "Pagination properties.",
                "properties": {
                  "next_offset": {
                    "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  },
                  "offset": {
                    "description": "The index of the first element in the results.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "size": {
                    "description": "Maximum size of pages to return.",
                    "example": 1000,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "readOnly": true,
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "IntakePayloadAccepted": {
        "description": "The payload accepted for intake.",
        "properties": {
          "errors": {
            "description": "A list of errors.",
            "items": {
              "description": "An empty error list.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ListApplicationKeysResponse": {
        "description": "Response for a list of application keys.",
        "properties": {
          "data": {
            "description": "Array of application keys.",
            "items": {
              "description": "Partial Datadog application key.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a partial application key.",
                  "properties": {
                    "created_at": {
                      "description": "Creation date of the application key.",
                      "example": "2020-11-23T10:00:00.000Z",
                      "readOnly": true,
                      "type": "string"
                    },
                    "last4": {
                      "description": "The last four characters of the application key.",
                      "example": "abcd",
                      "maxLength": 4,
                      "minLength": 4,
                      "readOnly": true,
                      "type": "string",
                      "x-secret": true
                    },
                    "name": {
                      "description": "Name of the application key.",
                      "example": "Application Key for managing dashboards",
                      "type": "string"
                    },
                    "scopes": {
                      "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                      "example": [
                        "dashboards_read",
                        "dashboards_write",
                        "dashboards_public_share"
                      ],
                      "items": {
                        "description": "Name of scope.",
                        "type": "string"
                      },
                      "nullable": true,
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the application key.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Resources related to the application key.",
                  "properties": {
                    "owned_by": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "application_keys",
                  "description": "Application Keys resource type.",
                  "enum": [
                    "application_keys"
                  ],
                  "example": "application_keys",
                  "type": "string",
                  "x-enum-varnames": [
                    "APPLICATION_KEYS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Array of objects related to the application key.",
            "items": {
              "description": "An object related to an application key.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Log": {
        "description": "Object description of a log after being processed and stored by Datadog.",
        "properties": {
          "attributes": {
            "description": "JSON object containing all log attributes and their associated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "JSON object of attributes from your log.",
                "example": {
                  "customAttribute": 123,
                  "duration": 2345
                },
                "type": "object"
              },
              "host": {
                "description": "Name of the machine from where the logs are being sent.",
                "example": "i-0123",
                "type": "string"
              },
              "message": {
                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                "example": "Host connected to remote",
                "type": "string"
              },
              "service": {
                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                "example": "agent",
                "type": "string"
              },
              "status": {
                "description": "Status of the message associated with your log.",
                "example": "INFO",
                "type": "string"
              },
              "tags": {
                "description": "Array of tags associated with your log.",
                "example": [
                  "team:A"
                ],
                "items": {
                  "description": "Tag associated with your log.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "Timestamp of your log.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the Log.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "log",
            "description": "Type of the event.",
            "enum": [
              "log"
            ],
            "example": "log",
            "type": "string",
            "x-enum-varnames": [
              "LOG"
            ]
          }
        },
        "type": "object"
      },
      "LogAttributes": {
        "description": "JSON object containing all log attributes and their associated values.",
        "properties": {
          "attributes": {
            "additionalProperties": {},
            "description": "JSON object of attributes from your log.",
            "example": {
              "customAttribute": 123,
              "duration": 2345
            },
            "type": "object"
          },
          "host": {
            "description": "Name of the machine from where the logs are being sent.",
            "example": "i-0123",
            "type": "string"
          },
          "message": {
            "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
            "example": "Host connected to remote",
            "type": "string"
          },
          "service": {
            "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
            "example": "agent",
            "type": "string"
          },
          "status": {
            "description": "Status of the message associated with your log.",
            "example": "INFO",
            "type": "string"
          },
          "tags": {
            "description": "Array of tags associated with your log.",
            "example": [
              "team:A"
            ],
            "items": {
              "description": "Tag associated with your log.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "Timestamp of your log.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogType": {
        "default": "log",
        "description": "Type of the event.",
        "enum": [
          "log"
        ],
        "example": "log",
        "type": "string",
        "x-enum-varnames": [
          "LOG"
        ]
      },
      "LogsAggregateBucket": {
        "description": "A bucket values",
        "properties": {
          "by": {
            "additionalProperties": {
              "description": "The values for each group by",
              "type": "string"
            },
            "description": "The key, value pairs for each group by",
            "example": {
              "@state": "success",
              "@version": "abc"
            },
            "type": "object"
          },
          "computes": {
            "additionalProperties": {
              "description": "A bucket value, can be either a timeseries or a single value",
              "oneOf": [
                {
                  "description": "A single string value",
                  "type": "string"
                },
                {
                  "description": "A single number value",
                  "format": "double",
                  "type": "number"
                },
                {
                  "description": "A timeseries array",
                  "items": {
                    "description": "A timeseries point",
                    "properties": {
                      "time": {
                        "description": "The time value for this point",
                        "example": "2020-06-08T11:55:00Z",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value for this point",
                        "example": 19,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-generate-alias-as-model": true
                }
              ]
            },
            "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateBucketValue": {
        "description": "A bucket value, can be either a timeseries or a single value",
        "oneOf": [
          {
            "description": "A single string value",
            "type": "string"
          },
          {
            "description": "A single number value",
            "format": "double",
            "type": "number"
          },
          {
            "description": "A timeseries array",
            "items": {
              "description": "A timeseries point",
              "properties": {
                "time": {
                  "description": "The time value for this point",
                  "example": "2020-06-08T11:55:00Z",
                  "type": "string"
                },
                "value": {
                  "description": "The value for this point",
                  "example": 19,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-generate-alias-as-model": true
          }
        ]
      },
      "LogsAggregateBucketValueSingleNumber": {
        "description": "A single number value",
        "format": "double",
        "type": "number"
      },
      "LogsAggregateBucketValueSingleString": {
        "description": "A single string value",
        "type": "string"
      },
      "LogsAggregateBucketValueTimeseries": {
        "description": "A timeseries array",
        "items": {
          "description": "A timeseries point",
          "properties": {
            "time": {
              "description": "The time value for this point",
              "example": "2020-06-08T11:55:00Z",
              "type": "string"
            },
            "value": {
              "description": "The value for this point",
              "example": 19,
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array",
        "x-generate-alias-as-model": true
      },
      "LogsAggregateBucketValueTimeseriesPoint": {
        "description": "A timeseries point",
        "properties": {
          "time": {
            "description": "The time value for this point",
            "example": "2020-06-08T11:55:00Z",
            "type": "string"
          },
          "value": {
            "description": "The value for this point",
            "example": 19,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LogsAggregateRequest": {
        "description": "The object sent with the request to retrieve a list of logs from your organization.",
        "properties": {
          "compute": {
            "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
            "items": {
              "description": "A compute rule to compute metrics or timeseries",
              "properties": {
                "aggregation": {
                  "description": "An aggregation function",
                  "enum": [
                    "count",
                    "cardinality",
                    "pc75",
                    "pc90",
                    "pc95",
                    "pc98",
                    "pc99",
                    "sum",
                    "min",
                    "max",
                    "avg",
                    "median"
                  ],
                  "example": "pc90",
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "PERCENTILE_75",
                    "PERCENTILE_90",
                    "PERCENTILE_95",
                    "PERCENTILE_98",
                    "PERCENTILE_99",
                    "SUM",
                    "MIN",
                    "MAX",
                    "AVG",
                    "MEDIAN"
                  ]
                },
                "interval": {
                  "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
                  "example": "5m",
                  "type": "string"
                },
                "metric": {
                  "description": "The metric to use",
                  "example": "@duration",
                  "type": "string"
                },
                "type": {
                  "default": "total",
                  "description": "The type of compute",
                  "enum": [
                    "timeseries",
                    "total"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "TIMESERIES",
                    "TOTAL"
                  ]
                }
              },
              "required": [
                "aggregation"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filter": {
            "description": "The search and filter query settings",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                "example": "now-15m",
                "type": "string"
              },
              "indexes": {
                "default": [
                  "*"
                ],
                "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                "example": [
                  "main",
                  "web"
                ],
                "items": {
                  "description": "The name of a log index.",
                  "type": "string"
                },
                "type": "array"
              },
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by",
            "items": {
              "description": "A group by rule",
              "properties": {
                "facet": {
                  "description": "The name of the facet to use (required)",
                  "example": "host",
                  "type": "string"
                },
                "histogram": {
                  "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                  "properties": {
                    "interval": {
                      "description": "The bin size of the histogram buckets",
                      "example": 10,
                      "format": "double",
                      "type": "number"
                    },
                    "max": {
                      "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                      "example": 100,
                      "format": "double",
                      "type": "number"
                    },
                    "min": {
                      "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                      "example": 50,
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": [
                    "interval",
                    "min",
                    "max"
                  ],
                  "type": "object"
                },
                "limit": {
                  "default": 10,
                  "description": "The maximum buckets to return for this group by",
                  "format": "int64",
                  "type": "integer"
                },
                "missing": {
                  "description": "The value to use for logs that don't have the facet used to group by",
                  "oneOf": [
                    {
                      "description": "The missing value to use if there is string valued facet.",
                      "type": "string"
                    },
                    {
                      "description": "The missing value to use if there is a number valued facet.",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                },
                "sort": {
                  "description": "A sort rule",
                  "example": {
                    "aggregation": "count",
                    "order": "asc"
                  },
                  "properties": {
                    "aggregation": {
                      "description": "An aggregation function",
                      "enum": [
                        "count",
                        "cardinality",
                        "pc75",
                        "pc90",
                        "pc95",
                        "pc98",
                        "pc99",
                        "sum",
                        "min",
                        "max",
                        "avg",
                        "median"
                      ],
                      "example": "pc90",
                      "type": "string",
                      "x-enum-varnames": [
                        "COUNT",
                        "CARDINALITY",
                        "PERCENTILE_75",
                        "PERCENTILE_90",
                        "PERCENTILE_95",
                        "PERCENTILE_98",
                        "PERCENTILE_99",
                        "SUM",
                        "MIN",
                        "MAX",
                        "AVG",
                        "MEDIAN"
                      ]
                    },
                    "metric": {
                      "description": "The metric to sort by (only used for `type=measure`)",
                      "example": "@duration",
                      "type": "string"
                    },
                    "order": {
                      "description": "The order to use, ascending or descending",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "example": "asc",
                      "type": "string",
                      "x-enum-varnames": [
                        "ASCENDING",
                        "DESCENDING"
                      ]
                    },
                    "type": {
                      "default": "alphabetical",
                      "description": "The type of sorting algorithm",
                      "enum": [
                        "alphabetical",
                        "measure"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "ALPHABETICAL",
                        "MEASURE"
                      ]
                    }
                  },
                  "type": "object"
                },
                "total": {
                  "default": false,
                  "description": "A resulting object to put the given computes in over all the matching records.",
                  "oneOf": [
                    {
                      "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                      "type": "boolean"
                    },
                    {
                      "description": "A string to use as the key value for the total bucket",
                      "type": "string"
                    },
                    {
                      "description": "A number to use as the key value for the total bucket",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                }
              },
              "required": [
                "facet"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
            "properties": {
              "timeOffset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging settings",
            "properties": {
              "cursor": {
                "description": "The returned paging point to use to get the next results",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateRequestPage": {
        "description": "Paging settings",
        "properties": {
          "cursor": {
            "description": "The returned paging point to use to get the next results",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsAggregateResponse": {
        "description": "The response object for the logs aggregate API endpoint",
        "properties": {
          "data": {
            "description": "The query results",
            "properties": {
              "buckets": {
                "description": "The list of matching buckets, one item per bucket",
                "items": {
                  "description": "A bucket values",
                  "properties": {
                    "by": {
                      "additionalProperties": {
                        "description": "The values for each group by",
                        "type": "string"
                      },
                      "description": "The key, value pairs for each group by",
                      "example": {
                        "@state": "success",
                        "@version": "abc"
                      },
                      "type": "object"
                    },
                    "computes": {
                      "additionalProperties": {
                        "description": "A bucket value, can be either a timeseries or a single value",
                        "oneOf": [
                          {
                            "description": "A single string value",
                            "type": "string"
                          },
                          {
                            "description": "A single number value",
                            "format": "double",
                            "type": "number"
                          },
                          {
                            "description": "A timeseries array",
                            "items": {
                              "description": "A timeseries point",
                              "properties": {
                                "time": {
                                  "description": "The time value for this point",
                                  "example": "2020-06-08T11:55:00Z",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The value for this point",
                                  "example": 19,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-generate-alias-as-model": true
                          }
                        ]
                      },
                      "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsAggregateResponseData": {
        "description": "The query results",
        "properties": {
          "buckets": {
            "description": "The list of matching buckets, one item per bucket",
            "items": {
              "description": "A bucket values",
              "properties": {
                "by": {
                  "additionalProperties": {
                    "description": "The values for each group by",
                    "type": "string"
                  },
                  "description": "The key, value pairs for each group by",
                  "example": {
                    "@state": "success",
                    "@version": "abc"
                  },
                  "type": "object"
                },
                "computes": {
                  "additionalProperties": {
                    "description": "A bucket value, can be either a timeseries or a single value",
                    "oneOf": [
                      {
                        "description": "A single string value",
                        "type": "string"
                      },
                      {
                        "description": "A single number value",
                        "format": "double",
                        "type": "number"
                      },
                      {
                        "description": "A timeseries array",
                        "items": {
                          "description": "A timeseries point",
                          "properties": {
                            "time": {
                              "description": "The time value for this point",
                              "example": "2020-06-08T11:55:00Z",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value for this point",
                              "example": 19,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array",
                        "x-generate-alias-as-model": true
                      }
                    ]
                  },
                  "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsAggregateResponseStatus": {
        "description": "The status of the response",
        "enum": [
          "done",
          "timeout"
        ],
        "example": "done",
        "type": "string",
        "x-enum-varnames": [
          "DONE",
          "TIMEOUT"
        ]
      },
      "LogsAggregateSort": {
        "description": "A sort rule",
        "example": {
          "aggregation": "count",
          "order": "asc"
        },
        "properties": {
          "aggregation": {
            "description": "An aggregation function",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg",
              "median"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MEDIAN"
            ]
          },
          "metric": {
            "description": "The metric to sort by (only used for `type=measure`)",
            "example": "@duration",
            "type": "string"
          },
          "order": {
            "description": "The order to use, ascending or descending",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "asc",
            "type": "string",
            "x-enum-varnames": [
              "ASCENDING",
              "DESCENDING"
            ]
          },
          "type": {
            "default": "alphabetical",
            "description": "The type of sorting algorithm",
            "enum": [
              "alphabetical",
              "measure"
            ],
            "type": "string",
            "x-enum-varnames": [
              "ALPHABETICAL",
              "MEASURE"
            ]
          }
        },
        "type": "object"
      },
      "LogsAggregateSortType": {
        "default": "alphabetical",
        "description": "The type of sorting algorithm",
        "enum": [
          "alphabetical",
          "measure"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ALPHABETICAL",
          "MEASURE"
        ]
      },
      "LogsAggregationFunction": {
        "description": "An aggregation function",
        "enum": [
          "count",
          "cardinality",
          "pc75",
          "pc90",
          "pc95",
          "pc98",
          "pc99",
          "sum",
          "min",
          "max",
          "avg",
          "median"
        ],
        "example": "pc90",
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "CARDINALITY",
          "PERCENTILE_75",
          "PERCENTILE_90",
          "PERCENTILE_95",
          "PERCENTILE_98",
          "PERCENTILE_99",
          "SUM",
          "MIN",
          "MAX",
          "AVG",
          "MEDIAN"
        ]
      },
      "LogsArchive": {
        "description": "The logs archive.",
        "properties": {
          "data": {
            "description": "The definition of an archive.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive.",
                "properties": {
                  "destination": {
                    "description": "An archive's destination.",
                    "nullable": true,
                    "oneOf": [
                      {
                        "description": "The Azure archive destination.",
                        "properties": {
                          "container": {
                            "description": "The container where the archive will be stored.",
                            "example": "container-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The Azure archive's integration destination.",
                            "properties": {
                              "client_id": {
                                "description": "A client ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "A tenant ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              }
                            },
                            "required": [
                              "tenant_id",
                              "client_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region where the archive will be stored.",
                            "type": "string"
                          },
                          "storage_account": {
                            "description": "The associated storage account.",
                            "example": "account-name",
                            "type": "string"
                          },
                          "type": {
                            "default": "azure",
                            "description": "Type of the Azure archive destination.",
                            "enum": [
                              "azure"
                            ],
                            "example": "azure",
                            "type": "string",
                            "x-enum-varnames": [
                              "AZURE"
                            ]
                          }
                        },
                        "required": [
                          "storage_account",
                          "container",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The GCS archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The GCS archive's integration destination.",
                            "properties": {
                              "client_email": {
                                "description": "A client email.",
                                "example": "youremail@example.com",
                                "type": "string"
                              },
                              "project_id": {
                                "description": "A project ID.",
                                "example": "project-id",
                                "type": "string"
                              }
                            },
                            "required": [
                              "project_id",
                              "client_email"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "gcs",
                            "description": "Type of the GCS archive destination.",
                            "enum": [
                              "gcs"
                            ],
                            "example": "gcs",
                            "type": "string",
                            "x-enum-varnames": [
                              "GCS"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The S3 archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The S3 Archive's integration destination.",
                            "properties": {
                              "account_id": {
                                "description": "The account ID for the integration.",
                                "example": "123456789012",
                                "type": "string"
                              },
                              "role_name": {
                                "description": "The path of the integration.",
                                "example": "role-name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "role_name",
                              "account_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "s3",
                            "description": "Type of the S3 archive destination.",
                            "enum": [
                              "s3"
                            ],
                            "example": "s3",
                            "type": "string",
                            "x-enum-varnames": [
                              "S3"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "required": [
                      "type",
                      "integration"
                    ],
                    "type": "object"
                  },
                  "include_tags": {
                    "default": false,
                    "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                    "example": false,
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The archive name.",
                    "example": "Nginx Archive",
                    "type": "string"
                  },
                  "query": {
                    "description": "The archive query/filter. Logs matching this query are included in the archive.",
                    "example": "source:nginx",
                    "type": "string"
                  },
                  "rehydration_max_scan_size_in_gb": {
                    "description": "Maximum scan size for rehydration from this archive.",
                    "example": 100,
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  },
                  "rehydration_tags": {
                    "description": "An array of tags to add to rehydrated logs from an archive.",
                    "example": [
                      "team:intake",
                      "team:app"
                    ],
                    "items": {
                      "description": "A given tag in the `<KEY>:<VALUE>` format.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "state": {
                    "description": "The state of the archive.",
                    "enum": [
                      "UNKNOWN",
                      "WORKING",
                      "FAILING",
                      "WORKING_AUTH_LEGACY"
                    ],
                    "example": "WORKING",
                    "type": "string",
                    "x-enum-varnames": [
                      "UNKNOWN",
                      "WORKING",
                      "FAILING",
                      "WORKING_AUTH_LEGACY"
                    ]
                  }
                },
                "required": [
                  "name",
                  "query",
                  "destination"
                ],
                "type": "object"
              },
              "id": {
                "description": "The archive ID.",
                "example": "a2zcMylnM4OCHpYusxIi3g",
                "readOnly": true,
                "type": "string"
              },
              "type": {
                "default": "archives",
                "description": "The type of the resource. The value should always be archives.",
                "example": "archives",
                "readOnly": true,
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveAttributes": {
        "description": "The attributes associated with the archive.",
        "properties": {
          "destination": {
            "description": "An archive's destination.",
            "nullable": true,
            "oneOf": [
              {
                "description": "The Azure archive destination.",
                "properties": {
                  "container": {
                    "description": "The container where the archive will be stored.",
                    "example": "container-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The Azure archive's integration destination.",
                    "properties": {
                      "client_id": {
                        "description": "A client ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "A tenant ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenant_id",
                      "client_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region where the archive will be stored.",
                    "type": "string"
                  },
                  "storage_account": {
                    "description": "The associated storage account.",
                    "example": "account-name",
                    "type": "string"
                  },
                  "type": {
                    "default": "azure",
                    "description": "Type of the Azure archive destination.",
                    "enum": [
                      "azure"
                    ],
                    "example": "azure",
                    "type": "string",
                    "x-enum-varnames": [
                      "AZURE"
                    ]
                  }
                },
                "required": [
                  "storage_account",
                  "container",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The GCS archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The GCS archive's integration destination.",
                    "properties": {
                      "client_email": {
                        "description": "A client email.",
                        "example": "youremail@example.com",
                        "type": "string"
                      },
                      "project_id": {
                        "description": "A project ID.",
                        "example": "project-id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_id",
                      "client_email"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "gcs",
                    "description": "Type of the GCS archive destination.",
                    "enum": [
                      "gcs"
                    ],
                    "example": "gcs",
                    "type": "string",
                    "x-enum-varnames": [
                      "GCS"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The S3 archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The S3 Archive's integration destination.",
                    "properties": {
                      "account_id": {
                        "description": "The account ID for the integration.",
                        "example": "123456789012",
                        "type": "string"
                      },
                      "role_name": {
                        "description": "The path of the integration.",
                        "example": "role-name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_name",
                      "account_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "s3",
                    "description": "Type of the S3 archive destination.",
                    "enum": [
                      "s3"
                    ],
                    "example": "s3",
                    "type": "string",
                    "x-enum-varnames": [
                      "S3"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              }
            ],
            "required": [
              "type",
              "integration"
            ],
            "type": "object"
          },
          "include_tags": {
            "default": false,
            "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "The archive name.",
            "example": "Nginx Archive",
            "type": "string"
          },
          "query": {
            "description": "The archive query/filter. Logs matching this query are included in the archive.",
            "example": "source:nginx",
            "type": "string"
          },
          "rehydration_max_scan_size_in_gb": {
            "description": "Maximum scan size for rehydration from this archive.",
            "example": 100,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "rehydration_tags": {
            "description": "An array of tags to add to rehydrated logs from an archive.",
            "example": [
              "team:intake",
              "team:app"
            ],
            "items": {
              "description": "A given tag in the `<KEY>:<VALUE>` format.",
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "description": "The state of the archive.",
            "enum": [
              "UNKNOWN",
              "WORKING",
              "FAILING",
              "WORKING_AUTH_LEGACY"
            ],
            "example": "WORKING",
            "type": "string",
            "x-enum-varnames": [
              "UNKNOWN",
              "WORKING",
              "FAILING",
              "WORKING_AUTH_LEGACY"
            ]
          }
        },
        "required": [
          "name",
          "query",
          "destination"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequest": {
        "description": "The logs archive.",
        "properties": {
          "data": {
            "description": "The definition of an archive.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive.",
                "properties": {
                  "destination": {
                    "description": "An archive's destination.",
                    "oneOf": [
                      {
                        "description": "The Azure archive destination.",
                        "properties": {
                          "container": {
                            "description": "The container where the archive will be stored.",
                            "example": "container-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The Azure archive's integration destination.",
                            "properties": {
                              "client_id": {
                                "description": "A client ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              },
                              "tenant_id": {
                                "description": "A tenant ID.",
                                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                "type": "string"
                              }
                            },
                            "required": [
                              "tenant_id",
                              "client_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region where the archive will be stored.",
                            "type": "string"
                          },
                          "storage_account": {
                            "description": "The associated storage account.",
                            "example": "account-name",
                            "type": "string"
                          },
                          "type": {
                            "default": "azure",
                            "description": "Type of the Azure archive destination.",
                            "enum": [
                              "azure"
                            ],
                            "example": "azure",
                            "type": "string",
                            "x-enum-varnames": [
                              "AZURE"
                            ]
                          }
                        },
                        "required": [
                          "storage_account",
                          "container",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The GCS archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The GCS archive's integration destination.",
                            "properties": {
                              "client_email": {
                                "description": "A client email.",
                                "example": "youremail@example.com",
                                "type": "string"
                              },
                              "project_id": {
                                "description": "A project ID.",
                                "example": "project-id",
                                "type": "string"
                              }
                            },
                            "required": [
                              "project_id",
                              "client_email"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "gcs",
                            "description": "Type of the GCS archive destination.",
                            "enum": [
                              "gcs"
                            ],
                            "example": "gcs",
                            "type": "string",
                            "x-enum-varnames": [
                              "GCS"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      },
                      {
                        "description": "The S3 archive destination.",
                        "properties": {
                          "bucket": {
                            "description": "The bucket where the archive will be stored.",
                            "example": "bucket-name",
                            "type": "string"
                          },
                          "integration": {
                            "description": "The S3 Archive's integration destination.",
                            "properties": {
                              "account_id": {
                                "description": "The account ID for the integration.",
                                "example": "123456789012",
                                "type": "string"
                              },
                              "role_name": {
                                "description": "The path of the integration.",
                                "example": "role-name",
                                "type": "string"
                              }
                            },
                            "required": [
                              "role_name",
                              "account_id"
                            ],
                            "type": "object"
                          },
                          "path": {
                            "description": "The archive path.",
                            "type": "string"
                          },
                          "type": {
                            "default": "s3",
                            "description": "Type of the S3 archive destination.",
                            "enum": [
                              "s3"
                            ],
                            "example": "s3",
                            "type": "string",
                            "x-enum-varnames": [
                              "S3"
                            ]
                          }
                        },
                        "required": [
                          "bucket",
                          "integration",
                          "type"
                        ],
                        "type": "object"
                      }
                    ],
                    "required": [
                      "type",
                      "integration"
                    ],
                    "type": "object"
                  },
                  "include_tags": {
                    "default": false,
                    "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                    "example": false,
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The archive name.",
                    "example": "Nginx Archive",
                    "type": "string"
                  },
                  "query": {
                    "description": "The archive query/filter. Logs matching this query are included in the archive.",
                    "example": "source:nginx",
                    "type": "string"
                  },
                  "rehydration_max_scan_size_in_gb": {
                    "description": "Maximum scan size for rehydration from this archive.",
                    "example": 100,
                    "format": "int64",
                    "nullable": true,
                    "type": "integer"
                  },
                  "rehydration_tags": {
                    "description": "An array of tags to add to rehydrated logs from an archive.",
                    "example": [
                      "team:intake",
                      "team:app"
                    ],
                    "items": {
                      "description": "A given tag in the `<KEY>:<VALUE>` format.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "query",
                  "destination"
                ],
                "type": "object"
              },
              "type": {
                "default": "archives",
                "description": "The type of the resource. The value should always be archives.",
                "example": "archives",
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveCreateRequestAttributes": {
        "description": "The attributes associated with the archive.",
        "properties": {
          "destination": {
            "description": "An archive's destination.",
            "oneOf": [
              {
                "description": "The Azure archive destination.",
                "properties": {
                  "container": {
                    "description": "The container where the archive will be stored.",
                    "example": "container-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The Azure archive's integration destination.",
                    "properties": {
                      "client_id": {
                        "description": "A client ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      },
                      "tenant_id": {
                        "description": "A tenant ID.",
                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                        "type": "string"
                      }
                    },
                    "required": [
                      "tenant_id",
                      "client_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region where the archive will be stored.",
                    "type": "string"
                  },
                  "storage_account": {
                    "description": "The associated storage account.",
                    "example": "account-name",
                    "type": "string"
                  },
                  "type": {
                    "default": "azure",
                    "description": "Type of the Azure archive destination.",
                    "enum": [
                      "azure"
                    ],
                    "example": "azure",
                    "type": "string",
                    "x-enum-varnames": [
                      "AZURE"
                    ]
                  }
                },
                "required": [
                  "storage_account",
                  "container",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The GCS archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The GCS archive's integration destination.",
                    "properties": {
                      "client_email": {
                        "description": "A client email.",
                        "example": "youremail@example.com",
                        "type": "string"
                      },
                      "project_id": {
                        "description": "A project ID.",
                        "example": "project-id",
                        "type": "string"
                      }
                    },
                    "required": [
                      "project_id",
                      "client_email"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "gcs",
                    "description": "Type of the GCS archive destination.",
                    "enum": [
                      "gcs"
                    ],
                    "example": "gcs",
                    "type": "string",
                    "x-enum-varnames": [
                      "GCS"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              },
              {
                "description": "The S3 archive destination.",
                "properties": {
                  "bucket": {
                    "description": "The bucket where the archive will be stored.",
                    "example": "bucket-name",
                    "type": "string"
                  },
                  "integration": {
                    "description": "The S3 Archive's integration destination.",
                    "properties": {
                      "account_id": {
                        "description": "The account ID for the integration.",
                        "example": "123456789012",
                        "type": "string"
                      },
                      "role_name": {
                        "description": "The path of the integration.",
                        "example": "role-name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_name",
                      "account_id"
                    ],
                    "type": "object"
                  },
                  "path": {
                    "description": "The archive path.",
                    "type": "string"
                  },
                  "type": {
                    "default": "s3",
                    "description": "Type of the S3 archive destination.",
                    "enum": [
                      "s3"
                    ],
                    "example": "s3",
                    "type": "string",
                    "x-enum-varnames": [
                      "S3"
                    ]
                  }
                },
                "required": [
                  "bucket",
                  "integration",
                  "type"
                ],
                "type": "object"
              }
            ],
            "required": [
              "type",
              "integration"
            ],
            "type": "object"
          },
          "include_tags": {
            "default": false,
            "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "The archive name.",
            "example": "Nginx Archive",
            "type": "string"
          },
          "query": {
            "description": "The archive query/filter. Logs matching this query are included in the archive.",
            "example": "source:nginx",
            "type": "string"
          },
          "rehydration_max_scan_size_in_gb": {
            "description": "Maximum scan size for rehydration from this archive.",
            "example": 100,
            "format": "int64",
            "nullable": true,
            "type": "integer"
          },
          "rehydration_tags": {
            "description": "An array of tags to add to rehydrated logs from an archive.",
            "example": [
              "team:intake",
              "team:app"
            ],
            "items": {
              "description": "A given tag in the `<KEY>:<VALUE>` format.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "query",
          "destination"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequestDefinition": {
        "description": "The definition of an archive.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive.",
            "properties": {
              "destination": {
                "description": "An archive's destination.",
                "oneOf": [
                  {
                    "description": "The Azure archive destination.",
                    "properties": {
                      "container": {
                        "description": "The container where the archive will be stored.",
                        "example": "container-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The Azure archive's integration destination.",
                        "properties": {
                          "client_id": {
                            "description": "A client ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          },
                          "tenant_id": {
                            "description": "A tenant ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenant_id",
                          "client_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region where the archive will be stored.",
                        "type": "string"
                      },
                      "storage_account": {
                        "description": "The associated storage account.",
                        "example": "account-name",
                        "type": "string"
                      },
                      "type": {
                        "default": "azure",
                        "description": "Type of the Azure archive destination.",
                        "enum": [
                          "azure"
                        ],
                        "example": "azure",
                        "type": "string",
                        "x-enum-varnames": [
                          "AZURE"
                        ]
                      }
                    },
                    "required": [
                      "storage_account",
                      "container",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The GCS archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The GCS archive's integration destination.",
                        "properties": {
                          "client_email": {
                            "description": "A client email.",
                            "example": "youremail@example.com",
                            "type": "string"
                          },
                          "project_id": {
                            "description": "A project ID.",
                            "example": "project-id",
                            "type": "string"
                          }
                        },
                        "required": [
                          "project_id",
                          "client_email"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "gcs",
                        "description": "Type of the GCS archive destination.",
                        "enum": [
                          "gcs"
                        ],
                        "example": "gcs",
                        "type": "string",
                        "x-enum-varnames": [
                          "GCS"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The S3 archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The S3 Archive's integration destination.",
                        "properties": {
                          "account_id": {
                            "description": "The account ID for the integration.",
                            "example": "123456789012",
                            "type": "string"
                          },
                          "role_name": {
                            "description": "The path of the integration.",
                            "example": "role-name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "role_name",
                          "account_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "s3",
                        "description": "Type of the S3 archive destination.",
                        "enum": [
                          "s3"
                        ],
                        "example": "s3",
                        "type": "string",
                        "x-enum-varnames": [
                          "S3"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  }
                ],
                "required": [
                  "type",
                  "integration"
                ],
                "type": "object"
              },
              "include_tags": {
                "default": false,
                "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "description": "The archive name.",
                "example": "Nginx Archive",
                "type": "string"
              },
              "query": {
                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                "example": "source:nginx",
                "type": "string"
              },
              "rehydration_max_scan_size_in_gb": {
                "description": "Maximum scan size for rehydration from this archive.",
                "example": 100,
                "format": "int64",
                "nullable": true,
                "type": "integer"
              },
              "rehydration_tags": {
                "description": "An array of tags to add to rehydrated logs from an archive.",
                "example": [
                  "team:intake",
                  "team:app"
                ],
                "items": {
                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "name",
              "query",
              "destination"
            ],
            "type": "object"
          },
          "type": {
            "default": "archives",
            "description": "The type of the resource. The value should always be archives.",
            "example": "archives",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveCreateRequestDestination": {
        "description": "An archive's destination.",
        "oneOf": [
          {
            "description": "The Azure archive destination.",
            "properties": {
              "container": {
                "description": "The container where the archive will be stored.",
                "example": "container-name",
                "type": "string"
              },
              "integration": {
                "description": "The Azure archive's integration destination.",
                "properties": {
                  "client_id": {
                    "description": "A client ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "A tenant ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  }
                },
                "required": [
                  "tenant_id",
                  "client_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "region": {
                "description": "The region where the archive will be stored.",
                "type": "string"
              },
              "storage_account": {
                "description": "The associated storage account.",
                "example": "account-name",
                "type": "string"
              },
              "type": {
                "default": "azure",
                "description": "Type of the Azure archive destination.",
                "enum": [
                  "azure"
                ],
                "example": "azure",
                "type": "string",
                "x-enum-varnames": [
                  "AZURE"
                ]
              }
            },
            "required": [
              "storage_account",
              "container",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The GCS archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The GCS archive's integration destination.",
                "properties": {
                  "client_email": {
                    "description": "A client email.",
                    "example": "youremail@example.com",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "A project ID.",
                    "example": "project-id",
                    "type": "string"
                  }
                },
                "required": [
                  "project_id",
                  "client_email"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "gcs",
                "description": "Type of the GCS archive destination.",
                "enum": [
                  "gcs"
                ],
                "example": "gcs",
                "type": "string",
                "x-enum-varnames": [
                  "GCS"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The S3 archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The S3 Archive's integration destination.",
                "properties": {
                  "account_id": {
                    "description": "The account ID for the integration.",
                    "example": "123456789012",
                    "type": "string"
                  },
                  "role_name": {
                    "description": "The path of the integration.",
                    "example": "role-name",
                    "type": "string"
                  }
                },
                "required": [
                  "role_name",
                  "account_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "s3",
                "description": "Type of the S3 archive destination.",
                "enum": [
                  "s3"
                ],
                "example": "s3",
                "type": "string",
                "x-enum-varnames": [
                  "S3"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          }
        ],
        "required": [
          "type",
          "integration"
        ],
        "type": "object"
      },
      "LogsArchiveDefinition": {
        "description": "The definition of an archive.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive.",
            "properties": {
              "destination": {
                "description": "An archive's destination.",
                "nullable": true,
                "oneOf": [
                  {
                    "description": "The Azure archive destination.",
                    "properties": {
                      "container": {
                        "description": "The container where the archive will be stored.",
                        "example": "container-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The Azure archive's integration destination.",
                        "properties": {
                          "client_id": {
                            "description": "A client ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          },
                          "tenant_id": {
                            "description": "A tenant ID.",
                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                            "type": "string"
                          }
                        },
                        "required": [
                          "tenant_id",
                          "client_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "region": {
                        "description": "The region where the archive will be stored.",
                        "type": "string"
                      },
                      "storage_account": {
                        "description": "The associated storage account.",
                        "example": "account-name",
                        "type": "string"
                      },
                      "type": {
                        "default": "azure",
                        "description": "Type of the Azure archive destination.",
                        "enum": [
                          "azure"
                        ],
                        "example": "azure",
                        "type": "string",
                        "x-enum-varnames": [
                          "AZURE"
                        ]
                      }
                    },
                    "required": [
                      "storage_account",
                      "container",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The GCS archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The GCS archive's integration destination.",
                        "properties": {
                          "client_email": {
                            "description": "A client email.",
                            "example": "youremail@example.com",
                            "type": "string"
                          },
                          "project_id": {
                            "description": "A project ID.",
                            "example": "project-id",
                            "type": "string"
                          }
                        },
                        "required": [
                          "project_id",
                          "client_email"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "gcs",
                        "description": "Type of the GCS archive destination.",
                        "enum": [
                          "gcs"
                        ],
                        "example": "gcs",
                        "type": "string",
                        "x-enum-varnames": [
                          "GCS"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "The S3 archive destination.",
                    "properties": {
                      "bucket": {
                        "description": "The bucket where the archive will be stored.",
                        "example": "bucket-name",
                        "type": "string"
                      },
                      "integration": {
                        "description": "The S3 Archive's integration destination.",
                        "properties": {
                          "account_id": {
                            "description": "The account ID for the integration.",
                            "example": "123456789012",
                            "type": "string"
                          },
                          "role_name": {
                            "description": "The path of the integration.",
                            "example": "role-name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "role_name",
                          "account_id"
                        ],
                        "type": "object"
                      },
                      "path": {
                        "description": "The archive path.",
                        "type": "string"
                      },
                      "type": {
                        "default": "s3",
                        "description": "Type of the S3 archive destination.",
                        "enum": [
                          "s3"
                        ],
                        "example": "s3",
                        "type": "string",
                        "x-enum-varnames": [
                          "S3"
                        ]
                      }
                    },
                    "required": [
                      "bucket",
                      "integration",
                      "type"
                    ],
                    "type": "object"
                  }
                ],
                "required": [
                  "type",
                  "integration"
                ],
                "type": "object"
              },
              "include_tags": {
                "default": false,
                "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "description": "The archive name.",
                "example": "Nginx Archive",
                "type": "string"
              },
              "query": {
                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                "example": "source:nginx",
                "type": "string"
              },
              "rehydration_max_scan_size_in_gb": {
                "description": "Maximum scan size for rehydration from this archive.",
                "example": 100,
                "format": "int64",
                "nullable": true,
                "type": "integer"
              },
              "rehydration_tags": {
                "description": "An array of tags to add to rehydrated logs from an archive.",
                "example": [
                  "team:intake",
                  "team:app"
                ],
                "items": {
                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                  "type": "string"
                },
                "type": "array"
              },
              "state": {
                "description": "The state of the archive.",
                "enum": [
                  "UNKNOWN",
                  "WORKING",
                  "FAILING",
                  "WORKING_AUTH_LEGACY"
                ],
                "example": "WORKING",
                "type": "string",
                "x-enum-varnames": [
                  "UNKNOWN",
                  "WORKING",
                  "FAILING",
                  "WORKING_AUTH_LEGACY"
                ]
              }
            },
            "required": [
              "name",
              "query",
              "destination"
            ],
            "type": "object"
          },
          "id": {
            "description": "The archive ID.",
            "example": "a2zcMylnM4OCHpYusxIi3g",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "default": "archives",
            "description": "The type of the resource. The value should always be archives.",
            "example": "archives",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestination": {
        "description": "An archive's destination.",
        "nullable": true,
        "oneOf": [
          {
            "description": "The Azure archive destination.",
            "properties": {
              "container": {
                "description": "The container where the archive will be stored.",
                "example": "container-name",
                "type": "string"
              },
              "integration": {
                "description": "The Azure archive's integration destination.",
                "properties": {
                  "client_id": {
                    "description": "A client ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "A tenant ID.",
                    "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                    "type": "string"
                  }
                },
                "required": [
                  "tenant_id",
                  "client_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "region": {
                "description": "The region where the archive will be stored.",
                "type": "string"
              },
              "storage_account": {
                "description": "The associated storage account.",
                "example": "account-name",
                "type": "string"
              },
              "type": {
                "default": "azure",
                "description": "Type of the Azure archive destination.",
                "enum": [
                  "azure"
                ],
                "example": "azure",
                "type": "string",
                "x-enum-varnames": [
                  "AZURE"
                ]
              }
            },
            "required": [
              "storage_account",
              "container",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The GCS archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The GCS archive's integration destination.",
                "properties": {
                  "client_email": {
                    "description": "A client email.",
                    "example": "youremail@example.com",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "A project ID.",
                    "example": "project-id",
                    "type": "string"
                  }
                },
                "required": [
                  "project_id",
                  "client_email"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "gcs",
                "description": "Type of the GCS archive destination.",
                "enum": [
                  "gcs"
                ],
                "example": "gcs",
                "type": "string",
                "x-enum-varnames": [
                  "GCS"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          },
          {
            "description": "The S3 archive destination.",
            "properties": {
              "bucket": {
                "description": "The bucket where the archive will be stored.",
                "example": "bucket-name",
                "type": "string"
              },
              "integration": {
                "description": "The S3 Archive's integration destination.",
                "properties": {
                  "account_id": {
                    "description": "The account ID for the integration.",
                    "example": "123456789012",
                    "type": "string"
                  },
                  "role_name": {
                    "description": "The path of the integration.",
                    "example": "role-name",
                    "type": "string"
                  }
                },
                "required": [
                  "role_name",
                  "account_id"
                ],
                "type": "object"
              },
              "path": {
                "description": "The archive path.",
                "type": "string"
              },
              "type": {
                "default": "s3",
                "description": "Type of the S3 archive destination.",
                "enum": [
                  "s3"
                ],
                "example": "s3",
                "type": "string",
                "x-enum-varnames": [
                  "S3"
                ]
              }
            },
            "required": [
              "bucket",
              "integration",
              "type"
            ],
            "type": "object"
          }
        ],
        "required": [
          "type",
          "integration"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationAzure": {
        "description": "The Azure archive destination.",
        "properties": {
          "container": {
            "description": "The container where the archive will be stored.",
            "example": "container-name",
            "type": "string"
          },
          "integration": {
            "description": "The Azure archive's integration destination.",
            "properties": {
              "client_id": {
                "description": "A client ID.",
                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                "type": "string"
              },
              "tenant_id": {
                "description": "A tenant ID.",
                "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                "type": "string"
              }
            },
            "required": [
              "tenant_id",
              "client_id"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "region": {
            "description": "The region where the archive will be stored.",
            "type": "string"
          },
          "storage_account": {
            "description": "The associated storage account.",
            "example": "account-name",
            "type": "string"
          },
          "type": {
            "default": "azure",
            "description": "Type of the Azure archive destination.",
            "enum": [
              "azure"
            ],
            "example": "azure",
            "type": "string",
            "x-enum-varnames": [
              "AZURE"
            ]
          }
        },
        "required": [
          "storage_account",
          "container",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationAzureType": {
        "default": "azure",
        "description": "Type of the Azure archive destination.",
        "enum": [
          "azure"
        ],
        "example": "azure",
        "type": "string",
        "x-enum-varnames": [
          "AZURE"
        ]
      },
      "LogsArchiveDestinationGCS": {
        "description": "The GCS archive destination.",
        "properties": {
          "bucket": {
            "description": "The bucket where the archive will be stored.",
            "example": "bucket-name",
            "type": "string"
          },
          "integration": {
            "description": "The GCS archive's integration destination.",
            "properties": {
              "client_email": {
                "description": "A client email.",
                "example": "youremail@example.com",
                "type": "string"
              },
              "project_id": {
                "description": "A project ID.",
                "example": "project-id",
                "type": "string"
              }
            },
            "required": [
              "project_id",
              "client_email"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "type": {
            "default": "gcs",
            "description": "Type of the GCS archive destination.",
            "enum": [
              "gcs"
            ],
            "example": "gcs",
            "type": "string",
            "x-enum-varnames": [
              "GCS"
            ]
          }
        },
        "required": [
          "bucket",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationGCSType": {
        "default": "gcs",
        "description": "Type of the GCS archive destination.",
        "enum": [
          "gcs"
        ],
        "example": "gcs",
        "type": "string",
        "x-enum-varnames": [
          "GCS"
        ]
      },
      "LogsArchiveDestinationS3": {
        "description": "The S3 archive destination.",
        "properties": {
          "bucket": {
            "description": "The bucket where the archive will be stored.",
            "example": "bucket-name",
            "type": "string"
          },
          "integration": {
            "description": "The S3 Archive's integration destination.",
            "properties": {
              "account_id": {
                "description": "The account ID for the integration.",
                "example": "123456789012",
                "type": "string"
              },
              "role_name": {
                "description": "The path of the integration.",
                "example": "role-name",
                "type": "string"
              }
            },
            "required": [
              "role_name",
              "account_id"
            ],
            "type": "object"
          },
          "path": {
            "description": "The archive path.",
            "type": "string"
          },
          "type": {
            "default": "s3",
            "description": "Type of the S3 archive destination.",
            "enum": [
              "s3"
            ],
            "example": "s3",
            "type": "string",
            "x-enum-varnames": [
              "S3"
            ]
          }
        },
        "required": [
          "bucket",
          "integration",
          "type"
        ],
        "type": "object"
      },
      "LogsArchiveDestinationS3Type": {
        "default": "s3",
        "description": "Type of the S3 archive destination.",
        "enum": [
          "s3"
        ],
        "example": "s3",
        "type": "string",
        "x-enum-varnames": [
          "S3"
        ]
      },
      "LogsArchiveIntegrationAzure": {
        "description": "The Azure archive's integration destination.",
        "properties": {
          "client_id": {
            "description": "A client ID.",
            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
            "type": "string"
          },
          "tenant_id": {
            "description": "A tenant ID.",
            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
            "type": "string"
          }
        },
        "required": [
          "tenant_id",
          "client_id"
        ],
        "type": "object"
      },
      "LogsArchiveIntegrationGCS": {
        "description": "The GCS archive's integration destination.",
        "properties": {
          "client_email": {
            "description": "A client email.",
            "example": "youremail@example.com",
            "type": "string"
          },
          "project_id": {
            "description": "A project ID.",
            "example": "project-id",
            "type": "string"
          }
        },
        "required": [
          "project_id",
          "client_email"
        ],
        "type": "object"
      },
      "LogsArchiveIntegrationS3": {
        "description": "The S3 Archive's integration destination.",
        "properties": {
          "account_id": {
            "description": "The account ID for the integration.",
            "example": "123456789012",
            "type": "string"
          },
          "role_name": {
            "description": "The path of the integration.",
            "example": "role-name",
            "type": "string"
          }
        },
        "required": [
          "role_name",
          "account_id"
        ],
        "type": "object"
      },
      "LogsArchiveOrder": {
        "description": "A ordered list of archive IDs.",
        "properties": {
          "data": {
            "description": "The definition of an archive order.",
            "properties": {
              "attributes": {
                "description": "The attributes associated with the archive order.",
                "properties": {
                  "archive_ids": {
                    "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                    "example": [
                      "a2zcMylnM4OCHpYusxIi1g",
                      "a2zcMylnM4OCHpYusxIi2g",
                      "a2zcMylnM4OCHpYusxIi3g"
                    ],
                    "items": {
                      "description": "A given archive ID.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "archive_ids"
                ],
                "type": "object"
              },
              "type": {
                "default": "archive_order",
                "description": "Type of the archive order definition.",
                "enum": [
                  "archive_order"
                ],
                "example": "archive_order",
                "type": "string",
                "x-enum-varnames": [
                  "ARCHIVE_ORDER"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsArchiveOrderAttributes": {
        "description": "The attributes associated with the archive order.",
        "properties": {
          "archive_ids": {
            "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
            "example": [
              "a2zcMylnM4OCHpYusxIi1g",
              "a2zcMylnM4OCHpYusxIi2g",
              "a2zcMylnM4OCHpYusxIi3g"
            ],
            "items": {
              "description": "A given archive ID.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "archive_ids"
        ],
        "type": "object"
      },
      "LogsArchiveOrderDefinition": {
        "description": "The definition of an archive order.",
        "properties": {
          "attributes": {
            "description": "The attributes associated with the archive order.",
            "properties": {
              "archive_ids": {
                "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                "example": [
                  "a2zcMylnM4OCHpYusxIi1g",
                  "a2zcMylnM4OCHpYusxIi2g",
                  "a2zcMylnM4OCHpYusxIi3g"
                ],
                "items": {
                  "description": "A given archive ID.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "archive_ids"
            ],
            "type": "object"
          },
          "type": {
            "default": "archive_order",
            "description": "Type of the archive order definition.",
            "enum": [
              "archive_order"
            ],
            "example": "archive_order",
            "type": "string",
            "x-enum-varnames": [
              "ARCHIVE_ORDER"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "LogsArchiveOrderDefinitionType": {
        "default": "archive_order",
        "description": "Type of the archive order definition.",
        "enum": [
          "archive_order"
        ],
        "example": "archive_order",
        "type": "string",
        "x-enum-varnames": [
          "ARCHIVE_ORDER"
        ]
      },
      "LogsArchiveState": {
        "description": "The state of the archive.",
        "enum": [
          "UNKNOWN",
          "WORKING",
          "FAILING",
          "WORKING_AUTH_LEGACY"
        ],
        "example": "WORKING",
        "type": "string",
        "x-enum-varnames": [
          "UNKNOWN",
          "WORKING",
          "FAILING",
          "WORKING_AUTH_LEGACY"
        ]
      },
      "LogsArchives": {
        "description": "The available archives.",
        "properties": {
          "data": {
            "description": "A list of archives.",
            "items": {
              "description": "The definition of an archive.",
              "properties": {
                "attributes": {
                  "description": "The attributes associated with the archive.",
                  "properties": {
                    "destination": {
                      "description": "An archive's destination.",
                      "nullable": true,
                      "oneOf": [
                        {
                          "description": "The Azure archive destination.",
                          "properties": {
                            "container": {
                              "description": "The container where the archive will be stored.",
                              "example": "container-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The Azure archive's integration destination.",
                              "properties": {
                                "client_id": {
                                  "description": "A client ID.",
                                  "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                  "type": "string"
                                },
                                "tenant_id": {
                                  "description": "A tenant ID.",
                                  "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "tenant_id",
                                "client_id"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "region": {
                              "description": "The region where the archive will be stored.",
                              "type": "string"
                            },
                            "storage_account": {
                              "description": "The associated storage account.",
                              "example": "account-name",
                              "type": "string"
                            },
                            "type": {
                              "default": "azure",
                              "description": "Type of the Azure archive destination.",
                              "enum": [
                                "azure"
                              ],
                              "example": "azure",
                              "type": "string",
                              "x-enum-varnames": [
                                "AZURE"
                              ]
                            }
                          },
                          "required": [
                            "storage_account",
                            "container",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The GCS archive destination.",
                          "properties": {
                            "bucket": {
                              "description": "The bucket where the archive will be stored.",
                              "example": "bucket-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The GCS archive's integration destination.",
                              "properties": {
                                "client_email": {
                                  "description": "A client email.",
                                  "example": "youremail@example.com",
                                  "type": "string"
                                },
                                "project_id": {
                                  "description": "A project ID.",
                                  "example": "project-id",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "project_id",
                                "client_email"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "type": {
                              "default": "gcs",
                              "description": "Type of the GCS archive destination.",
                              "enum": [
                                "gcs"
                              ],
                              "example": "gcs",
                              "type": "string",
                              "x-enum-varnames": [
                                "GCS"
                              ]
                            }
                          },
                          "required": [
                            "bucket",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "description": "The S3 archive destination.",
                          "properties": {
                            "bucket": {
                              "description": "The bucket where the archive will be stored.",
                              "example": "bucket-name",
                              "type": "string"
                            },
                            "integration": {
                              "description": "The S3 Archive's integration destination.",
                              "properties": {
                                "account_id": {
                                  "description": "The account ID for the integration.",
                                  "example": "123456789012",
                                  "type": "string"
                                },
                                "role_name": {
                                  "description": "The path of the integration.",
                                  "example": "role-name",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "role_name",
                                "account_id"
                              ],
                              "type": "object"
                            },
                            "path": {
                              "description": "The archive path.",
                              "type": "string"
                            },
                            "type": {
                              "default": "s3",
                              "description": "Type of the S3 archive destination.",
                              "enum": [
                                "s3"
                              ],
                              "example": "s3",
                              "type": "string",
                              "x-enum-varnames": [
                                "S3"
                              ]
                            }
                          },
                          "required": [
                            "bucket",
                            "integration",
                            "type"
                          ],
                          "type": "object"
                        }
                      ],
                      "required": [
                        "type",
                        "integration"
                      ],
                      "type": "object"
                    },
                    "include_tags": {
                      "default": false,
                      "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                      "example": false,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The archive name.",
                      "example": "Nginx Archive",
                      "type": "string"
                    },
                    "query": {
                      "description": "The archive query/filter. Logs matching this query are included in the archive.",
                      "example": "source:nginx",
                      "type": "string"
                    },
                    "rehydration_max_scan_size_in_gb": {
                      "description": "Maximum scan size for rehydration from this archive.",
                      "example": 100,
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    },
                    "rehydration_tags": {
                      "description": "An array of tags to add to rehydrated logs from an archive.",
                      "example": [
                        "team:intake",
                        "team:app"
                      ],
                      "items": {
                        "description": "A given tag in the `<KEY>:<VALUE>` format.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "state": {
                      "description": "The state of the archive.",
                      "enum": [
                        "UNKNOWN",
                        "WORKING",
                        "FAILING",
                        "WORKING_AUTH_LEGACY"
                      ],
                      "example": "WORKING",
                      "type": "string",
                      "x-enum-varnames": [
                        "UNKNOWN",
                        "WORKING",
                        "FAILING",
                        "WORKING_AUTH_LEGACY"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "query",
                    "destination"
                  ],
                  "type": "object"
                },
                "id": {
                  "description": "The archive ID.",
                  "example": "a2zcMylnM4OCHpYusxIi3g",
                  "readOnly": true,
                  "type": "string"
                },
                "type": {
                  "default": "archives",
                  "description": "The type of the resource. The value should always be archives.",
                  "example": "archives",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsCompute": {
        "description": "A compute rule to compute metrics or timeseries",
        "properties": {
          "aggregation": {
            "description": "An aggregation function",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg",
              "median"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MEDIAN"
            ]
          },
          "interval": {
            "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
            "example": "5m",
            "type": "string"
          },
          "metric": {
            "description": "The metric to use",
            "example": "@duration",
            "type": "string"
          },
          "type": {
            "default": "total",
            "description": "The type of compute",
            "enum": [
              "timeseries",
              "total"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESERIES",
              "TOTAL"
            ]
          }
        },
        "required": [
          "aggregation"
        ],
        "type": "object"
      },
      "LogsComputeType": {
        "default": "total",
        "description": "The type of compute",
        "enum": [
          "timeseries",
          "total"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESERIES",
          "TOTAL"
        ]
      },
      "LogsGroupBy": {
        "description": "A group by rule",
        "properties": {
          "facet": {
            "description": "The name of the facet to use (required)",
            "example": "host",
            "type": "string"
          },
          "histogram": {
            "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
            "properties": {
              "interval": {
                "description": "The bin size of the histogram buckets",
                "example": 10,
                "format": "double",
                "type": "number"
              },
              "max": {
                "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                "example": 100,
                "format": "double",
                "type": "number"
              },
              "min": {
                "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                "example": 50,
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "interval",
              "min",
              "max"
            ],
            "type": "object"
          },
          "limit": {
            "default": 10,
            "description": "The maximum buckets to return for this group by",
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "description": "The value to use for logs that don't have the facet used to group by",
            "oneOf": [
              {
                "description": "The missing value to use if there is string valued facet.",
                "type": "string"
              },
              {
                "description": "The missing value to use if there is a number valued facet.",
                "format": "double",
                "type": "number"
              }
            ]
          },
          "sort": {
            "description": "A sort rule",
            "example": {
              "aggregation": "count",
              "order": "asc"
            },
            "properties": {
              "aggregation": {
                "description": "An aggregation function",
                "enum": [
                  "count",
                  "cardinality",
                  "pc75",
                  "pc90",
                  "pc95",
                  "pc98",
                  "pc99",
                  "sum",
                  "min",
                  "max",
                  "avg",
                  "median"
                ],
                "example": "pc90",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT",
                  "CARDINALITY",
                  "PERCENTILE_75",
                  "PERCENTILE_90",
                  "PERCENTILE_95",
                  "PERCENTILE_98",
                  "PERCENTILE_99",
                  "SUM",
                  "MIN",
                  "MAX",
                  "AVG",
                  "MEDIAN"
                ]
              },
              "metric": {
                "description": "The metric to sort by (only used for `type=measure`)",
                "example": "@duration",
                "type": "string"
              },
              "order": {
                "description": "The order to use, ascending or descending",
                "enum": [
                  "asc",
                  "desc"
                ],
                "example": "asc",
                "type": "string",
                "x-enum-varnames": [
                  "ASCENDING",
                  "DESCENDING"
                ]
              },
              "type": {
                "default": "alphabetical",
                "description": "The type of sorting algorithm",
                "enum": [
                  "alphabetical",
                  "measure"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "ALPHABETICAL",
                  "MEASURE"
                ]
              }
            },
            "type": "object"
          },
          "total": {
            "default": false,
            "description": "A resulting object to put the given computes in over all the matching records.",
            "oneOf": [
              {
                "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                "type": "boolean"
              },
              {
                "description": "A string to use as the key value for the total bucket",
                "type": "string"
              },
              {
                "description": "A number to use as the key value for the total bucket",
                "format": "double",
                "type": "number"
              }
            ]
          }
        },
        "required": [
          "facet"
        ],
        "type": "object"
      },
      "LogsGroupByHistogram": {
        "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
        "properties": {
          "interval": {
            "description": "The bin size of the histogram buckets",
            "example": 10,
            "format": "double",
            "type": "number"
          },
          "max": {
            "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
            "example": 100,
            "format": "double",
            "type": "number"
          },
          "min": {
            "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
            "example": 50,
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "interval",
          "min",
          "max"
        ],
        "type": "object"
      },
      "LogsGroupByMissing": {
        "description": "The value to use for logs that don't have the facet used to group by",
        "oneOf": [
          {
            "description": "The missing value to use if there is string valued facet.",
            "type": "string"
          },
          {
            "description": "The missing value to use if there is a number valued facet.",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "LogsGroupByMissingNumber": {
        "description": "The missing value to use if there is a number valued facet.",
        "format": "double",
        "type": "number"
      },
      "LogsGroupByMissingString": {
        "description": "The missing value to use if there is string valued facet.",
        "type": "string"
      },
      "LogsGroupByTotal": {
        "default": false,
        "description": "A resulting object to put the given computes in over all the matching records.",
        "oneOf": [
          {
            "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
            "type": "boolean"
          },
          {
            "description": "A string to use as the key value for the total bucket",
            "type": "string"
          },
          {
            "description": "A number to use as the key value for the total bucket",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "LogsGroupByTotalBoolean": {
        "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
        "type": "boolean"
      },
      "LogsGroupByTotalNumber": {
        "description": "A number to use as the key value for the total bucket",
        "format": "double",
        "type": "number"
      },
      "LogsGroupByTotalString": {
        "description": "A string to use as the key value for the total bucket",
        "type": "string"
      },
      "LogsListRequest": {
        "description": "The request for a logs list.",
        "properties": {
          "filter": {
            "description": "The search and filter query settings",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                "example": "now-15m",
                "type": "string"
              },
              "indexes": {
                "default": [
                  "*"
                ],
                "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                "example": [
                  "main",
                  "web"
                ],
                "items": {
                  "description": "The name of a log index.",
                  "type": "string"
                },
                "type": "array"
              },
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
            "properties": {
              "timeOffset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging attributes for listing logs.",
            "properties": {
              "cursor": {
                "description": "List following results with a cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "Maximum number of logs in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "Sort parameters when querying logs.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "LogsListRequestPage": {
        "description": "Paging attributes for listing logs.",
        "properties": {
          "cursor": {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          },
          "limit": {
            "default": 10,
            "description": "Maximum number of logs in the response.",
            "example": 25,
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LogsListResponse": {
        "description": "Response object with all logs matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "Array of logs matching the request.",
            "items": {
              "description": "Object description of a log after being processed and stored by Datadog.",
              "properties": {
                "attributes": {
                  "description": "JSON object containing all log attributes and their associated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "JSON object of attributes from your log.",
                      "example": {
                        "customAttribute": 123,
                        "duration": 2345
                      },
                      "type": "object"
                    },
                    "host": {
                      "description": "Name of the machine from where the logs are being sent.",
                      "example": "i-0123",
                      "type": "string"
                    },
                    "message": {
                      "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                      "example": "Host connected to remote",
                      "type": "string"
                    },
                    "service": {
                      "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                      "example": "agent",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the message associated with your log.",
                      "example": "INFO",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Array of tags associated with your log.",
                      "example": [
                        "team:A"
                      ],
                      "items": {
                        "description": "Tag associated with your log.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "Timestamp of your log.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the Log.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "log",
                  "description": "Type of the event.",
                  "enum": [
                    "log"
                  ],
                  "example": "log",
                  "type": "string",
                  "x-enum-varnames": [
                    "LOG"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsListResponseLinks": {
        "description": "Links attributes.",
        "properties": {
          "next": {
            "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
            "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsMetricCompute": {
        "description": "The compute rule to compute the log-based metric.",
        "properties": {
          "aggregation_type": {
            "description": "The type of aggregation to use.",
            "enum": [
              "count",
              "distribution"
            ],
            "example": "distribution",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "DISTRIBUTION"
            ]
          },
          "path": {
            "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
            "example": "@duration",
            "type": "string"
          }
        },
        "required": [
          "aggregation_type"
        ],
        "type": "object"
      },
      "LogsMetricComputeAggregationType": {
        "description": "The type of aggregation to use.",
        "enum": [
          "count",
          "distribution"
        ],
        "example": "distribution",
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "DISTRIBUTION"
        ]
      },
      "LogsMetricCreateAttributes": {
        "description": "The object describing the Datadog log-based metric to create.",
        "properties": {
          "compute": {
            "description": "The compute rule to compute the log-based metric.",
            "properties": {
              "aggregation_type": {
                "description": "The type of aggregation to use.",
                "enum": [
                  "count",
                  "distribution"
                ],
                "example": "distribution",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT",
                  "DISTRIBUTION"
                ]
              },
              "path": {
                "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                "example": "@duration",
                "type": "string"
              }
            },
            "required": [
              "aggregation_type"
            ],
            "type": "object"
          },
          "filter": {
            "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
            "properties": {
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by.",
            "items": {
              "description": "A group by rule.",
              "properties": {
                "path": {
                  "description": "The path to the value the log-based metric will be aggregated over.",
                  "example": "@http.status_code",
                  "type": "string"
                },
                "tag_name": {
                  "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                  "example": "status_code",
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "compute"
        ],
        "type": "object"
      },
      "LogsMetricCreateData": {
        "description": "The new log-based metric properties.",
        "properties": {
          "attributes": {
            "description": "The object describing the Datadog log-based metric to create.",
            "properties": {
              "compute": {
                "description": "The compute rule to compute the log-based metric.",
                "properties": {
                  "aggregation_type": {
                    "description": "The type of aggregation to use.",
                    "enum": [
                      "count",
                      "distribution"
                    ],
                    "example": "distribution",
                    "type": "string",
                    "x-enum-varnames": [
                      "COUNT",
                      "DISTRIBUTION"
                    ]
                  },
                  "path": {
                    "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                    "example": "@duration",
                    "type": "string"
                  }
                },
                "required": [
                  "aggregation_type"
                ],
                "type": "object"
              },
              "filter": {
                "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                "properties": {
                  "query": {
                    "default": "*",
                    "description": "The search query - following the log search syntax.",
                    "example": "service:web* AND @http.status_code:[200 TO 299]",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "group_by": {
                "description": "The rules for the group by.",
                "items": {
                  "description": "A group by rule.",
                  "properties": {
                    "path": {
                      "description": "The path to the value the log-based metric will be aggregated over.",
                      "example": "@http.status_code",
                      "type": "string"
                    },
                    "tag_name": {
                      "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                      "example": "status_code",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "compute"
            ],
            "type": "object"
          },
          "id": {
            "description": "The name of the log-based metric.",
            "example": "logs.page.load.count",
            "type": "string"
          },
          "type": {
            "default": "logs_metrics",
            "description": "The type of the resource. The value should always be logs_metrics.",
            "enum": [
              "logs_metrics"
            ],
            "example": "logs_metrics",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_METRICS"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "LogsMetricCreateRequest": {
        "description": "The new log-based metric body.",
        "properties": {
          "data": {
            "description": "The new log-based metric properties.",
            "properties": {
              "attributes": {
                "description": "The object describing the Datadog log-based metric to create.",
                "properties": {
                  "compute": {
                    "description": "The compute rule to compute the log-based metric.",
                    "properties": {
                      "aggregation_type": {
                        "description": "The type of aggregation to use.",
                        "enum": [
                          "count",
                          "distribution"
                        ],
                        "example": "distribution",
                        "type": "string",
                        "x-enum-varnames": [
                          "COUNT",
                          "DISTRIBUTION"
                        ]
                      },
                      "path": {
                        "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                        "example": "@duration",
                        "type": "string"
                      }
                    },
                    "required": [
                      "aggregation_type"
                    ],
                    "type": "object"
                  },
                  "filter": {
                    "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                    "properties": {
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by.",
                    "items": {
                      "description": "A group by rule.",
                      "properties": {
                        "path": {
                          "description": "The path to the value the log-based metric will be aggregated over.",
                          "example": "@http.status_code",
                          "type": "string"
                        },
                        "tag_name": {
                          "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                          "example": "status_code",
                          "type": "string"
                        }
                      },
                      "required": [
                        "path"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "compute"
                ],
                "type": "object"
              },
              "id": {
                "description": "The name of the log-based metric.",
                "example": "logs.page.load.count",
                "type": "string"
              },
              "type": {
                "default": "logs_metrics",
                "description": "The type of the resource. The value should always be logs_metrics.",
                "enum": [
                  "logs_metrics"
                ],
                "example": "logs_metrics",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_METRICS"
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "LogsMetricFilter": {
        "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
        "properties": {
          "query": {
            "default": "*",
            "description": "The search query - following the log search syntax.",
            "example": "service:web* AND @http.status_code:[200 TO 299]",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsMetricGroupBy": {
        "description": "A group by rule.",
        "properties": {
          "path": {
            "description": "The path to the value the log-based metric will be aggregated over.",
            "example": "@http.status_code",
            "type": "string"
          },
          "tag_name": {
            "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
            "example": "status_code",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      },
      "LogsMetricID": {
        "description": "The name of the log-based metric.",
        "example": "logs.page.load.count",
        "type": "string"
      },
      "LogsMetricResponse": {
        "description": "The log-based metric object.",
        "properties": {
          "data": {
            "description": "The log-based metric properties.",
            "properties": {
              "attributes": {
                "description": "The object describing a Datadog log-based metric.",
                "properties": {
                  "compute": {
                    "description": "The compute rule to compute the log-based metric.",
                    "properties": {
                      "aggregation_type": {
                        "description": "The type of aggregation to use.",
                        "enum": [
                          "count",
                          "distribution"
                        ],
                        "example": "distribution",
                        "type": "string",
                        "x-enum-varnames": [
                          "COUNT",
                          "DISTRIBUTION"
                        ]
                      },
                      "path": {
                        "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                        "example": "@duration",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "filter": {
                    "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                    "properties": {
                      "query": {
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by.",
                    "items": {
                      "description": "A group by rule.",
                      "properties": {
                        "path": {
                          "description": "The path to the value the log-based metric will be aggregated over.",
                          "example": "@http.status_code",
                          "type": "string"
                        },
                        "tag_name": {
                          "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                          "example": "status_code",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The name of the log-based metric.",
                "example": "logs.page.load.count",
                "type": "string"
              },
              "type": {
                "default": "logs_metrics",
                "description": "The type of the resource. The value should always be logs_metrics.",
                "enum": [
                  "logs_metrics"
                ],
                "example": "logs_metrics",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_METRICS"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogsMetricResponseAttributes": {
        "description": "The object describing a Datadog log-based metric.",
        "properties": {
          "compute": {
            "description": "The compute rule to compute the log-based metric.",
            "properties": {
              "aggregation_type": {
                "description": "The type of aggregation to use.",
                "enum": [
                  "count",
                  "distribution"
                ],
                "example": "distribution",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT",
                  "DISTRIBUTION"
                ]
              },
              "path": {
                "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                "example": "@duration",
                "type": "string"
              }
            },
            "type": "object"
          },
          "filter": {
            "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
            "properties": {
              "query": {
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by.",
            "items": {
              "description": "A group by rule.",
              "properties": {
                "path": {
                  "description": "The path to the value the log-based metric will be aggregated over.",
                  "example": "@http.status_code",
                  "type": "string"
                },
                "tag_name": {
                  "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                  "example": "status_code",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsMetricResponseCompute": {
        "description": "The compute rule to compute the log-based metric.",
        "properties": {
          "aggregation_type": {
            "description": "The type of aggregation to use.",
            "enum": [
              "count",
              "distribution"
            ],
            "example": "distribution",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "DISTRIBUTION"
            ]
          },
          "path": {
            "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
            "example": "@duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsMetricResponseComputeAggregationType": {
        "description": "The type of aggregation to use.",
        "enum": [
          "count",
          "distribution"
        ],
        "example": "distribution",
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "DISTRIBUTION"
        ]
      },
      "LogsMetricResponseData": {
        "description": "The log-based metric properties.",
        "properties": {
          "attributes": {
            "description": "The object describing a Datadog log-based metric.",
            "properties": {
              "compute": {
                "description": "The compute rule to compute the log-based metric.",
                "properties": {
                  "aggregation_type": {
                    "description": "The type of aggregation to use.",
                    "enum": [
                      "count",
                      "distribution"
                    ],
                    "example": "distribution",
                    "type": "string",
                    "x-enum-varnames": [
                      "COUNT",
                      "DISTRIBUTION"
                    ]
                  },
                  "path": {
                    "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                    "example": "@duration",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "filter": {
                "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                "properties": {
                  "query": {
                    "description": "The search query - following the log search syntax.",
                    "example": "service:web* AND @http.status_code:[200 TO 299]",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "group_by": {
                "description": "The rules for the group by.",
                "items": {
                  "description": "A group by rule.",
                  "properties": {
                    "path": {
                      "description": "The path to the value the log-based metric will be aggregated over.",
                      "example": "@http.status_code",
                      "type": "string"
                    },
                    "tag_name": {
                      "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                      "example": "status_code",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The name of the log-based metric.",
            "example": "logs.page.load.count",
            "type": "string"
          },
          "type": {
            "default": "logs_metrics",
            "description": "The type of the resource. The value should always be logs_metrics.",
            "enum": [
              "logs_metrics"
            ],
            "example": "logs_metrics",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_METRICS"
            ]
          }
        },
        "type": "object"
      },
      "LogsMetricResponseFilter": {
        "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
        "properties": {
          "query": {
            "description": "The search query - following the log search syntax.",
            "example": "service:web* AND @http.status_code:[200 TO 299]",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsMetricResponseGroupBy": {
        "description": "A group by rule.",
        "properties": {
          "path": {
            "description": "The path to the value the log-based metric will be aggregated over.",
            "example": "@http.status_code",
            "type": "string"
          },
          "tag_name": {
            "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
            "example": "status_code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsMetricType": {
        "default": "logs_metrics",
        "description": "The type of the resource. The value should always be logs_metrics.",
        "enum": [
          "logs_metrics"
        ],
        "example": "logs_metrics",
        "type": "string",
        "x-enum-varnames": [
          "LOGS_METRICS"
        ]
      },
      "LogsMetricUpdateAttributes": {
        "description": "The log-based metric properties that will be updated.",
        "properties": {
          "filter": {
            "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
            "properties": {
              "query": {
                "default": "*",
                "description": "The search query - following the log search syntax.",
                "example": "service:web* AND @http.status_code:[200 TO 299]",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by.",
            "items": {
              "description": "A group by rule.",
              "properties": {
                "path": {
                  "description": "The path to the value the log-based metric will be aggregated over.",
                  "example": "@http.status_code",
                  "type": "string"
                },
                "tag_name": {
                  "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                  "example": "status_code",
                  "type": "string"
                }
              },
              "required": [
                "path"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsMetricUpdateData": {
        "description": "The new log-based metric properties.",
        "properties": {
          "attributes": {
            "description": "The log-based metric properties that will be updated.",
            "properties": {
              "filter": {
                "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                "properties": {
                  "query": {
                    "default": "*",
                    "description": "The search query - following the log search syntax.",
                    "example": "service:web* AND @http.status_code:[200 TO 299]",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "group_by": {
                "description": "The rules for the group by.",
                "items": {
                  "description": "A group by rule.",
                  "properties": {
                    "path": {
                      "description": "The path to the value the log-based metric will be aggregated over.",
                      "example": "@http.status_code",
                      "type": "string"
                    },
                    "tag_name": {
                      "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                      "example": "status_code",
                      "type": "string"
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_metrics",
            "description": "The type of the resource. The value should always be logs_metrics.",
            "enum": [
              "logs_metrics"
            ],
            "example": "logs_metrics",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_METRICS"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "LogsMetricUpdateRequest": {
        "description": "The new log-based metric body.",
        "properties": {
          "data": {
            "description": "The new log-based metric properties.",
            "properties": {
              "attributes": {
                "description": "The log-based metric properties that will be updated.",
                "properties": {
                  "filter": {
                    "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                    "properties": {
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by.",
                    "items": {
                      "description": "A group by rule.",
                      "properties": {
                        "path": {
                          "description": "The path to the value the log-based metric will be aggregated over.",
                          "example": "@http.status_code",
                          "type": "string"
                        },
                        "tag_name": {
                          "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                          "example": "status_code",
                          "type": "string"
                        }
                      },
                      "required": [
                        "path"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_metrics",
                "description": "The type of the resource. The value should always be logs_metrics.",
                "enum": [
                  "logs_metrics"
                ],
                "example": "logs_metrics",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_METRICS"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "LogsMetricsResponse": {
        "description": "All the available log-based metric objects.",
        "properties": {
          "data": {
            "description": "A list of log-based metric objects.",
            "items": {
              "description": "The log-based metric properties.",
              "properties": {
                "attributes": {
                  "description": "The object describing a Datadog log-based metric.",
                  "properties": {
                    "compute": {
                      "description": "The compute rule to compute the log-based metric.",
                      "properties": {
                        "aggregation_type": {
                          "description": "The type of aggregation to use.",
                          "enum": [
                            "count",
                            "distribution"
                          ],
                          "example": "distribution",
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "DISTRIBUTION"
                          ]
                        },
                        "path": {
                          "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                          "example": "@duration",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "filter": {
                      "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                      "properties": {
                        "query": {
                          "description": "The search query - following the log search syntax.",
                          "example": "service:web* AND @http.status_code:[200 TO 299]",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "group_by": {
                      "description": "The rules for the group by.",
                      "items": {
                        "description": "A group by rule.",
                        "properties": {
                          "path": {
                            "description": "The path to the value the log-based metric will be aggregated over.",
                            "example": "@http.status_code",
                            "type": "string"
                          },
                          "tag_name": {
                            "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                            "example": "status_code",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The name of the log-based metric.",
                  "example": "logs.page.load.count",
                  "type": "string"
                },
                "type": {
                  "default": "logs_metrics",
                  "description": "The type of the resource. The value should always be logs_metrics.",
                  "enum": [
                    "logs_metrics"
                  ],
                  "example": "logs_metrics",
                  "type": "string",
                  "x-enum-varnames": [
                    "LOGS_METRICS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsQueryFilter": {
        "description": "The search and filter query settings",
        "properties": {
          "from": {
            "default": "now-15m",
            "description": "The minimum time for the requested logs, supports date math and regular timestamps (milliseconds).",
            "example": "now-15m",
            "type": "string"
          },
          "indexes": {
            "default": [
              "*"
            ],
            "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
            "example": [
              "main",
              "web"
            ],
            "items": {
              "description": "The name of a log index.",
              "type": "string"
            },
            "type": "array"
          },
          "query": {
            "default": "*",
            "description": "The search query - following the log search syntax.",
            "example": "service:web* AND @http.status_code:[200 TO 299]",
            "type": "string"
          },
          "to": {
            "default": "now",
            "description": "The maximum time for the requested logs, supports date math and regular timestamps (milliseconds).",
            "example": "now",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsQueryOptions": {
        "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
        "properties": {
          "timeOffset": {
            "description": "The time offset (in seconds) to apply to the query.",
            "format": "int64",
            "type": "integer"
          },
          "timezone": {
            "default": "UTC",
            "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
            "example": "GMT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsResponseMetadata": {
        "description": "The metadata associated with a request",
        "properties": {
          "elapsed": {
            "description": "The time elapsed in milliseconds",
            "example": 132,
            "format": "int64",
            "type": "integer"
          },
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "request_id": {
            "description": "The identifier of the request",
            "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
            "type": "string"
          },
          "status": {
            "description": "The status of the response",
            "enum": [
              "done",
              "timeout"
            ],
            "example": "done",
            "type": "string",
            "x-enum-varnames": [
              "DONE",
              "TIMEOUT"
            ]
          },
          "warnings": {
            "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
            "items": {
              "description": "A warning message indicating something that went wrong with the query",
              "properties": {
                "code": {
                  "description": "A unique code for this type of warning",
                  "example": "unknown_index",
                  "type": "string"
                },
                "detail": {
                  "description": "A detailed explanation of this specific warning",
                  "example": "indexes: foo, bar",
                  "type": "string"
                },
                "title": {
                  "description": "A short human-readable summary of the warning",
                  "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LogsResponseMetadataPage": {
        "description": "Paging attributes.",
        "properties": {
          "after": {
            "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsRestrictionQueriesType": {
        "default": "logs_restriction_queries",
        "description": "Restriction query resource type.",
        "enum": [
          "logs_restriction_queries"
        ],
        "example": "logs_restriction_queries",
        "type": "string",
        "x-enum-varnames": [
          "LOGS_RESTRICTION_QUERIES"
        ]
      },
      "LogsSort": {
        "description": "Sort parameters when querying logs.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "LogsSortOrder": {
        "description": "The order to use, ascending or descending",
        "enum": [
          "asc",
          "desc"
        ],
        "example": "asc",
        "type": "string",
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "LogsWarning": {
        "description": "A warning message indicating something that went wrong with the query",
        "properties": {
          "code": {
            "description": "A unique code for this type of warning",
            "example": "unknown_index",
            "type": "string"
          },
          "detail": {
            "description": "A detailed explanation of this specific warning",
            "example": "indexes: foo, bar",
            "type": "string"
          },
          "title": {
            "description": "A short human-readable summary of the warning",
            "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metric": {
        "description": "Object for a single metric tag configuration.",
        "example": {
          "id": "metric.foo.bar",
          "type": "metrics"
        },
        "properties": {
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "metrics",
            "description": "The metric resource type.",
            "enum": [
              "metrics"
            ],
            "example": "metrics",
            "type": "string",
            "x-enum-varnames": [
              "METRICS"
            ]
          }
        },
        "type": "object"
      },
      "MetricAllTags": {
        "description": "Object for a single metric's indexed tags.",
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric's tags.",
            "properties": {
              "tags": {
                "description": "List of indexed tag value pairs.",
                "example": [
                  "sport:golf",
                  "sport:football",
                  "animal:dog"
                ],
                "items": {
                  "description": "Tag key-value pairs.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "metrics",
            "description": "The metric resource type.",
            "enum": [
              "metrics"
            ],
            "example": "metrics",
            "type": "string",
            "x-enum-varnames": [
              "METRICS"
            ]
          }
        },
        "type": "object"
      },
      "MetricAllTagsAttributes": {
        "description": "Object containing the definition of a metric's tags.",
        "properties": {
          "tags": {
            "description": "List of indexed tag value pairs.",
            "example": [
              "sport:golf",
              "sport:football",
              "animal:dog"
            ],
            "items": {
              "description": "Tag key-value pairs.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricAllTagsResponse": {
        "description": "Response object that includes a single metric's indexed tags.",
        "properties": {
          "data": {
            "description": "Object for a single metric's indexed tags.",
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric's tags.",
                "properties": {
                  "tags": {
                    "description": "List of indexed tag value pairs.",
                    "example": [
                      "sport:golf",
                      "sport:football",
                      "animal:dog"
                    ],
                    "items": {
                      "description": "Tag key-value pairs.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "metrics",
                "description": "The metric resource type.",
                "enum": [
                  "metrics"
                ],
                "example": "metrics",
                "type": "string",
                "x-enum-varnames": [
                  "METRICS"
                ]
              }
            },
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "MetricBulkConfigureTagsType": {
        "default": "metric_bulk_configure_tags",
        "description": "The metric bulk configure tags resource.",
        "enum": [
          "metric_bulk_configure_tags"
        ],
        "example": "metric_bulk_configure_tags",
        "type": "string",
        "x-enum-varnames": [
          "BULK_MANAGE_TAGS"
        ]
      },
      "MetricBulkTagConfigCreate": {
        "description": "Request object to bulk configure tags for metrics matching the given prefix.",
        "properties": {
          "attributes": {
            "description": "Optional parameters for bulk creating metric tag configurations.",
            "properties": {
              "emails": {
                "description": "A list of account emails to notify when the configuration is applied.",
                "example": [
                  "sue@example.com",
                  "bob@example.com"
                ],
                "items": {
                  "description": "An email address.",
                  "format": "email",
                  "type": "string"
                },
                "type": "array"
              },
              "tags": {
                "description": "A list of tag names to apply to the configuration.",
                "example": [
                  "host",
                  "pod_name",
                  "is_shadow"
                ],
                "items": {
                  "description": "A metric tag name.",
                  "maxLength": 200,
                  "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "A text prefix to match against metric names.",
            "example": "kafka.lag",
            "type": "string"
          },
          "type": {
            "default": "metric_bulk_configure_tags",
            "description": "The metric bulk configure tags resource.",
            "enum": [
              "metric_bulk_configure_tags"
            ],
            "example": "metric_bulk_configure_tags",
            "type": "string",
            "x-enum-varnames": [
              "BULK_MANAGE_TAGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "MetricBulkTagConfigCreateAttributes": {
        "description": "Optional parameters for bulk creating metric tag configurations.",
        "properties": {
          "emails": {
            "description": "A list of account emails to notify when the configuration is applied.",
            "example": [
              "sue@example.com",
              "bob@example.com"
            ],
            "items": {
              "description": "An email address.",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "description": "A list of tag names to apply to the configuration.",
            "example": [
              "host",
              "pod_name",
              "is_shadow"
            ],
            "items": {
              "description": "A metric tag name.",
              "maxLength": 200,
              "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricBulkTagConfigCreateRequest": {
        "description": "Wrapper object for a single bulk tag configuration request.",
        "properties": {
          "data": {
            "description": "Request object to bulk configure tags for metrics matching the given prefix.",
            "properties": {
              "attributes": {
                "description": "Optional parameters for bulk creating metric tag configurations.",
                "properties": {
                  "emails": {
                    "description": "A list of account emails to notify when the configuration is applied.",
                    "example": [
                      "sue@example.com",
                      "bob@example.com"
                    ],
                    "items": {
                      "description": "An email address.",
                      "format": "email",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "tags": {
                    "description": "A list of tag names to apply to the configuration.",
                    "example": [
                      "host",
                      "pod_name",
                      "is_shadow"
                    ],
                    "items": {
                      "description": "A metric tag name.",
                      "maxLength": 200,
                      "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "A text prefix to match against metric names.",
                "example": "kafka.lag",
                "type": "string"
              },
              "type": {
                "default": "metric_bulk_configure_tags",
                "description": "The metric bulk configure tags resource.",
                "enum": [
                  "metric_bulk_configure_tags"
                ],
                "example": "metric_bulk_configure_tags",
                "type": "string",
                "x-enum-varnames": [
                  "BULK_MANAGE_TAGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MetricBulkTagConfigDelete": {
        "description": "Request object to bulk delete all tag configurations for metrics matching the given prefix.",
        "properties": {
          "attributes": {
            "description": "Optional parameters for bulk deleting metric tag configurations.",
            "properties": {
              "emails": {
                "description": "A list of account emails to notify when the configuration is applied.",
                "example": [
                  "sue@example.com",
                  "bob@example.com"
                ],
                "items": {
                  "description": "An email address.",
                  "format": "email",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "A text prefix to match against metric names.",
            "example": "kafka.lag",
            "type": "string"
          },
          "type": {
            "default": "metric_bulk_configure_tags",
            "description": "The metric bulk configure tags resource.",
            "enum": [
              "metric_bulk_configure_tags"
            ],
            "example": "metric_bulk_configure_tags",
            "type": "string",
            "x-enum-varnames": [
              "BULK_MANAGE_TAGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "MetricBulkTagConfigDeleteAttributes": {
        "description": "Optional parameters for bulk deleting metric tag configurations.",
        "properties": {
          "emails": {
            "description": "A list of account emails to notify when the configuration is applied.",
            "example": [
              "sue@example.com",
              "bob@example.com"
            ],
            "items": {
              "description": "An email address.",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricBulkTagConfigDeleteRequest": {
        "description": "Wrapper object for a single bulk tag deletion request.",
        "properties": {
          "data": {
            "description": "Request object to bulk delete all tag configurations for metrics matching the given prefix.",
            "properties": {
              "attributes": {
                "description": "Optional parameters for bulk deleting metric tag configurations.",
                "properties": {
                  "emails": {
                    "description": "A list of account emails to notify when the configuration is applied.",
                    "example": [
                      "sue@example.com",
                      "bob@example.com"
                    ],
                    "items": {
                      "description": "An email address.",
                      "format": "email",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "A text prefix to match against metric names.",
                "example": "kafka.lag",
                "type": "string"
              },
              "type": {
                "default": "metric_bulk_configure_tags",
                "description": "The metric bulk configure tags resource.",
                "enum": [
                  "metric_bulk_configure_tags"
                ],
                "example": "metric_bulk_configure_tags",
                "type": "string",
                "x-enum-varnames": [
                  "BULK_MANAGE_TAGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MetricBulkTagConfigEmailList": {
        "description": "A list of account emails to notify when the configuration is applied.",
        "example": [
          "sue@example.com",
          "bob@example.com"
        ],
        "items": {
          "description": "An email address.",
          "format": "email",
          "type": "string"
        },
        "type": "array"
      },
      "MetricBulkTagConfigNamePrefix": {
        "description": "A text prefix to match against metric names.",
        "example": "kafka.lag",
        "type": "string"
      },
      "MetricBulkTagConfigResponse": {
        "description": "Wrapper for a single bulk tag configuration status response.",
        "properties": {
          "data": {
            "description": "The status of a request to bulk configure metric tags.\nIt contains the fields from the original request for reference.",
            "properties": {
              "attributes": {
                "description": "Optional attributes for the status of a bulk tag configuration request.",
                "properties": {
                  "emails": {
                    "description": "A list of account emails to notify when the configuration is applied.",
                    "example": [
                      "sue@example.com",
                      "bob@example.com"
                    ],
                    "items": {
                      "description": "An email address.",
                      "format": "email",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "description": "The status of the request.",
                    "example": "Accepted",
                    "type": "string"
                  },
                  "tags": {
                    "description": "A list of tag names to apply to the configuration.",
                    "example": [
                      "host",
                      "pod_name",
                      "is_shadow"
                    ],
                    "items": {
                      "description": "A metric tag name.",
                      "maxLength": 200,
                      "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "A text prefix to match against metric names.",
                "example": "kafka.lag",
                "type": "string"
              },
              "type": {
                "default": "metric_bulk_configure_tags",
                "description": "The metric bulk configure tags resource.",
                "enum": [
                  "metric_bulk_configure_tags"
                ],
                "example": "metric_bulk_configure_tags",
                "type": "string",
                "x-enum-varnames": [
                  "BULK_MANAGE_TAGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "MetricBulkTagConfigStatus": {
        "description": "The status of a request to bulk configure metric tags.\nIt contains the fields from the original request for reference.",
        "properties": {
          "attributes": {
            "description": "Optional attributes for the status of a bulk tag configuration request.",
            "properties": {
              "emails": {
                "description": "A list of account emails to notify when the configuration is applied.",
                "example": [
                  "sue@example.com",
                  "bob@example.com"
                ],
                "items": {
                  "description": "An email address.",
                  "format": "email",
                  "type": "string"
                },
                "type": "array"
              },
              "status": {
                "description": "The status of the request.",
                "example": "Accepted",
                "type": "string"
              },
              "tags": {
                "description": "A list of tag names to apply to the configuration.",
                "example": [
                  "host",
                  "pod_name",
                  "is_shadow"
                ],
                "items": {
                  "description": "A metric tag name.",
                  "maxLength": 200,
                  "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "A text prefix to match against metric names.",
            "example": "kafka.lag",
            "type": "string"
          },
          "type": {
            "default": "metric_bulk_configure_tags",
            "description": "The metric bulk configure tags resource.",
            "enum": [
              "metric_bulk_configure_tags"
            ],
            "example": "metric_bulk_configure_tags",
            "type": "string",
            "x-enum-varnames": [
              "BULK_MANAGE_TAGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "MetricBulkTagConfigStatusAttributes": {
        "description": "Optional attributes for the status of a bulk tag configuration request.",
        "properties": {
          "emails": {
            "description": "A list of account emails to notify when the configuration is applied.",
            "example": [
              "sue@example.com",
              "bob@example.com"
            ],
            "items": {
              "description": "An email address.",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "The status of the request.",
            "example": "Accepted",
            "type": "string"
          },
          "tags": {
            "description": "A list of tag names to apply to the configuration.",
            "example": [
              "host",
              "pod_name",
              "is_shadow"
            ],
            "items": {
              "description": "A metric tag name.",
              "maxLength": 200,
              "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricBulkTagConfigTagNameList": {
        "description": "A list of tag names to apply to the configuration.",
        "example": [
          "host",
          "pod_name",
          "is_shadow"
        ],
        "items": {
          "description": "A metric tag name.",
          "maxLength": 200,
          "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
          "type": "string"
        },
        "type": "array"
      },
      "MetricContentEncoding": {
        "default": "deflate",
        "description": "HTTP header used to compress the media-type.",
        "enum": [
          "deflate"
        ],
        "type": "string",
        "x-enum-varnames": [
          "DEFLATE"
        ]
      },
      "MetricCustomAggregation": {
        "description": "A time and space aggregation combination for use in query.",
        "example": {
          "space": "sum",
          "time": "sum"
        },
        "properties": {
          "space": {
            "description": "A space aggregation for use in query.",
            "enum": [
              "avg",
              "max",
              "min",
              "sum"
            ],
            "example": "sum",
            "type": "string",
            "x-enum-varnames": [
              "AVG",
              "MAX",
              "MIN",
              "SUM"
            ]
          },
          "time": {
            "description": "A time aggregation for use in query.",
            "enum": [
              "avg",
              "count",
              "max",
              "min",
              "sum"
            ],
            "example": "sum",
            "type": "string",
            "x-enum-varnames": [
              "AVG",
              "COUNT",
              "MAX",
              "MIN",
              "SUM"
            ]
          }
        },
        "required": [
          "time",
          "space"
        ],
        "type": "object"
      },
      "MetricCustomAggregations": {
        "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
        "example": [
          {
            "space": "sum",
            "time": "sum"
          },
          {
            "space": "sum",
            "time": "count"
          }
        ],
        "items": {
          "description": "A time and space aggregation combination for use in query.",
          "example": {
            "space": "sum",
            "time": "sum"
          },
          "properties": {
            "space": {
              "description": "A space aggregation for use in query.",
              "enum": [
                "avg",
                "max",
                "min",
                "sum"
              ],
              "example": "sum",
              "type": "string",
              "x-enum-varnames": [
                "AVG",
                "MAX",
                "MIN",
                "SUM"
              ]
            },
            "time": {
              "description": "A time aggregation for use in query.",
              "enum": [
                "avg",
                "count",
                "max",
                "min",
                "sum"
              ],
              "example": "sum",
              "type": "string",
              "x-enum-varnames": [
                "AVG",
                "COUNT",
                "MAX",
                "MIN",
                "SUM"
              ]
            }
          },
          "required": [
            "time",
            "space"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "MetricCustomSpaceAggregation": {
        "description": "A space aggregation for use in query.",
        "enum": [
          "avg",
          "max",
          "min",
          "sum"
        ],
        "example": "sum",
        "type": "string",
        "x-enum-varnames": [
          "AVG",
          "MAX",
          "MIN",
          "SUM"
        ]
      },
      "MetricCustomTimeAggregation": {
        "description": "A time aggregation for use in query.",
        "enum": [
          "avg",
          "count",
          "max",
          "min",
          "sum"
        ],
        "example": "sum",
        "type": "string",
        "x-enum-varnames": [
          "AVG",
          "COUNT",
          "MAX",
          "MIN",
          "SUM"
        ]
      },
      "MetricDistinctVolume": {
        "description": "Object for a single metric's distinct volume.",
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric's distinct volume.",
            "properties": {
              "distinct_volume": {
                "description": "Distinct volume for the given metric.",
                "example": 10,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "distinct_metric_volumes",
            "description": "The metric distinct volume type.",
            "enum": [
              "distinct_metric_volumes"
            ],
            "example": "distinct_metric_volumes",
            "type": "string",
            "x-enum-varnames": [
              "DISTINCT_METRIC_VOLUMES"
            ]
          }
        },
        "type": "object"
      },
      "MetricDistinctVolumeAttributes": {
        "description": "Object containing the definition of a metric's distinct volume.",
        "properties": {
          "distinct_volume": {
            "description": "Distinct volume for the given metric.",
            "example": 10,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetricDistinctVolumeType": {
        "default": "distinct_metric_volumes",
        "description": "The metric distinct volume type.",
        "enum": [
          "distinct_metric_volumes"
        ],
        "example": "distinct_metric_volumes",
        "type": "string",
        "x-enum-varnames": [
          "DISTINCT_METRIC_VOLUMES"
        ]
      },
      "MetricEstimate": {
        "description": "Object for a metric cardinality estimate.",
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric estimate attribute.",
            "properties": {
              "estimate_type": {
                "default": "count_or_gauge",
                "description": "Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.",
                "enum": [
                  "count_or_gauge",
                  "distribution",
                  "percentile"
                ],
                "example": "distribution",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT_OR_GAUGE",
                  "DISTRIBUTION",
                  "PERCENTILE"
                ]
              },
              "estimated_at": {
                "description": "Timestamp when the cardinality estimate was requested.",
                "example": "2022-04-27T09:48:37.463835Z",
                "format": "date-time",
                "type": "string"
              },
              "estimated_output_series": {
                "description": "Estimated cardinality of the metric based on the queried configuration.",
                "example": 50,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "metric_cardinality_estimate",
            "description": "The metric estimate resource type.",
            "enum": [
              "metric_cardinality_estimate"
            ],
            "example": "metric_cardinality_estimate",
            "type": "string",
            "x-enum-varnames": [
              "METRIC_CARDINALITY_ESTIMATE"
            ]
          }
        },
        "type": "object"
      },
      "MetricEstimateAttributes": {
        "description": "Object containing the definition of a metric estimate attribute.",
        "properties": {
          "estimate_type": {
            "default": "count_or_gauge",
            "description": "Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.",
            "enum": [
              "count_or_gauge",
              "distribution",
              "percentile"
            ],
            "example": "distribution",
            "type": "string",
            "x-enum-varnames": [
              "COUNT_OR_GAUGE",
              "DISTRIBUTION",
              "PERCENTILE"
            ]
          },
          "estimated_at": {
            "description": "Timestamp when the cardinality estimate was requested.",
            "example": "2022-04-27T09:48:37.463835Z",
            "format": "date-time",
            "type": "string"
          },
          "estimated_output_series": {
            "description": "Estimated cardinality of the metric based on the queried configuration.",
            "example": 50,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetricEstimateResourceType": {
        "default": "metric_cardinality_estimate",
        "description": "The metric estimate resource type.",
        "enum": [
          "metric_cardinality_estimate"
        ],
        "example": "metric_cardinality_estimate",
        "type": "string",
        "x-enum-varnames": [
          "METRIC_CARDINALITY_ESTIMATE"
        ]
      },
      "MetricEstimateResponse": {
        "description": "Response object that includes metric cardinality estimates.",
        "properties": {
          "data": {
            "description": "Object for a metric cardinality estimate.",
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric estimate attribute.",
                "properties": {
                  "estimate_type": {
                    "default": "count_or_gauge",
                    "description": "Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.",
                    "enum": [
                      "count_or_gauge",
                      "distribution",
                      "percentile"
                    ],
                    "example": "distribution",
                    "type": "string",
                    "x-enum-varnames": [
                      "COUNT_OR_GAUGE",
                      "DISTRIBUTION",
                      "PERCENTILE"
                    ]
                  },
                  "estimated_at": {
                    "description": "Timestamp when the cardinality estimate was requested.",
                    "example": "2022-04-27T09:48:37.463835Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "estimated_output_series": {
                    "description": "Estimated cardinality of the metric based on the queried configuration.",
                    "example": 50,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "metric_cardinality_estimate",
                "description": "The metric estimate resource type.",
                "enum": [
                  "metric_cardinality_estimate"
                ],
                "example": "metric_cardinality_estimate",
                "type": "string",
                "x-enum-varnames": [
                  "METRIC_CARDINALITY_ESTIMATE"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MetricEstimateType": {
        "default": "count_or_gauge",
        "description": "Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.",
        "enum": [
          "count_or_gauge",
          "distribution",
          "percentile"
        ],
        "example": "distribution",
        "type": "string",
        "x-enum-varnames": [
          "COUNT_OR_GAUGE",
          "DISTRIBUTION",
          "PERCENTILE"
        ]
      },
      "MetricIngestedIndexedVolume": {
        "description": "Object for a single metric's ingested and indexed volume.",
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric's ingested and indexed volume.",
            "properties": {
              "indexed_volume": {
                "description": "Indexed volume for the given metric.",
                "example": 10,
                "format": "int64",
                "type": "integer"
              },
              "ingested_volume": {
                "description": "Ingested volume for the given metric.",
                "example": 20,
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "metric_volumes",
            "description": "The metric ingested and indexed volume type.",
            "enum": [
              "metric_volumes"
            ],
            "example": "metric_volumes",
            "type": "string",
            "x-enum-varnames": [
              "METRIC_VOLUMES"
            ]
          }
        },
        "type": "object"
      },
      "MetricIngestedIndexedVolumeAttributes": {
        "description": "Object containing the definition of a metric's ingested and indexed volume.",
        "properties": {
          "indexed_volume": {
            "description": "Indexed volume for the given metric.",
            "example": 10,
            "format": "int64",
            "type": "integer"
          },
          "ingested_volume": {
            "description": "Ingested volume for the given metric.",
            "example": 20,
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetricIngestedIndexedVolumeType": {
        "default": "metric_volumes",
        "description": "The metric ingested and indexed volume type.",
        "enum": [
          "metric_volumes"
        ],
        "example": "metric_volumes",
        "type": "string",
        "x-enum-varnames": [
          "METRIC_VOLUMES"
        ]
      },
      "MetricIntakeType": {
        "description": "The type of metric. The available types are `0` (unspecified), `1` (count), `2` (rate), and `3` (gauge).",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "UNSPECIFIED",
          "COUNT",
          "RATE",
          "GAUGE"
        ]
      },
      "MetricMetadata": {
        "description": "Metadata for the metric.",
        "properties": {
          "origin": {
            "description": "Metric origin information.",
            "properties": {
              "metric_type": {
                "default": 0,
                "description": "The origin metric type code",
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              },
              "product": {
                "default": 0,
                "description": "The origin product code",
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              },
              "service": {
                "default": 0,
                "description": "The origin service code",
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MetricName": {
        "description": "The metric name for this resource.",
        "example": "test.metric.latency",
        "type": "string"
      },
      "MetricOrigin": {
        "description": "Metric origin information.",
        "properties": {
          "metric_type": {
            "default": 0,
            "description": "The origin metric type code",
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          },
          "product": {
            "default": 0,
            "description": "The origin product code",
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          },
          "service": {
            "default": 0,
            "description": "The origin service code",
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetricPayload": {
        "description": "The metrics' payload.",
        "properties": {
          "series": {
            "description": "A list of time series to submit to Datadog.",
            "example": [
              {
                "metric": "system.load.1",
                "points": [
                  {
                    "timestamp": 1475317847,
                    "value": 0.7
                  }
                ],
                "resources": [
                  {
                    "name": "dummyhost",
                    "type": "host"
                  }
                ]
              }
            ],
            "items": {
              "description": "A metric to submit to Datadog.\nSee [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).",
              "properties": {
                "interval": {
                  "description": "If the type of the metric is rate or count, define the corresponding interval.",
                  "example": 20,
                  "format": "int64",
                  "type": "integer"
                },
                "metadata": {
                  "description": "Metadata for the metric.",
                  "properties": {
                    "origin": {
                      "description": "Metric origin information.",
                      "properties": {
                        "metric_type": {
                          "default": 0,
                          "description": "The origin metric type code",
                          "format": "int32",
                          "maximum": 1000,
                          "type": "integer"
                        },
                        "product": {
                          "default": 0,
                          "description": "The origin product code",
                          "format": "int32",
                          "maximum": 1000,
                          "type": "integer"
                        },
                        "service": {
                          "default": 0,
                          "description": "The origin service code",
                          "format": "int32",
                          "maximum": 1000,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "metric": {
                  "description": "The name of the timeseries.",
                  "example": "system.load.1",
                  "type": "string"
                },
                "points": {
                  "description": "Points relating to a metric. All points must be objects with timestamp and a scalar value (cannot be a string). Timestamps should be in POSIX time in seconds, and cannot be more than ten minutes in the future or more than one hour in the past.",
                  "items": {
                    "description": "A point object is of the form `{POSIX_timestamp, numeric_value}`.",
                    "example": {
                      "timestamp": 1575317847,
                      "value": 0.5
                    },
                    "properties": {
                      "timestamp": {
                        "description": "The timestamp should be in seconds and current.\nCurrent is defined as not more than 10 minutes in the future or more than 1 hour in the past.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "value": {
                        "description": "The numeric value format should be a 64bit float gauge-type value.",
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "resources": {
                  "description": "A list of resources to associate with this metric.",
                  "items": {
                    "description": "Metric resource.",
                    "example": {
                      "name": "dummyhost",
                      "type": "host"
                    },
                    "properties": {
                      "name": {
                        "description": "The name of the resource.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "source_type_name": {
                  "description": "The source type name.",
                  "example": "datadog",
                  "type": "string"
                },
                "tags": {
                  "description": "A list of tags associated with the metric.",
                  "example": [
                    "environment:test"
                  ],
                  "items": {
                    "description": "Individual tags.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "The type of metric. The available types are `0` (unspecified), `1` (count), `2` (rate), and `3` (gauge).",
                  "enum": [
                    0,
                    1,
                    2,
                    3
                  ],
                  "format": "int32",
                  "type": "integer",
                  "x-enum-varnames": [
                    "UNSPECIFIED",
                    "COUNT",
                    "RATE",
                    "GAUGE"
                  ]
                },
                "unit": {
                  "description": "The unit of point value.",
                  "example": "second",
                  "type": "string"
                }
              },
              "required": [
                "metric",
                "points"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "series"
        ],
        "type": "object"
      },
      "MetricPoint": {
        "description": "A point object is of the form `{POSIX_timestamp, numeric_value}`.",
        "example": {
          "timestamp": 1575317847,
          "value": 0.5
        },
        "properties": {
          "timestamp": {
            "description": "The timestamp should be in seconds and current.\nCurrent is defined as not more than 10 minutes in the future or more than 1 hour in the past.",
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "description": "The numeric value format should be a 64bit float gauge-type value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "MetricResource": {
        "description": "Metric resource.",
        "example": {
          "name": "dummyhost",
          "type": "host"
        },
        "properties": {
          "name": {
            "description": "The name of the resource.",
            "type": "string"
          },
          "type": {
            "description": "The type of the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricSeries": {
        "description": "A metric to submit to Datadog.\nSee [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).",
        "properties": {
          "interval": {
            "description": "If the type of the metric is rate or count, define the corresponding interval.",
            "example": 20,
            "format": "int64",
            "type": "integer"
          },
          "metadata": {
            "description": "Metadata for the metric.",
            "properties": {
              "origin": {
                "description": "Metric origin information.",
                "properties": {
                  "metric_type": {
                    "default": 0,
                    "description": "The origin metric type code",
                    "format": "int32",
                    "maximum": 1000,
                    "type": "integer"
                  },
                  "product": {
                    "default": 0,
                    "description": "The origin product code",
                    "format": "int32",
                    "maximum": 1000,
                    "type": "integer"
                  },
                  "service": {
                    "default": 0,
                    "description": "The origin service code",
                    "format": "int32",
                    "maximum": 1000,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "metric": {
            "description": "The name of the timeseries.",
            "example": "system.load.1",
            "type": "string"
          },
          "points": {
            "description": "Points relating to a metric. All points must be objects with timestamp and a scalar value (cannot be a string). Timestamps should be in POSIX time in seconds, and cannot be more than ten minutes in the future or more than one hour in the past.",
            "items": {
              "description": "A point object is of the form `{POSIX_timestamp, numeric_value}`.",
              "example": {
                "timestamp": 1575317847,
                "value": 0.5
              },
              "properties": {
                "timestamp": {
                  "description": "The timestamp should be in seconds and current.\nCurrent is defined as not more than 10 minutes in the future or more than 1 hour in the past.",
                  "format": "int64",
                  "type": "integer"
                },
                "value": {
                  "description": "The numeric value format should be a 64bit float gauge-type value.",
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "resources": {
            "description": "A list of resources to associate with this metric.",
            "items": {
              "description": "Metric resource.",
              "example": {
                "name": "dummyhost",
                "type": "host"
              },
              "properties": {
                "name": {
                  "description": "The name of the resource.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the resource.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "source_type_name": {
            "description": "The source type name.",
            "example": "datadog",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags associated with the metric.",
            "example": [
              "environment:test"
            ],
            "items": {
              "description": "Individual tags.",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of metric. The available types are `0` (unspecified), `1` (count), `2` (rate), and `3` (gauge).",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "UNSPECIFIED",
              "COUNT",
              "RATE",
              "GAUGE"
            ]
          },
          "unit": {
            "description": "The unit of point value.",
            "example": "second",
            "type": "string"
          }
        },
        "required": [
          "metric",
          "points"
        ],
        "type": "object"
      },
      "MetricTagConfiguration": {
        "description": "Object for a single metric tag configuration.",
        "example": {
          "attributes": {
            "aggregations": [
              {
                "space": "avg",
                "time": "avg"
              }
            ],
            "created_at": "2020-03-25T09:48:37.463835Z",
            "metric_type": "gauge",
            "modified_at": "2020-04-25T09:48:37.463835Z",
            "tags": [
              "app",
              "datacenter"
            ]
          },
          "id": "http.request.latency",
          "type": "manage_tags"
        },
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric tag configuration attributes.",
            "properties": {
              "aggregations": {
                "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                "example": [
                  {
                    "space": "sum",
                    "time": "sum"
                  },
                  {
                    "space": "sum",
                    "time": "count"
                  }
                ],
                "items": {
                  "description": "A time and space aggregation combination for use in query.",
                  "example": {
                    "space": "sum",
                    "time": "sum"
                  },
                  "properties": {
                    "space": {
                      "description": "A space aggregation for use in query.",
                      "enum": [
                        "avg",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    },
                    "time": {
                      "description": "A time aggregation for use in query.",
                      "enum": [
                        "avg",
                        "count",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "COUNT",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    }
                  },
                  "required": [
                    "time",
                    "space"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "created_at": {
                "description": "Timestamp when the tag configuration was created.",
                "example": "2020-03-25T09:48:37.463835Z",
                "format": "date-time",
                "type": "string"
              },
              "include_percentiles": {
                "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                "example": true,
                "type": "boolean"
              },
              "metric_type": {
                "default": "gauge",
                "description": "The metric's type.",
                "enum": [
                  "gauge",
                  "count",
                  "rate",
                  "distribution"
                ],
                "example": "count",
                "type": "string",
                "x-enum-varnames": [
                  "GAUGE",
                  "COUNT",
                  "RATE",
                  "DISTRIBUTION"
                ]
              },
              "modified_at": {
                "description": "Timestamp when the tag configuration was last modified.",
                "example": "2020-03-25T09:48:37.463835Z",
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "description": "List of tag keys on which to group.",
                "example": [
                  "app",
                  "datacenter"
                ],
                "items": {
                  "description": "Tag keys to group by.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "manage_tags",
            "description": "The metric tag configuration resource type.",
            "enum": [
              "manage_tags"
            ],
            "example": "manage_tags",
            "type": "string",
            "x-enum-varnames": [
              "MANAGE_TAGS"
            ]
          }
        },
        "type": "object"
      },
      "MetricTagConfigurationAttributes": {
        "description": "Object containing the definition of a metric tag configuration attributes.",
        "properties": {
          "aggregations": {
            "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
            "example": [
              {
                "space": "sum",
                "time": "sum"
              },
              {
                "space": "sum",
                "time": "count"
              }
            ],
            "items": {
              "description": "A time and space aggregation combination for use in query.",
              "example": {
                "space": "sum",
                "time": "sum"
              },
              "properties": {
                "space": {
                  "description": "A space aggregation for use in query.",
                  "enum": [
                    "avg",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                },
                "time": {
                  "description": "A time aggregation for use in query.",
                  "enum": [
                    "avg",
                    "count",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "COUNT",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                }
              },
              "required": [
                "time",
                "space"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "created_at": {
            "description": "Timestamp when the tag configuration was created.",
            "example": "2020-03-25T09:48:37.463835Z",
            "format": "date-time",
            "type": "string"
          },
          "include_percentiles": {
            "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
            "example": true,
            "type": "boolean"
          },
          "metric_type": {
            "default": "gauge",
            "description": "The metric's type.",
            "enum": [
              "gauge",
              "count",
              "rate",
              "distribution"
            ],
            "example": "count",
            "type": "string",
            "x-enum-varnames": [
              "GAUGE",
              "COUNT",
              "RATE",
              "DISTRIBUTION"
            ]
          },
          "modified_at": {
            "description": "Timestamp when the tag configuration was last modified.",
            "example": "2020-03-25T09:48:37.463835Z",
            "format": "date-time",
            "type": "string"
          },
          "tags": {
            "description": "List of tag keys on which to group.",
            "example": [
              "app",
              "datacenter"
            ],
            "items": {
              "description": "Tag keys to group by.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricTagConfigurationCreateAttributes": {
        "description": "Object containing the definition of a metric tag configuration to be created.",
        "properties": {
          "aggregations": {
            "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
            "example": [
              {
                "space": "sum",
                "time": "sum"
              },
              {
                "space": "sum",
                "time": "count"
              }
            ],
            "items": {
              "description": "A time and space aggregation combination for use in query.",
              "example": {
                "space": "sum",
                "time": "sum"
              },
              "properties": {
                "space": {
                  "description": "A space aggregation for use in query.",
                  "enum": [
                    "avg",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                },
                "time": {
                  "description": "A time aggregation for use in query.",
                  "enum": [
                    "avg",
                    "count",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "COUNT",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                }
              },
              "required": [
                "time",
                "space"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "include_percentiles": {
            "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
            "example": true,
            "type": "boolean"
          },
          "metric_type": {
            "default": "gauge",
            "description": "The metric's type.",
            "enum": [
              "gauge",
              "count",
              "rate",
              "distribution"
            ],
            "example": "count",
            "type": "string",
            "x-enum-varnames": [
              "GAUGE",
              "COUNT",
              "RATE",
              "DISTRIBUTION"
            ]
          },
          "tags": {
            "default": [],
            "description": "A list of tag keys that will be queryable for your metric.",
            "example": [
              "app",
              "datacenter"
            ],
            "items": {
              "description": "Tag keys to group by.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "tags",
          "metric_type"
        ],
        "type": "object"
      },
      "MetricTagConfigurationCreateData": {
        "description": "Object for a single metric to be configure tags on.",
        "example": {
          "attributes": {
            "include_percentiles": false,
            "metric_type": "distribution",
            "tags": [
              "app",
              "datacenter"
            ]
          },
          "id": "http.endpoint.request",
          "type": "manage_tags"
        },
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric tag configuration to be created.",
            "properties": {
              "aggregations": {
                "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                "example": [
                  {
                    "space": "sum",
                    "time": "sum"
                  },
                  {
                    "space": "sum",
                    "time": "count"
                  }
                ],
                "items": {
                  "description": "A time and space aggregation combination for use in query.",
                  "example": {
                    "space": "sum",
                    "time": "sum"
                  },
                  "properties": {
                    "space": {
                      "description": "A space aggregation for use in query.",
                      "enum": [
                        "avg",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    },
                    "time": {
                      "description": "A time aggregation for use in query.",
                      "enum": [
                        "avg",
                        "count",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "COUNT",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    }
                  },
                  "required": [
                    "time",
                    "space"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "include_percentiles": {
                "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                "example": true,
                "type": "boolean"
              },
              "metric_type": {
                "default": "gauge",
                "description": "The metric's type.",
                "enum": [
                  "gauge",
                  "count",
                  "rate",
                  "distribution"
                ],
                "example": "count",
                "type": "string",
                "x-enum-varnames": [
                  "GAUGE",
                  "COUNT",
                  "RATE",
                  "DISTRIBUTION"
                ]
              },
              "tags": {
                "default": [],
                "description": "A list of tag keys that will be queryable for your metric.",
                "example": [
                  "app",
                  "datacenter"
                ],
                "items": {
                  "description": "Tag keys to group by.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "tags",
              "metric_type"
            ],
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "manage_tags",
            "description": "The metric tag configuration resource type.",
            "enum": [
              "manage_tags"
            ],
            "example": "manage_tags",
            "type": "string",
            "x-enum-varnames": [
              "MANAGE_TAGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "MetricTagConfigurationCreateRequest": {
        "description": "Request object that includes the metric that you would like to configure tags for.",
        "properties": {
          "data": {
            "description": "Object for a single metric to be configure tags on.",
            "example": {
              "attributes": {
                "include_percentiles": false,
                "metric_type": "distribution",
                "tags": [
                  "app",
                  "datacenter"
                ]
              },
              "id": "http.endpoint.request",
              "type": "manage_tags"
            },
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric tag configuration to be created.",
                "properties": {
                  "aggregations": {
                    "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                    "example": [
                      {
                        "space": "sum",
                        "time": "sum"
                      },
                      {
                        "space": "sum",
                        "time": "count"
                      }
                    ],
                    "items": {
                      "description": "A time and space aggregation combination for use in query.",
                      "example": {
                        "space": "sum",
                        "time": "sum"
                      },
                      "properties": {
                        "space": {
                          "description": "A space aggregation for use in query.",
                          "enum": [
                            "avg",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        },
                        "time": {
                          "description": "A time aggregation for use in query.",
                          "enum": [
                            "avg",
                            "count",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "COUNT",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        }
                      },
                      "required": [
                        "time",
                        "space"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "include_percentiles": {
                    "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                    "example": true,
                    "type": "boolean"
                  },
                  "metric_type": {
                    "default": "gauge",
                    "description": "The metric's type.",
                    "enum": [
                      "gauge",
                      "count",
                      "rate",
                      "distribution"
                    ],
                    "example": "count",
                    "type": "string",
                    "x-enum-varnames": [
                      "GAUGE",
                      "COUNT",
                      "RATE",
                      "DISTRIBUTION"
                    ]
                  },
                  "tags": {
                    "default": [],
                    "description": "A list of tag keys that will be queryable for your metric.",
                    "example": [
                      "app",
                      "datacenter"
                    ],
                    "items": {
                      "description": "Tag keys to group by.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "tags",
                  "metric_type"
                ],
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "manage_tags",
                "description": "The metric tag configuration resource type.",
                "enum": [
                  "manage_tags"
                ],
                "example": "manage_tags",
                "type": "string",
                "x-enum-varnames": [
                  "MANAGE_TAGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MetricTagConfigurationMetricTypes": {
        "default": "gauge",
        "description": "The metric's type.",
        "enum": [
          "gauge",
          "count",
          "rate",
          "distribution"
        ],
        "example": "count",
        "type": "string",
        "x-enum-varnames": [
          "GAUGE",
          "COUNT",
          "RATE",
          "DISTRIBUTION"
        ]
      },
      "MetricTagConfigurationResponse": {
        "description": "Response object which includes a single metric's tag configuration.",
        "properties": {
          "data": {
            "description": "Object for a single metric tag configuration.",
            "example": {
              "attributes": {
                "aggregations": [
                  {
                    "space": "avg",
                    "time": "avg"
                  }
                ],
                "created_at": "2020-03-25T09:48:37.463835Z",
                "metric_type": "gauge",
                "modified_at": "2020-04-25T09:48:37.463835Z",
                "tags": [
                  "app",
                  "datacenter"
                ]
              },
              "id": "http.request.latency",
              "type": "manage_tags"
            },
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric tag configuration attributes.",
                "properties": {
                  "aggregations": {
                    "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                    "example": [
                      {
                        "space": "sum",
                        "time": "sum"
                      },
                      {
                        "space": "sum",
                        "time": "count"
                      }
                    ],
                    "items": {
                      "description": "A time and space aggregation combination for use in query.",
                      "example": {
                        "space": "sum",
                        "time": "sum"
                      },
                      "properties": {
                        "space": {
                          "description": "A space aggregation for use in query.",
                          "enum": [
                            "avg",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        },
                        "time": {
                          "description": "A time aggregation for use in query.",
                          "enum": [
                            "avg",
                            "count",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "COUNT",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        }
                      },
                      "required": [
                        "time",
                        "space"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "created_at": {
                    "description": "Timestamp when the tag configuration was created.",
                    "example": "2020-03-25T09:48:37.463835Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "include_percentiles": {
                    "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                    "example": true,
                    "type": "boolean"
                  },
                  "metric_type": {
                    "default": "gauge",
                    "description": "The metric's type.",
                    "enum": [
                      "gauge",
                      "count",
                      "rate",
                      "distribution"
                    ],
                    "example": "count",
                    "type": "string",
                    "x-enum-varnames": [
                      "GAUGE",
                      "COUNT",
                      "RATE",
                      "DISTRIBUTION"
                    ]
                  },
                  "modified_at": {
                    "description": "Timestamp when the tag configuration was last modified.",
                    "example": "2020-03-25T09:48:37.463835Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "tags": {
                    "description": "List of tag keys on which to group.",
                    "example": [
                      "app",
                      "datacenter"
                    ],
                    "items": {
                      "description": "Tag keys to group by.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "manage_tags",
                "description": "The metric tag configuration resource type.",
                "enum": [
                  "manage_tags"
                ],
                "example": "manage_tags",
                "type": "string",
                "x-enum-varnames": [
                  "MANAGE_TAGS"
                ]
              }
            },
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "MetricTagConfigurationType": {
        "default": "manage_tags",
        "description": "The metric tag configuration resource type.",
        "enum": [
          "manage_tags"
        ],
        "example": "manage_tags",
        "type": "string",
        "x-enum-varnames": [
          "MANAGE_TAGS"
        ]
      },
      "MetricTagConfigurationUpdateAttributes": {
        "description": "Object containing the definition of a metric tag configuration to be updated.",
        "properties": {
          "aggregations": {
            "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
            "example": [
              {
                "space": "sum",
                "time": "sum"
              },
              {
                "space": "sum",
                "time": "count"
              }
            ],
            "items": {
              "description": "A time and space aggregation combination for use in query.",
              "example": {
                "space": "sum",
                "time": "sum"
              },
              "properties": {
                "space": {
                  "description": "A space aggregation for use in query.",
                  "enum": [
                    "avg",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                },
                "time": {
                  "description": "A time aggregation for use in query.",
                  "enum": [
                    "avg",
                    "count",
                    "max",
                    "min",
                    "sum"
                  ],
                  "example": "sum",
                  "type": "string",
                  "x-enum-varnames": [
                    "AVG",
                    "COUNT",
                    "MAX",
                    "MIN",
                    "SUM"
                  ]
                }
              },
              "required": [
                "time",
                "space"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "include_percentiles": {
            "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
            "example": true,
            "type": "boolean"
          },
          "tags": {
            "default": [],
            "description": "A list of tag keys that will be queryable for your metric.",
            "example": [
              "app",
              "datacenter"
            ],
            "items": {
              "description": "Tag keys to group by.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricTagConfigurationUpdateData": {
        "description": "Object for a single tag configuration to be edited.",
        "example": {
          "attributes": {
            "group_by": [
              "app",
              "datacenter"
            ],
            "include_percentiles": false
          },
          "id": "http.endpoint.request",
          "type": "manage_tags"
        },
        "properties": {
          "attributes": {
            "description": "Object containing the definition of a metric tag configuration to be updated.",
            "properties": {
              "aggregations": {
                "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                "example": [
                  {
                    "space": "sum",
                    "time": "sum"
                  },
                  {
                    "space": "sum",
                    "time": "count"
                  }
                ],
                "items": {
                  "description": "A time and space aggregation combination for use in query.",
                  "example": {
                    "space": "sum",
                    "time": "sum"
                  },
                  "properties": {
                    "space": {
                      "description": "A space aggregation for use in query.",
                      "enum": [
                        "avg",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    },
                    "time": {
                      "description": "A time aggregation for use in query.",
                      "enum": [
                        "avg",
                        "count",
                        "max",
                        "min",
                        "sum"
                      ],
                      "example": "sum",
                      "type": "string",
                      "x-enum-varnames": [
                        "AVG",
                        "COUNT",
                        "MAX",
                        "MIN",
                        "SUM"
                      ]
                    }
                  },
                  "required": [
                    "time",
                    "space"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "include_percentiles": {
                "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                "example": true,
                "type": "boolean"
              },
              "tags": {
                "default": [],
                "description": "A list of tag keys that will be queryable for your metric.",
                "example": [
                  "app",
                  "datacenter"
                ],
                "items": {
                  "description": "Tag keys to group by.",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The metric name for this resource.",
            "example": "test.metric.latency",
            "type": "string"
          },
          "type": {
            "default": "manage_tags",
            "description": "The metric tag configuration resource type.",
            "enum": [
              "manage_tags"
            ],
            "example": "manage_tags",
            "type": "string",
            "x-enum-varnames": [
              "MANAGE_TAGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "MetricTagConfigurationUpdateRequest": {
        "description": "Request object that includes the metric that you would like to edit the tag configuration on.",
        "properties": {
          "data": {
            "description": "Object for a single tag configuration to be edited.",
            "example": {
              "attributes": {
                "group_by": [
                  "app",
                  "datacenter"
                ],
                "include_percentiles": false
              },
              "id": "http.endpoint.request",
              "type": "manage_tags"
            },
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric tag configuration to be updated.",
                "properties": {
                  "aggregations": {
                    "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                    "example": [
                      {
                        "space": "sum",
                        "time": "sum"
                      },
                      {
                        "space": "sum",
                        "time": "count"
                      }
                    ],
                    "items": {
                      "description": "A time and space aggregation combination for use in query.",
                      "example": {
                        "space": "sum",
                        "time": "sum"
                      },
                      "properties": {
                        "space": {
                          "description": "A space aggregation for use in query.",
                          "enum": [
                            "avg",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        },
                        "time": {
                          "description": "A time aggregation for use in query.",
                          "enum": [
                            "avg",
                            "count",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "COUNT",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        }
                      },
                      "required": [
                        "time",
                        "space"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "include_percentiles": {
                    "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                    "example": true,
                    "type": "boolean"
                  },
                  "tags": {
                    "default": [],
                    "description": "A list of tag keys that will be queryable for your metric.",
                    "example": [
                      "app",
                      "datacenter"
                    ],
                    "items": {
                      "description": "Tag keys to group by.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "manage_tags",
                "description": "The metric tag configuration resource type.",
                "enum": [
                  "manage_tags"
                ],
                "example": "manage_tags",
                "type": "string",
                "x-enum-varnames": [
                  "MANAGE_TAGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "MetricType": {
        "default": "metrics",
        "description": "The metric resource type.",
        "enum": [
          "metrics"
        ],
        "example": "metrics",
        "type": "string",
        "x-enum-varnames": [
          "METRICS"
        ]
      },
      "MetricVolumes": {
        "description": "Possible response objects for a metric's volume.",
        "oneOf": [
          {
            "description": "Object for a single metric's distinct volume.",
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric's distinct volume.",
                "properties": {
                  "distinct_volume": {
                    "description": "Distinct volume for the given metric.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "distinct_metric_volumes",
                "description": "The metric distinct volume type.",
                "enum": [
                  "distinct_metric_volumes"
                ],
                "example": "distinct_metric_volumes",
                "type": "string",
                "x-enum-varnames": [
                  "DISTINCT_METRIC_VOLUMES"
                ]
              }
            },
            "type": "object"
          },
          {
            "description": "Object for a single metric's ingested and indexed volume.",
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric's ingested and indexed volume.",
                "properties": {
                  "indexed_volume": {
                    "description": "Indexed volume for the given metric.",
                    "example": 10,
                    "format": "int64",
                    "type": "integer"
                  },
                  "ingested_volume": {
                    "description": "Ingested volume for the given metric.",
                    "example": 20,
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "metric_volumes",
                "description": "The metric ingested and indexed volume type.",
                "enum": [
                  "metric_volumes"
                ],
                "example": "metric_volumes",
                "type": "string",
                "x-enum-varnames": [
                  "METRIC_VOLUMES"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MetricVolumesResponse": {
        "description": "Response object which includes a single metric's volume.",
        "properties": {
          "data": {
            "description": "Possible response objects for a metric's volume.",
            "oneOf": [
              {
                "description": "Object for a single metric's distinct volume.",
                "properties": {
                  "attributes": {
                    "description": "Object containing the definition of a metric's distinct volume.",
                    "properties": {
                      "distinct_volume": {
                        "description": "Distinct volume for the given metric.",
                        "example": 10,
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "id": {
                    "description": "The metric name for this resource.",
                    "example": "test.metric.latency",
                    "type": "string"
                  },
                  "type": {
                    "default": "distinct_metric_volumes",
                    "description": "The metric distinct volume type.",
                    "enum": [
                      "distinct_metric_volumes"
                    ],
                    "example": "distinct_metric_volumes",
                    "type": "string",
                    "x-enum-varnames": [
                      "DISTINCT_METRIC_VOLUMES"
                    ]
                  }
                },
                "type": "object"
              },
              {
                "description": "Object for a single metric's ingested and indexed volume.",
                "properties": {
                  "attributes": {
                    "description": "Object containing the definition of a metric's ingested and indexed volume.",
                    "properties": {
                      "indexed_volume": {
                        "description": "Indexed volume for the given metric.",
                        "example": 10,
                        "format": "int64",
                        "type": "integer"
                      },
                      "ingested_volume": {
                        "description": "Ingested volume for the given metric.",
                        "example": 20,
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "id": {
                    "description": "The metric name for this resource.",
                    "example": "test.metric.latency",
                    "type": "string"
                  },
                  "type": {
                    "default": "metric_volumes",
                    "description": "The metric ingested and indexed volume type.",
                    "enum": [
                      "metric_volumes"
                    ],
                    "example": "metric_volumes",
                    "type": "string",
                    "x-enum-varnames": [
                      "METRIC_VOLUMES"
                    ]
                  }
                },
                "type": "object"
              }
            ],
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "MetricsAndMetricTagConfigurations": {
        "description": "Object for a metrics and metric tag configurations.",
        "oneOf": [
          {
            "description": "Object for a single metric tag configuration.",
            "example": {
              "id": "metric.foo.bar",
              "type": "metrics"
            },
            "properties": {
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "metrics",
                "description": "The metric resource type.",
                "enum": [
                  "metrics"
                ],
                "example": "metrics",
                "type": "string",
                "x-enum-varnames": [
                  "METRICS"
                ]
              }
            },
            "type": "object"
          },
          {
            "description": "Object for a single metric tag configuration.",
            "example": {
              "attributes": {
                "aggregations": [
                  {
                    "space": "avg",
                    "time": "avg"
                  }
                ],
                "created_at": "2020-03-25T09:48:37.463835Z",
                "metric_type": "gauge",
                "modified_at": "2020-04-25T09:48:37.463835Z",
                "tags": [
                  "app",
                  "datacenter"
                ]
              },
              "id": "http.request.latency",
              "type": "manage_tags"
            },
            "properties": {
              "attributes": {
                "description": "Object containing the definition of a metric tag configuration attributes.",
                "properties": {
                  "aggregations": {
                    "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                    "example": [
                      {
                        "space": "sum",
                        "time": "sum"
                      },
                      {
                        "space": "sum",
                        "time": "count"
                      }
                    ],
                    "items": {
                      "description": "A time and space aggregation combination for use in query.",
                      "example": {
                        "space": "sum",
                        "time": "sum"
                      },
                      "properties": {
                        "space": {
                          "description": "A space aggregation for use in query.",
                          "enum": [
                            "avg",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        },
                        "time": {
                          "description": "A time aggregation for use in query.",
                          "enum": [
                            "avg",
                            "count",
                            "max",
                            "min",
                            "sum"
                          ],
                          "example": "sum",
                          "type": "string",
                          "x-enum-varnames": [
                            "AVG",
                            "COUNT",
                            "MAX",
                            "MIN",
                            "SUM"
                          ]
                        }
                      },
                      "required": [
                        "time",
                        "space"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "created_at": {
                    "description": "Timestamp when the tag configuration was created.",
                    "example": "2020-03-25T09:48:37.463835Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "include_percentiles": {
                    "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                    "example": true,
                    "type": "boolean"
                  },
                  "metric_type": {
                    "default": "gauge",
                    "description": "The metric's type.",
                    "enum": [
                      "gauge",
                      "count",
                      "rate",
                      "distribution"
                    ],
                    "example": "count",
                    "type": "string",
                    "x-enum-varnames": [
                      "GAUGE",
                      "COUNT",
                      "RATE",
                      "DISTRIBUTION"
                    ]
                  },
                  "modified_at": {
                    "description": "Timestamp when the tag configuration was last modified.",
                    "example": "2020-03-25T09:48:37.463835Z",
                    "format": "date-time",
                    "type": "string"
                  },
                  "tags": {
                    "description": "List of tag keys on which to group.",
                    "example": [
                      "app",
                      "datacenter"
                    ],
                    "items": {
                      "description": "Tag keys to group by.",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The metric name for this resource.",
                "example": "test.metric.latency",
                "type": "string"
              },
              "type": {
                "default": "manage_tags",
                "description": "The metric tag configuration resource type.",
                "enum": [
                  "manage_tags"
                ],
                "example": "manage_tags",
                "type": "string",
                "x-enum-varnames": [
                  "MANAGE_TAGS"
                ]
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "MetricsAndMetricTagConfigurationsResponse": {
        "description": "Response object that includes metrics and metric tag configurations.",
        "properties": {
          "data": {
            "description": "Array of metrics and metric tag configurations.",
            "items": {
              "description": "Object for a metrics and metric tag configurations.",
              "oneOf": [
                {
                  "description": "Object for a single metric tag configuration.",
                  "example": {
                    "id": "metric.foo.bar",
                    "type": "metrics"
                  },
                  "properties": {
                    "id": {
                      "description": "The metric name for this resource.",
                      "example": "test.metric.latency",
                      "type": "string"
                    },
                    "type": {
                      "default": "metrics",
                      "description": "The metric resource type.",
                      "enum": [
                        "metrics"
                      ],
                      "example": "metrics",
                      "type": "string",
                      "x-enum-varnames": [
                        "METRICS"
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "Object for a single metric tag configuration.",
                  "example": {
                    "attributes": {
                      "aggregations": [
                        {
                          "space": "avg",
                          "time": "avg"
                        }
                      ],
                      "created_at": "2020-03-25T09:48:37.463835Z",
                      "metric_type": "gauge",
                      "modified_at": "2020-04-25T09:48:37.463835Z",
                      "tags": [
                        "app",
                        "datacenter"
                      ]
                    },
                    "id": "http.request.latency",
                    "type": "manage_tags"
                  },
                  "properties": {
                    "attributes": {
                      "description": "Object containing the definition of a metric tag configuration attributes.",
                      "properties": {
                        "aggregations": {
                          "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                          "example": [
                            {
                              "space": "sum",
                              "time": "sum"
                            },
                            {
                              "space": "sum",
                              "time": "count"
                            }
                          ],
                          "items": {
                            "description": "A time and space aggregation combination for use in query.",
                            "example": {
                              "space": "sum",
                              "time": "sum"
                            },
                            "properties": {
                              "space": {
                                "description": "A space aggregation for use in query.",
                                "enum": [
                                  "avg",
                                  "max",
                                  "min",
                                  "sum"
                                ],
                                "example": "sum",
                                "type": "string",
                                "x-enum-varnames": [
                                  "AVG",
                                  "MAX",
                                  "MIN",
                                  "SUM"
                                ]
                              },
                              "time": {
                                "description": "A time aggregation for use in query.",
                                "enum": [
                                  "avg",
                                  "count",
                                  "max",
                                  "min",
                                  "sum"
                                ],
                                "example": "sum",
                                "type": "string",
                                "x-enum-varnames": [
                                  "AVG",
                                  "COUNT",
                                  "MAX",
                                  "MIN",
                                  "SUM"
                                ]
                              }
                            },
                            "required": [
                              "time",
                              "space"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "created_at": {
                          "description": "Timestamp when the tag configuration was created.",
                          "example": "2020-03-25T09:48:37.463835Z",
                          "format": "date-time",
                          "type": "string"
                        },
                        "include_percentiles": {
                          "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                          "example": true,
                          "type": "boolean"
                        },
                        "metric_type": {
                          "default": "gauge",
                          "description": "The metric's type.",
                          "enum": [
                            "gauge",
                            "count",
                            "rate",
                            "distribution"
                          ],
                          "example": "count",
                          "type": "string",
                          "x-enum-varnames": [
                            "GAUGE",
                            "COUNT",
                            "RATE",
                            "DISTRIBUTION"
                          ]
                        },
                        "modified_at": {
                          "description": "Timestamp when the tag configuration was last modified.",
                          "example": "2020-03-25T09:48:37.463835Z",
                          "format": "date-time",
                          "type": "string"
                        },
                        "tags": {
                          "description": "List of tag keys on which to group.",
                          "example": [
                            "app",
                            "datacenter"
                          ],
                          "items": {
                            "description": "Tag keys to group by.",
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The metric name for this resource.",
                      "example": "test.metric.latency",
                      "type": "string"
                    },
                    "type": {
                      "default": "manage_tags",
                      "description": "The metric tag configuration resource type.",
                      "enum": [
                        "manage_tags"
                      ],
                      "example": "manage_tags",
                      "type": "string",
                      "x-enum-varnames": [
                        "MANAGE_TAGS"
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "MonitorType": {
        "description": "Attributes from the monitor that triggered the event.",
        "nullable": true,
        "properties": {
          "created_at": {
            "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
            "example": 1646318692000,
            "type": "integer"
          },
          "group_status": {
            "description": "Monitor group status used when there is no `result_groups`.",
            "type": "integer"
          },
          "groups": {
            "description": "Groups to which the monitor belongs.",
            "items": {
              "description": "A group.",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The monitor ID.",
            "type": "integer"
          },
          "message": {
            "description": "The monitor message.",
            "type": "string"
          },
          "modified": {
            "description": "The monitor's last-modified timestamp.",
            "type": "integer"
          },
          "name": {
            "description": "The monitor name.",
            "type": "string"
          },
          "query": {
            "description": "The query that triggers the alert.",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags attached to the monitor.",
            "example": [
              "environment:test"
            ],
            "items": {
              "description": "A tag.",
              "type": "string"
            },
            "type": "array"
          },
          "templated_name": {
            "description": "The templated name of the monitor before resolving any template variables.",
            "type": "string"
          },
          "type": {
            "description": "The monitor type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NullableRelationshipToUser": {
        "description": "Relationship to user.",
        "properties": {
          "data": {
            "description": "Relationship to user object.",
            "nullable": true,
            "properties": {
              "id": {
                "description": "A unique identifier that represents the user.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "NullableRelationshipToUserData": {
        "description": "Relationship to user object.",
        "nullable": true,
        "properties": {
          "id": {
            "description": "A unique identifier that represents the user.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "OpsgenieServiceCreateAttributes": {
        "description": "The Opsgenie service attributes for a create request.",
        "properties": {
          "custom_url": {
            "description": "The custom URL for a custom region.",
            "example": "https://example.com",
            "type": "string"
          },
          "name": {
            "description": "The name for the Opsgenie service.",
            "example": "fake-opsgenie-service-name",
            "type": "string"
          },
          "opsgenie_api_key": {
            "description": "The Opsgenie API key for your Opsgenie service.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "region": {
            "description": "The region for the Opsgenie service.",
            "enum": [
              "us",
              "eu",
              "custom"
            ],
            "example": "us",
            "type": "string",
            "x-enum-varnames": [
              "US",
              "EU",
              "CUSTOM"
            ]
          }
        },
        "required": [
          "name",
          "opsgenie_api_key",
          "region"
        ],
        "type": "object"
      },
      "OpsgenieServiceCreateData": {
        "description": "Opsgenie service data for a create request.",
        "properties": {
          "attributes": {
            "description": "The Opsgenie service attributes for a create request.",
            "properties": {
              "custom_url": {
                "description": "The custom URL for a custom region.",
                "example": "https://example.com",
                "type": "string"
              },
              "name": {
                "description": "The name for the Opsgenie service.",
                "example": "fake-opsgenie-service-name",
                "type": "string"
              },
              "opsgenie_api_key": {
                "description": "The Opsgenie API key for your Opsgenie service.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "region": {
                "description": "The region for the Opsgenie service.",
                "enum": [
                  "us",
                  "eu",
                  "custom"
                ],
                "example": "us",
                "type": "string",
                "x-enum-varnames": [
                  "US",
                  "EU",
                  "CUSTOM"
                ]
              }
            },
            "required": [
              "name",
              "opsgenie_api_key",
              "region"
            ],
            "type": "object"
          },
          "type": {
            "default": "opsgenie-service",
            "description": "Opsgenie service resource type.",
            "enum": [
              "opsgenie-service"
            ],
            "example": "opsgenie-service",
            "type": "string",
            "x-enum-varnames": [
              "OPSGENIE_SERVICE"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "OpsgenieServiceCreateRequest": {
        "description": "Create request for an Opsgenie service.",
        "properties": {
          "data": {
            "description": "Opsgenie service data for a create request.",
            "properties": {
              "attributes": {
                "description": "The Opsgenie service attributes for a create request.",
                "properties": {
                  "custom_url": {
                    "description": "The custom URL for a custom region.",
                    "example": "https://example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name for the Opsgenie service.",
                    "example": "fake-opsgenie-service-name",
                    "type": "string"
                  },
                  "opsgenie_api_key": {
                    "description": "The Opsgenie API key for your Opsgenie service.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region for the Opsgenie service.",
                    "enum": [
                      "us",
                      "eu",
                      "custom"
                    ],
                    "example": "us",
                    "type": "string",
                    "x-enum-varnames": [
                      "US",
                      "EU",
                      "CUSTOM"
                    ]
                  }
                },
                "required": [
                  "name",
                  "opsgenie_api_key",
                  "region"
                ],
                "type": "object"
              },
              "type": {
                "default": "opsgenie-service",
                "description": "Opsgenie service resource type.",
                "enum": [
                  "opsgenie-service"
                ],
                "example": "opsgenie-service",
                "type": "string",
                "x-enum-varnames": [
                  "OPSGENIE_SERVICE"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "OpsgenieServiceRegionType": {
        "description": "The region for the Opsgenie service.",
        "enum": [
          "us",
          "eu",
          "custom"
        ],
        "example": "us",
        "type": "string",
        "x-enum-varnames": [
          "US",
          "EU",
          "CUSTOM"
        ]
      },
      "OpsgenieServiceResponse": {
        "description": "Response of an Opsgenie service.",
        "properties": {
          "data": {
            "description": "Opsgenie service data from a response.",
            "properties": {
              "attributes": {
                "description": "The attributes from an Opsgenie service response.",
                "properties": {
                  "custom_url": {
                    "description": "The custom URL for a custom region.",
                    "example": null,
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name for the Opsgenie service.",
                    "example": "fake-opsgenie-service-name",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region for the Opsgenie service.",
                    "enum": [
                      "us",
                      "eu",
                      "custom"
                    ],
                    "example": "us",
                    "type": "string",
                    "x-enum-varnames": [
                      "US",
                      "EU",
                      "CUSTOM"
                    ]
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The ID of the Opsgenie service.",
                "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                "type": "string"
              },
              "type": {
                "default": "opsgenie-service",
                "description": "Opsgenie service resource type.",
                "enum": [
                  "opsgenie-service"
                ],
                "example": "opsgenie-service",
                "type": "string",
                "x-enum-varnames": [
                  "OPSGENIE_SERVICE"
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "OpsgenieServiceResponseAttributes": {
        "description": "The attributes from an Opsgenie service response.",
        "properties": {
          "custom_url": {
            "description": "The custom URL for a custom region.",
            "example": null,
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name for the Opsgenie service.",
            "example": "fake-opsgenie-service-name",
            "type": "string"
          },
          "region": {
            "description": "The region for the Opsgenie service.",
            "enum": [
              "us",
              "eu",
              "custom"
            ],
            "example": "us",
            "type": "string",
            "x-enum-varnames": [
              "US",
              "EU",
              "CUSTOM"
            ]
          }
        },
        "type": "object"
      },
      "OpsgenieServiceResponseData": {
        "description": "Opsgenie service data from a response.",
        "properties": {
          "attributes": {
            "description": "The attributes from an Opsgenie service response.",
            "properties": {
              "custom_url": {
                "description": "The custom URL for a custom region.",
                "example": null,
                "nullable": true,
                "type": "string"
              },
              "name": {
                "description": "The name for the Opsgenie service.",
                "example": "fake-opsgenie-service-name",
                "type": "string"
              },
              "region": {
                "description": "The region for the Opsgenie service.",
                "enum": [
                  "us",
                  "eu",
                  "custom"
                ],
                "example": "us",
                "type": "string",
                "x-enum-varnames": [
                  "US",
                  "EU",
                  "CUSTOM"
                ]
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The ID of the Opsgenie service.",
            "example": "596da4af-0563-4097-90ff-07230c3f9db3",
            "type": "string"
          },
          "type": {
            "default": "opsgenie-service",
            "description": "Opsgenie service resource type.",
            "enum": [
              "opsgenie-service"
            ],
            "example": "opsgenie-service",
            "type": "string",
            "x-enum-varnames": [
              "OPSGENIE_SERVICE"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "OpsgenieServiceType": {
        "default": "opsgenie-service",
        "description": "Opsgenie service resource type.",
        "enum": [
          "opsgenie-service"
        ],
        "example": "opsgenie-service",
        "type": "string",
        "x-enum-varnames": [
          "OPSGENIE_SERVICE"
        ]
      },
      "OpsgenieServiceUpdateAttributes": {
        "description": "The Opsgenie service attributes for an update request.",
        "properties": {
          "custom_url": {
            "description": "The custom URL for a custom region.",
            "example": "https://example.com",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name for the Opsgenie service.",
            "example": "fake-opsgenie-service-name",
            "type": "string"
          },
          "opsgenie_api_key": {
            "description": "The Opsgenie API key for your Opsgenie service.",
            "example": "00000000-0000-0000-0000-000000000000",
            "type": "string"
          },
          "region": {
            "description": "The region for the Opsgenie service.",
            "enum": [
              "us",
              "eu",
              "custom"
            ],
            "example": "us",
            "type": "string",
            "x-enum-varnames": [
              "US",
              "EU",
              "CUSTOM"
            ]
          }
        },
        "type": "object"
      },
      "OpsgenieServiceUpdateData": {
        "description": "Opsgenie service for an update request.",
        "properties": {
          "attributes": {
            "description": "The Opsgenie service attributes for an update request.",
            "properties": {
              "custom_url": {
                "description": "The custom URL for a custom region.",
                "example": "https://example.com",
                "nullable": true,
                "type": "string"
              },
              "name": {
                "description": "The name for the Opsgenie service.",
                "example": "fake-opsgenie-service-name",
                "type": "string"
              },
              "opsgenie_api_key": {
                "description": "The Opsgenie API key for your Opsgenie service.",
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string"
              },
              "region": {
                "description": "The region for the Opsgenie service.",
                "enum": [
                  "us",
                  "eu",
                  "custom"
                ],
                "example": "us",
                "type": "string",
                "x-enum-varnames": [
                  "US",
                  "EU",
                  "CUSTOM"
                ]
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The ID of the Opsgenie service.",
            "example": "596da4af-0563-4097-90ff-07230c3f9db3",
            "type": "string"
          },
          "type": {
            "default": "opsgenie-service",
            "description": "Opsgenie service resource type.",
            "enum": [
              "opsgenie-service"
            ],
            "example": "opsgenie-service",
            "type": "string",
            "x-enum-varnames": [
              "OPSGENIE_SERVICE"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "OpsgenieServiceUpdateRequest": {
        "description": "Update request for an Opsgenie service.",
        "properties": {
          "data": {
            "description": "Opsgenie service for an update request.",
            "properties": {
              "attributes": {
                "description": "The Opsgenie service attributes for an update request.",
                "properties": {
                  "custom_url": {
                    "description": "The custom URL for a custom region.",
                    "example": "https://example.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name for the Opsgenie service.",
                    "example": "fake-opsgenie-service-name",
                    "type": "string"
                  },
                  "opsgenie_api_key": {
                    "description": "The Opsgenie API key for your Opsgenie service.",
                    "example": "00000000-0000-0000-0000-000000000000",
                    "type": "string"
                  },
                  "region": {
                    "description": "The region for the Opsgenie service.",
                    "enum": [
                      "us",
                      "eu",
                      "custom"
                    ],
                    "example": "us",
                    "type": "string",
                    "x-enum-varnames": [
                      "US",
                      "EU",
                      "CUSTOM"
                    ]
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The ID of the Opsgenie service.",
                "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                "type": "string"
              },
              "type": {
                "default": "opsgenie-service",
                "description": "Opsgenie service resource type.",
                "enum": [
                  "opsgenie-service"
                ],
                "example": "opsgenie-service",
                "type": "string",
                "x-enum-varnames": [
                  "OPSGENIE_SERVICE"
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "OpsgenieServicesResponse": {
        "description": "Response with a list of Opsgenie services.",
        "properties": {
          "data": {
            "description": "An array of Opsgenie services.",
            "example": [
              {
                "attributes": {
                  "custom_url": null,
                  "name": "fake-opsgenie-service-name",
                  "region": "us"
                },
                "id": "596da4af-0563-4097-90ff-07230c3f9db3",
                "type": "opsgenie-service"
              },
              {
                "attributes": {
                  "custom_url": null,
                  "name": "fake-opsgenie-service-name-2",
                  "region": "eu"
                },
                "id": "0d2937f1-b561-44fa-914a-99910f848014",
                "type": "opsgenie-service"
              }
            ],
            "items": {
              "description": "Opsgenie service data from a response.",
              "properties": {
                "attributes": {
                  "description": "The attributes from an Opsgenie service response.",
                  "properties": {
                    "custom_url": {
                      "description": "The custom URL for a custom region.",
                      "example": null,
                      "nullable": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "The name for the Opsgenie service.",
                      "example": "fake-opsgenie-service-name",
                      "type": "string"
                    },
                    "region": {
                      "description": "The region for the Opsgenie service.",
                      "enum": [
                        "us",
                        "eu",
                        "custom"
                      ],
                      "example": "us",
                      "type": "string",
                      "x-enum-varnames": [
                        "US",
                        "EU",
                        "CUSTOM"
                      ]
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The ID of the Opsgenie service.",
                  "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                  "type": "string"
                },
                "type": {
                  "default": "opsgenie-service",
                  "description": "Opsgenie service resource type.",
                  "enum": [
                    "opsgenie-service"
                  ],
                  "example": "opsgenie-service",
                  "type": "string",
                  "x-enum-varnames": [
                    "OPSGENIE_SERVICE"
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "Organization": {
        "description": "Organization object.",
        "properties": {
          "attributes": {
            "description": "Attributes of the organization.",
            "properties": {
              "created_at": {
                "description": "Creation time of the organization.",
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "description": "Description of the organization.",
                "type": "string"
              },
              "disabled": {
                "description": "Whether or not the organization is disabled.",
                "type": "boolean"
              },
              "modified_at": {
                "description": "Time of last organization modification.",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "Name of the organization.",
                "type": "string"
              },
              "public_id": {
                "description": "Public ID of the organization.",
                "type": "string"
              },
              "sharing": {
                "description": "Sharing type of the organization.",
                "type": "string"
              },
              "url": {
                "description": "URL of the site that this organization exists at.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the organization.",
            "type": "string"
          },
          "type": {
            "default": "orgs",
            "description": "Organizations resource type.",
            "enum": [
              "orgs"
            ],
            "example": "orgs",
            "type": "string",
            "x-enum-varnames": [
              "ORGS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "OrganizationAttributes": {
        "description": "Attributes of the organization.",
        "properties": {
          "created_at": {
            "description": "Creation time of the organization.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the organization.",
            "type": "string"
          },
          "disabled": {
            "description": "Whether or not the organization is disabled.",
            "type": "boolean"
          },
          "modified_at": {
            "description": "Time of last organization modification.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the organization.",
            "type": "string"
          },
          "public_id": {
            "description": "Public ID of the organization.",
            "type": "string"
          },
          "sharing": {
            "description": "Sharing type of the organization.",
            "type": "string"
          },
          "url": {
            "description": "URL of the site that this organization exists at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationsType": {
        "default": "orgs",
        "description": "Organizations resource type.",
        "enum": [
          "orgs"
        ],
        "example": "orgs",
        "type": "string",
        "x-enum-varnames": [
          "ORGS"
        ]
      },
      "Pagination": {
        "description": "Pagination object.",
        "properties": {
          "total_count": {
            "description": "Total count.",
            "format": "int64",
            "type": "integer"
          },
          "total_filtered_count": {
            "description": "Total count of elements matched by the filter.",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PartialAPIKey": {
        "description": "Partial Datadog API key.",
        "properties": {
          "attributes": {
            "description": "Attributes of a partial API key.",
            "properties": {
              "created_at": {
                "description": "Creation date of the API key.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "last4": {
                "description": "The last four characters of the API key.",
                "example": "abcd",
                "maxLength": 4,
                "minLength": 4,
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "modified_at": {
                "description": "Date the API key was last modified.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the API key.",
                "example": "API Key for submitting metrics",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the API key.",
            "type": "string"
          },
          "relationships": {
            "description": "Resources related to the API key.",
            "properties": {
              "created_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modified_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "api_keys",
            "description": "API Keys resource type.",
            "enum": [
              "api_keys"
            ],
            "example": "api_keys",
            "type": "string",
            "x-enum-varnames": [
              "API_KEYS"
            ]
          }
        },
        "type": "object"
      },
      "PartialAPIKeyAttributes": {
        "description": "Attributes of a partial API key.",
        "properties": {
          "created_at": {
            "description": "Creation date of the API key.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "last4": {
            "description": "The last four characters of the API key.",
            "example": "abcd",
            "maxLength": 4,
            "minLength": 4,
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "modified_at": {
            "description": "Date the API key was last modified.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the API key.",
            "example": "API Key for submitting metrics",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartialApplicationKey": {
        "description": "Partial Datadog application key.",
        "properties": {
          "attributes": {
            "description": "Attributes of a partial application key.",
            "properties": {
              "created_at": {
                "description": "Creation date of the application key.",
                "example": "2020-11-23T10:00:00.000Z",
                "readOnly": true,
                "type": "string"
              },
              "last4": {
                "description": "The last four characters of the application key.",
                "example": "abcd",
                "maxLength": 4,
                "minLength": 4,
                "readOnly": true,
                "type": "string",
                "x-secret": true
              },
              "name": {
                "description": "Name of the application key.",
                "example": "Application Key for managing dashboards",
                "type": "string"
              },
              "scopes": {
                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                "example": [
                  "dashboards_read",
                  "dashboards_write",
                  "dashboards_public_share"
                ],
                "items": {
                  "description": "Name of scope.",
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the application key.",
            "type": "string"
          },
          "relationships": {
            "description": "Resources related to the application key.",
            "properties": {
              "owned_by": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "application_keys",
            "description": "Application Keys resource type.",
            "enum": [
              "application_keys"
            ],
            "example": "application_keys",
            "type": "string",
            "x-enum-varnames": [
              "APPLICATION_KEYS"
            ]
          }
        },
        "type": "object"
      },
      "PartialApplicationKeyAttributes": {
        "description": "Attributes of a partial application key.",
        "properties": {
          "created_at": {
            "description": "Creation date of the application key.",
            "example": "2020-11-23T10:00:00.000Z",
            "readOnly": true,
            "type": "string"
          },
          "last4": {
            "description": "The last four characters of the application key.",
            "example": "abcd",
            "maxLength": 4,
            "minLength": 4,
            "readOnly": true,
            "type": "string",
            "x-secret": true
          },
          "name": {
            "description": "Name of the application key.",
            "example": "Application Key for managing dashboards",
            "type": "string"
          },
          "scopes": {
            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
            "example": [
              "dashboards_read",
              "dashboards_write",
              "dashboards_public_share"
            ],
            "items": {
              "description": "Name of scope.",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartialApplicationKeyResponse": {
        "description": "Response for retrieving a partial application key.",
        "properties": {
          "data": {
            "description": "Partial Datadog application key.",
            "properties": {
              "attributes": {
                "description": "Attributes of a partial application key.",
                "properties": {
                  "created_at": {
                    "description": "Creation date of the application key.",
                    "example": "2020-11-23T10:00:00.000Z",
                    "readOnly": true,
                    "type": "string"
                  },
                  "last4": {
                    "description": "The last four characters of the application key.",
                    "example": "abcd",
                    "maxLength": 4,
                    "minLength": 4,
                    "readOnly": true,
                    "type": "string",
                    "x-secret": true
                  },
                  "name": {
                    "description": "Name of the application key.",
                    "example": "Application Key for managing dashboards",
                    "type": "string"
                  },
                  "scopes": {
                    "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                    "example": [
                      "dashboards_read",
                      "dashboards_write",
                      "dashboards_public_share"
                    ],
                    "items": {
                      "description": "Name of scope.",
                      "type": "string"
                    },
                    "nullable": true,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the application key.",
                "type": "string"
              },
              "relationships": {
                "description": "Resources related to the application key.",
                "properties": {
                  "owned_by": {
                    "description": "Relationship to user.",
                    "properties": {
                      "data": {
                        "description": "Relationship to user object.",
                        "properties": {
                          "id": {
                            "description": "A unique identifier that represents the user.",
                            "example": "00000000-0000-0000-2345-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "application_keys",
                "description": "Application Keys resource type.",
                "enum": [
                  "application_keys"
                ],
                "example": "application_keys",
                "type": "string",
                "x-enum-varnames": [
                  "APPLICATION_KEYS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the application key.",
            "items": {
              "description": "An object related to an application key.",
              "oneOf": [
                {
                  "description": "User object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of user object returned by the API.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the user.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether the user is disabled.",
                          "type": "boolean"
                        },
                        "email": {
                          "description": "Email of the user.",
                          "type": "string"
                        },
                        "handle": {
                          "description": "Handle of the user.",
                          "type": "string"
                        },
                        "icon": {
                          "description": "URL of the user's icon.",
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time that the user was last modified.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "service_account": {
                          "description": "Whether the user is a service account.",
                          "type": "boolean"
                        },
                        "status": {
                          "description": "Status of the user.",
                          "type": "string"
                        },
                        "title": {
                          "description": "Title of the user.",
                          "nullable": true,
                          "type": "string"
                        },
                        "verified": {
                          "description": "Whether the user is verified.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the user.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the user object returned by the API.",
                      "properties": {
                        "org": {
                          "description": "Relationship to an organization.",
                          "properties": {
                            "data": {
                              "description": "Relationship to organization object.",
                              "properties": {
                                "id": {
                                  "description": "ID of the organization.",
                                  "example": "00000000-0000-beef-0000-000000000000",
                                  "type": "string"
                                },
                                "type": {
                                  "default": "orgs",
                                  "description": "Organizations resource type.",
                                  "enum": [
                                    "orgs"
                                  ],
                                  "example": "orgs",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "ORGS"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "type"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_orgs": {
                          "description": "Relationship to organizations.",
                          "properties": {
                            "data": {
                              "description": "Relationships to organization objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to organization object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the organization.",
                                    "example": "00000000-0000-beef-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "orgs",
                                    "description": "Organizations resource type.",
                                    "enum": [
                                      "orgs"
                                    ],
                                    "example": "orgs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ORGS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "other_users": {
                          "description": "Relationship to users.",
                          "properties": {
                            "data": {
                              "description": "Relationships to user objects.",
                              "example": [],
                              "items": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "data"
                          ],
                          "type": "object"
                        },
                        "roles": {
                          "description": "Relationship to roles.",
                          "properties": {
                            "data": {
                              "description": "An array containing type and the unique identifier of a role.",
                              "items": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Permission": {
        "description": "Permission object.",
        "properties": {
          "attributes": {
            "description": "Attributes of a permission.",
            "properties": {
              "created": {
                "description": "Creation time of the permission.",
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "description": "Description of the permission.",
                "type": "string"
              },
              "display_name": {
                "description": "Displayed name for the permission.",
                "type": "string"
              },
              "display_type": {
                "description": "Display type.",
                "type": "string"
              },
              "group_name": {
                "description": "Name of the permission group.",
                "type": "string"
              },
              "name": {
                "description": "Name of the permission.",
                "type": "string"
              },
              "restricted": {
                "description": "Whether or not the permission is restricted.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the permission.",
            "type": "string"
          },
          "type": {
            "default": "permissions",
            "description": "Permissions resource type.",
            "enum": [
              "permissions"
            ],
            "example": "permissions",
            "type": "string",
            "x-enum-varnames": [
              "PERMISSIONS"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "PermissionAttributes": {
        "description": "Attributes of a permission.",
        "properties": {
          "created": {
            "description": "Creation time of the permission.",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the permission.",
            "type": "string"
          },
          "display_name": {
            "description": "Displayed name for the permission.",
            "type": "string"
          },
          "display_type": {
            "description": "Display type.",
            "type": "string"
          },
          "group_name": {
            "description": "Name of the permission group.",
            "type": "string"
          },
          "name": {
            "description": "Name of the permission.",
            "type": "string"
          },
          "restricted": {
            "description": "Whether or not the permission is restricted.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PermissionsResponse": {
        "description": "Payload with API-returned permissions.",
        "properties": {
          "data": {
            "description": "Array of permissions.",
            "items": {
              "description": "Permission object.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a permission.",
                  "properties": {
                    "created": {
                      "description": "Creation time of the permission.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the permission.",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "Displayed name for the permission.",
                      "type": "string"
                    },
                    "display_type": {
                      "description": "Display type.",
                      "type": "string"
                    },
                    "group_name": {
                      "description": "Name of the permission group.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the permission.",
                      "type": "string"
                    },
                    "restricted": {
                      "description": "Whether or not the permission is restricted.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the permission.",
                  "type": "string"
                },
                "type": {
                  "default": "permissions",
                  "description": "Permissions resource type.",
                  "enum": [
                    "permissions"
                  ],
                  "example": "permissions",
                  "type": "string",
                  "x-enum-varnames": [
                    "PERMISSIONS"
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PermissionsType": {
        "default": "permissions",
        "description": "Permissions resource type.",
        "enum": [
          "permissions"
        ],
        "example": "permissions",
        "type": "string",
        "x-enum-varnames": [
          "PERMISSIONS"
        ]
      },
      "ProcessSummariesMeta": {
        "description": "Response metadata object.",
        "properties": {
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                "example": "911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd",
                "type": "string"
              },
              "size": {
                "description": "Number of results returned.",
                "format": "int32",
                "maximum": 10000,
                "minimum": 0,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProcessSummariesMetaPage": {
        "description": "Paging attributes.",
        "properties": {
          "after": {
            "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
            "example": "911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd",
            "type": "string"
          },
          "size": {
            "description": "Number of results returned.",
            "format": "int32",
            "maximum": 10000,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProcessSummariesResponse": {
        "description": "List of process summaries.",
        "properties": {
          "data": {
            "description": "Array of process summary objects.",
            "items": {
              "description": "Process summary object.",
              "properties": {
                "attributes": {
                  "description": "Attributes for a process summary.",
                  "properties": {
                    "cmdline": {
                      "description": "Process command line.",
                      "type": "string"
                    },
                    "host": {
                      "description": "Host running the process.",
                      "type": "string"
                    },
                    "pid": {
                      "description": "Process ID.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "ppid": {
                      "description": "Parent process ID.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "start": {
                      "description": "Time the process was started.",
                      "type": "string"
                    },
                    "tags": {
                      "description": "List of tags associated with the process.",
                      "items": {
                        "description": "A tag associated with the process.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "Time the process was seen.",
                      "type": "string"
                    },
                    "user": {
                      "description": "Process owner.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Process ID.",
                  "type": "string"
                },
                "type": {
                  "default": "process",
                  "description": "Type of process summary.",
                  "enum": [
                    "process"
                  ],
                  "example": "process",
                  "type": "string",
                  "x-enum-varnames": [
                    "PROCESS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Response metadata object.",
            "properties": {
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                    "example": "911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd",
                    "type": "string"
                  },
                  "size": {
                    "description": "Number of results returned.",
                    "format": "int32",
                    "maximum": 10000,
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ProcessSummary": {
        "description": "Process summary object.",
        "properties": {
          "attributes": {
            "description": "Attributes for a process summary.",
            "properties": {
              "cmdline": {
                "description": "Process command line.",
                "type": "string"
              },
              "host": {
                "description": "Host running the process.",
                "type": "string"
              },
              "pid": {
                "description": "Process ID.",
                "format": "int64",
                "type": "integer"
              },
              "ppid": {
                "description": "Parent process ID.",
                "format": "int64",
                "type": "integer"
              },
              "start": {
                "description": "Time the process was started.",
                "type": "string"
              },
              "tags": {
                "description": "List of tags associated with the process.",
                "items": {
                  "description": "A tag associated with the process.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "Time the process was seen.",
                "type": "string"
              },
              "user": {
                "description": "Process owner.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Process ID.",
            "type": "string"
          },
          "type": {
            "default": "process",
            "description": "Type of process summary.",
            "enum": [
              "process"
            ],
            "example": "process",
            "type": "string",
            "x-enum-varnames": [
              "PROCESS"
            ]
          }
        },
        "type": "object"
      },
      "ProcessSummaryAttributes": {
        "description": "Attributes for a process summary.",
        "properties": {
          "cmdline": {
            "description": "Process command line.",
            "type": "string"
          },
          "host": {
            "description": "Host running the process.",
            "type": "string"
          },
          "pid": {
            "description": "Process ID.",
            "format": "int64",
            "type": "integer"
          },
          "ppid": {
            "description": "Parent process ID.",
            "format": "int64",
            "type": "integer"
          },
          "start": {
            "description": "Time the process was started.",
            "type": "string"
          },
          "tags": {
            "description": "List of tags associated with the process.",
            "items": {
              "description": "A tag associated with the process.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "Time the process was seen.",
            "type": "string"
          },
          "user": {
            "description": "Process owner.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProcessSummaryType": {
        "default": "process",
        "description": "Type of process summary.",
        "enum": [
          "process"
        ],
        "example": "process",
        "type": "string",
        "x-enum-varnames": [
          "PROCESS"
        ]
      },
      "QuerySortOrder": {
        "default": "desc",
        "description": "Direction of sort.",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ASC",
          "DESC"
        ]
      },
      "RUMAggregateBucketValue": {
        "description": "A bucket value, can be either a timeseries or a single value.",
        "oneOf": [
          {
            "description": "A single string value.",
            "type": "string"
          },
          {
            "description": "A single number value.",
            "format": "double",
            "type": "number"
          },
          {
            "description": "A timeseries array.",
            "items": {
              "description": "A timeseries point.",
              "properties": {
                "time": {
                  "description": "The time value for this point.",
                  "example": "2020-06-08T11:55:00.123Z",
                  "format": "date-time",
                  "type": "string"
                },
                "value": {
                  "description": "The value for this point.",
                  "example": 19,
                  "format": "double",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-generate-alias-as-model": true
          }
        ]
      },
      "RUMAggregateBucketValueSingleNumber": {
        "description": "A single number value.",
        "format": "double",
        "type": "number"
      },
      "RUMAggregateBucketValueSingleString": {
        "description": "A single string value.",
        "type": "string"
      },
      "RUMAggregateBucketValueTimeseries": {
        "description": "A timeseries array.",
        "items": {
          "description": "A timeseries point.",
          "properties": {
            "time": {
              "description": "The time value for this point.",
              "example": "2020-06-08T11:55:00.123Z",
              "format": "date-time",
              "type": "string"
            },
            "value": {
              "description": "The value for this point.",
              "example": 19,
              "format": "double",
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array",
        "x-generate-alias-as-model": true
      },
      "RUMAggregateBucketValueTimeseriesPoint": {
        "description": "A timeseries point.",
        "properties": {
          "time": {
            "description": "The time value for this point.",
            "example": "2020-06-08T11:55:00.123Z",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "The value for this point.",
            "example": 19,
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "RUMAggregateRequest": {
        "description": "The object sent with the request to retrieve aggregation buckets of RUM events from your organization.",
        "properties": {
          "compute": {
            "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
            "items": {
              "description": "A compute rule to compute metrics or timeseries.",
              "properties": {
                "aggregation": {
                  "description": "An aggregation function.",
                  "enum": [
                    "count",
                    "cardinality",
                    "pc75",
                    "pc90",
                    "pc95",
                    "pc98",
                    "pc99",
                    "sum",
                    "min",
                    "max",
                    "avg",
                    "median"
                  ],
                  "example": "pc90",
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "PERCENTILE_75",
                    "PERCENTILE_90",
                    "PERCENTILE_95",
                    "PERCENTILE_98",
                    "PERCENTILE_99",
                    "SUM",
                    "MIN",
                    "MAX",
                    "AVG",
                    "MEDIAN"
                  ]
                },
                "interval": {
                  "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points.",
                  "example": "5m",
                  "type": "string"
                },
                "metric": {
                  "description": "The metric to use.",
                  "example": "@duration",
                  "type": "string"
                },
                "type": {
                  "default": "total",
                  "description": "The type of compute.",
                  "enum": [
                    "timeseries",
                    "total"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "TIMESERIES",
                    "TOTAL"
                  ]
                }
              },
              "required": [
                "aggregation"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filter": {
            "description": "The search and filter query settings.",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                "example": "now-15m",
                "type": "string"
              },
              "query": {
                "default": "*",
                "description": "The search query following the RUM search syntax.",
                "example": "@type:session AND @session.type:user",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "group_by": {
            "description": "The rules for the group by.",
            "items": {
              "description": "A group-by rule.",
              "properties": {
                "facet": {
                  "description": "The name of the facet to use (required).",
                  "example": "@view.time_spent",
                  "type": "string"
                },
                "histogram": {
                  "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                  "properties": {
                    "interval": {
                      "description": "The bin size of the histogram buckets.",
                      "example": 10,
                      "format": "double",
                      "type": "number"
                    },
                    "max": {
                      "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out).",
                      "example": 100,
                      "format": "double",
                      "type": "number"
                    },
                    "min": {
                      "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out).",
                      "example": 50,
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": [
                    "interval",
                    "min",
                    "max"
                  ],
                  "type": "object"
                },
                "limit": {
                  "default": 10,
                  "description": "The maximum buckets to return for this group-by.",
                  "format": "int64",
                  "type": "integer"
                },
                "missing": {
                  "description": "The value to use for logs that don't have the facet used to group by.",
                  "oneOf": [
                    {
                      "description": "The missing value to use if there is string valued facet.",
                      "type": "string"
                    },
                    {
                      "description": "The missing value to use if there is a number valued facet.",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                },
                "sort": {
                  "description": "A sort rule.",
                  "example": {
                    "aggregation": "count",
                    "order": "asc"
                  },
                  "properties": {
                    "aggregation": {
                      "description": "An aggregation function.",
                      "enum": [
                        "count",
                        "cardinality",
                        "pc75",
                        "pc90",
                        "pc95",
                        "pc98",
                        "pc99",
                        "sum",
                        "min",
                        "max",
                        "avg",
                        "median"
                      ],
                      "example": "pc90",
                      "type": "string",
                      "x-enum-varnames": [
                        "COUNT",
                        "CARDINALITY",
                        "PERCENTILE_75",
                        "PERCENTILE_90",
                        "PERCENTILE_95",
                        "PERCENTILE_98",
                        "PERCENTILE_99",
                        "SUM",
                        "MIN",
                        "MAX",
                        "AVG",
                        "MEDIAN"
                      ]
                    },
                    "metric": {
                      "description": "The metric to sort by (only used for `type=measure`).",
                      "example": "@duration",
                      "type": "string"
                    },
                    "order": {
                      "description": "The order to use, ascending or descending.",
                      "enum": [
                        "asc",
                        "desc"
                      ],
                      "example": "asc",
                      "type": "string",
                      "x-enum-varnames": [
                        "ASCENDING",
                        "DESCENDING"
                      ]
                    },
                    "type": {
                      "default": "alphabetical",
                      "description": "The type of sorting algorithm.",
                      "enum": [
                        "alphabetical",
                        "measure"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "ALPHABETICAL",
                        "MEASURE"
                      ]
                    }
                  },
                  "type": "object"
                },
                "total": {
                  "default": false,
                  "description": "A resulting object to put the given computes in over all the matching records.",
                  "oneOf": [
                    {
                      "description": "If set to true, creates an additional bucket labeled \"$facet_total\".",
                      "type": "boolean"
                    },
                    {
                      "description": "A string to use as the key value for the total bucket.",
                      "type": "string"
                    },
                    {
                      "description": "A number to use as the key value for the total bucket.",
                      "format": "double",
                      "type": "number"
                    }
                  ]
                }
              },
              "required": [
                "facet"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: Only supply timezone or time offset, not both. Otherwise, the query fails.",
            "properties": {
              "time_offset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging attributes for listing events.",
            "properties": {
              "cursor": {
                "description": "List following results with a cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "Maximum number of events in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RUMAggregateSort": {
        "description": "A sort rule.",
        "example": {
          "aggregation": "count",
          "order": "asc"
        },
        "properties": {
          "aggregation": {
            "description": "An aggregation function.",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg",
              "median"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MEDIAN"
            ]
          },
          "metric": {
            "description": "The metric to sort by (only used for `type=measure`).",
            "example": "@duration",
            "type": "string"
          },
          "order": {
            "description": "The order to use, ascending or descending.",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "asc",
            "type": "string",
            "x-enum-varnames": [
              "ASCENDING",
              "DESCENDING"
            ]
          },
          "type": {
            "default": "alphabetical",
            "description": "The type of sorting algorithm.",
            "enum": [
              "alphabetical",
              "measure"
            ],
            "type": "string",
            "x-enum-varnames": [
              "ALPHABETICAL",
              "MEASURE"
            ]
          }
        },
        "type": "object"
      },
      "RUMAggregateSortType": {
        "default": "alphabetical",
        "description": "The type of sorting algorithm.",
        "enum": [
          "alphabetical",
          "measure"
        ],
        "type": "string",
        "x-enum-varnames": [
          "ALPHABETICAL",
          "MEASURE"
        ]
      },
      "RUMAggregationBucketsResponse": {
        "description": "The query results.",
        "properties": {
          "buckets": {
            "description": "The list of matching buckets, one item per bucket.",
            "items": {
              "description": "Bucket values.",
              "properties": {
                "by": {
                  "additionalProperties": {
                    "description": "The values for each group-by.",
                    "type": "string"
                  },
                  "description": "The key-value pairs for each group-by.",
                  "example": {
                    "@session.type": "user",
                    "@type": "view"
                  },
                  "type": "object"
                },
                "computes": {
                  "additionalProperties": {
                    "description": "A bucket value, can be either a timeseries or a single value.",
                    "oneOf": [
                      {
                        "description": "A single string value.",
                        "type": "string"
                      },
                      {
                        "description": "A single number value.",
                        "format": "double",
                        "type": "number"
                      },
                      {
                        "description": "A timeseries array.",
                        "items": {
                          "description": "A timeseries point.",
                          "properties": {
                            "time": {
                              "description": "The time value for this point.",
                              "example": "2020-06-08T11:55:00.123Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value for this point.",
                              "example": 19,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array",
                        "x-generate-alias-as-model": true
                      }
                    ]
                  },
                  "description": "A map of the metric name to value for regular compute, or a list of values for a timeseries.",
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RUMAggregationFunction": {
        "description": "An aggregation function.",
        "enum": [
          "count",
          "cardinality",
          "pc75",
          "pc90",
          "pc95",
          "pc98",
          "pc99",
          "sum",
          "min",
          "max",
          "avg",
          "median"
        ],
        "example": "pc90",
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "CARDINALITY",
          "PERCENTILE_75",
          "PERCENTILE_90",
          "PERCENTILE_95",
          "PERCENTILE_98",
          "PERCENTILE_99",
          "SUM",
          "MIN",
          "MAX",
          "AVG",
          "MEDIAN"
        ]
      },
      "RUMAnalyticsAggregateResponse": {
        "description": "The response object for the RUM events aggregate API endpoint.",
        "properties": {
          "data": {
            "description": "The query results.",
            "properties": {
              "buckets": {
                "description": "The list of matching buckets, one item per bucket.",
                "items": {
                  "description": "Bucket values.",
                  "properties": {
                    "by": {
                      "additionalProperties": {
                        "description": "The values for each group-by.",
                        "type": "string"
                      },
                      "description": "The key-value pairs for each group-by.",
                      "example": {
                        "@session.type": "user",
                        "@type": "view"
                      },
                      "type": "object"
                    },
                    "computes": {
                      "additionalProperties": {
                        "description": "A bucket value, can be either a timeseries or a single value.",
                        "oneOf": [
                          {
                            "description": "A single string value.",
                            "type": "string"
                          },
                          {
                            "description": "A single number value.",
                            "format": "double",
                            "type": "number"
                          },
                          {
                            "description": "A timeseries array.",
                            "items": {
                              "description": "A timeseries point.",
                              "properties": {
                                "time": {
                                  "description": "The time value for this point.",
                                  "example": "2020-06-08T11:55:00.123Z",
                                  "format": "date-time",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "The value for this point.",
                                  "example": 19,
                                  "format": "double",
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array",
                            "x-generate-alias-as-model": true
                          }
                        ]
                      },
                      "description": "A map of the metric name to value for regular compute, or a list of values for a timeseries.",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request.",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds.",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request.",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response.",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query.",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning.",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning.",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning.",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RUMApplication": {
        "description": "RUM application.",
        "properties": {
          "attributes": {
            "description": "RUM application attributes.",
            "properties": {
              "application_id": {
                "description": "ID of the RUM application.",
                "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                "type": "string"
              },
              "created_at": {
                "description": "Timestamp in ms of the creation date.",
                "example": 1659479836169,
                "format": "int64",
                "type": "integer"
              },
              "created_by_handle": {
                "description": "Handle of the creator user.",
                "example": "john.doe",
                "type": "string"
              },
              "hash": {
                "description": "Client token of the RUM application.",
                "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                "type": "string"
              },
              "name": {
                "description": "Name of the RUM application.",
                "example": "my_rum_application",
                "type": "string"
              },
              "org_id": {
                "description": "Org ID of the RUM application.",
                "example": 999,
                "format": "int32",
                "type": "integer"
              },
              "type": {
                "description": "Type of the RUM application.",
                "example": "browser|ios|android|react-native|flutter",
                "type": "string"
              },
              "updated_at": {
                "description": "Timestamp in ms of the last update date.",
                "example": 1659479836169,
                "format": "int64",
                "type": "integer"
              },
              "updated_by_handle": {
                "description": "Handle of the updater user.",
                "example": "jane.doe",
                "type": "string"
              }
            },
            "required": [
              "application_id",
              "created_at",
              "created_by_handle",
              "name",
              "org_id",
              "type",
              "updated_at",
              "updated_by_handle"
            ],
            "type": "object"
          },
          "id": {
            "description": "RUM application ID.",
            "example": "abcd1234-0000-0000-abcd-1234abcd5678",
            "type": "string"
          },
          "type": {
            "default": "rum_application",
            "description": "RUM application response type.",
            "enum": [
              "rum_application"
            ],
            "example": "rum_application",
            "type": "string",
            "x-enum-varnames": [
              "RUM_APPLICATION"
            ]
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "RUMApplicationAttributes": {
        "description": "RUM application attributes.",
        "properties": {
          "application_id": {
            "description": "ID of the RUM application.",
            "example": "abcd1234-0000-0000-abcd-1234abcd5678",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp in ms of the creation date.",
            "example": 1659479836169,
            "format": "int64",
            "type": "integer"
          },
          "created_by_handle": {
            "description": "Handle of the creator user.",
            "example": "john.doe",
            "type": "string"
          },
          "hash": {
            "description": "Client token of the RUM application.",
            "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
            "type": "string"
          },
          "name": {
            "description": "Name of the RUM application.",
            "example": "my_rum_application",
            "type": "string"
          },
          "org_id": {
            "description": "Org ID of the RUM application.",
            "example": 999,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "Type of the RUM application.",
            "example": "browser|ios|android|react-native|flutter",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp in ms of the last update date.",
            "example": 1659479836169,
            "format": "int64",
            "type": "integer"
          },
          "updated_by_handle": {
            "description": "Handle of the updater user.",
            "example": "jane.doe",
            "type": "string"
          }
        },
        "required": [
          "application_id",
          "created_at",
          "created_by_handle",
          "name",
          "org_id",
          "type",
          "updated_at",
          "updated_by_handle"
        ],
        "type": "object"
      },
      "RUMApplicationCreate": {
        "description": "RUM application creation.",
        "properties": {
          "attributes": {
            "description": "RUM application creation attributes.",
            "properties": {
              "name": {
                "description": "Name of the RUM application.",
                "example": "my_new_rum_application",
                "type": "string"
              },
              "type": {
                "description": "Type of the RUM application.",
                "example": "browser|ios|android|react-native|flutter",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": {
            "default": "rum_application_create",
            "description": "RUM application creation type.",
            "enum": [
              "rum_application_create"
            ],
            "example": "rum_application_create",
            "type": "string",
            "x-enum-varnames": [
              "RUM_APPLICATION_CREATE"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "RUMApplicationCreateAttributes": {
        "description": "RUM application creation attributes.",
        "properties": {
          "name": {
            "description": "Name of the RUM application.",
            "example": "my_new_rum_application",
            "type": "string"
          },
          "type": {
            "description": "Type of the RUM application.",
            "example": "browser|ios|android|react-native|flutter",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RUMApplicationCreateRequest": {
        "description": "RUM application creation request attributes.",
        "properties": {
          "data": {
            "description": "RUM application creation.",
            "properties": {
              "attributes": {
                "description": "RUM application creation attributes.",
                "properties": {
                  "name": {
                    "description": "Name of the RUM application.",
                    "example": "my_new_rum_application",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the RUM application.",
                    "example": "browser|ios|android|react-native|flutter",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": {
                "default": "rum_application_create",
                "description": "RUM application creation type.",
                "enum": [
                  "rum_application_create"
                ],
                "example": "rum_application_create",
                "type": "string",
                "x-enum-varnames": [
                  "RUM_APPLICATION_CREATE"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RUMApplicationCreateType": {
        "default": "rum_application_create",
        "description": "RUM application creation type.",
        "enum": [
          "rum_application_create"
        ],
        "example": "rum_application_create",
        "type": "string",
        "x-enum-varnames": [
          "RUM_APPLICATION_CREATE"
        ]
      },
      "RUMApplicationResponse": {
        "description": "RUM application response.",
        "properties": {
          "data": {
            "description": "RUM application.",
            "properties": {
              "attributes": {
                "description": "RUM application attributes.",
                "properties": {
                  "application_id": {
                    "description": "ID of the RUM application.",
                    "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "Timestamp in ms of the creation date.",
                    "example": 1659479836169,
                    "format": "int64",
                    "type": "integer"
                  },
                  "created_by_handle": {
                    "description": "Handle of the creator user.",
                    "example": "john.doe",
                    "type": "string"
                  },
                  "hash": {
                    "description": "Client token of the RUM application.",
                    "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the RUM application.",
                    "example": "my_rum_application",
                    "type": "string"
                  },
                  "org_id": {
                    "description": "Org ID of the RUM application.",
                    "example": 999,
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": {
                    "description": "Type of the RUM application.",
                    "example": "browser|ios|android|react-native|flutter",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Timestamp in ms of the last update date.",
                    "example": 1659479836169,
                    "format": "int64",
                    "type": "integer"
                  },
                  "updated_by_handle": {
                    "description": "Handle of the updater user.",
                    "example": "jane.doe",
                    "type": "string"
                  }
                },
                "required": [
                  "application_id",
                  "created_at",
                  "created_by_handle",
                  "name",
                  "org_id",
                  "type",
                  "updated_at",
                  "updated_by_handle"
                ],
                "type": "object"
              },
              "id": {
                "description": "RUM application ID.",
                "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                "type": "string"
              },
              "type": {
                "default": "rum_application",
                "description": "RUM application response type.",
                "enum": [
                  "rum_application"
                ],
                "example": "rum_application",
                "type": "string",
                "x-enum-varnames": [
                  "RUM_APPLICATION"
                ]
              }
            },
            "required": [
              "attributes",
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RUMApplicationType": {
        "default": "rum_application",
        "description": "RUM application response type.",
        "enum": [
          "rum_application"
        ],
        "example": "rum_application",
        "type": "string",
        "x-enum-varnames": [
          "RUM_APPLICATION"
        ]
      },
      "RUMApplicationUpdate": {
        "description": "RUM application update.",
        "properties": {
          "attributes": {
            "description": "RUM application update attributes.",
            "properties": {
              "name": {
                "description": "Name of the RUM application.",
                "example": "updated_name_for_my_existing_rum_application",
                "type": "string"
              },
              "type": {
                "description": "Type of the RUM application.",
                "example": "browser|ios|android|react-native|flutter",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "RUM application ID.",
            "example": "abcd1234-0000-0000-abcd-1234abcd5678",
            "type": "string"
          },
          "type": {
            "default": "rum_application_update",
            "description": "RUM application update type.",
            "enum": [
              "rum_application_update"
            ],
            "example": "rum_application_update",
            "type": "string",
            "x-enum-varnames": [
              "RUM_APPLICATION_UPDATE"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RUMApplicationUpdateAttributes": {
        "description": "RUM application update attributes.",
        "properties": {
          "name": {
            "description": "Name of the RUM application.",
            "example": "updated_name_for_my_existing_rum_application",
            "type": "string"
          },
          "type": {
            "description": "Type of the RUM application.",
            "example": "browser|ios|android|react-native|flutter",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMApplicationUpdateRequest": {
        "description": "RUM application update request.",
        "properties": {
          "data": {
            "description": "RUM application update.",
            "properties": {
              "attributes": {
                "description": "RUM application update attributes.",
                "properties": {
                  "name": {
                    "description": "Name of the RUM application.",
                    "example": "updated_name_for_my_existing_rum_application",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the RUM application.",
                    "example": "browser|ios|android|react-native|flutter",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "RUM application ID.",
                "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                "type": "string"
              },
              "type": {
                "default": "rum_application_update",
                "description": "RUM application update type.",
                "enum": [
                  "rum_application_update"
                ],
                "example": "rum_application_update",
                "type": "string",
                "x-enum-varnames": [
                  "RUM_APPLICATION_UPDATE"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RUMApplicationUpdateType": {
        "default": "rum_application_update",
        "description": "RUM application update type.",
        "enum": [
          "rum_application_update"
        ],
        "example": "rum_application_update",
        "type": "string",
        "x-enum-varnames": [
          "RUM_APPLICATION_UPDATE"
        ]
      },
      "RUMApplicationsResponse": {
        "description": "RUM applications response.",
        "properties": {
          "data": {
            "description": "RUM applications array response.",
            "items": {
              "description": "RUM application.",
              "properties": {
                "attributes": {
                  "description": "RUM application attributes.",
                  "properties": {
                    "application_id": {
                      "description": "ID of the RUM application.",
                      "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "Timestamp in ms of the creation date.",
                      "example": 1659479836169,
                      "format": "int64",
                      "type": "integer"
                    },
                    "created_by_handle": {
                      "description": "Handle of the creator user.",
                      "example": "john.doe",
                      "type": "string"
                    },
                    "hash": {
                      "description": "Client token of the RUM application.",
                      "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the RUM application.",
                      "example": "my_rum_application",
                      "type": "string"
                    },
                    "org_id": {
                      "description": "Org ID of the RUM application.",
                      "example": 999,
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type of the RUM application.",
                      "example": "browser|ios|android|react-native|flutter",
                      "type": "string"
                    },
                    "updated_at": {
                      "description": "Timestamp in ms of the last update date.",
                      "example": 1659479836169,
                      "format": "int64",
                      "type": "integer"
                    },
                    "updated_by_handle": {
                      "description": "Handle of the updater user.",
                      "example": "jane.doe",
                      "type": "string"
                    }
                  },
                  "required": [
                    "application_id",
                    "created_at",
                    "created_by_handle",
                    "name",
                    "org_id",
                    "type",
                    "updated_at",
                    "updated_by_handle"
                  ],
                  "type": "object"
                },
                "id": {
                  "description": "RUM application ID.",
                  "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                  "type": "string"
                },
                "type": {
                  "default": "rum_application",
                  "description": "RUM application response type.",
                  "enum": [
                    "rum_application"
                  ],
                  "example": "rum_application",
                  "type": "string",
                  "x-enum-varnames": [
                    "RUM_APPLICATION"
                  ]
                }
              },
              "required": [
                "attributes",
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RUMBucketResponse": {
        "description": "Bucket values.",
        "properties": {
          "by": {
            "additionalProperties": {
              "description": "The values for each group-by.",
              "type": "string"
            },
            "description": "The key-value pairs for each group-by.",
            "example": {
              "@session.type": "user",
              "@type": "view"
            },
            "type": "object"
          },
          "computes": {
            "additionalProperties": {
              "description": "A bucket value, can be either a timeseries or a single value.",
              "oneOf": [
                {
                  "description": "A single string value.",
                  "type": "string"
                },
                {
                  "description": "A single number value.",
                  "format": "double",
                  "type": "number"
                },
                {
                  "description": "A timeseries array.",
                  "items": {
                    "description": "A timeseries point.",
                    "properties": {
                      "time": {
                        "description": "The time value for this point.",
                        "example": "2020-06-08T11:55:00.123Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value for this point.",
                        "example": 19,
                        "format": "double",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "x-generate-alias-as-model": true
                }
              ]
            },
            "description": "A map of the metric name to value for regular compute, or a list of values for a timeseries.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "RUMCompute": {
        "description": "A compute rule to compute metrics or timeseries.",
        "properties": {
          "aggregation": {
            "description": "An aggregation function.",
            "enum": [
              "count",
              "cardinality",
              "pc75",
              "pc90",
              "pc95",
              "pc98",
              "pc99",
              "sum",
              "min",
              "max",
              "avg",
              "median"
            ],
            "example": "pc90",
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "PERCENTILE_75",
              "PERCENTILE_90",
              "PERCENTILE_95",
              "PERCENTILE_98",
              "PERCENTILE_99",
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MEDIAN"
            ]
          },
          "interval": {
            "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points.",
            "example": "5m",
            "type": "string"
          },
          "metric": {
            "description": "The metric to use.",
            "example": "@duration",
            "type": "string"
          },
          "type": {
            "default": "total",
            "description": "The type of compute.",
            "enum": [
              "timeseries",
              "total"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESERIES",
              "TOTAL"
            ]
          }
        },
        "required": [
          "aggregation"
        ],
        "type": "object"
      },
      "RUMComputeType": {
        "default": "total",
        "description": "The type of compute.",
        "enum": [
          "timeseries",
          "total"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESERIES",
          "TOTAL"
        ]
      },
      "RUMEvent": {
        "description": "Object description of a RUM event after being processed and stored by Datadog.",
        "properties": {
          "attributes": {
            "description": "JSON object containing all event attributes and their associated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "JSON object of attributes from RUM events.",
                "example": {
                  "customAttribute": 123,
                  "duration": 2345
                },
                "type": "object"
              },
              "service": {
                "description": "The name of the application or service generating RUM events.\nIt is used to switch from RUM to APM, so make sure you define the same\nvalue when you use both products.",
                "example": "web-app",
                "type": "string"
              },
              "tags": {
                "description": "Array of tags associated with your event.",
                "example": [
                  "team:A"
                ],
                "items": {
                  "description": "Tag associated with your event.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "Timestamp of your event.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the event.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "rum",
            "description": "Type of the event.",
            "enum": [
              "rum"
            ],
            "example": "rum",
            "type": "string",
            "x-enum-varnames": [
              "RUM"
            ]
          }
        },
        "type": "object"
      },
      "RUMEventAttributes": {
        "description": "JSON object containing all event attributes and their associated values.",
        "properties": {
          "attributes": {
            "additionalProperties": {},
            "description": "JSON object of attributes from RUM events.",
            "example": {
              "customAttribute": 123,
              "duration": 2345
            },
            "type": "object"
          },
          "service": {
            "description": "The name of the application or service generating RUM events.\nIt is used to switch from RUM to APM, so make sure you define the same\nvalue when you use both products.",
            "example": "web-app",
            "type": "string"
          },
          "tags": {
            "description": "Array of tags associated with your event.",
            "example": [
              "team:A"
            ],
            "items": {
              "description": "Tag associated with your event.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "Timestamp of your event.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMEventType": {
        "default": "rum",
        "description": "Type of the event.",
        "enum": [
          "rum"
        ],
        "example": "rum",
        "type": "string",
        "x-enum-varnames": [
          "RUM"
        ]
      },
      "RUMEventsResponse": {
        "description": "Response object with all events matching the request and pagination information.",
        "properties": {
          "data": {
            "description": "Array of events matching the request.",
            "items": {
              "description": "Object description of a RUM event after being processed and stored by Datadog.",
              "properties": {
                "attributes": {
                  "description": "JSON object containing all event attributes and their associated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "JSON object of attributes from RUM events.",
                      "example": {
                        "customAttribute": 123,
                        "duration": 2345
                      },
                      "type": "object"
                    },
                    "service": {
                      "description": "The name of the application or service generating RUM events.\nIt is used to switch from RUM to APM, so make sure you define the same\nvalue when you use both products.",
                      "example": "web-app",
                      "type": "string"
                    },
                    "tags": {
                      "description": "Array of tags associated with your event.",
                      "example": [
                        "team:A"
                      ],
                      "items": {
                        "description": "Tag associated with your event.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "Timestamp of your event.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the event.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "rum",
                  "description": "Type of the event.",
                  "enum": [
                    "rum"
                  ],
                  "example": "rum",
                  "type": "string",
                  "x-enum-varnames": [
                    "RUM"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "The metadata associated with a request.",
            "properties": {
              "elapsed": {
                "description": "The time elapsed in milliseconds.",
                "example": 132,
                "format": "int64",
                "type": "integer"
              },
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "request_id": {
                "description": "The identifier of the request.",
                "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                "type": "string"
              },
              "status": {
                "description": "The status of the response.",
                "enum": [
                  "done",
                  "timeout"
                ],
                "example": "done",
                "type": "string",
                "x-enum-varnames": [
                  "DONE",
                  "TIMEOUT"
                ]
              },
              "warnings": {
                "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                "items": {
                  "description": "A warning message indicating something that went wrong with the query.",
                  "properties": {
                    "code": {
                      "description": "A unique code for this type of warning.",
                      "example": "unknown_index",
                      "type": "string"
                    },
                    "detail": {
                      "description": "A detailed explanation of this specific warning.",
                      "example": "indexes: foo, bar",
                      "type": "string"
                    },
                    "title": {
                      "description": "A short human-readable summary of the warning.",
                      "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RUMGroupBy": {
        "description": "A group-by rule.",
        "properties": {
          "facet": {
            "description": "The name of the facet to use (required).",
            "example": "@view.time_spent",
            "type": "string"
          },
          "histogram": {
            "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
            "properties": {
              "interval": {
                "description": "The bin size of the histogram buckets.",
                "example": 10,
                "format": "double",
                "type": "number"
              },
              "max": {
                "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out).",
                "example": 100,
                "format": "double",
                "type": "number"
              },
              "min": {
                "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out).",
                "example": 50,
                "format": "double",
                "type": "number"
              }
            },
            "required": [
              "interval",
              "min",
              "max"
            ],
            "type": "object"
          },
          "limit": {
            "default": 10,
            "description": "The maximum buckets to return for this group-by.",
            "format": "int64",
            "type": "integer"
          },
          "missing": {
            "description": "The value to use for logs that don't have the facet used to group by.",
            "oneOf": [
              {
                "description": "The missing value to use if there is string valued facet.",
                "type": "string"
              },
              {
                "description": "The missing value to use if there is a number valued facet.",
                "format": "double",
                "type": "number"
              }
            ]
          },
          "sort": {
            "description": "A sort rule.",
            "example": {
              "aggregation": "count",
              "order": "asc"
            },
            "properties": {
              "aggregation": {
                "description": "An aggregation function.",
                "enum": [
                  "count",
                  "cardinality",
                  "pc75",
                  "pc90",
                  "pc95",
                  "pc98",
                  "pc99",
                  "sum",
                  "min",
                  "max",
                  "avg",
                  "median"
                ],
                "example": "pc90",
                "type": "string",
                "x-enum-varnames": [
                  "COUNT",
                  "CARDINALITY",
                  "PERCENTILE_75",
                  "PERCENTILE_90",
                  "PERCENTILE_95",
                  "PERCENTILE_98",
                  "PERCENTILE_99",
                  "SUM",
                  "MIN",
                  "MAX",
                  "AVG",
                  "MEDIAN"
                ]
              },
              "metric": {
                "description": "The metric to sort by (only used for `type=measure`).",
                "example": "@duration",
                "type": "string"
              },
              "order": {
                "description": "The order to use, ascending or descending.",
                "enum": [
                  "asc",
                  "desc"
                ],
                "example": "asc",
                "type": "string",
                "x-enum-varnames": [
                  "ASCENDING",
                  "DESCENDING"
                ]
              },
              "type": {
                "default": "alphabetical",
                "description": "The type of sorting algorithm.",
                "enum": [
                  "alphabetical",
                  "measure"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "ALPHABETICAL",
                  "MEASURE"
                ]
              }
            },
            "type": "object"
          },
          "total": {
            "default": false,
            "description": "A resulting object to put the given computes in over all the matching records.",
            "oneOf": [
              {
                "description": "If set to true, creates an additional bucket labeled \"$facet_total\".",
                "type": "boolean"
              },
              {
                "description": "A string to use as the key value for the total bucket.",
                "type": "string"
              },
              {
                "description": "A number to use as the key value for the total bucket.",
                "format": "double",
                "type": "number"
              }
            ]
          }
        },
        "required": [
          "facet"
        ],
        "type": "object"
      },
      "RUMGroupByHistogram": {
        "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
        "properties": {
          "interval": {
            "description": "The bin size of the histogram buckets.",
            "example": 10,
            "format": "double",
            "type": "number"
          },
          "max": {
            "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out).",
            "example": 100,
            "format": "double",
            "type": "number"
          },
          "min": {
            "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out).",
            "example": 50,
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "interval",
          "min",
          "max"
        ],
        "type": "object"
      },
      "RUMGroupByMissing": {
        "description": "The value to use for logs that don't have the facet used to group by.",
        "oneOf": [
          {
            "description": "The missing value to use if there is string valued facet.",
            "type": "string"
          },
          {
            "description": "The missing value to use if there is a number valued facet.",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "RUMGroupByMissingNumber": {
        "description": "The missing value to use if there is a number valued facet.",
        "format": "double",
        "type": "number"
      },
      "RUMGroupByMissingString": {
        "description": "The missing value to use if there is string valued facet.",
        "type": "string"
      },
      "RUMGroupByTotal": {
        "default": false,
        "description": "A resulting object to put the given computes in over all the matching records.",
        "oneOf": [
          {
            "description": "If set to true, creates an additional bucket labeled \"$facet_total\".",
            "type": "boolean"
          },
          {
            "description": "A string to use as the key value for the total bucket.",
            "type": "string"
          },
          {
            "description": "A number to use as the key value for the total bucket.",
            "format": "double",
            "type": "number"
          }
        ]
      },
      "RUMGroupByTotalBoolean": {
        "description": "If set to true, creates an additional bucket labeled \"$facet_total\".",
        "type": "boolean"
      },
      "RUMGroupByTotalNumber": {
        "description": "A number to use as the key value for the total bucket.",
        "format": "double",
        "type": "number"
      },
      "RUMGroupByTotalString": {
        "description": "A string to use as the key value for the total bucket.",
        "type": "string"
      },
      "RUMQueryFilter": {
        "description": "The search and filter query settings.",
        "properties": {
          "from": {
            "default": "now-15m",
            "description": "The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
            "example": "now-15m",
            "type": "string"
          },
          "query": {
            "default": "*",
            "description": "The search query following the RUM search syntax.",
            "example": "@type:session AND @session.type:user",
            "type": "string"
          },
          "to": {
            "default": "now",
            "description": "The maximum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
            "example": "now",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMQueryOptions": {
        "description": "Global query options that are used during the query.\nNote: Only supply timezone or time offset, not both. Otherwise, the query fails.",
        "properties": {
          "time_offset": {
            "description": "The time offset (in seconds) to apply to the query.",
            "format": "int64",
            "type": "integer"
          },
          "timezone": {
            "default": "UTC",
            "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
            "example": "GMT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMQueryPageOptions": {
        "description": "Paging attributes for listing events.",
        "properties": {
          "cursor": {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          },
          "limit": {
            "default": 10,
            "description": "Maximum number of events in the response.",
            "example": 25,
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RUMResponseLinks": {
        "description": "Links attributes.",
        "properties": {
          "next": {
            "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
            "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMResponseMetadata": {
        "description": "The metadata associated with a request.",
        "properties": {
          "elapsed": {
            "description": "The time elapsed in milliseconds.",
            "example": 132,
            "format": "int64",
            "type": "integer"
          },
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "request_id": {
            "description": "The identifier of the request.",
            "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
            "type": "string"
          },
          "status": {
            "description": "The status of the response.",
            "enum": [
              "done",
              "timeout"
            ],
            "example": "done",
            "type": "string",
            "x-enum-varnames": [
              "DONE",
              "TIMEOUT"
            ]
          },
          "warnings": {
            "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
            "items": {
              "description": "A warning message indicating something that went wrong with the query.",
              "properties": {
                "code": {
                  "description": "A unique code for this type of warning.",
                  "example": "unknown_index",
                  "type": "string"
                },
                "detail": {
                  "description": "A detailed explanation of this specific warning.",
                  "example": "indexes: foo, bar",
                  "type": "string"
                },
                "title": {
                  "description": "A short human-readable summary of the warning.",
                  "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RUMResponsePage": {
        "description": "Paging attributes.",
        "properties": {
          "after": {
            "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RUMResponseStatus": {
        "description": "The status of the response.",
        "enum": [
          "done",
          "timeout"
        ],
        "example": "done",
        "type": "string",
        "x-enum-varnames": [
          "DONE",
          "TIMEOUT"
        ]
      },
      "RUMSearchEventsRequest": {
        "description": "The request for a RUM events list.",
        "properties": {
          "filter": {
            "description": "The search and filter query settings.",
            "properties": {
              "from": {
                "default": "now-15m",
                "description": "The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                "example": "now-15m",
                "type": "string"
              },
              "query": {
                "default": "*",
                "description": "The search query following the RUM search syntax.",
                "example": "@type:session AND @session.type:user",
                "type": "string"
              },
              "to": {
                "default": "now",
                "description": "The maximum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                "example": "now",
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "description": "Global query options that are used during the query.\nNote: Only supply timezone or time offset, not both. Otherwise, the query fails.",
            "properties": {
              "time_offset": {
                "description": "The time offset (in seconds) to apply to the query.",
                "format": "int64",
                "type": "integer"
              },
              "timezone": {
                "default": "UTC",
                "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                "example": "GMT",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "Paging attributes for listing events.",
            "properties": {
              "cursor": {
                "description": "List following results with a cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "Maximum number of events in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "Sort parameters when querying events.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "RUMSort": {
        "description": "Sort parameters when querying events.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "RUMSortOrder": {
        "description": "The order to use, ascending or descending.",
        "enum": [
          "asc",
          "desc"
        ],
        "example": "asc",
        "type": "string",
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "RUMWarning": {
        "description": "A warning message indicating something that went wrong with the query.",
        "properties": {
          "code": {
            "description": "A unique code for this type of warning.",
            "example": "unknown_index",
            "type": "string"
          },
          "detail": {
            "description": "A detailed explanation of this specific warning.",
            "example": "indexes: foo, bar",
            "type": "string"
          },
          "title": {
            "description": "A short human-readable summary of the warning.",
            "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipToIncidentIntegrationMetadataData": {
        "description": "A relationship reference for an integration metadata object.",
        "example": {
          "id": "00000000-abcd-0002-0000-000000000000",
          "type": "incident_integrations"
        },
        "properties": {
          "id": {
            "description": "A unique identifier that represents the integration metadata.",
            "example": "00000000-abcd-0001-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "incident_integrations",
            "description": "Integration metadata resource type.",
            "enum": [
              "incident_integrations"
            ],
            "example": "incident_integrations",
            "type": "string",
            "x-enum-varnames": [
              "INCIDENT_INTEGRATIONS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToIncidentIntegrationMetadatas": {
        "description": "A relationship reference for multiple integration metadata objects.",
        "example": {
          "data": [
            {
              "id": "00000000-abcd-0005-0000-000000000000",
              "type": "incident_integrations"
            },
            {
              "id": "00000000-abcd-0006-0000-000000000000",
              "type": "incident_integrations"
            }
          ]
        },
        "properties": {
          "data": {
            "description": "The integration metadata relationship array",
            "example": [
              {
                "id": "00000000-abcd-0003-0000-000000000000",
                "type": "incident_integrations"
              },
              {
                "id": "00000000-abcd-0004-0000-000000000000",
                "type": "incident_integrations"
              }
            ],
            "items": {
              "description": "A relationship reference for an integration metadata object.",
              "example": {
                "id": "00000000-abcd-0002-0000-000000000000",
                "type": "incident_integrations"
              },
              "properties": {
                "id": {
                  "description": "A unique identifier that represents the integration metadata.",
                  "example": "00000000-abcd-0001-0000-000000000000",
                  "type": "string"
                },
                "type": {
                  "default": "incident_integrations",
                  "description": "Integration metadata resource type.",
                  "enum": [
                    "incident_integrations"
                  ],
                  "example": "incident_integrations",
                  "type": "string",
                  "x-enum-varnames": [
                    "INCIDENT_INTEGRATIONS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToIncidentPostmortem": {
        "description": "A relationship reference for postmortems.",
        "example": {
          "data": {
            "id": "00000000-0000-abcd-3000-000000000000",
            "type": "incident_postmortems"
          }
        },
        "properties": {
          "data": {
            "description": "The postmortem relationship data.",
            "example": {
              "id": "00000000-0000-abcd-2000-000000000000",
              "type": "incident_postmortems"
            },
            "properties": {
              "id": {
                "description": "A unique identifier that represents the postmortem.",
                "example": "00000000-0000-abcd-1000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "incident_postmortems",
                "description": "Incident postmortem resource type.",
                "enum": [
                  "incident_postmortems"
                ],
                "example": "incident_postmortems",
                "type": "string",
                "x-enum-varnames": [
                  "INCIDENT_POSTMORTEMS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToIncidentPostmortemData": {
        "description": "The postmortem relationship data.",
        "example": {
          "id": "00000000-0000-abcd-2000-000000000000",
          "type": "incident_postmortems"
        },
        "properties": {
          "id": {
            "description": "A unique identifier that represents the postmortem.",
            "example": "00000000-0000-abcd-1000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "incident_postmortems",
            "description": "Incident postmortem resource type.",
            "enum": [
              "incident_postmortems"
            ],
            "example": "incident_postmortems",
            "type": "string",
            "x-enum-varnames": [
              "INCIDENT_POSTMORTEMS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToOrganization": {
        "description": "Relationship to an organization.",
        "properties": {
          "data": {
            "description": "Relationship to organization object.",
            "properties": {
              "id": {
                "description": "ID of the organization.",
                "example": "00000000-0000-beef-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "orgs",
                "description": "Organizations resource type.",
                "enum": [
                  "orgs"
                ],
                "example": "orgs",
                "type": "string",
                "x-enum-varnames": [
                  "ORGS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToOrganizationData": {
        "description": "Relationship to organization object.",
        "properties": {
          "id": {
            "description": "ID of the organization.",
            "example": "00000000-0000-beef-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "orgs",
            "description": "Organizations resource type.",
            "enum": [
              "orgs"
            ],
            "example": "orgs",
            "type": "string",
            "x-enum-varnames": [
              "ORGS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToOrganizations": {
        "description": "Relationship to organizations.",
        "properties": {
          "data": {
            "description": "Relationships to organization objects.",
            "example": [],
            "items": {
              "description": "Relationship to organization object.",
              "properties": {
                "id": {
                  "description": "ID of the organization.",
                  "example": "00000000-0000-beef-0000-000000000000",
                  "type": "string"
                },
                "type": {
                  "default": "orgs",
                  "description": "Organizations resource type.",
                  "enum": [
                    "orgs"
                  ],
                  "example": "orgs",
                  "type": "string",
                  "x-enum-varnames": [
                    "ORGS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToPermission": {
        "description": "Relationship to a permissions object.",
        "properties": {
          "data": {
            "description": "Relationship to permission object.",
            "properties": {
              "id": {
                "description": "ID of the permission.",
                "type": "string"
              },
              "type": {
                "default": "permissions",
                "description": "Permissions resource type.",
                "enum": [
                  "permissions"
                ],
                "example": "permissions",
                "type": "string",
                "x-enum-varnames": [
                  "PERMISSIONS"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RelationshipToPermissionData": {
        "description": "Relationship to permission object.",
        "properties": {
          "id": {
            "description": "ID of the permission.",
            "type": "string"
          },
          "type": {
            "default": "permissions",
            "description": "Permissions resource type.",
            "enum": [
              "permissions"
            ],
            "example": "permissions",
            "type": "string",
            "x-enum-varnames": [
              "PERMISSIONS"
            ]
          }
        },
        "type": "object"
      },
      "RelationshipToPermissions": {
        "description": "Relationship to multiple permissions objects.",
        "properties": {
          "data": {
            "description": "Relationships to permission objects.",
            "items": {
              "description": "Relationship to permission object.",
              "properties": {
                "id": {
                  "description": "ID of the permission.",
                  "type": "string"
                },
                "type": {
                  "default": "permissions",
                  "description": "Permissions resource type.",
                  "enum": [
                    "permissions"
                  ],
                  "example": "permissions",
                  "type": "string",
                  "x-enum-varnames": [
                    "PERMISSIONS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RelationshipToRole": {
        "description": "Relationship to role.",
        "properties": {
          "data": {
            "description": "Relationship to role object.",
            "properties": {
              "id": {
                "description": "The unique identifier of the role.",
                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RelationshipToRoleData": {
        "description": "Relationship to role object.",
        "properties": {
          "id": {
            "description": "The unique identifier of the role.",
            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "type": "object"
      },
      "RelationshipToRoles": {
        "description": "Relationship to roles.",
        "properties": {
          "data": {
            "description": "An array containing type and the unique identifier of a role.",
            "items": {
              "description": "Relationship to role object.",
              "properties": {
                "id": {
                  "description": "The unique identifier of the role.",
                  "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                  "type": "string"
                },
                "type": {
                  "default": "roles",
                  "description": "Roles type.",
                  "enum": [
                    "roles"
                  ],
                  "example": "roles",
                  "type": "string",
                  "x-enum-varnames": [
                    "ROLES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RelationshipToSAMLAssertionAttribute": {
        "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
        "properties": {
          "data": {
            "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
            "properties": {
              "id": {
                "description": "The ID of the SAML assertion attribute.",
                "example": "0",
                "type": "string"
              },
              "type": {
                "default": "saml_assertion_attributes",
                "description": "SAML assertion attributes resource type.",
                "enum": [
                  "saml_assertion_attributes"
                ],
                "example": "saml_assertion_attributes",
                "type": "string",
                "x-enum-varnames": [
                  "SAML_ASSERTION_ATTRIBUTES"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToSAMLAssertionAttributeData": {
        "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
        "properties": {
          "id": {
            "description": "The ID of the SAML assertion attribute.",
            "example": "0",
            "type": "string"
          },
          "type": {
            "default": "saml_assertion_attributes",
            "description": "SAML assertion attributes resource type.",
            "enum": [
              "saml_assertion_attributes"
            ],
            "example": "saml_assertion_attributes",
            "type": "string",
            "x-enum-varnames": [
              "SAML_ASSERTION_ATTRIBUTES"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToUser": {
        "description": "Relationship to user.",
        "properties": {
          "data": {
            "description": "Relationship to user object.",
            "properties": {
              "id": {
                "description": "A unique identifier that represents the user.",
                "example": "00000000-0000-0000-2345-000000000000",
                "type": "string"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RelationshipToUserData": {
        "description": "Relationship to user object.",
        "properties": {
          "id": {
            "description": "A unique identifier that represents the user.",
            "example": "00000000-0000-0000-2345-000000000000",
            "type": "string"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "RelationshipToUsers": {
        "description": "Relationship to users.",
        "properties": {
          "data": {
            "description": "Relationships to user objects.",
            "example": [],
            "items": {
              "description": "Relationship to user object.",
              "properties": {
                "id": {
                  "description": "A unique identifier that represents the user.",
                  "example": "00000000-0000-0000-2345-000000000000",
                  "type": "string"
                },
                "type": {
                  "default": "users",
                  "description": "Users resource type.",
                  "enum": [
                    "users"
                  ],
                  "example": "users",
                  "type": "string",
                  "x-enum-varnames": [
                    "USERS"
                  ]
                }
              },
              "required": [
                "id",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "ResponseMetaAttributes": {
        "description": "Object describing meta attributes of response.",
        "properties": {
          "page": {
            "description": "Pagination object.",
            "properties": {
              "total_count": {
                "description": "Total count.",
                "format": "int64",
                "type": "integer"
              },
              "total_filtered_count": {
                "description": "Total count of elements matched by the filter.",
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryAttributes": {
        "description": "Attributes of the restriction query.",
        "properties": {
          "created_at": {
            "description": "Creation time of the restriction query.",
            "example": "2020-03-17T21:06:44.000Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last restriction query modification.",
            "example": "2020-03-17T21:15:15.000Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "restriction_query": {
            "description": "The query that defines the restriction. Only the content matching the query can be returned.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreateAttributes": {
        "description": "Attributes of the created restriction query.",
        "properties": {
          "restriction_query": {
            "description": "The restriction query.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreateData": {
        "description": "Data related to the creation of a restriction query.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created restriction query.",
            "properties": {
              "restriction_query": {
                "description": "The restriction query.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryCreatePayload": {
        "description": "Create a restriction query.",
        "properties": {
          "data": {
            "description": "Data related to the creation of a restriction query.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created restriction query.",
                "properties": {
                  "restriction_query": {
                    "description": "The restriction query.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryListResponse": {
        "description": "Response containing information about multiple restriction queries.",
        "properties": {
          "data": {
            "description": "Array of returned restriction queries.",
            "items": {
              "description": "Restriction query object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the restriction query.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the restriction query.",
                      "example": "2020-03-17T21:06:44.000Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time of last restriction query modification.",
                      "example": "2020-03-17T21:15:15.000Z",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "restriction_query": {
                      "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                      "example": "env:sandbox",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the restriction query.",
                  "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                  "type": "string"
                },
                "type": {
                  "default": "logs_restriction_queries",
                  "description": "Restriction queries type.",
                  "example": "logs_restriction_queries",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRelationships": {
        "description": "Relationships of the restriction query object.",
        "properties": {
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and the unique identifier of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "The unique identifier of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryResponseIncludedItem": {
        "description": "An object related to a restriction query.",
        "discriminator": {
          "mapping": {
            "roles": "#/components/schemas/RestrictionQueryRole"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "description": "Partial role object.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role for a restriction query.",
                "properties": {
                  "name": {
                    "description": "The role name.",
                    "example": "Datadog Admin Role",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the role.",
                "example": "<ROLE_ID>",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Role resource type.",
                "example": "roles",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "RestrictionQueryRole": {
        "description": "Partial role object.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role for a restriction query.",
            "properties": {
              "name": {
                "description": "The role name.",
                "example": "Datadog Admin Role",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the role.",
            "example": "<ROLE_ID>",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Role resource type.",
            "example": "roles",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRoleAttribute": {
        "description": "Attributes of the role for a restriction query.",
        "properties": {
          "name": {
            "description": "The role name.",
            "example": "Datadog Admin Role",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryRolesResponse": {
        "description": "Response containing information about roles attached to a restriction query.",
        "properties": {
          "data": {
            "description": "Array of roles.",
            "items": {
              "description": "Partial role object.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the role for a restriction query.",
                  "properties": {
                    "name": {
                      "description": "The role name.",
                      "example": "Datadog Admin Role",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the role.",
                  "example": "<ROLE_ID>",
                  "type": "string"
                },
                "type": {
                  "default": "roles",
                  "description": "Role resource type.",
                  "example": "roles",
                  "readOnly": true,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdateAttributes": {
        "description": "Attributes of the edited restriction query.",
        "properties": {
          "restriction_query": {
            "description": "The restriction query.",
            "example": "env:sandbox",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdateData": {
        "description": "Data related to the update of a restriction query.",
        "properties": {
          "attributes": {
            "description": "Attributes of the edited restriction query.",
            "properties": {
              "restriction_query": {
                "description": "The restriction query.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryUpdatePayload": {
        "description": "Update a restriction query.",
        "properties": {
          "data": {
            "description": "Data related to the update of a restriction query.",
            "properties": {
              "attributes": {
                "description": "Attributes of the edited restriction query.",
                "properties": {
                  "restriction_query": {
                    "description": "The restriction query.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithRelationships": {
        "description": "Restriction query object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the restriction query.",
            "properties": {
              "created_at": {
                "description": "Creation time of the restriction query.",
                "example": "2020-03-17T21:06:44.000Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last restriction query modification.",
                "example": "2020-03-17T21:15:15.000Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "restriction_query": {
                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the restriction query.",
            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the restriction query object.",
            "properties": {
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and the unique identifier of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "The unique identifier of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction query resource type.",
            "enum": [
              "logs_restriction_queries"
            ],
            "example": "logs_restriction_queries",
            "type": "string",
            "x-enum-varnames": [
              "LOGS_RESTRICTION_QUERIES"
            ]
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithRelationshipsResponse": {
        "description": "Response containing information about a single restriction query.",
        "properties": {
          "data": {
            "description": "Restriction query object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the restriction query.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the restriction query.",
                    "example": "2020-03-17T21:06:44.000Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last restriction query modification.",
                    "example": "2020-03-17T21:15:15.000Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "restriction_query": {
                    "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the restriction query.",
                "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the restriction query object.",
                "properties": {
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction query resource type.",
                "enum": [
                  "logs_restriction_queries"
                ],
                "example": "logs_restriction_queries",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS_RESTRICTION_QUERIES"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the restriction query.",
            "items": {
              "description": "An object related to a restriction query.",
              "discriminator": {
                "mapping": {
                  "roles": "#/components/schemas/RestrictionQueryRole"
                },
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "description": "Partial role object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role for a restriction query.",
                      "properties": {
                        "name": {
                          "description": "The role name.",
                          "example": "Datadog Admin Role",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the role.",
                      "example": "<ROLE_ID>",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Role resource type.",
                      "example": "roles",
                      "readOnly": true,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithoutRelationships": {
        "description": "Restriction query object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the restriction query.",
            "properties": {
              "created_at": {
                "description": "Creation time of the restriction query.",
                "example": "2020-03-17T21:06:44.000Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last restriction query modification.",
                "example": "2020-03-17T21:15:15.000Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "restriction_query": {
                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                "example": "env:sandbox",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the restriction query.",
            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
            "type": "string"
          },
          "type": {
            "default": "logs_restriction_queries",
            "description": "Restriction queries type.",
            "example": "logs_restriction_queries",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestrictionQueryWithoutRelationshipsResponse": {
        "description": "Response containing information about a single restriction query.",
        "properties": {
          "data": {
            "description": "Restriction query object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the restriction query.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the restriction query.",
                    "example": "2020-03-17T21:06:44.000Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last restriction query modification.",
                    "example": "2020-03-17T21:15:15.000Z",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "restriction_query": {
                    "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                    "example": "env:sandbox",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the restriction query.",
                "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                "type": "string"
              },
              "type": {
                "default": "logs_restriction_queries",
                "description": "Restriction queries type.",
                "example": "logs_restriction_queries",
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Role": {
        "description": "Role object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                "type": "string"
              },
              "user_count": {
                "description": "Number of users with that role.",
                "format": "int64",
                "readOnly": true,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique identifier of the role.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the role object returned by the API.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RoleAttributes": {
        "description": "Attributes of the role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
            "type": "string"
          },
          "user_count": {
            "description": "Number of users with that role.",
            "format": "int64",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RoleClone": {
        "description": "Data for the clone role request.",
        "properties": {
          "attributes": {
            "description": "Attributes required to create a new role by cloning an existing one.",
            "properties": {
              "name": {
                "description": "Name of the new role that is cloned.",
                "example": "cloned-role",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "RoleCloneAttributes": {
        "description": "Attributes required to create a new role by cloning an existing one.",
        "properties": {
          "name": {
            "description": "Name of the new role that is cloned.",
            "example": "cloned-role",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RoleCloneRequest": {
        "description": "Request to create a role by cloning an existing role.",
        "properties": {
          "data": {
            "description": "Data for the clone role request.",
            "properties": {
              "attributes": {
                "description": "Attributes required to create a new role by cloning an existing one.",
                "properties": {
                  "name": {
                    "description": "Name of the new role that is cloned.",
                    "example": "cloned-role",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RoleCreateAttributes": {
        "description": "Attributes of the created role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "developers",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RoleCreateData": {
        "description": "Data related to the creation of a role.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "example": "developers",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "Relationships of the role object.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "users": {
                "description": "Relationship to users.",
                "properties": {
                  "data": {
                    "description": "Relationships to user objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to user object.",
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the user.",
                          "example": "00000000-0000-0000-2345-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "RoleCreateRequest": {
        "description": "Create a role.",
        "properties": {
          "data": {
            "description": "Data related to the creation of a role.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "example": "developers",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "Relationships of the role object.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RoleCreateResponse": {
        "description": "Response containing information about a created role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "example": "developers",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleCreateResponseData": {
        "description": "Role object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "example": "developers",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "The unique identifier of the role.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the role object returned by the API.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RoleRelationships": {
        "description": "Relationships of the role object.",
        "properties": {
          "permissions": {
            "description": "Relationship to multiple permissions objects.",
            "properties": {
              "data": {
                "description": "Relationships to permission objects.",
                "items": {
                  "description": "Relationship to permission object.",
                  "properties": {
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "users": {
            "description": "Relationship to users.",
            "properties": {
              "data": {
                "description": "Relationships to user objects.",
                "example": [],
                "items": {
                  "description": "Relationship to user object.",
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the user.",
                      "example": "00000000-0000-0000-2345-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleResponse": {
        "description": "Response containing information about a single role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleResponseRelationships": {
        "description": "Relationships of the role object returned by the API.",
        "properties": {
          "permissions": {
            "description": "Relationship to multiple permissions objects.",
            "properties": {
              "data": {
                "description": "Relationships to permission objects.",
                "items": {
                  "description": "Relationship to permission object.",
                  "properties": {
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleUpdateAttributes": {
        "description": "Attributes of the role.",
        "properties": {
          "created_at": {
            "description": "Creation time of the role.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "modified_at": {
            "description": "Time of last role modification.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleUpdateData": {
        "description": "Data related to the update of a role.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique identifier of the role.",
            "example": "00000000-0000-1111-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "attributes",
          "type",
          "id"
        ],
        "type": "object"
      },
      "RoleUpdateRequest": {
        "description": "Update a role.",
        "properties": {
          "data": {
            "description": "Data related to the update of a role.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "example": "00000000-0000-1111-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "attributes",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "RoleUpdateResponse": {
        "description": "Response containing information about an updated role.",
        "properties": {
          "data": {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "RoleUpdateResponseData": {
        "description": "Role object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of the role.",
            "properties": {
              "created_at": {
                "description": "Creation time of the role.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "modified_at": {
                "description": "Time of last role modification.",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the role.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique identifier of the role.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the role object returned by the API.",
            "properties": {
              "permissions": {
                "description": "Relationship to multiple permissions objects.",
                "properties": {
                  "data": {
                    "description": "Relationships to permission objects.",
                    "items": {
                      "description": "Relationship to permission object.",
                      "properties": {
                        "id": {
                          "description": "ID of the permission.",
                          "type": "string"
                        },
                        "type": {
                          "default": "permissions",
                          "description": "Permissions resource type.",
                          "enum": [
                            "permissions"
                          ],
                          "example": "permissions",
                          "type": "string",
                          "x-enum-varnames": [
                            "PERMISSIONS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "roles",
            "description": "Roles type.",
            "enum": [
              "roles"
            ],
            "example": "roles",
            "type": "string",
            "x-enum-varnames": [
              "ROLES"
            ]
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RolesResponse": {
        "description": "Response containing information about multiple roles.",
        "properties": {
          "data": {
            "description": "Array of returned roles.",
            "items": {
              "description": "Role object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of the role.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the role.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time of last role modification.",
                      "format": "date-time",
                      "readOnly": true,
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                      "type": "string"
                    },
                    "user_count": {
                      "description": "Number of users with that role.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The unique identifier of the role.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Relationships of the role object returned by the API.",
                  "properties": {
                    "permissions": {
                      "description": "Relationship to multiple permissions objects.",
                      "properties": {
                        "data": {
                          "description": "Relationships to permission objects.",
                          "items": {
                            "description": "Relationship to permission object.",
                            "properties": {
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "roles",
                  "description": "Roles type.",
                  "enum": [
                    "roles"
                  ],
                  "example": "roles",
                  "type": "string",
                  "x-enum-varnames": [
                    "ROLES"
                  ]
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "RolesSort": {
        "default": "name",
        "description": "Sorting options for roles.",
        "enum": [
          "name",
          "-name",
          "modified_at",
          "-modified_at",
          "user_count",
          "-user_count"
        ],
        "type": "string",
        "x-enum-varnames": [
          "NAME_ASCENDING",
          "NAME_DESCENDING",
          "MODIFIED_AT_ASCENDING",
          "MODIFIED_AT_DESCENDING",
          "USER_COUNT_ASCENDING",
          "USER_COUNT_DESCENDING"
        ]
      },
      "RolesType": {
        "default": "roles",
        "description": "Roles type.",
        "enum": [
          "roles"
        ],
        "example": "roles",
        "type": "string",
        "x-enum-varnames": [
          "ROLES"
        ]
      },
      "SAMLAssertionAttribute": {
        "description": "SAML assertion attribute.",
        "properties": {
          "attributes": {
            "description": "Key/Value pair of attributes used in SAML assertion attributes.",
            "properties": {
              "attribute_key": {
                "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "member-of",
                "type": "string"
              },
              "attribute_value": {
                "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                "example": "Development",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The ID of the SAML assertion attribute.",
            "example": "0",
            "type": "string"
          },
          "type": {
            "default": "saml_assertion_attributes",
            "description": "SAML assertion attributes resource type.",
            "enum": [
              "saml_assertion_attributes"
            ],
            "example": "saml_assertion_attributes",
            "type": "string",
            "x-enum-varnames": [
              "SAML_ASSERTION_ATTRIBUTES"
            ]
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "SAMLAssertionAttributeAttributes": {
        "description": "Key/Value pair of attributes used in SAML assertion attributes.",
        "properties": {
          "attribute_key": {
            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "member-of",
            "type": "string"
          },
          "attribute_value": {
            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
            "example": "Development",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SAMLAssertionAttributesType": {
        "default": "saml_assertion_attributes",
        "description": "SAML assertion attributes resource type.",
        "enum": [
          "saml_assertion_attributes"
        ],
        "example": "saml_assertion_attributes",
        "type": "string",
        "x-enum-varnames": [
          "SAML_ASSERTION_ATTRIBUTES"
        ]
      },
      "SecurityFilter": {
        "description": "The security filter's properties.",
        "properties": {
          "attributes": {
            "description": "The object describing a security filter.",
            "properties": {
              "exclusion_filters": {
                "description": "The list of exclusion filters applied in this security filter.",
                "items": {
                  "description": "A single exclusion filter.",
                  "properties": {
                    "name": {
                      "description": "The exclusion filter name.",
                      "example": "Exclude staging",
                      "type": "string"
                    },
                    "query": {
                      "description": "The exclusion filter query.",
                      "example": "source:staging",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "filtered_data_type": {
                "description": "The filtered data type.",
                "enum": [
                  "logs"
                ],
                "example": "logs",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS"
                ]
              },
              "is_builtin": {
                "description": "Whether the security filter is the built-in filter.",
                "example": false,
                "type": "boolean"
              },
              "is_enabled": {
                "description": "Whether the security filter is enabled.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "description": "The security filter name.",
                "example": "Custom security filter",
                "type": "string"
              },
              "query": {
                "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                "example": "service:api",
                "type": "string"
              },
              "version": {
                "description": "The version of the security filter.",
                "example": 1,
                "format": "int32",
                "maximum": 2147483647,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The ID of the security filter.",
            "example": "3dd-0uc-h1s",
            "type": "string"
          },
          "type": {
            "default": "security_filters",
            "description": "The type of the resource. The value should always be `security_filters`.",
            "enum": [
              "security_filters"
            ],
            "example": "security_filters",
            "type": "string",
            "x-enum-varnames": [
              "SECURITY_FILTERS"
            ]
          }
        },
        "type": "object"
      },
      "SecurityFilterAttributes": {
        "description": "The object describing a security filter.",
        "properties": {
          "exclusion_filters": {
            "description": "The list of exclusion filters applied in this security filter.",
            "items": {
              "description": "A single exclusion filter.",
              "properties": {
                "name": {
                  "description": "The exclusion filter name.",
                  "example": "Exclude staging",
                  "type": "string"
                },
                "query": {
                  "description": "The exclusion filter query.",
                  "example": "source:staging",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "filtered_data_type": {
            "description": "The filtered data type.",
            "enum": [
              "logs"
            ],
            "example": "logs",
            "type": "string",
            "x-enum-varnames": [
              "LOGS"
            ]
          },
          "is_builtin": {
            "description": "Whether the security filter is the built-in filter.",
            "example": false,
            "type": "boolean"
          },
          "is_enabled": {
            "description": "Whether the security filter is enabled.",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "The security filter name.",
            "example": "Custom security filter",
            "type": "string"
          },
          "query": {
            "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
            "example": "service:api",
            "type": "string"
          },
          "version": {
            "description": "The version of the security filter.",
            "example": 1,
            "format": "int32",
            "maximum": 2147483647,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SecurityFilterCreateAttributes": {
        "description": "Object containing the attributes of the security filter to be created.",
        "properties": {
          "exclusion_filters": {
            "description": "Exclusion filters to exclude some logs from the security filter.",
            "example": [
              {
                "name": "Exclude staging",
                "query": "source:staging"
              }
            ],
            "items": {
              "description": "Exclusion filter for the security filter.",
              "example": {
                "name": "Exclude staging",
                "query": "source:staging"
              },
              "properties": {
                "name": {
                  "description": "Exclusion filter name.",
                  "example": "Exclude staging",
                  "type": "string"
                },
                "query": {
                  "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                  "example": "source:staging",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "query"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filtered_data_type": {
            "description": "The filtered data type.",
            "enum": [
              "logs"
            ],
            "example": "logs",
            "type": "string",
            "x-enum-varnames": [
              "LOGS"
            ]
          },
          "is_enabled": {
            "description": "Whether the security filter is enabled.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "The name of the security filter.",
            "example": "Custom security filter",
            "type": "string"
          },
          "query": {
            "description": "The query of the security filter.",
            "example": "service:api",
            "type": "string"
          }
        },
        "required": [
          "name",
          "query",
          "exclusion_filters",
          "filtered_data_type",
          "is_enabled"
        ],
        "type": "object"
      },
      "SecurityFilterCreateData": {
        "description": "Object for a single security filter.",
        "properties": {
          "attributes": {
            "description": "Object containing the attributes of the security filter to be created.",
            "properties": {
              "exclusion_filters": {
                "description": "Exclusion filters to exclude some logs from the security filter.",
                "example": [
                  {
                    "name": "Exclude staging",
                    "query": "source:staging"
                  }
                ],
                "items": {
                  "description": "Exclusion filter for the security filter.",
                  "example": {
                    "name": "Exclude staging",
                    "query": "source:staging"
                  },
                  "properties": {
                    "name": {
                      "description": "Exclusion filter name.",
                      "example": "Exclude staging",
                      "type": "string"
                    },
                    "query": {
                      "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                      "example": "source:staging",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "query"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "filtered_data_type": {
                "description": "The filtered data type.",
                "enum": [
                  "logs"
                ],
                "example": "logs",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS"
                ]
              },
              "is_enabled": {
                "description": "Whether the security filter is enabled.",
                "example": true,
                "type": "boolean"
              },
              "name": {
                "description": "The name of the security filter.",
                "example": "Custom security filter",
                "type": "string"
              },
              "query": {
                "description": "The query of the security filter.",
                "example": "service:api",
                "type": "string"
              }
            },
            "required": [
              "name",
              "query",
              "exclusion_filters",
              "filtered_data_type",
              "is_enabled"
            ],
            "type": "object"
          },
          "type": {
            "default": "security_filters",
            "description": "The type of the resource. The value should always be `security_filters`.",
            "enum": [
              "security_filters"
            ],
            "example": "security_filters",
            "type": "string",
            "x-enum-varnames": [
              "SECURITY_FILTERS"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "SecurityFilterCreateRequest": {
        "description": "Request object that includes the security filter that you would like to create.",
        "properties": {
          "data": {
            "description": "Object for a single security filter.",
            "properties": {
              "attributes": {
                "description": "Object containing the attributes of the security filter to be created.",
                "properties": {
                  "exclusion_filters": {
                    "description": "Exclusion filters to exclude some logs from the security filter.",
                    "example": [
                      {
                        "name": "Exclude staging",
                        "query": "source:staging"
                      }
                    ],
                    "items": {
                      "description": "Exclusion filter for the security filter.",
                      "example": {
                        "name": "Exclude staging",
                        "query": "source:staging"
                      },
                      "properties": {
                        "name": {
                          "description": "Exclusion filter name.",
                          "example": "Exclude staging",
                          "type": "string"
                        },
                        "query": {
                          "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                          "example": "source:staging",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "query"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filtered_data_type": {
                    "description": "The filtered data type.",
                    "enum": [
                      "logs"
                    ],
                    "example": "logs",
                    "type": "string",
                    "x-enum-varnames": [
                      "LOGS"
                    ]
                  },
                  "is_enabled": {
                    "description": "Whether the security filter is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the security filter.",
                    "example": "Custom security filter",
                    "type": "string"
                  },
                  "query": {
                    "description": "The query of the security filter.",
                    "example": "service:api",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "query",
                  "exclusion_filters",
                  "filtered_data_type",
                  "is_enabled"
                ],
                "type": "object"
              },
              "type": {
                "default": "security_filters",
                "description": "The type of the resource. The value should always be `security_filters`.",
                "enum": [
                  "security_filters"
                ],
                "example": "security_filters",
                "type": "string",
                "x-enum-varnames": [
                  "SECURITY_FILTERS"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityFilterExclusionFilter": {
        "description": "Exclusion filter for the security filter.",
        "example": {
          "name": "Exclude staging",
          "query": "source:staging"
        },
        "properties": {
          "name": {
            "description": "Exclusion filter name.",
            "example": "Exclude staging",
            "type": "string"
          },
          "query": {
            "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
            "example": "source:staging",
            "type": "string"
          }
        },
        "required": [
          "name",
          "query"
        ],
        "type": "object"
      },
      "SecurityFilterExclusionFilterResponse": {
        "description": "A single exclusion filter.",
        "properties": {
          "name": {
            "description": "The exclusion filter name.",
            "example": "Exclude staging",
            "type": "string"
          },
          "query": {
            "description": "The exclusion filter query.",
            "example": "source:staging",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityFilterFilteredDataType": {
        "description": "The filtered data type.",
        "enum": [
          "logs"
        ],
        "example": "logs",
        "type": "string",
        "x-enum-varnames": [
          "LOGS"
        ]
      },
      "SecurityFilterID": {
        "description": "The ID of the security filter.",
        "example": "3dd-0uc-h1s",
        "type": "string"
      },
      "SecurityFilterMeta": {
        "description": "Optional metadata associated to the response.",
        "properties": {
          "warning": {
            "description": "A warning message.",
            "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityFilterResponse": {
        "description": "Response object which includes a single security filter.",
        "properties": {
          "data": {
            "description": "The security filter's properties.",
            "properties": {
              "attributes": {
                "description": "The object describing a security filter.",
                "properties": {
                  "exclusion_filters": {
                    "description": "The list of exclusion filters applied in this security filter.",
                    "items": {
                      "description": "A single exclusion filter.",
                      "properties": {
                        "name": {
                          "description": "The exclusion filter name.",
                          "example": "Exclude staging",
                          "type": "string"
                        },
                        "query": {
                          "description": "The exclusion filter query.",
                          "example": "source:staging",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filtered_data_type": {
                    "description": "The filtered data type.",
                    "enum": [
                      "logs"
                    ],
                    "example": "logs",
                    "type": "string",
                    "x-enum-varnames": [
                      "LOGS"
                    ]
                  },
                  "is_builtin": {
                    "description": "Whether the security filter is the built-in filter.",
                    "example": false,
                    "type": "boolean"
                  },
                  "is_enabled": {
                    "description": "Whether the security filter is enabled.",
                    "example": false,
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The security filter name.",
                    "example": "Custom security filter",
                    "type": "string"
                  },
                  "query": {
                    "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                    "example": "service:api",
                    "type": "string"
                  },
                  "version": {
                    "description": "The version of the security filter.",
                    "example": 1,
                    "format": "int32",
                    "maximum": 2147483647,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The ID of the security filter.",
                "example": "3dd-0uc-h1s",
                "type": "string"
              },
              "type": {
                "default": "security_filters",
                "description": "The type of the resource. The value should always be `security_filters`.",
                "enum": [
                  "security_filters"
                ],
                "example": "security_filters",
                "type": "string",
                "x-enum-varnames": [
                  "SECURITY_FILTERS"
                ]
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "Optional metadata associated to the response.",
            "properties": {
              "warning": {
                "description": "A warning message.",
                "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityFilterType": {
        "default": "security_filters",
        "description": "The type of the resource. The value should always be `security_filters`.",
        "enum": [
          "security_filters"
        ],
        "example": "security_filters",
        "type": "string",
        "x-enum-varnames": [
          "SECURITY_FILTERS"
        ]
      },
      "SecurityFilterUpdateAttributes": {
        "description": "The security filters properties to be updated.",
        "properties": {
          "exclusion_filters": {
            "description": "Exclusion filters to exclude some logs from the security filter.",
            "example": [],
            "items": {
              "description": "Exclusion filter for the security filter.",
              "example": {
                "name": "Exclude staging",
                "query": "source:staging"
              },
              "properties": {
                "name": {
                  "description": "Exclusion filter name.",
                  "example": "Exclude staging",
                  "type": "string"
                },
                "query": {
                  "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                  "example": "source:staging",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "query"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filtered_data_type": {
            "description": "The filtered data type.",
            "enum": [
              "logs"
            ],
            "example": "logs",
            "type": "string",
            "x-enum-varnames": [
              "LOGS"
            ]
          },
          "is_enabled": {
            "description": "Whether the security filter is enabled.",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "The name of the security filter.",
            "example": "Custom security filter",
            "type": "string"
          },
          "query": {
            "description": "The query of the security filter.",
            "example": "service:api",
            "type": "string"
          },
          "version": {
            "description": "The version of the security filter to update.",
            "example": 1,
            "format": "int32",
            "maximum": 2147483647,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SecurityFilterUpdateData": {
        "description": "The new security filter properties.",
        "properties": {
          "attributes": {
            "description": "The security filters properties to be updated.",
            "properties": {
              "exclusion_filters": {
                "description": "Exclusion filters to exclude some logs from the security filter.",
                "example": [],
                "items": {
                  "description": "Exclusion filter for the security filter.",
                  "example": {
                    "name": "Exclude staging",
                    "query": "source:staging"
                  },
                  "properties": {
                    "name": {
                      "description": "Exclusion filter name.",
                      "example": "Exclude staging",
                      "type": "string"
                    },
                    "query": {
                      "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                      "example": "source:staging",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "query"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "filtered_data_type": {
                "description": "The filtered data type.",
                "enum": [
                  "logs"
                ],
                "example": "logs",
                "type": "string",
                "x-enum-varnames": [
                  "LOGS"
                ]
              },
              "is_enabled": {
                "description": "Whether the security filter is enabled.",
                "example": true,
                "type": "boolean"
              },
              "name": {
                "description": "The name of the security filter.",
                "example": "Custom security filter",
                "type": "string"
              },
              "query": {
                "description": "The query of the security filter.",
                "example": "service:api",
                "type": "string"
              },
              "version": {
                "description": "The version of the security filter to update.",
                "example": 1,
                "format": "int32",
                "maximum": 2147483647,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "security_filters",
            "description": "The type of the resource. The value should always be `security_filters`.",
            "enum": [
              "security_filters"
            ],
            "example": "security_filters",
            "type": "string",
            "x-enum-varnames": [
              "SECURITY_FILTERS"
            ]
          }
        },
        "required": [
          "type",
          "attributes"
        ],
        "type": "object"
      },
      "SecurityFilterUpdateRequest": {
        "description": "The new security filter body.",
        "properties": {
          "data": {
            "description": "The new security filter properties.",
            "properties": {
              "attributes": {
                "description": "The security filters properties to be updated.",
                "properties": {
                  "exclusion_filters": {
                    "description": "Exclusion filters to exclude some logs from the security filter.",
                    "example": [],
                    "items": {
                      "description": "Exclusion filter for the security filter.",
                      "example": {
                        "name": "Exclude staging",
                        "query": "source:staging"
                      },
                      "properties": {
                        "name": {
                          "description": "Exclusion filter name.",
                          "example": "Exclude staging",
                          "type": "string"
                        },
                        "query": {
                          "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                          "example": "source:staging",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "query"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filtered_data_type": {
                    "description": "The filtered data type.",
                    "enum": [
                      "logs"
                    ],
                    "example": "logs",
                    "type": "string",
                    "x-enum-varnames": [
                      "LOGS"
                    ]
                  },
                  "is_enabled": {
                    "description": "Whether the security filter is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "name": {
                    "description": "The name of the security filter.",
                    "example": "Custom security filter",
                    "type": "string"
                  },
                  "query": {
                    "description": "The query of the security filter.",
                    "example": "service:api",
                    "type": "string"
                  },
                  "version": {
                    "description": "The version of the security filter to update.",
                    "example": 1,
                    "format": "int32",
                    "maximum": 2147483647,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "security_filters",
                "description": "The type of the resource. The value should always be `security_filters`.",
                "enum": [
                  "security_filters"
                ],
                "example": "security_filters",
                "type": "string",
                "x-enum-varnames": [
                  "SECURITY_FILTERS"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityFiltersResponse": {
        "description": "All the available security filters objects.",
        "properties": {
          "data": {
            "description": "A list of security filters objects.",
            "items": {
              "description": "The security filter's properties.",
              "properties": {
                "attributes": {
                  "description": "The object describing a security filter.",
                  "properties": {
                    "exclusion_filters": {
                      "description": "The list of exclusion filters applied in this security filter.",
                      "items": {
                        "description": "A single exclusion filter.",
                        "properties": {
                          "name": {
                            "description": "The exclusion filter name.",
                            "example": "Exclude staging",
                            "type": "string"
                          },
                          "query": {
                            "description": "The exclusion filter query.",
                            "example": "source:staging",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "filtered_data_type": {
                      "description": "The filtered data type.",
                      "enum": [
                        "logs"
                      ],
                      "example": "logs",
                      "type": "string",
                      "x-enum-varnames": [
                        "LOGS"
                      ]
                    },
                    "is_builtin": {
                      "description": "Whether the security filter is the built-in filter.",
                      "example": false,
                      "type": "boolean"
                    },
                    "is_enabled": {
                      "description": "Whether the security filter is enabled.",
                      "example": false,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The security filter name.",
                      "example": "Custom security filter",
                      "type": "string"
                    },
                    "query": {
                      "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                      "example": "service:api",
                      "type": "string"
                    },
                    "version": {
                      "description": "The version of the security filter.",
                      "example": 1,
                      "format": "int32",
                      "maximum": 2147483647,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The ID of the security filter.",
                  "example": "3dd-0uc-h1s",
                  "type": "string"
                },
                "type": {
                  "default": "security_filters",
                  "description": "The type of the resource. The value should always be `security_filters`.",
                  "enum": [
                    "security_filters"
                  ],
                  "example": "security_filters",
                  "type": "string",
                  "x-enum-varnames": [
                    "SECURITY_FILTERS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Optional metadata associated to the response.",
            "properties": {
              "warning": {
                "description": "A warning message.",
                "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringFilter": {
        "description": "The rule's suppression filter.",
        "properties": {
          "action": {
            "description": "The type of filtering action.",
            "enum": [
              "require",
              "suppress"
            ],
            "type": "string",
            "x-enum-varnames": [
              "REQUIRE",
              "SUPPRESS"
            ]
          },
          "query": {
            "description": "Query for selecting logs to apply the filtering action.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringFilterAction": {
        "description": "The type of filtering action.",
        "enum": [
          "require",
          "suppress"
        ],
        "type": "string",
        "x-enum-varnames": [
          "REQUIRE",
          "SUPPRESS"
        ]
      },
      "SecurityMonitoringListRulesResponse": {
        "description": "List of rules.",
        "properties": {
          "data": {
            "description": "Array containing the list of rules.",
            "items": {
              "description": "Rule.",
              "properties": {
                "cases": {
                  "description": "Cases for generating signals.",
                  "items": {
                    "description": "Case when signal is generated.",
                    "properties": {
                      "condition": {
                        "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the case.",
                        "type": "string"
                      },
                      "notifications": {
                        "description": "Notification targets for each rule case.",
                        "items": {
                          "description": "Notification.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "Severity of the Security Signal.",
                        "enum": [
                          "info",
                          "low",
                          "medium",
                          "high",
                          "critical"
                        ],
                        "example": "critical",
                        "type": "string",
                        "x-enum-varnames": [
                          "INFO",
                          "LOW",
                          "MEDIUM",
                          "HIGH",
                          "CRITICAL"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "createdAt": {
                  "description": "When the rule was created, timestamp in milliseconds.",
                  "format": "int64",
                  "type": "integer"
                },
                "creationAuthorId": {
                  "description": "User ID of the user who created the rule.",
                  "format": "int64",
                  "type": "integer"
                },
                "filters": {
                  "description": "Additional queries to filter matched events before they are processed.",
                  "items": {
                    "description": "The rule's suppression filter.",
                    "properties": {
                      "action": {
                        "description": "The type of filtering action.",
                        "enum": [
                          "require",
                          "suppress"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "REQUIRE",
                          "SUPPRESS"
                        ]
                      },
                      "query": {
                        "description": "Query for selecting logs to apply the filtering action.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "hasExtendedTitle": {
                  "description": "Whether the notifications include the triggering group-by values in their title.",
                  "type": "boolean"
                },
                "id": {
                  "description": "The ID of the rule.",
                  "type": "string"
                },
                "isDefault": {
                  "description": "Whether the rule is included by default.",
                  "type": "boolean"
                },
                "isDeleted": {
                  "description": "Whether the rule has been deleted.",
                  "type": "boolean"
                },
                "isEnabled": {
                  "description": "Whether the rule is enabled.",
                  "type": "boolean"
                },
                "message": {
                  "description": "Message for generated signals.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the rule.",
                  "type": "string"
                },
                "options": {
                  "description": "Options on rules.",
                  "properties": {
                    "decreaseCriticalityBasedOnEnv": {
                      "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                      "example": false,
                      "type": "boolean"
                    },
                    "detectionMethod": {
                      "description": "The detection method.",
                      "enum": [
                        "threshold",
                        "new_value",
                        "anomaly_detection",
                        "impossible_travel",
                        "hardcoded"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "THRESHOLD",
                        "NEW_VALUE",
                        "ANOMALY_DETECTION",
                        "IMPOSSIBLE_TRAVEL",
                        "HARDCODED"
                      ]
                    },
                    "evaluationWindow": {
                      "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS"
                      ]
                    },
                    "hardcodedEvaluatorType": {
                      "description": "Hardcoded evaluator type.",
                      "enum": [
                        "log4shell"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "LOG4SHELL"
                      ]
                    },
                    "impossibleTravelOptions": {
                      "description": "Options on impossible travel rules.",
                      "properties": {
                        "baselineUserLocations": {
                          "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                          "example": true,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "keepAlive": {
                      "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200,
                        10800,
                        21600
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS",
                        "THREE_HOURS",
                        "SIX_HOURS"
                      ]
                    },
                    "maxSignalDuration": {
                      "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                      "enum": [
                        0,
                        60,
                        300,
                        600,
                        900,
                        1800,
                        3600,
                        7200,
                        10800,
                        21600,
                        43200,
                        86400
                      ],
                      "format": "int32",
                      "type": "integer",
                      "x-enum-varnames": [
                        "ZERO_MINUTES",
                        "ONE_MINUTE",
                        "FIVE_MINUTES",
                        "TEN_MINUTES",
                        "FIFTEEN_MINUTES",
                        "THIRTY_MINUTES",
                        "ONE_HOUR",
                        "TWO_HOURS",
                        "THREE_HOURS",
                        "SIX_HOURS",
                        "TWELVE_HOURS",
                        "ONE_DAY"
                      ]
                    },
                    "newValueOptions": {
                      "description": "Options on new value rules.",
                      "properties": {
                        "forgetAfter": {
                          "description": "The duration in days after which a learned value is forgotten.",
                          "enum": [
                            1,
                            2,
                            7,
                            14,
                            21,
                            28
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ONE_DAY",
                            "TWO_DAYS",
                            "ONE_WEEK",
                            "TWO_WEEKS",
                            "THREE_WEEKS",
                            "FOUR_WEEKS"
                          ]
                        },
                        "learningDuration": {
                          "default": 0,
                          "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                          "enum": [
                            0,
                            1,
                            7
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_DAYS",
                            "ONE_DAY",
                            "SEVEN_DAYS"
                          ]
                        },
                        "learningMethod": {
                          "default": "duration",
                          "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                          "enum": [
                            "duration",
                            "threshold"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "DURATION",
                            "THRESHOLD"
                          ]
                        },
                        "learningThreshold": {
                          "default": 0,
                          "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                          "enum": [
                            0,
                            1
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_OCCURRENCES",
                            "ONE_OCCURRENCE"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "queries": {
                  "description": "Queries for selecting logs which are part of the rule.",
                  "items": {
                    "description": "Query for matching rule.",
                    "properties": {
                      "aggregation": {
                        "description": "The aggregation type.",
                        "enum": [
                          "count",
                          "cardinality",
                          "sum",
                          "max",
                          "new_value",
                          "geo_data"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "COUNT",
                          "CARDINALITY",
                          "SUM",
                          "MAX",
                          "NEW_VALUE",
                          "GEO_DATA"
                        ]
                      },
                      "distinctFields": {
                        "description": "Field for which the cardinality is measured. Sent as an array.",
                        "items": {
                          "description": "Field.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "groupByFields": {
                        "description": "Fields to group by.",
                        "items": {
                          "description": "Field.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "metric": {
                        "description": "The target field to aggregate over when using the sum or max\naggregations.",
                        "type": "string"
                      },
                      "metrics": {
                        "description": "Group of target fields to aggregate over when using the new value aggregations.",
                        "items": {
                          "description": "Field.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "name": {
                        "description": "Name of the query.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Query to run on logs.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "tags": {
                  "description": "Tags for generated signals.",
                  "items": {
                    "description": "Tag.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": {
                  "description": "The rule type.",
                  "enum": [
                    "log_detection",
                    "infrastructure_configuration",
                    "workload_security",
                    "cloud_configuration"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "LOG_DETECTION",
                    "INFRASTRUCTURE_CONFIGURATION",
                    "WORKLOAD_SECURITY",
                    "CLOUD_CONFIGURATION"
                  ]
                },
                "updateAuthorId": {
                  "description": "User ID of the user who updated the rule.",
                  "format": "int64",
                  "type": "integer"
                },
                "version": {
                  "description": "The version of the rule.",
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleCase": {
        "description": "Case when signal is generated.",
        "properties": {
          "condition": {
            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
            "type": "string"
          },
          "name": {
            "description": "Name of the case.",
            "type": "string"
          },
          "notifications": {
            "description": "Notification targets for each rule case.",
            "items": {
              "description": "Notification.",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Severity of the Security Signal.",
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "example": "critical",
            "type": "string",
            "x-enum-varnames": [
              "INFO",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleCaseCreate": {
        "description": "Case when signal is generated.",
        "properties": {
          "condition": {
            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
            "type": "string"
          },
          "name": {
            "description": "Name of the case.",
            "type": "string"
          },
          "notifications": {
            "description": "Notification targets for each rule case.",
            "items": {
              "description": "Notification.",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "Severity of the Security Signal.",
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "example": "critical",
            "type": "string",
            "x-enum-varnames": [
              "INFO",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleCreatePayload": {
        "description": "Create a new rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "example": [],
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "example": "critical",
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "required": [
                "status"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "filters": {
            "description": "Additional queries to filter matched events before they are processed.",
            "items": {
              "description": "The rule's suppression filter.",
              "properties": {
                "action": {
                  "description": "The type of filtering action.",
                  "enum": [
                    "require",
                    "suppress"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "REQUIRE",
                    "SUPPRESS"
                  ]
                },
                "query": {
                  "description": "Query for selecting logs to apply the filtering action.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "hasExtendedTitle": {
            "description": "Whether the notifications include the triggering group-by values in their title.",
            "example": true,
            "type": "boolean"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "example": true,
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "example": "",
            "type": "string"
          },
          "name": {
            "description": "The name of the rule.",
            "example": "My security monitoring rule.",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "decreaseCriticalityBasedOnEnv": {
                "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                "example": false,
                "type": "boolean"
              },
              "detectionMethod": {
                "description": "The detection method.",
                "enum": [
                  "threshold",
                  "new_value",
                  "anomaly_detection",
                  "impossible_travel",
                  "hardcoded"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "THRESHOLD",
                  "NEW_VALUE",
                  "ANOMALY_DETECTION",
                  "IMPOSSIBLE_TRAVEL",
                  "HARDCODED"
                ]
              },
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "hardcodedEvaluatorType": {
                "description": "Hardcoded evaluator type.",
                "enum": [
                  "log4shell"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "LOG4SHELL"
                ]
              },
              "impossibleTravelOptions": {
                "description": "Options on impossible travel rules.",
                "properties": {
                  "baselineUserLocations": {
                    "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              },
              "newValueOptions": {
                "description": "Options on new value rules.",
                "properties": {
                  "forgetAfter": {
                    "description": "The duration in days after which a learned value is forgotten.",
                    "enum": [
                      1,
                      2,
                      7,
                      14,
                      21,
                      28
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ONE_DAY",
                      "TWO_DAYS",
                      "ONE_WEEK",
                      "TWO_WEEKS",
                      "THREE_WEEKS",
                      "FOUR_WEEKS"
                    ]
                  },
                  "learningDuration": {
                    "default": 0,
                    "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                    "enum": [
                      0,
                      1,
                      7
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_DAYS",
                      "ONE_DAY",
                      "SEVEN_DAYS"
                    ]
                  },
                  "learningMethod": {
                    "default": "duration",
                    "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                    "enum": [
                      "duration",
                      "threshold"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "DURATION",
                      "THRESHOLD"
                    ]
                  },
                  "learningThreshold": {
                    "default": 0,
                    "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                    "enum": [
                      0,
                      1
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_OCCURRENCES",
                      "ONE_OCCURRENCE"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "example": [],
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max",
                    "new_value",
                    "geo_data"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX",
                    "NEW_VALUE",
                    "GEO_DATA"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "metrics": {
                  "description": "Group of target fields to aggregate over when using the new value aggregations.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "example": "a > 3",
                  "type": "string"
                }
              },
              "required": [
                "query"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "example": [
              "env:prod",
              "team:security"
            ],
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The rule type.",
            "enum": [
              "log_detection",
              "workload_security"
            ],
            "type": "string",
            "x-enum-varnames": [
              "LOG_DETECTION",
              "WORKLOAD_SECURITY"
            ]
          }
        },
        "required": [
          "name",
          "isEnabled",
          "queries",
          "options",
          "cases",
          "message"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleDecreaseCriticalityBasedOnEnv": {
        "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
        "example": false,
        "type": "boolean"
      },
      "SecurityMonitoringRuleDetectionMethod": {
        "description": "The detection method.",
        "enum": [
          "threshold",
          "new_value",
          "anomaly_detection",
          "impossible_travel",
          "hardcoded"
        ],
        "type": "string",
        "x-enum-varnames": [
          "THRESHOLD",
          "NEW_VALUE",
          "ANOMALY_DETECTION",
          "IMPOSSIBLE_TRAVEL",
          "HARDCODED"
        ]
      },
      "SecurityMonitoringRuleEvaluationWindow": {
        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS"
        ]
      },
      "SecurityMonitoringRuleHardcodedEvaluatorType": {
        "description": "Hardcoded evaluator type.",
        "enum": [
          "log4shell"
        ],
        "type": "string",
        "x-enum-varnames": [
          "LOG4SHELL"
        ]
      },
      "SecurityMonitoringRuleImpossibleTravelOptions": {
        "description": "Options on impossible travel rules.",
        "properties": {
          "baselineUserLocations": {
            "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleImpossibleTravelOptionsBaselineUserLocations": {
        "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
        "example": true,
        "type": "boolean"
      },
      "SecurityMonitoringRuleKeepAlive": {
        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200,
          10800,
          21600
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS",
          "THREE_HOURS",
          "SIX_HOURS"
        ]
      },
      "SecurityMonitoringRuleMaxSignalDuration": {
        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
        "enum": [
          0,
          60,
          300,
          600,
          900,
          1800,
          3600,
          7200,
          10800,
          21600,
          43200,
          86400
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_MINUTES",
          "ONE_MINUTE",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "FIFTEEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR",
          "TWO_HOURS",
          "THREE_HOURS",
          "SIX_HOURS",
          "TWELVE_HOURS",
          "ONE_DAY"
        ]
      },
      "SecurityMonitoringRuleNewValueOptions": {
        "description": "Options on new value rules.",
        "properties": {
          "forgetAfter": {
            "description": "The duration in days after which a learned value is forgotten.",
            "enum": [
              1,
              2,
              7,
              14,
              21,
              28
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ONE_DAY",
              "TWO_DAYS",
              "ONE_WEEK",
              "TWO_WEEKS",
              "THREE_WEEKS",
              "FOUR_WEEKS"
            ]
          },
          "learningDuration": {
            "default": 0,
            "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
            "enum": [
              0,
              1,
              7
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_DAYS",
              "ONE_DAY",
              "SEVEN_DAYS"
            ]
          },
          "learningMethod": {
            "default": "duration",
            "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
            "enum": [
              "duration",
              "threshold"
            ],
            "type": "string",
            "x-enum-varnames": [
              "DURATION",
              "THRESHOLD"
            ]
          },
          "learningThreshold": {
            "default": 0,
            "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_OCCURRENCES",
              "ONE_OCCURRENCE"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleNewValueOptionsForgetAfter": {
        "description": "The duration in days after which a learned value is forgotten.",
        "enum": [
          1,
          2,
          7,
          14,
          21,
          28
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ONE_DAY",
          "TWO_DAYS",
          "ONE_WEEK",
          "TWO_WEEKS",
          "THREE_WEEKS",
          "FOUR_WEEKS"
        ]
      },
      "SecurityMonitoringRuleNewValueOptionsLearningDuration": {
        "default": 0,
        "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
        "enum": [
          0,
          1,
          7
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_DAYS",
          "ONE_DAY",
          "SEVEN_DAYS"
        ]
      },
      "SecurityMonitoringRuleNewValueOptionsLearningMethod": {
        "default": "duration",
        "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
        "enum": [
          "duration",
          "threshold"
        ],
        "type": "string",
        "x-enum-varnames": [
          "DURATION",
          "THRESHOLD"
        ]
      },
      "SecurityMonitoringRuleNewValueOptionsLearningThreshold": {
        "default": 0,
        "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
        "enum": [
          0,
          1
        ],
        "format": "int32",
        "type": "integer",
        "x-enum-varnames": [
          "ZERO_OCCURRENCES",
          "ONE_OCCURRENCE"
        ]
      },
      "SecurityMonitoringRuleOptions": {
        "description": "Options on rules.",
        "properties": {
          "decreaseCriticalityBasedOnEnv": {
            "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
            "example": false,
            "type": "boolean"
          },
          "detectionMethod": {
            "description": "The detection method.",
            "enum": [
              "threshold",
              "new_value",
              "anomaly_detection",
              "impossible_travel",
              "hardcoded"
            ],
            "type": "string",
            "x-enum-varnames": [
              "THRESHOLD",
              "NEW_VALUE",
              "ANOMALY_DETECTION",
              "IMPOSSIBLE_TRAVEL",
              "HARDCODED"
            ]
          },
          "evaluationWindow": {
            "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS"
            ]
          },
          "hardcodedEvaluatorType": {
            "description": "Hardcoded evaluator type.",
            "enum": [
              "log4shell"
            ],
            "type": "string",
            "x-enum-varnames": [
              "LOG4SHELL"
            ]
          },
          "impossibleTravelOptions": {
            "description": "Options on impossible travel rules.",
            "properties": {
              "baselineUserLocations": {
                "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "keepAlive": {
            "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200,
              10800,
              21600
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS",
              "THREE_HOURS",
              "SIX_HOURS"
            ]
          },
          "maxSignalDuration": {
            "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
            "enum": [
              0,
              60,
              300,
              600,
              900,
              1800,
              3600,
              7200,
              10800,
              21600,
              43200,
              86400
            ],
            "format": "int32",
            "type": "integer",
            "x-enum-varnames": [
              "ZERO_MINUTES",
              "ONE_MINUTE",
              "FIVE_MINUTES",
              "TEN_MINUTES",
              "FIFTEEN_MINUTES",
              "THIRTY_MINUTES",
              "ONE_HOUR",
              "TWO_HOURS",
              "THREE_HOURS",
              "SIX_HOURS",
              "TWELVE_HOURS",
              "ONE_DAY"
            ]
          },
          "newValueOptions": {
            "description": "Options on new value rules.",
            "properties": {
              "forgetAfter": {
                "description": "The duration in days after which a learned value is forgotten.",
                "enum": [
                  1,
                  2,
                  7,
                  14,
                  21,
                  28
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ONE_DAY",
                  "TWO_DAYS",
                  "ONE_WEEK",
                  "TWO_WEEKS",
                  "THREE_WEEKS",
                  "FOUR_WEEKS"
                ]
              },
              "learningDuration": {
                "default": 0,
                "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                "enum": [
                  0,
                  1,
                  7
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_DAYS",
                  "ONE_DAY",
                  "SEVEN_DAYS"
                ]
              },
              "learningMethod": {
                "default": "duration",
                "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                "enum": [
                  "duration",
                  "threshold"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "DURATION",
                  "THRESHOLD"
                ]
              },
              "learningThreshold": {
                "default": 0,
                "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                "enum": [
                  0,
                  1
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_OCCURRENCES",
                  "ONE_OCCURRENCE"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleQuery": {
        "description": "Query for matching rule.",
        "properties": {
          "aggregation": {
            "description": "The aggregation type.",
            "enum": [
              "count",
              "cardinality",
              "sum",
              "max",
              "new_value",
              "geo_data"
            ],
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "SUM",
              "MAX",
              "NEW_VALUE",
              "GEO_DATA"
            ]
          },
          "distinctFields": {
            "description": "Field for which the cardinality is measured. Sent as an array.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "groupByFields": {
            "description": "Fields to group by.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "metric": {
            "description": "The target field to aggregate over when using the sum or max\naggregations.",
            "type": "string"
          },
          "metrics": {
            "description": "Group of target fields to aggregate over when using the new value aggregations.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the query.",
            "type": "string"
          },
          "query": {
            "description": "Query to run on logs.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringRuleQueryAggregation": {
        "description": "The aggregation type.",
        "enum": [
          "count",
          "cardinality",
          "sum",
          "max",
          "new_value",
          "geo_data"
        ],
        "type": "string",
        "x-enum-varnames": [
          "COUNT",
          "CARDINALITY",
          "SUM",
          "MAX",
          "NEW_VALUE",
          "GEO_DATA"
        ]
      },
      "SecurityMonitoringRuleQueryCreate": {
        "description": "Query for matching rule.",
        "properties": {
          "aggregation": {
            "description": "The aggregation type.",
            "enum": [
              "count",
              "cardinality",
              "sum",
              "max",
              "new_value",
              "geo_data"
            ],
            "type": "string",
            "x-enum-varnames": [
              "COUNT",
              "CARDINALITY",
              "SUM",
              "MAX",
              "NEW_VALUE",
              "GEO_DATA"
            ]
          },
          "distinctFields": {
            "description": "Field for which the cardinality is measured. Sent as an array.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "groupByFields": {
            "description": "Fields to group by.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "metric": {
            "description": "The target field to aggregate over when using the sum or max\naggregations.",
            "type": "string"
          },
          "metrics": {
            "description": "Group of target fields to aggregate over when using the new value aggregations.",
            "items": {
              "description": "Field.",
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the query.",
            "type": "string"
          },
          "query": {
            "description": "Query to run on logs.",
            "example": "a > 3",
            "type": "string"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "SecurityMonitoringRuleResponse": {
        "description": "Rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "example": "critical",
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "When the rule was created, timestamp in milliseconds.",
            "format": "int64",
            "type": "integer"
          },
          "creationAuthorId": {
            "description": "User ID of the user who created the rule.",
            "format": "int64",
            "type": "integer"
          },
          "filters": {
            "description": "Additional queries to filter matched events before they are processed.",
            "items": {
              "description": "The rule's suppression filter.",
              "properties": {
                "action": {
                  "description": "The type of filtering action.",
                  "enum": [
                    "require",
                    "suppress"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "REQUIRE",
                    "SUPPRESS"
                  ]
                },
                "query": {
                  "description": "Query for selecting logs to apply the filtering action.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "hasExtendedTitle": {
            "description": "Whether the notifications include the triggering group-by values in their title.",
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the rule.",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether the rule is included by default.",
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Whether the rule has been deleted.",
            "type": "boolean"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "type": "string"
          },
          "name": {
            "description": "The name of the rule.",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "decreaseCriticalityBasedOnEnv": {
                "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                "example": false,
                "type": "boolean"
              },
              "detectionMethod": {
                "description": "The detection method.",
                "enum": [
                  "threshold",
                  "new_value",
                  "anomaly_detection",
                  "impossible_travel",
                  "hardcoded"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "THRESHOLD",
                  "NEW_VALUE",
                  "ANOMALY_DETECTION",
                  "IMPOSSIBLE_TRAVEL",
                  "HARDCODED"
                ]
              },
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "hardcodedEvaluatorType": {
                "description": "Hardcoded evaluator type.",
                "enum": [
                  "log4shell"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "LOG4SHELL"
                ]
              },
              "impossibleTravelOptions": {
                "description": "Options on impossible travel rules.",
                "properties": {
                  "baselineUserLocations": {
                    "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              },
              "newValueOptions": {
                "description": "Options on new value rules.",
                "properties": {
                  "forgetAfter": {
                    "description": "The duration in days after which a learned value is forgotten.",
                    "enum": [
                      1,
                      2,
                      7,
                      14,
                      21,
                      28
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ONE_DAY",
                      "TWO_DAYS",
                      "ONE_WEEK",
                      "TWO_WEEKS",
                      "THREE_WEEKS",
                      "FOUR_WEEKS"
                    ]
                  },
                  "learningDuration": {
                    "default": 0,
                    "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                    "enum": [
                      0,
                      1,
                      7
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_DAYS",
                      "ONE_DAY",
                      "SEVEN_DAYS"
                    ]
                  },
                  "learningMethod": {
                    "default": "duration",
                    "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                    "enum": [
                      "duration",
                      "threshold"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "DURATION",
                      "THRESHOLD"
                    ]
                  },
                  "learningThreshold": {
                    "default": 0,
                    "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                    "enum": [
                      0,
                      1
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_OCCURRENCES",
                      "ONE_OCCURRENCE"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max",
                    "new_value",
                    "geo_data"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX",
                    "NEW_VALUE",
                    "GEO_DATA"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "metrics": {
                  "description": "Group of target fields to aggregate over when using the new value aggregations.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "The rule type.",
            "enum": [
              "log_detection",
              "infrastructure_configuration",
              "workload_security",
              "cloud_configuration"
            ],
            "type": "string",
            "x-enum-varnames": [
              "LOG_DETECTION",
              "INFRASTRUCTURE_CONFIGURATION",
              "WORKLOAD_SECURITY",
              "CLOUD_CONFIGURATION"
            ]
          },
          "updateAuthorId": {
            "description": "User ID of the user who updated the rule.",
            "format": "int64",
            "type": "integer"
          },
          "version": {
            "description": "The version of the rule.",
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SecurityMonitoringRuleSeverity": {
        "description": "Severity of the Security Signal.",
        "enum": [
          "info",
          "low",
          "medium",
          "high",
          "critical"
        ],
        "example": "critical",
        "type": "string",
        "x-enum-varnames": [
          "INFO",
          "LOW",
          "MEDIUM",
          "HIGH",
          "CRITICAL"
        ]
      },
      "SecurityMonitoringRuleTypeCreate": {
        "description": "The rule type.",
        "enum": [
          "log_detection",
          "workload_security"
        ],
        "type": "string",
        "x-enum-varnames": [
          "LOG_DETECTION",
          "WORKLOAD_SECURITY"
        ]
      },
      "SecurityMonitoringRuleTypeRead": {
        "description": "The rule type.",
        "enum": [
          "log_detection",
          "infrastructure_configuration",
          "workload_security",
          "cloud_configuration"
        ],
        "type": "string",
        "x-enum-varnames": [
          "LOG_DETECTION",
          "INFRASTRUCTURE_CONFIGURATION",
          "WORKLOAD_SECURITY",
          "CLOUD_CONFIGURATION"
        ]
      },
      "SecurityMonitoringRuleUpdatePayload": {
        "description": "Update an existing rule.",
        "properties": {
          "cases": {
            "description": "Cases for generating signals.",
            "items": {
              "description": "Case when signal is generated.",
              "properties": {
                "condition": {
                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the case.",
                  "type": "string"
                },
                "notifications": {
                  "description": "Notification targets for each rule case.",
                  "items": {
                    "description": "Notification.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "status": {
                  "description": "Severity of the Security Signal.",
                  "enum": [
                    "info",
                    "low",
                    "medium",
                    "high",
                    "critical"
                  ],
                  "example": "critical",
                  "type": "string",
                  "x-enum-varnames": [
                    "INFO",
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "filters": {
            "description": "Additional queries to filter matched events before they are processed.",
            "items": {
              "description": "The rule's suppression filter.",
              "properties": {
                "action": {
                  "description": "The type of filtering action.",
                  "enum": [
                    "require",
                    "suppress"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "REQUIRE",
                    "SUPPRESS"
                  ]
                },
                "query": {
                  "description": "Query for selecting logs to apply the filtering action.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "hasExtendedTitle": {
            "description": "Whether the notifications include the triggering group-by values in their title.",
            "example": true,
            "type": "boolean"
          },
          "isEnabled": {
            "description": "Whether the rule is enabled.",
            "type": "boolean"
          },
          "message": {
            "description": "Message for generated signals.",
            "type": "string"
          },
          "name": {
            "description": "Name of the rule.",
            "type": "string"
          },
          "options": {
            "description": "Options on rules.",
            "properties": {
              "decreaseCriticalityBasedOnEnv": {
                "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                "example": false,
                "type": "boolean"
              },
              "detectionMethod": {
                "description": "The detection method.",
                "enum": [
                  "threshold",
                  "new_value",
                  "anomaly_detection",
                  "impossible_travel",
                  "hardcoded"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "THRESHOLD",
                  "NEW_VALUE",
                  "ANOMALY_DETECTION",
                  "IMPOSSIBLE_TRAVEL",
                  "HARDCODED"
                ]
              },
              "evaluationWindow": {
                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS"
                ]
              },
              "hardcodedEvaluatorType": {
                "description": "Hardcoded evaluator type.",
                "enum": [
                  "log4shell"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "LOG4SHELL"
                ]
              },
              "impossibleTravelOptions": {
                "description": "Options on impossible travel rules.",
                "properties": {
                  "baselineUserLocations": {
                    "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "keepAlive": {
                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS"
                ]
              },
              "maxSignalDuration": {
                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                "enum": [
                  0,
                  60,
                  300,
                  600,
                  900,
                  1800,
                  3600,
                  7200,
                  10800,
                  21600,
                  43200,
                  86400
                ],
                "format": "int32",
                "type": "integer",
                "x-enum-varnames": [
                  "ZERO_MINUTES",
                  "ONE_MINUTE",
                  "FIVE_MINUTES",
                  "TEN_MINUTES",
                  "FIFTEEN_MINUTES",
                  "THIRTY_MINUTES",
                  "ONE_HOUR",
                  "TWO_HOURS",
                  "THREE_HOURS",
                  "SIX_HOURS",
                  "TWELVE_HOURS",
                  "ONE_DAY"
                ]
              },
              "newValueOptions": {
                "description": "Options on new value rules.",
                "properties": {
                  "forgetAfter": {
                    "description": "The duration in days after which a learned value is forgotten.",
                    "enum": [
                      1,
                      2,
                      7,
                      14,
                      21,
                      28
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ONE_DAY",
                      "TWO_DAYS",
                      "ONE_WEEK",
                      "TWO_WEEKS",
                      "THREE_WEEKS",
                      "FOUR_WEEKS"
                    ]
                  },
                  "learningDuration": {
                    "default": 0,
                    "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                    "enum": [
                      0,
                      1,
                      7
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_DAYS",
                      "ONE_DAY",
                      "SEVEN_DAYS"
                    ]
                  },
                  "learningMethod": {
                    "default": "duration",
                    "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                    "enum": [
                      "duration",
                      "threshold"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "DURATION",
                      "THRESHOLD"
                    ]
                  },
                  "learningThreshold": {
                    "default": 0,
                    "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                    "enum": [
                      0,
                      1
                    ],
                    "format": "int32",
                    "type": "integer",
                    "x-enum-varnames": [
                      "ZERO_OCCURRENCES",
                      "ONE_OCCURRENCE"
                    ]
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "queries": {
            "description": "Queries for selecting logs which are part of the rule.",
            "items": {
              "description": "Query for matching rule.",
              "properties": {
                "aggregation": {
                  "description": "The aggregation type.",
                  "enum": [
                    "count",
                    "cardinality",
                    "sum",
                    "max",
                    "new_value",
                    "geo_data"
                  ],
                  "type": "string",
                  "x-enum-varnames": [
                    "COUNT",
                    "CARDINALITY",
                    "SUM",
                    "MAX",
                    "NEW_VALUE",
                    "GEO_DATA"
                  ]
                },
                "distinctFields": {
                  "description": "Field for which the cardinality is measured. Sent as an array.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "groupByFields": {
                  "description": "Fields to group by.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "metric": {
                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                  "type": "string"
                },
                "metrics": {
                  "description": "Group of target fields to aggregate over when using the new value aggregations.",
                  "items": {
                    "description": "Field.",
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Name of the query.",
                  "type": "string"
                },
                "query": {
                  "description": "Query to run on logs.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags for generated signals.",
            "items": {
              "description": "Tag.",
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "description": "The version of the rule being updated.",
            "example": 1,
            "format": "int32",
            "maximum": 2147483647,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignal": {
        "description": "Object description of a security signal.",
        "properties": {
          "attributes": {
            "description": "The object containing all signal attributes and their\nassociated values.",
            "properties": {
              "attributes": {
                "additionalProperties": {},
                "description": "A JSON object of attributes in the security signal.",
                "example": {
                  "workflow": {
                    "first_seen": "2020-06-23T14:46:01.000Z",
                    "last_seen": "2020-06-23T14:46:49.000Z",
                    "rule": {
                      "id": "0f5-e0c-805",
                      "name": "Brute Force Attack Grouped By User ",
                      "version": 12
                    }
                  }
                },
                "type": "object"
              },
              "message": {
                "description": "The message in the security signal defined by the rule that generated the signal.",
                "example": "Detect Account Take Over (ATO) through brute force attempts",
                "type": "string"
              },
              "tags": {
                "description": "An array of tags associated with the security signal.",
                "example": [
                  "security:attack",
                  "technique:T1110-brute-force"
                ],
                "items": {
                  "description": "The tag associated with the security signal.",
                  "type": "string"
                },
                "type": "array"
              },
              "timestamp": {
                "description": "The timestamp of the security signal.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "The unique ID of the security signal.",
            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
            "type": "string"
          },
          "type": {
            "default": "signal",
            "description": "The type of event.",
            "enum": [
              "signal"
            ],
            "example": "signal",
            "type": "string",
            "x-enum-varnames": [
              "SIGNAL"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalArchiveComment": {
        "description": "Optional comment to display on archived signals.",
        "type": "string"
      },
      "SecurityMonitoringSignalArchiveReason": {
        "description": "Reason a signal is archived.",
        "enum": [
          "none",
          "false_positive",
          "testing_or_maintenance",
          "other"
        ],
        "type": "string",
        "x-enum-varnames": [
          "NONE",
          "FALSE_POSITIVE",
          "TESTING_OR_MAINTENANCE",
          "OTHER"
        ]
      },
      "SecurityMonitoringSignalAssigneeUpdateAttributes": {
        "description": "Attributes describing the new assignee of a security signal.",
        "properties": {
          "assignee": {
            "description": "Object representing a given user entity.",
            "properties": {
              "handle": {
                "description": "The handle for this user account.",
                "type": "string"
              },
              "id": {
                "description": "Numerical ID assigned by Datadog to this user account.",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "The name for this user account.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID assigned by Datadog to this user account.",
                "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                "type": "string"
              }
            },
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "version": {
            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "assignee"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalAssigneeUpdateData": {
        "description": "Data containing the patch for changing the assignee of a signal.",
        "properties": {
          "attributes": {
            "description": "Attributes describing the new assignee of a security signal.",
            "properties": {
              "assignee": {
                "description": "Object representing a given user entity.",
                "properties": {
                  "handle": {
                    "description": "The handle for this user account.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Numerical ID assigned by Datadog to this user account.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name for this user account.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID assigned by Datadog to this user account.",
                    "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                    "type": "string"
                  }
                },
                "required": [
                  "uuid"
                ],
                "type": "object"
              },
              "version": {
                "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "assignee"
            ],
            "type": "object"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalAssigneeUpdateRequest": {
        "description": "Request body for changing the assignee of a given security monitoring signal.",
        "properties": {
          "data": {
            "description": "Data containing the patch for changing the assignee of a signal.",
            "properties": {
              "attributes": {
                "description": "Attributes describing the new assignee of a security signal.",
                "properties": {
                  "assignee": {
                    "description": "Object representing a given user entity.",
                    "properties": {
                      "handle": {
                        "description": "The handle for this user account.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numerical ID assigned by Datadog to this user account.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "description": "The name for this user account.",
                        "type": "string"
                      },
                      "uuid": {
                        "description": "UUID assigned by Datadog to this user account.",
                        "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                        "type": "string"
                      }
                    },
                    "required": [
                      "uuid"
                    ],
                    "type": "object"
                  },
                  "version": {
                    "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "assignee"
                ],
                "type": "object"
              }
            },
            "required": [
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalAttributes": {
        "description": "The object containing all signal attributes and their\nassociated values.",
        "properties": {
          "attributes": {
            "additionalProperties": {},
            "description": "A JSON object of attributes in the security signal.",
            "example": {
              "workflow": {
                "first_seen": "2020-06-23T14:46:01.000Z",
                "last_seen": "2020-06-23T14:46:49.000Z",
                "rule": {
                  "id": "0f5-e0c-805",
                  "name": "Brute Force Attack Grouped By User ",
                  "version": 12
                }
              }
            },
            "type": "object"
          },
          "message": {
            "description": "The message in the security signal defined by the rule that generated the signal.",
            "example": "Detect Account Take Over (ATO) through brute force attempts",
            "type": "string"
          },
          "tags": {
            "description": "An array of tags associated with the security signal.",
            "example": [
              "security:attack",
              "technique:T1110-brute-force"
            ],
            "items": {
              "description": "The tag associated with the security signal.",
              "type": "string"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "The timestamp of the security signal.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalIncidentIds": {
        "description": "Array of incidents that are associated with this signal.",
        "items": {
          "description": "Public ID attribute of the incident that is associated with the signal.",
          "example": 2066,
          "format": "int64",
          "type": "integer"
        },
        "type": "array"
      },
      "SecurityMonitoringSignalIncidentsUpdateAttributes": {
        "description": "Attributes describing the new list of related signals for a security signal.",
        "properties": {
          "incident_ids": {
            "description": "Array of incidents that are associated with this signal.",
            "items": {
              "description": "Public ID attribute of the incident that is associated with the signal.",
              "example": 2066,
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "version": {
            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "incident_ids"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalIncidentsUpdateData": {
        "description": "Data containing the patch for changing the related incidents of a signal.",
        "properties": {
          "attributes": {
            "description": "Attributes describing the new list of related signals for a security signal.",
            "properties": {
              "incident_ids": {
                "description": "Array of incidents that are associated with this signal.",
                "items": {
                  "description": "Public ID attribute of the incident that is associated with the signal.",
                  "example": 2066,
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "version": {
                "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "incident_ids"
            ],
            "type": "object"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalIncidentsUpdateRequest": {
        "description": "Request body for changing the related incidents of a given security monitoring signal.",
        "properties": {
          "data": {
            "description": "Data containing the patch for changing the related incidents of a signal.",
            "properties": {
              "attributes": {
                "description": "Attributes describing the new list of related signals for a security signal.",
                "properties": {
                  "incident_ids": {
                    "description": "Array of incidents that are associated with this signal.",
                    "items": {
                      "description": "Public ID attribute of the incident that is associated with the signal.",
                      "example": 2066,
                      "format": "int64",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "version": {
                    "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "incident_ids"
                ],
                "type": "object"
              }
            },
            "required": [
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalListRequest": {
        "description": "The request for a security signal list.",
        "properties": {
          "filter": {
            "description": "Search filters for listing security signals.",
            "properties": {
              "from": {
                "description": "The minimum timestamp for requested security signals.",
                "example": "2019-01-02T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              },
              "query": {
                "description": "Search query for listing security signals.",
                "example": "security:attack status:high",
                "type": "string"
              },
              "to": {
                "description": "The maximum timestamp for requested security signals.",
                "example": "2019-01-03T09:42:36.320Z",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "page": {
            "description": "The paging attributes for listing security signals.",
            "properties": {
              "cursor": {
                "description": "A list of results using the cursor provided in the previous query.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              },
              "limit": {
                "default": 10,
                "description": "The maximum number of security signals in the response.",
                "example": 25,
                "format": "int32",
                "maximum": 1000,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "sort": {
            "description": "The sort parameters used for querying security signals.",
            "enum": [
              "timestamp",
              "-timestamp"
            ],
            "type": "string",
            "x-enum-varnames": [
              "TIMESTAMP_ASCENDING",
              "TIMESTAMP_DESCENDING"
            ]
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalListRequestFilter": {
        "description": "Search filters for listing security signals.",
        "properties": {
          "from": {
            "description": "The minimum timestamp for requested security signals.",
            "example": "2019-01-02T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          },
          "query": {
            "description": "Search query for listing security signals.",
            "example": "security:attack status:high",
            "type": "string"
          },
          "to": {
            "description": "The maximum timestamp for requested security signals.",
            "example": "2019-01-03T09:42:36.320Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalListRequestPage": {
        "description": "The paging attributes for listing security signals.",
        "properties": {
          "cursor": {
            "description": "A list of results using the cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          },
          "limit": {
            "default": 10,
            "description": "The maximum number of security signals in the response.",
            "example": 25,
            "format": "int32",
            "maximum": 1000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalState": {
        "description": "The new triage state of the signal.",
        "enum": [
          "open",
          "archived",
          "under_review"
        ],
        "type": "string",
        "x-enum-varnames": [
          "OPEN",
          "ARCHIVED",
          "UNDER_REVIEW"
        ]
      },
      "SecurityMonitoringSignalStateUpdateAttributes": {
        "description": "Attributes describing the change of state of a security signal.",
        "properties": {
          "archive_comment": {
            "description": "Optional comment to display on archived signals.",
            "type": "string"
          },
          "archive_reason": {
            "description": "Reason a signal is archived.",
            "enum": [
              "none",
              "false_positive",
              "testing_or_maintenance",
              "other"
            ],
            "type": "string",
            "x-enum-varnames": [
              "NONE",
              "FALSE_POSITIVE",
              "TESTING_OR_MAINTENANCE",
              "OTHER"
            ]
          },
          "state": {
            "description": "The new triage state of the signal.",
            "enum": [
              "open",
              "archived",
              "under_review"
            ],
            "type": "string",
            "x-enum-varnames": [
              "OPEN",
              "ARCHIVED",
              "UNDER_REVIEW"
            ]
          },
          "version": {
            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalStateUpdateData": {
        "description": "Data containing the patch for changing the state of a signal.",
        "properties": {
          "attributes": {
            "description": "Attributes describing the change of state of a security signal.",
            "properties": {
              "archive_comment": {
                "description": "Optional comment to display on archived signals.",
                "type": "string"
              },
              "archive_reason": {
                "description": "Reason a signal is archived.",
                "enum": [
                  "none",
                  "false_positive",
                  "testing_or_maintenance",
                  "other"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "NONE",
                  "FALSE_POSITIVE",
                  "TESTING_OR_MAINTENANCE",
                  "OTHER"
                ]
              },
              "state": {
                "description": "The new triage state of the signal.",
                "enum": [
                  "open",
                  "archived",
                  "under_review"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "OPEN",
                  "ARCHIVED",
                  "UNDER_REVIEW"
                ]
              },
              "version": {
                "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalStateUpdateRequest": {
        "description": "Request body for changing the state of a given security monitoring signal.",
        "properties": {
          "data": {
            "description": "Data containing the patch for changing the state of a signal.",
            "properties": {
              "attributes": {
                "description": "Attributes describing the change of state of a security signal.",
                "properties": {
                  "archive_comment": {
                    "description": "Optional comment to display on archived signals.",
                    "type": "string"
                  },
                  "archive_reason": {
                    "description": "Reason a signal is archived.",
                    "enum": [
                      "none",
                      "false_positive",
                      "testing_or_maintenance",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "NONE",
                      "FALSE_POSITIVE",
                      "TESTING_OR_MAINTENANCE",
                      "OTHER"
                    ]
                  },
                  "state": {
                    "description": "The new triage state of the signal.",
                    "enum": [
                      "open",
                      "archived",
                      "under_review"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "OPEN",
                      "ARCHIVED",
                      "UNDER_REVIEW"
                    ]
                  },
                  "version": {
                    "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "state"
                ],
                "type": "object"
              }
            },
            "required": [
              "attributes"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalTriageAttributes": {
        "description": "Attributes describing a triage state update operation over a security signal.",
        "properties": {
          "archive_comment": {
            "description": "Optional comment to display on archived signals.",
            "type": "string"
          },
          "archive_comment_timestamp": {
            "description": "Timestamp of the last edit to the comment.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "archive_comment_user": {
            "description": "Object representing a given user entity.",
            "properties": {
              "handle": {
                "description": "The handle for this user account.",
                "type": "string"
              },
              "id": {
                "description": "Numerical ID assigned by Datadog to this user account.",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "The name for this user account.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID assigned by Datadog to this user account.",
                "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                "type": "string"
              }
            },
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "archive_reason": {
            "description": "Reason a signal is archived.",
            "enum": [
              "none",
              "false_positive",
              "testing_or_maintenance",
              "other"
            ],
            "type": "string",
            "x-enum-varnames": [
              "NONE",
              "FALSE_POSITIVE",
              "TESTING_OR_MAINTENANCE",
              "OTHER"
            ]
          },
          "assignee": {
            "description": "Object representing a given user entity.",
            "properties": {
              "handle": {
                "description": "The handle for this user account.",
                "type": "string"
              },
              "id": {
                "description": "Numerical ID assigned by Datadog to this user account.",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "The name for this user account.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID assigned by Datadog to this user account.",
                "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                "type": "string"
              }
            },
            "required": [
              "uuid"
            ],
            "type": "object"
          },
          "incident_ids": {
            "description": "Array of incidents that are associated with this signal.",
            "items": {
              "description": "Public ID attribute of the incident that is associated with the signal.",
              "example": 2066,
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "state": {
            "description": "The new triage state of the signal.",
            "enum": [
              "open",
              "archived",
              "under_review"
            ],
            "type": "string",
            "x-enum-varnames": [
              "OPEN",
              "ARCHIVED",
              "UNDER_REVIEW"
            ]
          },
          "state_update_timestamp": {
            "description": "Timestamp of the last update to the signal state.",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "state_update_user": {
            "description": "Object representing a given user entity.",
            "properties": {
              "handle": {
                "description": "The handle for this user account.",
                "type": "string"
              },
              "id": {
                "description": "Numerical ID assigned by Datadog to this user account.",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "The name for this user account.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID assigned by Datadog to this user account.",
                "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                "type": "string"
              }
            },
            "required": [
              "uuid"
            ],
            "type": "object"
          }
        },
        "required": [
          "assignee",
          "state",
          "incident_ids"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalTriageUpdateData": {
        "description": "Data containing the updated triage attributes of the signal.",
        "properties": {
          "attributes": {
            "description": "Attributes describing a triage state update operation over a security signal.",
            "properties": {
              "archive_comment": {
                "description": "Optional comment to display on archived signals.",
                "type": "string"
              },
              "archive_comment_timestamp": {
                "description": "Timestamp of the last edit to the comment.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "archive_comment_user": {
                "description": "Object representing a given user entity.",
                "properties": {
                  "handle": {
                    "description": "The handle for this user account.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Numerical ID assigned by Datadog to this user account.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name for this user account.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID assigned by Datadog to this user account.",
                    "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                    "type": "string"
                  }
                },
                "required": [
                  "uuid"
                ],
                "type": "object"
              },
              "archive_reason": {
                "description": "Reason a signal is archived.",
                "enum": [
                  "none",
                  "false_positive",
                  "testing_or_maintenance",
                  "other"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "NONE",
                  "FALSE_POSITIVE",
                  "TESTING_OR_MAINTENANCE",
                  "OTHER"
                ]
              },
              "assignee": {
                "description": "Object representing a given user entity.",
                "properties": {
                  "handle": {
                    "description": "The handle for this user account.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Numerical ID assigned by Datadog to this user account.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name for this user account.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID assigned by Datadog to this user account.",
                    "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                    "type": "string"
                  }
                },
                "required": [
                  "uuid"
                ],
                "type": "object"
              },
              "incident_ids": {
                "description": "Array of incidents that are associated with this signal.",
                "items": {
                  "description": "Public ID attribute of the incident that is associated with the signal.",
                  "example": 2066,
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              "state": {
                "description": "The new triage state of the signal.",
                "enum": [
                  "open",
                  "archived",
                  "under_review"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "OPEN",
                  "ARCHIVED",
                  "UNDER_REVIEW"
                ]
              },
              "state_update_timestamp": {
                "description": "Timestamp of the last update to the signal state.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "state_update_user": {
                "description": "Object representing a given user entity.",
                "properties": {
                  "handle": {
                    "description": "The handle for this user account.",
                    "type": "string"
                  },
                  "id": {
                    "description": "Numerical ID assigned by Datadog to this user account.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name for this user account.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID assigned by Datadog to this user account.",
                    "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                    "type": "string"
                  }
                },
                "required": [
                  "uuid"
                ],
                "type": "object"
              }
            },
            "required": [
              "assignee",
              "state",
              "incident_ids"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalTriageUpdateResponse": {
        "description": "The response returned after all triage operations, containing the updated signal triage data.",
        "properties": {
          "data": {
            "description": "Data containing the updated triage attributes of the signal.",
            "properties": {
              "attributes": {
                "description": "Attributes describing a triage state update operation over a security signal.",
                "properties": {
                  "archive_comment": {
                    "description": "Optional comment to display on archived signals.",
                    "type": "string"
                  },
                  "archive_comment_timestamp": {
                    "description": "Timestamp of the last edit to the comment.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "archive_comment_user": {
                    "description": "Object representing a given user entity.",
                    "properties": {
                      "handle": {
                        "description": "The handle for this user account.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numerical ID assigned by Datadog to this user account.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "description": "The name for this user account.",
                        "type": "string"
                      },
                      "uuid": {
                        "description": "UUID assigned by Datadog to this user account.",
                        "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                        "type": "string"
                      }
                    },
                    "required": [
                      "uuid"
                    ],
                    "type": "object"
                  },
                  "archive_reason": {
                    "description": "Reason a signal is archived.",
                    "enum": [
                      "none",
                      "false_positive",
                      "testing_or_maintenance",
                      "other"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "NONE",
                      "FALSE_POSITIVE",
                      "TESTING_OR_MAINTENANCE",
                      "OTHER"
                    ]
                  },
                  "assignee": {
                    "description": "Object representing a given user entity.",
                    "properties": {
                      "handle": {
                        "description": "The handle for this user account.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numerical ID assigned by Datadog to this user account.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "description": "The name for this user account.",
                        "type": "string"
                      },
                      "uuid": {
                        "description": "UUID assigned by Datadog to this user account.",
                        "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                        "type": "string"
                      }
                    },
                    "required": [
                      "uuid"
                    ],
                    "type": "object"
                  },
                  "incident_ids": {
                    "description": "Array of incidents that are associated with this signal.",
                    "items": {
                      "description": "Public ID attribute of the incident that is associated with the signal.",
                      "example": 2066,
                      "format": "int64",
                      "type": "integer"
                    },
                    "type": "array"
                  },
                  "state": {
                    "description": "The new triage state of the signal.",
                    "enum": [
                      "open",
                      "archived",
                      "under_review"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "OPEN",
                      "ARCHIVED",
                      "UNDER_REVIEW"
                    ]
                  },
                  "state_update_timestamp": {
                    "description": "Timestamp of the last update to the signal state.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "state_update_user": {
                    "description": "Object representing a given user entity.",
                    "properties": {
                      "handle": {
                        "description": "The handle for this user account.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numerical ID assigned by Datadog to this user account.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "description": "The name for this user account.",
                        "type": "string"
                      },
                      "uuid": {
                        "description": "UUID assigned by Datadog to this user account.",
                        "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                        "type": "string"
                      }
                    },
                    "required": [
                      "uuid"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "assignee",
                  "state",
                  "incident_ids"
                ],
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "SecurityMonitoringSignalType": {
        "default": "signal",
        "description": "The type of event.",
        "enum": [
          "signal"
        ],
        "example": "signal",
        "type": "string",
        "x-enum-varnames": [
          "SIGNAL"
        ]
      },
      "SecurityMonitoringSignalVersion": {
        "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
        "format": "int64",
        "type": "integer"
      },
      "SecurityMonitoringSignalsListResponse": {
        "description": "The response object with all security signals matching the request\nand pagination information.",
        "properties": {
          "data": {
            "description": "An array of security signals matching the request.",
            "items": {
              "description": "Object description of a security signal.",
              "properties": {
                "attributes": {
                  "description": "The object containing all signal attributes and their\nassociated values.",
                  "properties": {
                    "attributes": {
                      "additionalProperties": {},
                      "description": "A JSON object of attributes in the security signal.",
                      "example": {
                        "workflow": {
                          "first_seen": "2020-06-23T14:46:01.000Z",
                          "last_seen": "2020-06-23T14:46:49.000Z",
                          "rule": {
                            "id": "0f5-e0c-805",
                            "name": "Brute Force Attack Grouped By User ",
                            "version": 12
                          }
                        }
                      },
                      "type": "object"
                    },
                    "message": {
                      "description": "The message in the security signal defined by the rule that generated the signal.",
                      "example": "Detect Account Take Over (ATO) through brute force attempts",
                      "type": "string"
                    },
                    "tags": {
                      "description": "An array of tags associated with the security signal.",
                      "example": [
                        "security:attack",
                        "technique:T1110-brute-force"
                      ],
                      "items": {
                        "description": "The tag associated with the security signal.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "timestamp": {
                      "description": "The timestamp of the security signal.",
                      "example": "2019-01-02T09:42:36.320Z",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "The unique ID of the security signal.",
                  "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                  "type": "string"
                },
                "type": {
                  "default": "signal",
                  "description": "The type of event.",
                  "enum": [
                    "signal"
                  ],
                  "example": "signal",
                  "type": "string",
                  "x-enum-varnames": [
                    "SIGNAL"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "links": {
            "description": "Links attributes.",
            "properties": {
              "next": {
                "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          },
          "meta": {
            "description": "Meta attributes.",
            "properties": {
              "page": {
                "description": "Paging attributes.",
                "properties": {
                  "after": {
                    "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                    "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalsListResponseLinks": {
        "description": "Links attributes.",
        "properties": {
          "next": {
            "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
            "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalsListResponseMeta": {
        "description": "Meta attributes.",
        "properties": {
          "page": {
            "description": "Paging attributes.",
            "properties": {
              "after": {
                "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalsListResponseMetaPage": {
        "description": "Paging attributes.",
        "properties": {
          "after": {
            "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityMonitoringSignalsSort": {
        "description": "The sort parameters used for querying security signals.",
        "enum": [
          "timestamp",
          "-timestamp"
        ],
        "type": "string",
        "x-enum-varnames": [
          "TIMESTAMP_ASCENDING",
          "TIMESTAMP_DESCENDING"
        ]
      },
      "SecurityMonitoringTriageUser": {
        "description": "Object representing a given user entity.",
        "properties": {
          "handle": {
            "description": "The handle for this user account.",
            "type": "string"
          },
          "id": {
            "description": "Numerical ID assigned by Datadog to this user account.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The name for this user account.",
            "type": "string"
          },
          "uuid": {
            "description": "UUID assigned by Datadog to this user account.",
            "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
            "type": "string"
          }
        },
        "required": [
          "uuid"
        ],
        "type": "object"
      },
      "ServiceAccountCreateAttributes": {
        "description": "Attributes of the created user.",
        "properties": {
          "email": {
            "description": "The email of the user.",
            "example": "jane.doe@example.com",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          },
          "service_account": {
            "description": "Whether the user is a service account. Must be true.",
            "example": true,
            "type": "boolean"
          },
          "title": {
            "description": "The title of the user.",
            "type": "string"
          }
        },
        "required": [
          "email",
          "service_account"
        ],
        "type": "object"
      },
      "ServiceAccountCreateData": {
        "description": "Object to create a service account User.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created user.",
            "properties": {
              "email": {
                "description": "The email of the user.",
                "example": "jane.doe@example.com",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "type": "string"
              },
              "service_account": {
                "description": "Whether the user is a service account. Must be true.",
                "example": true,
                "type": "boolean"
              },
              "title": {
                "description": "The title of the user.",
                "type": "string"
              }
            },
            "required": [
              "email",
              "service_account"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "Relationships of the user object.",
            "properties": {
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and the unique identifier of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "The unique identifier of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "ServiceAccountCreateRequest": {
        "description": "Create a service account.",
        "properties": {
          "data": {
            "description": "Object to create a service account User.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created user.",
                "properties": {
                  "email": {
                    "description": "The email of the user.",
                    "example": "jane.doe@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account. Must be true.",
                    "example": true,
                    "type": "boolean"
                  },
                  "title": {
                    "description": "The title of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "service_account"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "Relationships of the user object.",
                "properties": {
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UsageApplicationSecurityMonitoringResponse": {
        "description": "Application Security Monitoring usage response.",
        "properties": {
          "data": {
            "description": "Response containing Application Security Monitoring usage.",
            "items": {
              "description": "Usage data.",
              "properties": {
                "attributes": {
                  "description": "Usage attributes data.",
                  "properties": {
                    "org_name": {
                      "description": "The organization name.",
                      "type": "string"
                    },
                    "product_family": {
                      "description": "The product for which usage is being reported.",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The organization public ID.",
                      "type": "string"
                    },
                    "timeseries": {
                      "description": "List of usage data reported for each requested hour.",
                      "items": {
                        "description": "Usage timeseries data.",
                        "properties": {
                          "timestamp": {
                            "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "value": {
                            "description": "Contains the number measured for the given usage_type during the hour.",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "usage_type": {
                      "description": "Usage type that is being measured.",
                      "enum": [
                        "app_sec_host_count",
                        "observability_pipelines_bytes_processed",
                        "lambda_traced_invocations_count"
                      ],
                      "example": "observability_pipelines_bytes_processed",
                      "type": "string",
                      "x-enum-varnames": [
                        "APP_SEC_HOST_COUNT",
                        "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                        "LAMBDA_TRACED_INVOCATIONS_COUNT"
                      ]
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the response.",
                  "type": "string"
                },
                "type": {
                  "default": "usage_timeseries",
                  "description": "Type of usage data.",
                  "enum": [
                    "usage_timeseries"
                  ],
                  "example": "usage_timeseries",
                  "type": "string",
                  "x-enum-varnames": [
                    "USAGE_TIMESERIES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageAttributesObject": {
        "description": "Usage attributes data.",
        "properties": {
          "org_name": {
            "description": "The organization name.",
            "type": "string"
          },
          "product_family": {
            "description": "The product for which usage is being reported.",
            "type": "string"
          },
          "public_id": {
            "description": "The organization public ID.",
            "type": "string"
          },
          "timeseries": {
            "description": "List of usage data reported for each requested hour.",
            "items": {
              "description": "Usage timeseries data.",
              "properties": {
                "timestamp": {
                  "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                  "format": "date-time",
                  "type": "string"
                },
                "value": {
                  "description": "Contains the number measured for the given usage_type during the hour.",
                  "format": "int64",
                  "nullable": true,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "usage_type": {
            "description": "Usage type that is being measured.",
            "enum": [
              "app_sec_host_count",
              "observability_pipelines_bytes_processed",
              "lambda_traced_invocations_count"
            ],
            "example": "observability_pipelines_bytes_processed",
            "type": "string",
            "x-enum-varnames": [
              "APP_SEC_HOST_COUNT",
              "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
              "LAMBDA_TRACED_INVOCATIONS_COUNT"
            ]
          }
        },
        "type": "object"
      },
      "UsageDataObject": {
        "description": "Usage data.",
        "properties": {
          "attributes": {
            "description": "Usage attributes data.",
            "properties": {
              "org_name": {
                "description": "The organization name.",
                "type": "string"
              },
              "product_family": {
                "description": "The product for which usage is being reported.",
                "type": "string"
              },
              "public_id": {
                "description": "The organization public ID.",
                "type": "string"
              },
              "timeseries": {
                "description": "List of usage data reported for each requested hour.",
                "items": {
                  "description": "Usage timeseries data.",
                  "properties": {
                    "timestamp": {
                      "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "value": {
                      "description": "Contains the number measured for the given usage_type during the hour.",
                      "format": "int64",
                      "nullable": true,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "usage_type": {
                "description": "Usage type that is being measured.",
                "enum": [
                  "app_sec_host_count",
                  "observability_pipelines_bytes_processed",
                  "lambda_traced_invocations_count"
                ],
                "example": "observability_pipelines_bytes_processed",
                "type": "string",
                "x-enum-varnames": [
                  "APP_SEC_HOST_COUNT",
                  "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                  "LAMBDA_TRACED_INVOCATIONS_COUNT"
                ]
              }
            },
            "type": "object"
          },
          "id": {
            "description": "Unique ID of the response.",
            "type": "string"
          },
          "type": {
            "default": "usage_timeseries",
            "description": "Type of usage data.",
            "enum": [
              "usage_timeseries"
            ],
            "example": "usage_timeseries",
            "type": "string",
            "x-enum-varnames": [
              "USAGE_TIMESERIES"
            ]
          }
        },
        "type": "object"
      },
      "UsageLambdaTracedInvocationsResponse": {
        "description": "Lambda Traced Invocations usage response.",
        "properties": {
          "data": {
            "description": "Response containing Lambda Traced Invocations usage.",
            "items": {
              "description": "Usage data.",
              "properties": {
                "attributes": {
                  "description": "Usage attributes data.",
                  "properties": {
                    "org_name": {
                      "description": "The organization name.",
                      "type": "string"
                    },
                    "product_family": {
                      "description": "The product for which usage is being reported.",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The organization public ID.",
                      "type": "string"
                    },
                    "timeseries": {
                      "description": "List of usage data reported for each requested hour.",
                      "items": {
                        "description": "Usage timeseries data.",
                        "properties": {
                          "timestamp": {
                            "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "value": {
                            "description": "Contains the number measured for the given usage_type during the hour.",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "usage_type": {
                      "description": "Usage type that is being measured.",
                      "enum": [
                        "app_sec_host_count",
                        "observability_pipelines_bytes_processed",
                        "lambda_traced_invocations_count"
                      ],
                      "example": "observability_pipelines_bytes_processed",
                      "type": "string",
                      "x-enum-varnames": [
                        "APP_SEC_HOST_COUNT",
                        "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                        "LAMBDA_TRACED_INVOCATIONS_COUNT"
                      ]
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the response.",
                  "type": "string"
                },
                "type": {
                  "default": "usage_timeseries",
                  "description": "Type of usage data.",
                  "enum": [
                    "usage_timeseries"
                  ],
                  "example": "usage_timeseries",
                  "type": "string",
                  "x-enum-varnames": [
                    "USAGE_TIMESERIES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageObservabilityPipelinesResponse": {
        "description": "Observability Pipelines usage response.",
        "properties": {
          "data": {
            "description": "Response containing Observability Pipelines usage.",
            "items": {
              "description": "Usage data.",
              "properties": {
                "attributes": {
                  "description": "Usage attributes data.",
                  "properties": {
                    "org_name": {
                      "description": "The organization name.",
                      "type": "string"
                    },
                    "product_family": {
                      "description": "The product for which usage is being reported.",
                      "type": "string"
                    },
                    "public_id": {
                      "description": "The organization public ID.",
                      "type": "string"
                    },
                    "timeseries": {
                      "description": "List of usage data reported for each requested hour.",
                      "items": {
                        "description": "Usage timeseries data.",
                        "properties": {
                          "timestamp": {
                            "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "value": {
                            "description": "Contains the number measured for the given usage_type during the hour.",
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "usage_type": {
                      "description": "Usage type that is being measured.",
                      "enum": [
                        "app_sec_host_count",
                        "observability_pipelines_bytes_processed",
                        "lambda_traced_invocations_count"
                      ],
                      "example": "observability_pipelines_bytes_processed",
                      "type": "string",
                      "x-enum-varnames": [
                        "APP_SEC_HOST_COUNT",
                        "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                        "LAMBDA_TRACED_INVOCATIONS_COUNT"
                      ]
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "Unique ID of the response.",
                  "type": "string"
                },
                "type": {
                  "default": "usage_timeseries",
                  "description": "Type of usage data.",
                  "enum": [
                    "usage_timeseries"
                  ],
                  "example": "usage_timeseries",
                  "type": "string",
                  "x-enum-varnames": [
                    "USAGE_TIMESERIES"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsageTimeSeriesObject": {
        "description": "Usage timeseries data.",
        "properties": {
          "timestamp": {
            "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "description": "Contains the number measured for the given usage_type during the hour.",
            "format": "int64",
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UsageTimeSeriesType": {
        "default": "usage_timeseries",
        "description": "Type of usage data.",
        "enum": [
          "usage_timeseries"
        ],
        "example": "usage_timeseries",
        "type": "string",
        "x-enum-varnames": [
          "USAGE_TIMESERIES"
        ]
      },
      "User": {
        "description": "User object returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of user object returned by the API.",
            "properties": {
              "created_at": {
                "description": "Creation time of the user.",
                "format": "date-time",
                "type": "string"
              },
              "disabled": {
                "description": "Whether the user is disabled.",
                "type": "boolean"
              },
              "email": {
                "description": "Email of the user.",
                "type": "string"
              },
              "handle": {
                "description": "Handle of the user.",
                "type": "string"
              },
              "icon": {
                "description": "URL of the user's icon.",
                "type": "string"
              },
              "modified_at": {
                "description": "Time that the user was last modified.",
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "description": "Name of the user.",
                "nullable": true,
                "type": "string"
              },
              "service_account": {
                "description": "Whether the user is a service account.",
                "type": "boolean"
              },
              "status": {
                "description": "Status of the user.",
                "type": "string"
              },
              "title": {
                "description": "Title of the user.",
                "nullable": true,
                "type": "string"
              },
              "verified": {
                "description": "Whether the user is verified.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user.",
            "type": "string"
          },
          "relationships": {
            "description": "Relationships of the user object returned by the API.",
            "properties": {
              "org": {
                "description": "Relationship to an organization.",
                "properties": {
                  "data": {
                    "description": "Relationship to organization object.",
                    "properties": {
                      "id": {
                        "description": "ID of the organization.",
                        "example": "00000000-0000-beef-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "orgs",
                        "description": "Organizations resource type.",
                        "enum": [
                          "orgs"
                        ],
                        "example": "orgs",
                        "type": "string",
                        "x-enum-varnames": [
                          "ORGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "other_orgs": {
                "description": "Relationship to organizations.",
                "properties": {
                  "data": {
                    "description": "Relationships to organization objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to organization object.",
                      "properties": {
                        "id": {
                          "description": "ID of the organization.",
                          "example": "00000000-0000-beef-0000-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "orgs",
                          "description": "Organizations resource type.",
                          "enum": [
                            "orgs"
                          ],
                          "example": "orgs",
                          "type": "string",
                          "x-enum-varnames": [
                            "ORGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "other_users": {
                "description": "Relationship to users.",
                "properties": {
                  "data": {
                    "description": "Relationships to user objects.",
                    "example": [],
                    "items": {
                      "description": "Relationship to user object.",
                      "properties": {
                        "id": {
                          "description": "A unique identifier that represents the user.",
                          "example": "00000000-0000-0000-2345-000000000000",
                          "type": "string"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and the unique identifier of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "The unique identifier of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "type": "object"
      },
      "UserAttributes": {
        "description": "Attributes of user object returned by the API.",
        "properties": {
          "created_at": {
            "description": "Creation time of the user.",
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "description": "Whether the user is disabled.",
            "type": "boolean"
          },
          "email": {
            "description": "Email of the user.",
            "type": "string"
          },
          "handle": {
            "description": "Handle of the user.",
            "type": "string"
          },
          "icon": {
            "description": "URL of the user's icon.",
            "type": "string"
          },
          "modified_at": {
            "description": "Time that the user was last modified.",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "Name of the user.",
            "nullable": true,
            "type": "string"
          },
          "service_account": {
            "description": "Whether the user is a service account.",
            "type": "boolean"
          },
          "status": {
            "description": "Status of the user.",
            "type": "string"
          },
          "title": {
            "description": "Title of the user.",
            "nullable": true,
            "type": "string"
          },
          "verified": {
            "description": "Whether the user is verified.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserCreateAttributes": {
        "description": "Attributes of the created user.",
        "properties": {
          "email": {
            "description": "The email of the user.",
            "example": "jane.doe@example.com",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          },
          "title": {
            "description": "The title of the user.",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserCreateData": {
        "description": "Object to create a user.",
        "properties": {
          "attributes": {
            "description": "Attributes of the created user.",
            "properties": {
              "email": {
                "description": "The email of the user.",
                "example": "jane.doe@example.com",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "type": "string"
              },
              "title": {
                "description": "The title of the user.",
                "type": "string"
              }
            },
            "required": [
              "email"
            ],
            "type": "object"
          },
          "relationships": {
            "description": "Relationships of the user object.",
            "properties": {
              "roles": {
                "description": "Relationship to roles.",
                "properties": {
                  "data": {
                    "description": "An array containing type and the unique identifier of a role.",
                    "items": {
                      "description": "Relationship to role object.",
                      "properties": {
                        "id": {
                          "description": "The unique identifier of the role.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "UserCreateRequest": {
        "description": "Create a user.",
        "properties": {
          "data": {
            "description": "Object to create a user.",
            "properties": {
              "attributes": {
                "description": "Attributes of the created user.",
                "properties": {
                  "email": {
                    "description": "The email of the user.",
                    "example": "jane.doe@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "email"
                ],
                "type": "object"
              },
              "relationships": {
                "description": "Relationships of the user object.",
                "properties": {
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "attributes",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UserInvitationData": {
        "description": "Object to create a user invitation.",
        "properties": {
          "relationships": {
            "description": "Relationships data for user invitation.",
            "properties": {
              "user": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "required": [
              "user"
            ],
            "type": "object"
          },
          "type": {
            "default": "user_invitations",
            "description": "User invitations type.",
            "enum": [
              "user_invitations"
            ],
            "example": "user_invitations",
            "type": "string",
            "x-enum-varnames": [
              "USER_INVITATIONS"
            ]
          }
        },
        "required": [
          "type",
          "relationships"
        ],
        "type": "object"
      },
      "UserInvitationDataAttributes": {
        "description": "Attributes of a user invitation.",
        "properties": {
          "created_at": {
            "description": "Creation time of the user invitation.",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "description": "Time of invitation expiration.",
            "format": "date-time",
            "type": "string"
          },
          "invite_type": {
            "description": "Type of invitation.",
            "type": "string"
          },
          "uuid": {
            "description": "UUID of the user invitation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInvitationRelationships": {
        "description": "Relationships data for user invitation.",
        "properties": {
          "user": {
            "description": "Relationship to user.",
            "properties": {
              "data": {
                "description": "Relationship to user object.",
                "properties": {
                  "id": {
                    "description": "A unique identifier that represents the user.",
                    "example": "00000000-0000-0000-2345-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "users",
                    "description": "Users resource type.",
                    "enum": [
                      "users"
                    ],
                    "example": "users",
                    "type": "string",
                    "x-enum-varnames": [
                      "USERS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "user"
        ],
        "type": "object"
      },
      "UserInvitationResponse": {
        "description": "User invitation as returned by the API.",
        "properties": {
          "data": {
            "description": "Object of a user invitation returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of a user invitation.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user invitation.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "expires_at": {
                    "description": "Time of invitation expiration.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "invite_type": {
                    "description": "Type of invitation.",
                    "type": "string"
                  },
                  "uuid": {
                    "description": "UUID of the user invitation.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user invitation.",
                "type": "string"
              },
              "type": {
                "default": "user_invitations",
                "description": "User invitations type.",
                "enum": [
                  "user_invitations"
                ],
                "example": "user_invitations",
                "type": "string",
                "x-enum-varnames": [
                  "USER_INVITATIONS"
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserInvitationResponseData": {
        "description": "Object of a user invitation returned by the API.",
        "properties": {
          "attributes": {
            "description": "Attributes of a user invitation.",
            "properties": {
              "created_at": {
                "description": "Creation time of the user invitation.",
                "format": "date-time",
                "type": "string"
              },
              "expires_at": {
                "description": "Time of invitation expiration.",
                "format": "date-time",
                "type": "string"
              },
              "invite_type": {
                "description": "Type of invitation.",
                "type": "string"
              },
              "uuid": {
                "description": "UUID of the user invitation.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user invitation.",
            "type": "string"
          },
          "type": {
            "default": "user_invitations",
            "description": "User invitations type.",
            "enum": [
              "user_invitations"
            ],
            "example": "user_invitations",
            "type": "string",
            "x-enum-varnames": [
              "USER_INVITATIONS"
            ]
          }
        },
        "type": "object"
      },
      "UserInvitationsRequest": {
        "description": "Object to invite users to join the organization.",
        "properties": {
          "data": {
            "description": "List of user invitations.",
            "example": [],
            "items": {
              "description": "Object to create a user invitation.",
              "properties": {
                "relationships": {
                  "description": "Relationships data for user invitation.",
                  "properties": {
                    "user": {
                      "description": "Relationship to user.",
                      "properties": {
                        "data": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object"
                },
                "type": {
                  "default": "user_invitations",
                  "description": "User invitations type.",
                  "enum": [
                    "user_invitations"
                  ],
                  "example": "user_invitations",
                  "type": "string",
                  "x-enum-varnames": [
                    "USER_INVITATIONS"
                  ]
                }
              },
              "required": [
                "type",
                "relationships"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UserInvitationsResponse": {
        "description": "User invitations as returned by the API.",
        "properties": {
          "data": {
            "description": "Array of user invitations.",
            "items": {
              "description": "Object of a user invitation returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of a user invitation.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the user invitation.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "expires_at": {
                      "description": "Time of invitation expiration.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "invite_type": {
                      "description": "Type of invitation.",
                      "type": "string"
                    },
                    "uuid": {
                      "description": "UUID of the user invitation.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the user invitation.",
                  "type": "string"
                },
                "type": {
                  "default": "user_invitations",
                  "description": "User invitations type.",
                  "enum": [
                    "user_invitations"
                  ],
                  "example": "user_invitations",
                  "type": "string",
                  "x-enum-varnames": [
                    "USER_INVITATIONS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserInvitationsType": {
        "default": "user_invitations",
        "description": "User invitations type.",
        "enum": [
          "user_invitations"
        ],
        "example": "user_invitations",
        "type": "string",
        "x-enum-varnames": [
          "USER_INVITATIONS"
        ]
      },
      "UserRelationships": {
        "description": "Relationships of the user object.",
        "properties": {
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and the unique identifier of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "The unique identifier of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserResponse": {
        "description": "Response containing information about a single user.",
        "properties": {
          "data": {
            "description": "User object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of user object returned by the API.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the user.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether the user is disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "Email of the user.",
                    "type": "string"
                  },
                  "handle": {
                    "description": "Handle of the user.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "URL of the user's icon.",
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time that the user was last modified.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "service_account": {
                    "description": "Whether the user is a service account.",
                    "type": "boolean"
                  },
                  "status": {
                    "description": "Status of the user.",
                    "type": "string"
                  },
                  "title": {
                    "description": "Title of the user.",
                    "nullable": true,
                    "type": "string"
                  },
                  "verified": {
                    "description": "Whether the user is verified.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the user object returned by the API.",
                "properties": {
                  "org": {
                    "description": "Relationship to an organization.",
                    "properties": {
                      "data": {
                        "description": "Relationship to organization object.",
                        "properties": {
                          "id": {
                            "description": "ID of the organization.",
                            "example": "00000000-0000-beef-0000-000000000000",
                            "type": "string"
                          },
                          "type": {
                            "default": "orgs",
                            "description": "Organizations resource type.",
                            "enum": [
                              "orgs"
                            ],
                            "example": "orgs",
                            "type": "string",
                            "x-enum-varnames": [
                              "ORGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_orgs": {
                    "description": "Relationship to organizations.",
                    "properties": {
                      "data": {
                        "description": "Relationships to organization objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "other_users": {
                    "description": "Relationship to users.",
                    "properties": {
                      "data": {
                        "description": "Relationships to user objects.",
                        "example": [],
                        "items": {
                          "description": "Relationship to user object.",
                          "properties": {
                            "id": {
                              "description": "A unique identifier that represents the user.",
                              "example": "00000000-0000-0000-2345-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "users",
                              "description": "Users resource type.",
                              "enum": [
                                "users"
                              ],
                              "example": "users",
                              "type": "string",
                              "x-enum-varnames": [
                                "USERS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "data"
                    ],
                    "type": "object"
                  },
                  "roles": {
                    "description": "Relationship to roles.",
                    "properties": {
                      "data": {
                        "description": "An array containing type and the unique identifier of a role.",
                        "items": {
                          "description": "Relationship to role object.",
                          "properties": {
                            "id": {
                              "description": "The unique identifier of the role.",
                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                              "type": "string"
                            },
                            "type": {
                              "default": "roles",
                              "description": "Roles type.",
                              "enum": [
                                "roles"
                              ],
                              "example": "roles",
                              "type": "string",
                              "x-enum-varnames": [
                                "ROLES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "type": "object"
          },
          "included": {
            "description": "Array of objects related to the user.",
            "items": {
              "description": "An object related to a user.",
              "oneOf": [
                {
                  "description": "Organization object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the organization.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the organization.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the organization.",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether or not the organization is disabled.",
                          "type": "boolean"
                        },
                        "modified_at": {
                          "description": "Time of last organization modification.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the organization.",
                          "type": "string"
                        },
                        "public_id": {
                          "description": "Public ID of the organization.",
                          "type": "string"
                        },
                        "sharing": {
                          "description": "Sharing type of the organization.",
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the site that this organization exists at.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the organization.",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Permission object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of a permission.",
                      "properties": {
                        "created": {
                          "description": "Creation time of the permission.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the permission.",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "Displayed name for the permission.",
                          "type": "string"
                        },
                        "display_type": {
                          "description": "Display type.",
                          "type": "string"
                        },
                        "group_name": {
                          "description": "Name of the permission group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the permission.",
                          "type": "string"
                        },
                        "restricted": {
                          "description": "Whether or not the permission is restricted.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserResponseIncludedItem": {
        "description": "An object related to a user.",
        "oneOf": [
          {
            "description": "Organization object.",
            "properties": {
              "attributes": {
                "description": "Attributes of the organization.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the organization.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the organization.",
                    "type": "string"
                  },
                  "disabled": {
                    "description": "Whether or not the organization is disabled.",
                    "type": "boolean"
                  },
                  "modified_at": {
                    "description": "Time of last organization modification.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the organization.",
                    "type": "string"
                  },
                  "public_id": {
                    "description": "Public ID of the organization.",
                    "type": "string"
                  },
                  "sharing": {
                    "description": "Sharing type of the organization.",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL of the site that this organization exists at.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the organization.",
                "type": "string"
              },
              "type": {
                "default": "orgs",
                "description": "Organizations resource type.",
                "enum": [
                  "orgs"
                ],
                "example": "orgs",
                "type": "string",
                "x-enum-varnames": [
                  "ORGS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          {
            "description": "Permission object.",
            "properties": {
              "attributes": {
                "description": "Attributes of a permission.",
                "properties": {
                  "created": {
                    "description": "Creation time of the permission.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the permission.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Displayed name for the permission.",
                    "type": "string"
                  },
                  "display_type": {
                    "description": "Display type.",
                    "type": "string"
                  },
                  "group_name": {
                    "description": "Name of the permission group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the permission.",
                    "type": "string"
                  },
                  "restricted": {
                    "description": "Whether or not the permission is restricted.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the permission.",
                "type": "string"
              },
              "type": {
                "default": "permissions",
                "description": "Permissions resource type.",
                "enum": [
                  "permissions"
                ],
                "example": "permissions",
                "type": "string",
                "x-enum-varnames": [
                  "PERMISSIONS"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          {
            "description": "Role object returned by the API.",
            "properties": {
              "attributes": {
                "description": "Attributes of the role.",
                "properties": {
                  "created_at": {
                    "description": "Creation time of the role.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "modified_at": {
                    "description": "Time of last role modification.",
                    "format": "date-time",
                    "readOnly": true,
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                    "type": "string"
                  },
                  "user_count": {
                    "description": "Number of users with that role.",
                    "format": "int64",
                    "readOnly": true,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "The unique identifier of the role.",
                "type": "string"
              },
              "relationships": {
                "description": "Relationships of the role object returned by the API.",
                "properties": {
                  "permissions": {
                    "description": "Relationship to multiple permissions objects.",
                    "properties": {
                      "data": {
                        "description": "Relationships to permission objects.",
                        "items": {
                          "description": "Relationship to permission object.",
                          "properties": {
                            "id": {
                              "description": "ID of the permission.",
                              "type": "string"
                            },
                            "type": {
                              "default": "permissions",
                              "description": "Permissions resource type.",
                              "enum": [
                                "permissions"
                              ],
                              "example": "permissions",
                              "type": "string",
                              "x-enum-varnames": [
                                "PERMISSIONS"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "roles",
                "description": "Roles type.",
                "enum": [
                  "roles"
                ],
                "example": "roles",
                "type": "string",
                "x-enum-varnames": [
                  "ROLES"
                ]
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "UserResponseRelationships": {
        "description": "Relationships of the user object returned by the API.",
        "properties": {
          "org": {
            "description": "Relationship to an organization.",
            "properties": {
              "data": {
                "description": "Relationship to organization object.",
                "properties": {
                  "id": {
                    "description": "ID of the organization.",
                    "example": "00000000-0000-beef-0000-000000000000",
                    "type": "string"
                  },
                  "type": {
                    "default": "orgs",
                    "description": "Organizations resource type.",
                    "enum": [
                      "orgs"
                    ],
                    "example": "orgs",
                    "type": "string",
                    "x-enum-varnames": [
                      "ORGS"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ],
                "type": "object"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "other_orgs": {
            "description": "Relationship to organizations.",
            "properties": {
              "data": {
                "description": "Relationships to organization objects.",
                "example": [],
                "items": {
                  "description": "Relationship to organization object.",
                  "properties": {
                    "id": {
                      "description": "ID of the organization.",
                      "example": "00000000-0000-beef-0000-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "other_users": {
            "description": "Relationship to users.",
            "properties": {
              "data": {
                "description": "Relationships to user objects.",
                "example": [],
                "items": {
                  "description": "Relationship to user object.",
                  "properties": {
                    "id": {
                      "description": "A unique identifier that represents the user.",
                      "example": "00000000-0000-0000-2345-000000000000",
                      "type": "string"
                    },
                    "type": {
                      "default": "users",
                      "description": "Users resource type.",
                      "enum": [
                        "users"
                      ],
                      "example": "users",
                      "type": "string",
                      "x-enum-varnames": [
                        "USERS"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          },
          "roles": {
            "description": "Relationship to roles.",
            "properties": {
              "data": {
                "description": "An array containing type and the unique identifier of a role.",
                "items": {
                  "description": "Relationship to role object.",
                  "properties": {
                    "id": {
                      "description": "The unique identifier of the role.",
                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                      "type": "string"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "UserUpdateAttributes": {
        "description": "Attributes of the edited user.",
        "properties": {
          "disabled": {
            "description": "If the user is enabled or disabled.",
            "type": "boolean"
          },
          "email": {
            "description": "The email of the user.",
            "type": "string"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUpdateData": {
        "description": "Object to update a user.",
        "properties": {
          "attributes": {
            "description": "Attributes of the edited user.",
            "properties": {
              "disabled": {
                "description": "If the user is enabled or disabled.",
                "type": "boolean"
              },
              "email": {
                "description": "The email of the user.",
                "type": "string"
              },
              "name": {
                "description": "The name of the user.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "ID of the user.",
            "example": "00000000-0000-feed-0000-000000000000",
            "type": "string"
          },
          "type": {
            "default": "users",
            "description": "Users resource type.",
            "enum": [
              "users"
            ],
            "example": "users",
            "type": "string",
            "x-enum-varnames": [
              "USERS"
            ]
          }
        },
        "required": [
          "attributes",
          "type",
          "id"
        ],
        "type": "object"
      },
      "UserUpdateRequest": {
        "description": "Update a user.",
        "properties": {
          "data": {
            "description": "Object to update a user.",
            "properties": {
              "attributes": {
                "description": "Attributes of the edited user.",
                "properties": {
                  "disabled": {
                    "description": "If the user is enabled or disabled.",
                    "type": "boolean"
                  },
                  "email": {
                    "description": "The email of the user.",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "id": {
                "description": "ID of the user.",
                "example": "00000000-0000-feed-0000-000000000000",
                "type": "string"
              },
              "type": {
                "default": "users",
                "description": "Users resource type.",
                "enum": [
                  "users"
                ],
                "example": "users",
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              }
            },
            "required": [
              "attributes",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "UsersResponse": {
        "description": "Response containing information about multiple users.",
        "properties": {
          "data": {
            "description": "Array of returned users.",
            "items": {
              "description": "User object returned by the API.",
              "properties": {
                "attributes": {
                  "description": "Attributes of user object returned by the API.",
                  "properties": {
                    "created_at": {
                      "description": "Creation time of the user.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "disabled": {
                      "description": "Whether the user is disabled.",
                      "type": "boolean"
                    },
                    "email": {
                      "description": "Email of the user.",
                      "type": "string"
                    },
                    "handle": {
                      "description": "Handle of the user.",
                      "type": "string"
                    },
                    "icon": {
                      "description": "URL of the user's icon.",
                      "type": "string"
                    },
                    "modified_at": {
                      "description": "Time that the user was last modified.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the user.",
                      "nullable": true,
                      "type": "string"
                    },
                    "service_account": {
                      "description": "Whether the user is a service account.",
                      "type": "boolean"
                    },
                    "status": {
                      "description": "Status of the user.",
                      "type": "string"
                    },
                    "title": {
                      "description": "Title of the user.",
                      "nullable": true,
                      "type": "string"
                    },
                    "verified": {
                      "description": "Whether the user is verified.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "id": {
                  "description": "ID of the user.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Relationships of the user object returned by the API.",
                  "properties": {
                    "org": {
                      "description": "Relationship to an organization.",
                      "properties": {
                        "data": {
                          "description": "Relationship to organization object.",
                          "properties": {
                            "id": {
                              "description": "ID of the organization.",
                              "example": "00000000-0000-beef-0000-000000000000",
                              "type": "string"
                            },
                            "type": {
                              "default": "orgs",
                              "description": "Organizations resource type.",
                              "enum": [
                                "orgs"
                              ],
                              "example": "orgs",
                              "type": "string",
                              "x-enum-varnames": [
                                "ORGS"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "type"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "other_orgs": {
                      "description": "Relationship to organizations.",
                      "properties": {
                        "data": {
                          "description": "Relationships to organization objects.",
                          "example": [],
                          "items": {
                            "description": "Relationship to organization object.",
                            "properties": {
                              "id": {
                                "description": "ID of the organization.",
                                "example": "00000000-0000-beef-0000-000000000000",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "other_users": {
                      "description": "Relationship to users.",
                      "properties": {
                        "data": {
                          "description": "Relationships to user objects.",
                          "example": [],
                          "items": {
                            "description": "Relationship to user object.",
                            "properties": {
                              "id": {
                                "description": "A unique identifier that represents the user.",
                                "example": "00000000-0000-0000-2345-000000000000",
                                "type": "string"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "data"
                      ],
                      "type": "object"
                    },
                    "roles": {
                      "description": "Relationship to roles.",
                      "properties": {
                        "data": {
                          "description": "An array containing type and the unique identifier of a role.",
                          "items": {
                            "description": "Relationship to role object.",
                            "properties": {
                              "id": {
                                "description": "The unique identifier of the role.",
                                "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                "type": "string"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "users",
                  "description": "Users resource type.",
                  "enum": [
                    "users"
                  ],
                  "example": "users",
                  "type": "string",
                  "x-enum-varnames": [
                    "USERS"
                  ]
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "included": {
            "description": "Array of objects related to the users.",
            "items": {
              "description": "An object related to a user.",
              "oneOf": [
                {
                  "description": "Organization object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the organization.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the organization.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the organization.",
                          "type": "string"
                        },
                        "disabled": {
                          "description": "Whether or not the organization is disabled.",
                          "type": "boolean"
                        },
                        "modified_at": {
                          "description": "Time of last organization modification.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the organization.",
                          "type": "string"
                        },
                        "public_id": {
                          "description": "Public ID of the organization.",
                          "type": "string"
                        },
                        "sharing": {
                          "description": "Sharing type of the organization.",
                          "type": "string"
                        },
                        "url": {
                          "description": "URL of the site that this organization exists at.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the organization.",
                      "type": "string"
                    },
                    "type": {
                      "default": "orgs",
                      "description": "Organizations resource type.",
                      "enum": [
                        "orgs"
                      ],
                      "example": "orgs",
                      "type": "string",
                      "x-enum-varnames": [
                        "ORGS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Permission object.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of a permission.",
                      "properties": {
                        "created": {
                          "description": "Creation time of the permission.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the permission.",
                          "type": "string"
                        },
                        "display_name": {
                          "description": "Displayed name for the permission.",
                          "type": "string"
                        },
                        "display_type": {
                          "description": "Display type.",
                          "type": "string"
                        },
                        "group_name": {
                          "description": "Name of the permission group.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the permission.",
                          "type": "string"
                        },
                        "restricted": {
                          "description": "Whether or not the permission is restricted.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "ID of the permission.",
                      "type": "string"
                    },
                    "type": {
                      "default": "permissions",
                      "description": "Permissions resource type.",
                      "enum": [
                        "permissions"
                      ],
                      "example": "permissions",
                      "type": "string",
                      "x-enum-varnames": [
                        "PERMISSIONS"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                },
                {
                  "description": "Role object returned by the API.",
                  "properties": {
                    "attributes": {
                      "description": "Attributes of the role.",
                      "properties": {
                        "created_at": {
                          "description": "Creation time of the role.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "modified_at": {
                          "description": "Time of last role modification.",
                          "format": "date-time",
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                          "type": "string"
                        },
                        "user_count": {
                          "description": "Number of users with that role.",
                          "format": "int64",
                          "readOnly": true,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "The unique identifier of the role.",
                      "type": "string"
                    },
                    "relationships": {
                      "description": "Relationships of the role object returned by the API.",
                      "properties": {
                        "permissions": {
                          "description": "Relationship to multiple permissions objects.",
                          "properties": {
                            "data": {
                              "description": "Relationships to permission objects.",
                              "items": {
                                "description": "Relationship to permission object.",
                                "properties": {
                                  "id": {
                                    "description": "ID of the permission.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "permissions",
                                    "description": "Permissions resource type.",
                                    "enum": [
                                      "permissions"
                                    ],
                                    "example": "permissions",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "PERMISSIONS"
                                    ]
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "default": "roles",
                      "description": "Roles type.",
                      "enum": [
                        "roles"
                      ],
                      "example": "roles",
                      "type": "string",
                      "x-enum-varnames": [
                        "ROLES"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ],
                  "type": "object"
                }
              ],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Object describing meta attributes of response.",
            "properties": {
              "page": {
                "description": "Pagination object.",
                "properties": {
                  "total_count": {
                    "description": "Total count.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "total_filtered_count": {
                    "description": "Total count of elements matched by the filter.",
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "readOnly": true,
        "type": "object"
      },
      "UsersType": {
        "default": "users",
        "description": "Users resource type.",
        "enum": [
          "users"
        ],
        "example": "users",
        "type": "string",
        "x-enum-varnames": [
          "USERS"
        ]
      }
    },
    "securitySchemes": {
      "AuthZ": {
        "description": "This API uses OAuth 2 with the implicit grant flow.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth2/v1/authorize",
            "scopes": {
              "dashboards_read": "View dashboards.",
              "dashboards_write": "Create and change dashboards.",
              "events_read": "Read Events data.",
              "incident_read": "View incidents in Datadog.",
              "incident_settings_write": "Configure Incidents settings.",
              "incident_write": "Create, view, and manage incidents in Datadog.",
              "metrics_read": "View custom metrics.",
              "monitors_read": "View monitors.",
              "security_monitoring_filters_read": "Read Security Filters.",
              "security_monitoring_filters_write": "Create, edit, and delete Security Filters.",
              "security_monitoring_rules_read": "Read Detection Rules.",
              "security_monitoring_rules_write": "Create and edit Detection Rules.",
              "security_monitoring_signals_read": "View Security Signals.",
              "usage_read": "View your organization's usage and usage attribution.",
              "user_access_invite": "Invite other users to your organization.",
              "user_access_manage": "Disable users, manage user roles, manage SAML-to-role mappings, and configure logs restriction queries."
            },
            "tokenUrl": "/oauth2/v1/token"
          }
        },
        "type": "oauth2"
      },
      "apiKeyAuth": {
        "description": "Your Datadog API Key.",
        "in": "header",
        "name": "DD-API-KEY",
        "type": "apiKey",
        "x-env-name": "DD_API_KEY"
      },
      "appKeyAuth": {
        "description": "Your Datadog APP Key.",
        "in": "header",
        "name": "DD-APPLICATION-KEY",
        "type": "apiKey",
        "x-env-name": "DD_APP_KEY"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@datadoghq.com",
      "name": "Datadog Support",
      "url": "https://www.datadoghq.com/support/"
    },
    "description": "Collection of all Datadog Public endpoints.",
    "title": "Datadog API V2 Collection",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v2/api_keys": {
      "get": {
        "description": "List all API keys available for your account.",
        "operationId": "ListAPIKeys",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "API key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options",
              "enum": [
                "created_at",
                "-created_at",
                "last4",
                "-last4",
                "modified_at",
                "-modified_at",
                "name",
                "-name"
              ],
              "type": "string",
              "x-enum-varnames": [
                "CREATED_AT_ASCENDING",
                "CREATED_AT_DESCENDING",
                "LAST4_ASCENDING",
                "LAST4_DESCENDING",
                "MODIFIED_AT_ASCENDING",
                "MODIFIED_AT_DESCENDING",
                "NAME_ASCENDING",
                "NAME_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter API keys by the specified string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include API keys created on or after the specified date.",
            "in": "query",
            "name": "filter[created_at][start]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include API keys created on or before the specified date.",
            "in": "query",
            "name": "filter[created_at][end]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include API keys modified on or after the specified date.",
            "in": "query",
            "name": "filter[modified_at][start]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include API keys modified on or before the specified date.",
            "in": "query",
            "name": "filter[modified_at][end]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "example": "created_by,modified_by",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a list of API keys.",
                  "properties": {
                    "data": {
                      "description": "Array of API keys.",
                      "items": {
                        "description": "Partial Datadog API key.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a partial API key.",
                            "properties": {
                              "created_at": {
                                "description": "Creation date of the API key.",
                                "example": "2020-11-23T10:00:00.000Z",
                                "readOnly": true,
                                "type": "string"
                              },
                              "last4": {
                                "description": "The last four characters of the API key.",
                                "example": "abcd",
                                "maxLength": 4,
                                "minLength": 4,
                                "readOnly": true,
                                "type": "string",
                                "x-secret": true
                              },
                              "modified_at": {
                                "description": "Date the API key was last modified.",
                                "example": "2020-11-23T10:00:00.000Z",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the API key.",
                                "example": "API Key for submitting metrics",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the API key.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Resources related to the API key.",
                            "properties": {
                              "created_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "modified_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "api_keys",
                            "description": "API Keys resource type.",
                            "enum": [
                              "api_keys"
                            ],
                            "example": "api_keys",
                            "type": "string",
                            "x-enum-varnames": [
                              "API_KEYS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the API key.",
                      "items": {
                        "description": "An object related to an API key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all API keys",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create an API key.",
        "operationId": "CreateAPIKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to create an API key.",
                "properties": {
                  "data": {
                    "description": "Object used to create an API key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to create an API Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the API key.",
                            "example": "API Key for submitting metrics",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "api_keys",
                        "description": "API Keys resource type.",
                        "enum": [
                          "api_keys"
                        ],
                        "example": "api_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "API_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an API key.",
                  "properties": {
                    "data": {
                      "description": "Datadog API key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full API key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the API key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The API key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the API key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "modified_at": {
                              "description": "Date the API key was last modified.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the API key.",
                              "example": "API Key for submitting metrics",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the API key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the API key.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "api_keys",
                          "description": "API Keys resource type.",
                          "enum": [
                            "api_keys"
                          ],
                          "example": "api_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "API_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the API key.",
                      "items": {
                        "description": "An object related to an API key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create an API key",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "api_key": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n    },\n    \"type\": \"api_keys\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"api_key\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteAPIKey",
          "parameters": [
            {
              "name": "api_key_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/api_keys/{api_key_id}": {
      "delete": {
        "description": "Delete an API key.",
        "operationId": "DeleteAPIKey",
        "parameters": [
          {
            "description": "The ID of the API key.",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete an API key",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get an API key.",
        "operationId": "GetAPIKey",
        "parameters": [
          {
            "description": "The ID of the API key.",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of resource paths for related resources to include in the response. Supported resource paths are `created_by` and `modified_by`.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "example": "created_by,modified_by",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an API key.",
                  "properties": {
                    "data": {
                      "description": "Datadog API key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full API key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the API key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The API key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the API key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "modified_at": {
                              "description": "Date the API key was last modified.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the API key.",
                              "example": "API Key for submitting metrics",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the API key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the API key.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "api_keys",
                          "description": "API Keys resource type.",
                          "enum": [
                            "api_keys"
                          ],
                          "example": "api_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "API_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the API key.",
                      "items": {
                        "description": "An object related to an API key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get API key",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update an API key.",
        "operationId": "UpdateAPIKey",
        "parameters": [
          {
            "description": "The ID of the API key.",
            "in": "path",
            "name": "api_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to update an API key.",
                "properties": {
                  "data": {
                    "description": "Object used to update an API key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to update an API Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the API key.",
                            "example": "API Key for submitting metrics",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the API key.",
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "type": "string"
                      },
                      "type": {
                        "default": "api_keys",
                        "description": "API Keys resource type.",
                        "enum": [
                          "api_keys"
                        ],
                        "example": "api_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "API_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an API key.",
                  "properties": {
                    "data": {
                      "description": "Datadog API key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full API key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the API key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The API key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the API key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "modified_at": {
                              "description": "Date the API key was last modified.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the API key.",
                              "example": "API Key for submitting metrics",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the API key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the API key.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "api_keys",
                          "description": "API Keys resource type.",
                          "enum": [
                            "api_keys"
                          ],
                          "example": "api_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "API_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the API key.",
                      "items": {
                        "description": "An object related to an API key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Edit an API key",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/application_keys": {
      "get": {
        "description": "List all application keys available for your org",
        "operationId": "ListApplicationKeys",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Application key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options",
              "enum": [
                "created_at",
                "-created_at",
                "last4",
                "-last4",
                "name",
                "-name"
              ],
              "type": "string",
              "x-enum-varnames": [
                "CREATED_AT_ASCENDING",
                "CREATED_AT_DESCENDING",
                "LAST4_ASCENDING",
                "LAST4_DESCENDING",
                "NAME_ASCENDING",
                "NAME_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter application keys by the specified string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or after the specified date.",
            "in": "query",
            "name": "filter[created_at][start]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or before the specified date.",
            "in": "query",
            "name": "filter[created_at][end]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a list of application keys.",
                  "properties": {
                    "data": {
                      "description": "Array of application keys.",
                      "items": {
                        "description": "Partial Datadog application key.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a partial application key.",
                            "properties": {
                              "created_at": {
                                "description": "Creation date of the application key.",
                                "example": "2020-11-23T10:00:00.000Z",
                                "readOnly": true,
                                "type": "string"
                              },
                              "last4": {
                                "description": "The last four characters of the application key.",
                                "example": "abcd",
                                "maxLength": 4,
                                "minLength": 4,
                                "readOnly": true,
                                "type": "string",
                                "x-secret": true
                              },
                              "name": {
                                "description": "Name of the application key.",
                                "example": "Application Key for managing dashboards",
                                "type": "string"
                              },
                              "scopes": {
                                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                                "example": [
                                  "dashboards_read",
                                  "dashboards_write",
                                  "dashboards_public_share"
                                ],
                                "items": {
                                  "description": "Name of scope.",
                                  "type": "string"
                                },
                                "nullable": true,
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the application key.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Resources related to the application key.",
                            "properties": {
                              "owned_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "application_keys",
                            "description": "Application Keys resource type.",
                            "enum": [
                              "application_keys"
                            ],
                            "example": "application_keys",
                            "type": "string",
                            "x-enum-varnames": [
                              "APPLICATION_KEYS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all application keys",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/application_keys/{app_key_id}": {
      "delete": {
        "description": "Delete an application key",
        "operationId": "DeleteApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete an application key",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get an application key for your org.",
        "operationId": "GetApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource path for related resources to include in the response. Only `owned_by` is supported.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "example": "owned_by",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get an application key",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit an application key",
        "operationId": "UpdateApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to update an application key.",
                "properties": {
                  "data": {
                    "description": "Object used to update an application key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to update an application Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the application key.",
                            "example": "Application Key for managing dashboards",
                            "type": "string"
                          },
                          "scopes": {
                            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                            "example": [
                              "dashboards_read",
                              "dashboards_write",
                              "dashboards_public_share"
                            ],
                            "items": {
                              "description": "Name of scope.",
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the application key.",
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "type": "string"
                      },
                      "type": {
                        "default": "application_keys",
                        "description": "Application Keys resource type.",
                        "enum": [
                          "application_keys"
                        ],
                        "example": "application_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "APPLICATION_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Edit an application key",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/audit/events": {
      "get": {
        "description": "List endpoint returns events that match a Audit Logs search query.\n[Results are paginated][1].\n\nUse this endpoint to see your latest Audit Logs events.\n\n[1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination",
        "operationId": "ListAuditLogs",
        "parameters": [
          {
            "description": "Search query following Audit Logs syntax.",
            "example": "@type:session @application_id:xxxx",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum timestamp for requested events.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum timestamp for requested events.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Order of events in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "Sort parameters when querying events.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of events matching the request.",
                      "items": {
                        "description": "Object description of an Audit Logs event after it is processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all event attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from Audit Logs events.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "service": {
                                "description": "Name of the application or service generating Audit Logs events.\nThis name is used to correlate Audit Logs to APM, so make sure you specify the same\nvalue when you use both products.",
                                "example": "web-app",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "audit",
                            "description": "Type of the event.",
                            "enum": [
                              "audit"
                            ],
                            "example": "audit",
                            "type": "string",
                            "x-enum-varnames": [
                              "Audit"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "Time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response.",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                          "items": {
                            "description": "Warning message indicating something that went wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "Unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "Detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "Short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get a list of Audit Logs events",
        "tags": [
          "Audit"
        ],
        "x-menu-order": 2,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/audit/events/search": {
      "post": {
        "description": "List endpoint returns Audit Logs events that match an Audit search query.\n[Results are paginated][1].\n\nUse this endpoint to build complex Audit Logs events filtering and search.\n\n[1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination",
        "operationId": "SearchAuditLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a Audit Logs events list.",
                "properties": {
                  "filter": {
                    "description": "Search and filter query settings.",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "Minimum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "query": {
                        "default": "*",
                        "description": "Search query following the Audit Logs search syntax.",
                        "example": "@type:session AND @session.type:user",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "Maximum time for the requested events. Supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: Specify either timezone or time offset, not both. Otherwise, the query fails.",
                    "properties": {
                      "time_offset": {
                        "description": "Time offset (in seconds) to apply to the query.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "Timezone code. Can be specified as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging attributes for listing events.",
                    "properties": {
                      "cursor": {
                        "description": "List following results with a cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of events in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "Sort parameters when querying events.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of events matching the request.",
                      "items": {
                        "description": "Object description of an Audit Logs event after it is processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all event attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from Audit Logs events.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "service": {
                                "description": "Name of the application or service generating Audit Logs events.\nThis name is used to correlate Audit Logs to APM, so make sure you specify the same\nvalue when you use both products.",
                                "example": "web-app",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "audit",
                            "description": "Type of the event.",
                            "enum": [
                              "audit"
                            ],
                            "example": "audit",
                            "type": "string",
                            "x-enum-varnames": [
                              "Audit"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/audit/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "Time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response.",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                          "items": {
                            "description": "Warning message indicating something that went wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "Unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "Detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "Short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Search Audit Logs events",
        "tags": [
          "Audit"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-pagination": {
          "cursorParam": "body.page.cursor",
          "cursorPath": "meta.page.after",
          "limitParam": "body.page.limit",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/authn_mappings": {
      "get": {
        "description": "List all AuthN Mappings in the org.",
        "operationId": "ListAuthNMappings",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sort AuthN Mappings depending on the given field.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "Sorting options for AuthN Mappings.",
              "enum": [
                "created_at",
                "-created_at",
                "role_id",
                "-role_id",
                "saml_assertion_attribute_id",
                "-saml_assertion_attribute_id",
                "role.name",
                "-role.name",
                "saml_assertion_attribute.attribute_key",
                "-saml_assertion_attribute.attribute_key",
                "saml_assertion_attribute.attribute_value",
                "-saml_assertion_attribute.attribute_value"
              ],
              "type": "string",
              "x-enum-varnames": [
                "CREATED_AT_ASCENDING",
                "CREATED_AT_DESCENDING",
                "ROLE_ID_ASCENDING",
                "ROLE_ID_DESCENDING",
                "SAML_ASSERTION_ATTRIBUTE_ID_ASCENDING",
                "SAML_ASSERTION_ATTRIBUTE_ID_DESCENDING",
                "ROLE_NAME_ASCENDING",
                "ROLE_NAME_DESCENDING",
                "SAML_ASSERTION_ATTRIBUTE_KEY_ASCENDING",
                "SAML_ASSERTION_ATTRIBUTE_KEY_DESCENDING",
                "SAML_ASSERTION_ATTRIBUTE_VALUE_ASCENDING",
                "SAML_ASSERTION_ATTRIBUTE_VALUE_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter all mappings by the given string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Array of AuthN Mappings response.",
                  "properties": {
                    "data": {
                      "description": "Array of returned AuthN Mappings.",
                      "items": {
                        "description": "The AuthN Mapping object returned by API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of AuthN Mapping.",
                            "properties": {
                              "attribute_key": {
                                "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                                "example": "member-of",
                                "type": "string"
                              },
                              "attribute_value": {
                                "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                                "example": "Development",
                                "type": "string"
                              },
                              "created_at": {
                                "description": "Creation time of the AuthN Mapping.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last AuthN Mapping modification.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "saml_assertion_attribute_id": {
                                "description": "The ID of the SAML assertion attribute.",
                                "example": "0",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the AuthN Mapping.",
                            "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "All relationships associated with AuthN Mapping.",
                            "properties": {
                              "role": {
                                "description": "Relationship to role.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "saml_assertion_attribute": {
                                "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                                "properties": {
                                  "data": {
                                    "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the SAML assertion attribute.",
                                        "example": "0",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "saml_assertion_attributes",
                                        "description": "SAML assertion attributes resource type.",
                                        "enum": [
                                          "saml_assertion_attributes"
                                        ],
                                        "example": "saml_assertion_attributes",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "SAML_ASSERTION_ATTRIBUTES"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "authn_mappings",
                            "description": "AuthN Mappings resource type.",
                            "enum": [
                              "authn_mappings"
                            ],
                            "example": "authn_mappings",
                            "type": "string",
                            "x-enum-varnames": [
                              "AUTHN_MAPPINGS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included data in the AuthN Mapping response.",
                      "items": {
                        "description": "Included data in the AuthN Mapping response.",
                        "oneOf": [
                          {
                            "description": "SAML assertion attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                                "properties": {
                                  "attribute_key": {
                                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "member-of",
                                    "type": "string"
                                  },
                                  "attribute_value": {
                                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "Development",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The ID of the SAML assertion attribute.",
                                "example": "0",
                                "type": "string"
                              },
                              "type": {
                                "default": "saml_assertion_attributes",
                                "description": "SAML assertion attributes resource type.",
                                "enum": [
                                  "saml_assertion_attributes"
                                ],
                                "example": "saml_assertion_attributes",
                                "type": "string",
                                "x-enum-varnames": [
                                  "SAML_ASSERTION_ATTRIBUTES"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "properties": {},
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List all AuthN Mappings",
        "tags": [
          "AuthN Mappings"
        ],
        "x-menu-order": 4,
        "x-permission": "OPEN()",
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create an AuthN Mapping.",
        "operationId": "CreateAuthNMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request for creating an AuthN Mapping.",
                "properties": {
                  "data": {
                    "description": "Data for creating an AuthN Mapping.",
                    "properties": {
                      "attributes": {
                        "description": "Key/Value pair of attributes used for create request.",
                        "properties": {
                          "attribute_key": {
                            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                            "example": "member-of",
                            "type": "string"
                          },
                          "attribute_value": {
                            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                            "example": "Development",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationship of AuthN Mapping create object to Role.",
                        "properties": {
                          "role": {
                            "description": "Relationship to role.",
                            "properties": {
                              "data": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "authn_mappings",
                        "description": "AuthN Mappings resource type.",
                        "enum": [
                          "authn_mappings"
                        ],
                        "example": "authn_mappings",
                        "type": "string",
                        "x-enum-varnames": [
                          "AUTHN_MAPPINGS"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "AuthN Mapping response from the API.",
                  "properties": {
                    "data": {
                      "description": "The AuthN Mapping object returned by API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of AuthN Mapping.",
                          "properties": {
                            "attribute_key": {
                              "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "member-of",
                              "type": "string"
                            },
                            "attribute_value": {
                              "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "Development",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation time of the AuthN Mapping.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last AuthN Mapping modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "saml_assertion_attribute_id": {
                              "description": "The ID of the SAML assertion attribute.",
                              "example": "0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the AuthN Mapping.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "All relationships associated with AuthN Mapping.",
                          "properties": {
                            "role": {
                              "description": "Relationship to role.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "The unique identifier of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "saml_assertion_attribute": {
                              "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                              "properties": {
                                "data": {
                                  "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the SAML assertion attribute.",
                                      "example": "0",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "saml_assertion_attributes",
                                      "description": "SAML assertion attributes resource type.",
                                      "enum": [
                                        "saml_assertion_attributes"
                                      ],
                                      "example": "saml_assertion_attributes",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "SAML_ASSERTION_ATTRIBUTES"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "authn_mappings",
                          "description": "AuthN Mappings resource type.",
                          "enum": [
                            "authn_mappings"
                          ],
                          "example": "authn_mappings",
                          "type": "string",
                          "x-enum-varnames": [
                            "AUTHN_MAPPINGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included data in the AuthN Mapping response.",
                      "items": {
                        "description": "Included data in the AuthN Mapping response.",
                        "oneOf": [
                          {
                            "description": "SAML assertion attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                                "properties": {
                                  "attribute_key": {
                                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "member-of",
                                    "type": "string"
                                  },
                                  "attribute_value": {
                                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "Development",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The ID of the SAML assertion attribute.",
                                "example": "0",
                                "type": "string"
                              },
                              "type": {
                                "default": "saml_assertion_attributes",
                                "description": "SAML assertion attributes resource type.",
                                "enum": [
                                  "saml_assertion_attributes"
                                ],
                                "example": "saml_assertion_attributes",
                                "type": "string",
                                "x-enum-varnames": [
                                  "SAML_ASSERTION_ATTRIBUTES"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "properties": {},
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Create an AuthN Mapping",
        "tags": [
          "AuthN Mappings"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "authn_mapping": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n     \"attribute_key\": \"{{ unique_lower_alnum }}\",\n     \"attribute_value\": \"{{ unique }}\"\n    },\n    \"relationships\": {\n       \"role\": {\n         \"data\": {\n           \"id\": \"{{ role.data.id }}\",\n           \"type\": \"{{ role.data.type }}\"\n         }\n      }\n    },\n    \"type\": \"authn_mappings\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"authn_mapping\" in the system"
          }
        },
        "x-menu-order": 5,
        "x-permission": "OR(USER_ACCESS_MANAGE)",
        "x-undo": {
          "operationId": "DeleteAuthNMapping",
          "parameters": [
            {
              "name": "authn_mapping_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/authn_mappings/{authn_mapping_id}": {
      "delete": {
        "description": "Delete an AuthN Mapping specified by AuthN Mapping UUID.",
        "operationId": "DeleteAuthNMapping",
        "parameters": [
          {
            "description": "The UUID of the AuthN Mapping.",
            "in": "path",
            "name": "authn_mapping_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Delete an AuthN Mapping",
        "tags": [
          "AuthN Mappings"
        ],
        "x-menu-order": 3,
        "x-permission": "OR(USER_ACCESS_MANAGE)",
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get an AuthN Mapping specified by the AuthN Mapping UUID.",
        "operationId": "GetAuthNMapping",
        "parameters": [
          {
            "description": "The UUID of the AuthN Mapping.",
            "in": "path",
            "name": "authn_mapping_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "AuthN Mapping response from the API.",
                  "properties": {
                    "data": {
                      "description": "The AuthN Mapping object returned by API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of AuthN Mapping.",
                          "properties": {
                            "attribute_key": {
                              "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "member-of",
                              "type": "string"
                            },
                            "attribute_value": {
                              "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "Development",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation time of the AuthN Mapping.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last AuthN Mapping modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "saml_assertion_attribute_id": {
                              "description": "The ID of the SAML assertion attribute.",
                              "example": "0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the AuthN Mapping.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "All relationships associated with AuthN Mapping.",
                          "properties": {
                            "role": {
                              "description": "Relationship to role.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "The unique identifier of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "saml_assertion_attribute": {
                              "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                              "properties": {
                                "data": {
                                  "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the SAML assertion attribute.",
                                      "example": "0",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "saml_assertion_attributes",
                                      "description": "SAML assertion attributes resource type.",
                                      "enum": [
                                        "saml_assertion_attributes"
                                      ],
                                      "example": "saml_assertion_attributes",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "SAML_ASSERTION_ATTRIBUTES"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "authn_mappings",
                          "description": "AuthN Mappings resource type.",
                          "enum": [
                            "authn_mappings"
                          ],
                          "example": "authn_mappings",
                          "type": "string",
                          "x-enum-varnames": [
                            "AUTHN_MAPPINGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included data in the AuthN Mapping response.",
                      "items": {
                        "description": "Included data in the AuthN Mapping response.",
                        "oneOf": [
                          {
                            "description": "SAML assertion attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                                "properties": {
                                  "attribute_key": {
                                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "member-of",
                                    "type": "string"
                                  },
                                  "attribute_value": {
                                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "Development",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The ID of the SAML assertion attribute.",
                                "example": "0",
                                "type": "string"
                              },
                              "type": {
                                "default": "saml_assertion_attributes",
                                "description": "SAML assertion attributes resource type.",
                                "enum": [
                                  "saml_assertion_attributes"
                                ],
                                "example": "saml_assertion_attributes",
                                "type": "string",
                                "x-enum-varnames": [
                                  "SAML_ASSERTION_ATTRIBUTES"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "properties": {},
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get an AuthN Mapping by UUID",
        "tags": [
          "AuthN Mappings"
        ],
        "x-menu-order": 1,
        "x-permission": "OPEN()",
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit an AuthN Mapping.",
        "operationId": "UpdateAuthNMapping",
        "parameters": [
          {
            "description": "The UUID of the AuthN Mapping.",
            "in": "path",
            "name": "authn_mapping_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request to update an AuthN Mapping.",
                "properties": {
                  "data": {
                    "description": "Data for updating an AuthN Mapping.",
                    "properties": {
                      "attributes": {
                        "description": "Key/Value pair of attributes used for update request.",
                        "properties": {
                          "attribute_key": {
                            "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                            "example": "member-of",
                            "type": "string"
                          },
                          "attribute_value": {
                            "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                            "example": "Development",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the AuthN Mapping.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "Relationship of AuthN Mapping update object to Role.",
                        "properties": {
                          "role": {
                            "description": "Relationship to role.",
                            "properties": {
                              "data": {
                                "description": "Relationship to role object.",
                                "properties": {
                                  "id": {
                                    "description": "The unique identifier of the role.",
                                    "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "roles",
                                    "description": "Roles type.",
                                    "enum": [
                                      "roles"
                                    ],
                                    "example": "roles",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "ROLES"
                                    ]
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "authn_mappings",
                        "description": "AuthN Mappings resource type.",
                        "enum": [
                          "authn_mappings"
                        ],
                        "example": "authn_mappings",
                        "type": "string",
                        "x-enum-varnames": [
                          "AUTHN_MAPPINGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "AuthN Mapping response from the API.",
                  "properties": {
                    "data": {
                      "description": "The AuthN Mapping object returned by API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of AuthN Mapping.",
                          "properties": {
                            "attribute_key": {
                              "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "member-of",
                              "type": "string"
                            },
                            "attribute_value": {
                              "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                              "example": "Development",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Creation time of the AuthN Mapping.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last AuthN Mapping modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "saml_assertion_attribute_id": {
                              "description": "The ID of the SAML assertion attribute.",
                              "example": "0",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the AuthN Mapping.",
                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "All relationships associated with AuthN Mapping.",
                          "properties": {
                            "role": {
                              "description": "Relationship to role.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "The unique identifier of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "saml_assertion_attribute": {
                              "description": "AuthN Mapping relationship to SAML Assertion Attribute.",
                              "properties": {
                                "data": {
                                  "description": "Data of AuthN Mapping relationship to SAML Assertion Attribute.",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the SAML assertion attribute.",
                                      "example": "0",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "saml_assertion_attributes",
                                      "description": "SAML assertion attributes resource type.",
                                      "enum": [
                                        "saml_assertion_attributes"
                                      ],
                                      "example": "saml_assertion_attributes",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "SAML_ASSERTION_ATTRIBUTES"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "authn_mappings",
                          "description": "AuthN Mappings resource type.",
                          "enum": [
                            "authn_mappings"
                          ],
                          "example": "authn_mappings",
                          "type": "string",
                          "x-enum-varnames": [
                            "AUTHN_MAPPINGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included data in the AuthN Mapping response.",
                      "items": {
                        "description": "Included data in the AuthN Mapping response.",
                        "oneOf": [
                          {
                            "description": "SAML assertion attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Key/Value pair of attributes used in SAML assertion attributes.",
                                "properties": {
                                  "attribute_key": {
                                    "description": "Key portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "member-of",
                                    "type": "string"
                                  },
                                  "attribute_value": {
                                    "description": "Value portion of a key/value pair of the attribute sent from the Identity Provider.",
                                    "example": "Development",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The ID of the SAML assertion attribute.",
                                "example": "0",
                                "type": "string"
                              },
                              "type": {
                                "default": "saml_assertion_attributes",
                                "description": "SAML assertion attributes resource type.",
                                "enum": [
                                  "saml_assertion_attributes"
                                ],
                                "example": "saml_assertion_attributes",
                                "type": "string",
                                "x-enum-varnames": [
                                  "SAML_ASSERTION_ATTRIBUTES"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "properties": {},
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Edit an AuthN Mapping",
        "tags": [
          "AuthN Mappings"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-permission": "OR(USER_ACCESS_MANAGE)",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/current_user/application_keys": {
      "get": {
        "description": "List all application keys available for current user",
        "operationId": "ListCurrentUserApplicationKeys",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Application key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options",
              "enum": [
                "created_at",
                "-created_at",
                "last4",
                "-last4",
                "name",
                "-name"
              ],
              "type": "string",
              "x-enum-varnames": [
                "CREATED_AT_ASCENDING",
                "CREATED_AT_DESCENDING",
                "LAST4_ASCENDING",
                "LAST4_DESCENDING",
                "NAME_ASCENDING",
                "NAME_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter application keys by the specified string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or after the specified date.",
            "in": "query",
            "name": "filter[created_at][start]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or before the specified date.",
            "in": "query",
            "name": "filter[created_at][end]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a list of application keys.",
                  "properties": {
                    "data": {
                      "description": "Array of application keys.",
                      "items": {
                        "description": "Partial Datadog application key.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a partial application key.",
                            "properties": {
                              "created_at": {
                                "description": "Creation date of the application key.",
                                "example": "2020-11-23T10:00:00.000Z",
                                "readOnly": true,
                                "type": "string"
                              },
                              "last4": {
                                "description": "The last four characters of the application key.",
                                "example": "abcd",
                                "maxLength": 4,
                                "minLength": 4,
                                "readOnly": true,
                                "type": "string",
                                "x-secret": true
                              },
                              "name": {
                                "description": "Name of the application key.",
                                "example": "Application Key for managing dashboards",
                                "type": "string"
                              },
                              "scopes": {
                                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                                "example": [
                                  "dashboards_read",
                                  "dashboards_write",
                                  "dashboards_public_share"
                                ],
                                "items": {
                                  "description": "Name of scope.",
                                  "type": "string"
                                },
                                "nullable": true,
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the application key.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Resources related to the application key.",
                            "properties": {
                              "owned_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "application_keys",
                            "description": "Application Keys resource type.",
                            "enum": [
                              "application_keys"
                            ],
                            "example": "application_keys",
                            "type": "string",
                            "x-enum-varnames": [
                              "APPLICATION_KEYS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all application keys owned by current user",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create an application key for current user",
        "operationId": "CreateCurrentUserApplicationKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to create an application key.",
                "properties": {
                  "data": {
                    "description": "Object used to create an application key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to create an application Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the application key.",
                            "example": "Application Key for managing dashboards",
                            "type": "string"
                          },
                          "scopes": {
                            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                            "example": [
                              "dashboards_read",
                              "dashboards_write",
                              "dashboards_public_share"
                            ],
                            "items": {
                              "description": "Name of scope.",
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "application_keys",
                        "description": "Application Keys resource type.",
                        "enum": [
                          "application_keys"
                        ],
                        "example": "application_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "APPLICATION_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create an application key for current user",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "application_key": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n    },\n    \"type\": \"application_keys\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"application_key\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteCurrentUserApplicationKey",
          "parameters": [
            {
              "name": "app_key_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/current_user/application_keys/{app_key_id}": {
      "delete": {
        "description": "Delete an application key owned by current user",
        "operationId": "DeleteCurrentUserApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete an application key owned by current user",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get an application key owned by current user",
        "operationId": "GetCurrentUserApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get one application key owned by current user",
        "tags": [
          "Key Management"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit an application key owned by current user",
        "operationId": "UpdateCurrentUserApplicationKey",
        "parameters": [
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to update an application key.",
                "properties": {
                  "data": {
                    "description": "Object used to update an application key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to update an application Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the application key.",
                            "example": "Application Key for managing dashboards",
                            "type": "string"
                          },
                          "scopes": {
                            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                            "example": [
                              "dashboards_read",
                              "dashboards_write",
                              "dashboards_public_share"
                            ],
                            "items": {
                              "description": "Name of scope.",
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the application key.",
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "type": "string"
                      },
                      "type": {
                        "default": "application_keys",
                        "description": "Application Keys resource type.",
                        "enum": [
                          "application_keys"
                        ],
                        "example": "application_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "APPLICATION_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Edit an application key owned by current user",
        "tags": [
          "Key Management"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/dashboard/lists/manual/{dashboard_list_id}/dashboards": {
      "delete": {
        "description": "Delete dashboards from an existing dashboard list.",
        "operationId": "DeleteDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to delete items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing a list of dashboards to delete.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to delete from the dashboard list.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "example": "host_timeboard",
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dashboards to delete from the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of deleted dashboards.",
                  "properties": {
                    "deleted_dashboards_from_list": {
                      "description": "List of dashboards deleted from the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "example": "host_timeboard",
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete items from a dashboard list",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Fetch the dashboard list’s dashboard definitions.",
        "operationId": "GetDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to get items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dashboards within a list.",
                  "properties": {
                    "dashboards": {
                      "description": "List of dashboards in the dashboard list.",
                      "example": [],
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "author": {
                            "description": "Creator of the object.",
                            "properties": {
                              "email": {
                                "description": "Email of the creator.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the creator.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the creator.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "created": {
                            "description": "Date of creation of the dashboard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "icon": {
                            "description": "URL to the icon of the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "type": "string"
                          },
                          "is_favorite": {
                            "description": "Whether or not the dashboard is in the favorites.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "is_read_only": {
                            "description": "Whether or not the dashboard is read only.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "is_shared": {
                            "description": "Whether the dashboard is publicly shared or not.",
                            "readOnly": true,
                            "type": "boolean"
                          },
                          "modified": {
                            "description": "Date of last edition of the dashboard.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "popularity": {
                            "description": "Popularity of the dashboard.",
                            "format": "int32",
                            "maximum": 5,
                            "readOnly": true,
                            "type": "integer"
                          },
                          "title": {
                            "description": "Title of the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "example": "host_timeboard",
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          },
                          "url": {
                            "description": "URL path to the dashboard.",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total": {
                      "description": "Number of dashboards in the dashboard list.",
                      "format": "int64",
                      "readOnly": true,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "dashboards"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "dashboards_read"
            ]
          }
        ],
        "summary": "Get items of a Dashboard List",
        "tags": [
          "Dashboard Lists"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Add dashboards to an existing dashboard list.",
        "operationId": "CreateDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to add items to.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing a list of dashboards to add.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to add the dashboard list.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "example": "host_timeboard",
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dashboards to add to the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of added dashboards.",
                  "properties": {
                    "added_dashboards_to_list": {
                      "description": "List of dashboards added to the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "example": "host_timeboard",
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Add Items to a Dashboard List",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "dashboard_list_dashboard": {
            "parameters": [
              {
                "name": "dashboard_list_id",
                "source": "dashboard_list.id"
              },
              {
                "name": "body",
                "value": "{\n  \"dashboards\": [\n    {\n      \"id\": \"{{ dashboard.id }}\",\n      \"type\": \"custom_timeboard\"\n    }\n  ]\n}"
              }
            ],
            "step": "the \"dashboard_list\" has the \"dashboard\""
          },
          "dashboard_list_screenboard_dashboard": {
            "parameters": [
              {
                "name": "dashboard_list_id",
                "source": "dashboard_list.id"
              },
              {
                "name": "body",
                "value": "{\n  \"dashboards\": [\n    {\n      \"id\": \"{{ screenboard_dashboard.id }}\",\n      \"type\": \"custom_screenboard\"\n    }\n  ]\n}"
              }
            ],
            "step": "the \"dashboard_list\" has the \"screenboard_dashboard\""
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "type": "safe"
        }
      },
      "put": {
        "description": "Update dashboards of an existing dashboard list.",
        "operationId": "UpdateDashboardListItems",
        "parameters": [
          {
            "description": "ID of the dashboard list to update items from.",
            "in": "path",
            "name": "dashboard_list_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request containing the list of dashboards to update to.",
                "properties": {
                  "dashboards": {
                    "description": "List of dashboards to update the dashboard list to.",
                    "items": {
                      "description": "A dashboard within a list.",
                      "properties": {
                        "id": {
                          "description": "ID of the dashboard.",
                          "example": "q5j-nti-fv6",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the dashboard.",
                          "enum": [
                            "custom_timeboard",
                            "custom_screenboard",
                            "integration_screenboard",
                            "integration_timeboard",
                            "host_timeboard"
                          ],
                          "example": "host_timeboard",
                          "type": "string",
                          "x-enum-varnames": [
                            "CUSTOM_TIMEBOARD",
                            "CUSTOM_SCREENBOARD",
                            "INTEGRATION_SCREENBOARD",
                            "INTEGRATION_TIMEBOARD",
                            "HOST_TIMEBOARD"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New dashboards of the dashboard list.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing a list of updated dashboards.",
                  "properties": {
                    "dashboards": {
                      "description": "List of dashboards in the dashboard list.",
                      "items": {
                        "description": "A dashboard within a list.",
                        "properties": {
                          "id": {
                            "description": "ID of the dashboard.",
                            "example": "q5j-nti-fv6",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the dashboard.",
                            "enum": [
                              "custom_timeboard",
                              "custom_screenboard",
                              "integration_screenboard",
                              "integration_timeboard",
                              "host_timeboard"
                            ],
                            "example": "host_timeboard",
                            "type": "string",
                            "x-enum-varnames": [
                              "CUSTOM_TIMEBOARD",
                              "CUSTOM_SCREENBOARD",
                              "INTEGRATION_SCREENBOARD",
                              "INTEGRATION_TIMEBOARD",
                              "HOST_TIMEBOARD"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update items of a dashboard list",
        "tags": [
          "Dashboard Lists"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/events": {
      "get": {
        "description": "List endpoint returns events that match an events search query.\n[Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).\n\nUse this endpoint to see your latest events.",
        "operationId": "ListEvents",
        "parameters": [
          {
            "description": "Search query following events syntax.",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum timestamp for requested events.",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum timestamp for requested events.",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Order of events in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "The sort parameters when querying events.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of events matching the request.",
                      "items": {
                        "description": "The object description of an event after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "The object description of an event response attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Object description of attributes from your event.",
                                "properties": {
                                  "aggregation_key": {
                                    "description": "Aggregation key of the event.",
                                    "type": "string"
                                  },
                                  "date_happened": {
                                    "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "device_name": {
                                    "description": "A device name.",
                                    "type": "string"
                                  },
                                  "duration": {
                                    "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "event_object": {
                                    "description": "The event title.",
                                    "example": "Did you hear the news today?",
                                    "type": "string"
                                  },
                                  "evt": {
                                    "description": "The metadata associated with a request.",
                                    "properties": {
                                      "id": {
                                        "description": "Event ID.",
                                        "example": "6509751066204996294",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The event name.",
                                        "type": "string"
                                      },
                                      "source_id": {
                                        "description": "Event source ID.",
                                        "example": 36,
                                        "type": "integer"
                                      },
                                      "type": {
                                        "description": "Event type.",
                                        "example": "error_tracking_alert",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "hostname": {
                                    "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
                                    "type": "string"
                                  },
                                  "monitor": {
                                    "description": "Attributes from the monitor that triggered the event.",
                                    "nullable": true,
                                    "properties": {
                                      "created_at": {
                                        "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                                        "example": 1646318692000,
                                        "type": "integer"
                                      },
                                      "group_status": {
                                        "description": "Monitor group status used when there is no `result_groups`.",
                                        "type": "integer"
                                      },
                                      "groups": {
                                        "description": "Groups to which the monitor belongs.",
                                        "items": {
                                          "description": "A group.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "id": {
                                        "description": "The monitor ID.",
                                        "type": "integer"
                                      },
                                      "message": {
                                        "description": "The monitor message.",
                                        "type": "string"
                                      },
                                      "modified": {
                                        "description": "The monitor's last-modified timestamp.",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "The monitor name.",
                                        "type": "string"
                                      },
                                      "query": {
                                        "description": "The query that triggers the alert.",
                                        "type": "string"
                                      },
                                      "tags": {
                                        "description": "A list of tags attached to the monitor.",
                                        "example": [
                                          "environment:test"
                                        ],
                                        "items": {
                                          "description": "A tag.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "templated_name": {
                                        "description": "The templated name of the monitor before resolving any template variables.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The monitor type.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "monitor_groups": {
                                    "description": "List of groups referred to in the event.",
                                    "items": {
                                      "description": "Group referred to in the event.",
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "type": "array"
                                  },
                                  "monitor_id": {
                                    "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
                                    "nullable": true,
                                    "type": "integer"
                                  },
                                  "priority": {
                                    "description": "The priority of the event's monitor. For example, `normal` or `low`.",
                                    "enum": [
                                      "normal",
                                      "low"
                                    ],
                                    "example": "normal",
                                    "nullable": true,
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "NORMAL",
                                      "LOW"
                                    ]
                                  },
                                  "related_event_id": {
                                    "description": "Related event ID.",
                                    "type": "integer"
                                  },
                                  "service": {
                                    "description": "Service that triggered the event.",
                                    "example": "datadog-api",
                                    "type": "string"
                                  },
                                  "source_type_name": {
                                    "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
                                    "type": "string"
                                  },
                                  "sourcecategory": {
                                    "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
                                    "enum": [
                                      "failure",
                                      "error",
                                      "warning",
                                      "info",
                                      "success",
                                      "user_update",
                                      "recommendation",
                                      "snapshot"
                                    ],
                                    "example": "info",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "FAILURE",
                                      "ERROR",
                                      "WARNING",
                                      "INFO",
                                      "SUCCESS",
                                      "USER_UPDATE",
                                      "RECOMMENDATION",
                                      "SNAPSHOT"
                                    ]
                                  },
                                  "tags": {
                                    "description": "A list of tags to apply to the event.",
                                    "example": [
                                      "environment:test"
                                    ],
                                    "items": {
                                      "description": "A tag.",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "timestamp": {
                                    "description": "POSIX timestamp of your event in milliseconds.",
                                    "example": 1652274265000,
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "title": {
                                    "description": "The event title.",
                                    "example": "Oh boy!",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "tags": {
                                "description": "An array of tags associated with the event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "The tag associated with the event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "The timestamp of the event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "the unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "event",
                            "description": "Type of the event.",
                            "enum": [
                              "event"
                            ],
                            "example": "event",
                            "type": "string",
                            "x-enum-varnames": [
                              "EVENT"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Pagination attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something is wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid. Results hold data from the other indexes.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "events_read"
            ]
          }
        ],
        "summary": "Get a list of events",
        "tags": [
          "Events"
        ],
        "x-menu-order": 1,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in private beta.\nFor access, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/events/search": {
      "post": {
        "description": "List endpoint returns events that match an events search query.\n[Results are paginated similarly to logs](https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination).\n\nUse this endpoint to build complex events filtering and search.",
        "operationId": "SearchEvents",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The object sent with the request to retrieve a list of events from your organization.",
                "properties": {
                  "filter": {
                    "description": "The search and filter query settings.",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested events. Supports date math and regular timestamps in milliseconds.",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query following the event search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested events. Supports date math and regular timestamps in milliseconds.",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "The global query options that are used. Either provide a timezone or a time offset but not both,\notherwise the query fails.",
                    "properties": {
                      "timeOffset": {
                        "description": "The time offset to apply to the query in seconds.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified as an offset, for example: `UTC+03:00`.",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Pagination settings.",
                    "properties": {
                      "cursor": {
                        "description": "The returned paging point to use to get the next results.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "The maximum number of logs in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "The sort parameters when querying events.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of events matching the request.",
                      "items": {
                        "description": "The object description of an event after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "The object description of an event response attribute.",
                            "properties": {
                              "attributes": {
                                "description": "Object description of attributes from your event.",
                                "properties": {
                                  "aggregation_key": {
                                    "description": "Aggregation key of the event.",
                                    "type": "string"
                                  },
                                  "date_happened": {
                                    "description": "POSIX timestamp of the event. Must be sent as an integer (no quotation marks).\nLimited to events no older than 18 hours.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "device_name": {
                                    "description": "A device name.",
                                    "type": "string"
                                  },
                                  "duration": {
                                    "description": "The duration between the triggering of the event and its recovery in nanoseconds.",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "event_object": {
                                    "description": "The event title.",
                                    "example": "Did you hear the news today?",
                                    "type": "string"
                                  },
                                  "evt": {
                                    "description": "The metadata associated with a request.",
                                    "properties": {
                                      "id": {
                                        "description": "Event ID.",
                                        "example": "6509751066204996294",
                                        "type": "string"
                                      },
                                      "name": {
                                        "description": "The event name.",
                                        "type": "string"
                                      },
                                      "source_id": {
                                        "description": "Event source ID.",
                                        "example": 36,
                                        "type": "integer"
                                      },
                                      "type": {
                                        "description": "Event type.",
                                        "example": "error_tracking_alert",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "hostname": {
                                    "description": "Host name to associate with the event.\nAny tags associated with the host are also applied to this event.",
                                    "type": "string"
                                  },
                                  "monitor": {
                                    "description": "Attributes from the monitor that triggered the event.",
                                    "nullable": true,
                                    "properties": {
                                      "created_at": {
                                        "description": "The POSIX timestamp of the monitor's creation in nanoseconds.",
                                        "example": 1646318692000,
                                        "type": "integer"
                                      },
                                      "group_status": {
                                        "description": "Monitor group status used when there is no `result_groups`.",
                                        "type": "integer"
                                      },
                                      "groups": {
                                        "description": "Groups to which the monitor belongs.",
                                        "items": {
                                          "description": "A group.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "id": {
                                        "description": "The monitor ID.",
                                        "type": "integer"
                                      },
                                      "message": {
                                        "description": "The monitor message.",
                                        "type": "string"
                                      },
                                      "modified": {
                                        "description": "The monitor's last-modified timestamp.",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "The monitor name.",
                                        "type": "string"
                                      },
                                      "query": {
                                        "description": "The query that triggers the alert.",
                                        "type": "string"
                                      },
                                      "tags": {
                                        "description": "A list of tags attached to the monitor.",
                                        "example": [
                                          "environment:test"
                                        ],
                                        "items": {
                                          "description": "A tag.",
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "templated_name": {
                                        "description": "The templated name of the monitor before resolving any template variables.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "The monitor type.",
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "monitor_groups": {
                                    "description": "List of groups referred to in the event.",
                                    "items": {
                                      "description": "Group referred to in the event.",
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "type": "array"
                                  },
                                  "monitor_id": {
                                    "description": "ID of the monitor that triggered the event. When an event isn't related to a monitor, this field is empty.",
                                    "nullable": true,
                                    "type": "integer"
                                  },
                                  "priority": {
                                    "description": "The priority of the event's monitor. For example, `normal` or `low`.",
                                    "enum": [
                                      "normal",
                                      "low"
                                    ],
                                    "example": "normal",
                                    "nullable": true,
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "NORMAL",
                                      "LOW"
                                    ]
                                  },
                                  "related_event_id": {
                                    "description": "Related event ID.",
                                    "type": "integer"
                                  },
                                  "service": {
                                    "description": "Service that triggered the event.",
                                    "example": "datadog-api",
                                    "type": "string"
                                  },
                                  "source_type_name": {
                                    "description": "The type of event being posted.\nFor example, `nagios`, `hudson`, `jenkins`, `my_apps`, `chef`, `puppet`, `git` or `bitbucket`.\nThe list of standard source attribute values is [available here](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value).",
                                    "type": "string"
                                  },
                                  "sourcecategory": {
                                    "description": "Identifier for the source of the event, such as a monitor alert, an externally-submitted event, or an integration.",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "If an alert event is enabled, its status is one of the following:\n`failure`, `error`, `warning`, `info`, `success`, `user_update`,\n`recommendation`, or `snapshot`.",
                                    "enum": [
                                      "failure",
                                      "error",
                                      "warning",
                                      "info",
                                      "success",
                                      "user_update",
                                      "recommendation",
                                      "snapshot"
                                    ],
                                    "example": "info",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "FAILURE",
                                      "ERROR",
                                      "WARNING",
                                      "INFO",
                                      "SUCCESS",
                                      "USER_UPDATE",
                                      "RECOMMENDATION",
                                      "SNAPSHOT"
                                    ]
                                  },
                                  "tags": {
                                    "description": "A list of tags to apply to the event.",
                                    "example": [
                                      "environment:test"
                                    ],
                                    "items": {
                                      "description": "A tag.",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "timestamp": {
                                    "description": "POSIX timestamp of your event in milliseconds.",
                                    "example": 1652274265000,
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "title": {
                                    "description": "The event title.",
                                    "example": "Oh boy!",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "tags": {
                                "description": "An array of tags associated with the event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "The tag associated with the event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "The timestamp of the event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "the unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "event",
                            "description": "Type of the event.",
                            "enum": [
                              "event"
                            ],
                            "example": "event",
                            "type": "string",
                            "x-enum-varnames": [
                              "EVENT"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/events?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Pagination attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something is wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid. Results hold data from the other indexes.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Search events",
        "tags": [
          "Events"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-pagination": {
          "cursorParam": "body.page.cursor",
          "cursorPath": "meta.page.after",
          "limitParam": "body.page.limit",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in private beta.\nFor access, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/incidents": {
      "get": {
        "description": "Get all incidents for the user's organization.",
        "operationId": "ListIncidents",
        "parameters": [
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "description": "Object related to an incident.",
                "enum": [
                  "users"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              },
              "type": "array"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific offset to use as the beginning of the returned page.",
            "in": "query",
            "name": "page[offset]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of incidents.",
                  "properties": {
                    "data": {
                      "description": "An array of incidents.",
                      "example": [
                        {
                          "attributes": {
                            "created": "2020-04-21T15:34:08.627205+00:00",
                            "creation_idempotency_key": null,
                            "customer_impact_duration": 0,
                            "customer_impact_end": null,
                            "customer_impact_scope": null,
                            "customer_impact_start": null,
                            "customer_impacted": false,
                            "detected": "2020-04-14T00:00:00+00:00",
                            "modified": "2020-09-17T14:16:58.696424+00:00",
                            "postmortem_id": "00000000-0000-bbbb-0000-000000000000",
                            "public_id": 1,
                            "resolved": null,
                            "severity": "SEV-1",
                            "time_to_detect": 0,
                            "time_to_internal_response": 0,
                            "time_to_repair": 0,
                            "time_to_resolve": 0,
                            "title": "Example Incident"
                          },
                          "id": "00000000-aaaa-0000-0000-000000000000",
                          "relationships": {
                            "commander_user": {
                              "data": {
                                "id": "00000000-0000-0000-cccc-000000000000",
                                "type": "users"
                              }
                            },
                            "created_by_user": {
                              "data": {
                                "id": "00000000-0000-0000-cccc-000000000000",
                                "type": "users"
                              }
                            },
                            "integrations": {
                              "data": [
                                {
                                  "id": "00000000-0000-0000-4444-000000000000",
                                  "type": "incident_integrations"
                                },
                                {
                                  "id": "00000000-0000-0000-5555-000000000000",
                                  "type": "incident_integrations"
                                }
                              ]
                            },
                            "last_modified_by_user": {
                              "data": {
                                "id": "00000000-0000-0000-cccc-000000000000",
                                "type": "users"
                              }
                            },
                            "postmortem": {
                              "data": {
                                "id": "00000000-9999-0000-0000-000000000000",
                                "type": "incident_postmortems"
                              }
                            }
                          },
                          "type": "incidents"
                        },
                        {
                          "attributes": {
                            "created": "2020-04-21T15:34:08.627205+00:00",
                            "creation_idempotency_key": null,
                            "customer_impact_duration": 0,
                            "customer_impact_end": null,
                            "customer_impact_scope": null,
                            "customer_impact_start": null,
                            "customer_impacted": false,
                            "detected": "2020-04-14T00:00:00+00:00",
                            "modified": "2020-09-17T14:16:58.696424+00:00",
                            "postmortem_id": "00000000-6006-0000-0000-000000000000",
                            "public_id": 2,
                            "resolved": null,
                            "severity": "SEV-5",
                            "time_to_detect": 0,
                            "time_to_internal_response": 0,
                            "time_to_repair": 0,
                            "time_to_resolve": 0,
                            "title": "Example Incident 2"
                          },
                          "id": "00000000-1111-0000-0000-000000000000",
                          "relationships": {
                            "commander_user": {
                              "data": {
                                "id": "00000000-aaaa-0000-0000-000000000000",
                                "type": "users"
                              }
                            },
                            "created_by_user": {
                              "data": {
                                "id": "00000000-aaaa-0000-0000-000000000000",
                                "type": "users"
                              }
                            },
                            "integrations": {
                              "data": [
                                {
                                  "id": "00000000-0000-0000-0001-000000000000",
                                  "type": "incident_integrations"
                                },
                                {
                                  "id": "00000000-0000-0000-0002-000000000000",
                                  "type": "incident_integrations"
                                }
                              ]
                            },
                            "last_modified_by_user": {
                              "data": {
                                "id": "00000000-aaaa-0000-0000-000000000000",
                                "type": "users"
                              }
                            },
                            "postmortem": {
                              "data": {
                                "id": "00000000-6006-0000-0000-000000000000",
                                "type": "incident_postmortems"
                              }
                            }
                          },
                          "type": "incidents"
                        }
                      ],
                      "items": {
                        "description": "Incident data from a response.",
                        "properties": {
                          "attributes": {
                            "description": "The incident's attributes from a response.",
                            "properties": {
                              "created": {
                                "description": "Timestamp when the incident was created.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "customer_impact_duration": {
                                "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "customer_impact_end": {
                                "description": "Timestamp when customers were no longer impacted by the incident.",
                                "format": "date-time",
                                "nullable": true,
                                "type": "string"
                              },
                              "customer_impact_scope": {
                                "description": "A summary of the impact customers experienced during the incident.",
                                "example": "An example customer impact scope",
                                "nullable": true,
                                "type": "string"
                              },
                              "customer_impact_start": {
                                "description": "Timestamp when customers began being impacted by the incident.",
                                "format": "date-time",
                                "nullable": true,
                                "type": "string"
                              },
                              "customer_impacted": {
                                "description": "A flag indicating whether the incident caused customer impact.",
                                "example": false,
                                "type": "boolean"
                              },
                              "detected": {
                                "description": "Timestamp when the incident was detected.",
                                "format": "date-time",
                                "nullable": true,
                                "type": "string"
                              },
                              "fields": {
                                "additionalProperties": {
                                  "description": "Dynamic fields for which selections can be made, with field names as keys.",
                                  "oneOf": [
                                    {
                                      "description": "A field with a single value selected.",
                                      "properties": {
                                        "type": {
                                          "default": "dropdown",
                                          "description": "Type of the single value field definitions.",
                                          "enum": [
                                            "dropdown",
                                            "textbox"
                                          ],
                                          "example": "dropdown",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "DROPDOWN",
                                            "TEXTBOX"
                                          ]
                                        },
                                        "value": {
                                          "description": "The single value selected for this field.",
                                          "example": "SEV-1",
                                          "nullable": true,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    {
                                      "description": "A field with potentially multiple values selected.",
                                      "properties": {
                                        "type": {
                                          "default": "multiselect",
                                          "description": "Type of the multiple value field definitions.",
                                          "enum": [
                                            "multiselect",
                                            "textarray",
                                            "metrictag",
                                            "autocomplete"
                                          ],
                                          "example": "multiselect",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "MULTISELECT",
                                            "TEXTARRAY",
                                            "METRICTAG",
                                            "AUTOCOMPLETE"
                                          ]
                                        },
                                        "value": {
                                          "description": "The multiple values selected for this field.",
                                          "example": [
                                            "1.0",
                                            "1.1"
                                          ],
                                          "items": {
                                            "description": "A value which has been selected for the parent field.",
                                            "example": "1.1",
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "type": "array"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  ],
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "description": "A condensed view of the user-defined fields attached to incidents.",
                                "example": {
                                  "severity": {
                                    "type": "dropdown",
                                    "value": "SEV-5"
                                  }
                                },
                                "type": "object"
                              },
                              "modified": {
                                "description": "Timestamp when the incident was last modified.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "notification_handles": {
                                "description": "Notification handles that will be notified of the incident during update.",
                                "items": {
                                  "description": "A notification handle that will be notified at incident creation.",
                                  "properties": {
                                    "display_name": {
                                      "description": "The name of the notified handle.",
                                      "example": "Jane Doe",
                                      "type": "string"
                                    },
                                    "handle": {
                                      "description": "The email address used for the notification.",
                                      "example": "@test.user@test.com",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "nullable": true,
                                "type": "array"
                              },
                              "postmortem_id": {
                                "description": "The UUID of the postmortem object attached to the incident.",
                                "example": "00000000-0000-0000-7890-000000000000",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The monotonically increasing integer ID for the incident.",
                                "example": 1,
                                "format": "int64",
                                "type": "integer"
                              },
                              "resolved": {
                                "description": "Timestamp when the incident's state was set to resolved.",
                                "format": "date-time",
                                "nullable": true,
                                "type": "string"
                              },
                              "time_to_detect": {
                                "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "time_to_internal_response": {
                                "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "time_to_repair": {
                                "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "time_to_resolve": {
                                "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              },
                              "title": {
                                "description": "The title of the incident, which summarizes what happened.",
                                "example": "A test incident title",
                                "type": "string"
                              }
                            },
                            "required": [
                              "title"
                            ],
                            "type": "object"
                          },
                          "id": {
                            "description": "The incident's ID.",
                            "example": "00000000-0000-0000-1234-000000000000",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "The incident's relationships from a response.",
                            "properties": {
                              "commander_user": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "nullable": true,
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "created_by_user": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "integrations": {
                                "description": "A relationship reference for multiple integration metadata objects.",
                                "example": {
                                  "data": [
                                    {
                                      "id": "00000000-abcd-0005-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    {
                                      "id": "00000000-abcd-0006-0000-000000000000",
                                      "type": "incident_integrations"
                                    }
                                  ]
                                },
                                "properties": {
                                  "data": {
                                    "description": "The integration metadata relationship array",
                                    "example": [
                                      {
                                        "id": "00000000-abcd-0003-0000-000000000000",
                                        "type": "incident_integrations"
                                      },
                                      {
                                        "id": "00000000-abcd-0004-0000-000000000000",
                                        "type": "incident_integrations"
                                      }
                                    ],
                                    "items": {
                                      "description": "A relationship reference for an integration metadata object.",
                                      "example": {
                                        "id": "00000000-abcd-0002-0000-000000000000",
                                        "type": "incident_integrations"
                                      },
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the integration metadata.",
                                          "example": "00000000-abcd-0001-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "incident_integrations",
                                          "description": "Integration metadata resource type.",
                                          "enum": [
                                            "incident_integrations"
                                          ],
                                          "example": "incident_integrations",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "INCIDENT_INTEGRATIONS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "last_modified_by_user": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "postmortem": {
                                "description": "A relationship reference for postmortems.",
                                "example": {
                                  "data": {
                                    "id": "00000000-0000-abcd-3000-000000000000",
                                    "type": "incident_postmortems"
                                  }
                                },
                                "properties": {
                                  "data": {
                                    "description": "The postmortem relationship data.",
                                    "example": {
                                      "id": "00000000-0000-abcd-2000-000000000000",
                                      "type": "incident_postmortems"
                                    },
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the postmortem.",
                                        "example": "00000000-0000-abcd-1000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "incident_postmortems",
                                        "description": "Incident postmortem resource type.",
                                        "enum": [
                                          "incident_postmortems"
                                        ],
                                        "example": "incident_postmortems",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "INCIDENT_POSTMORTEMS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "incidents",
                            "description": "Incident resource type.",
                            "enum": [
                              "incidents"
                            ],
                            "example": "incidents",
                            "type": "string",
                            "x-enum-varnames": [
                              "INCIDENTS"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included related resources that the user requested.",
                      "items": {
                        "description": "An object related to an incident that is included in the response.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "meta": {
                      "description": "The metadata object containing pagination metadata.",
                      "properties": {
                        "pagination": {
                          "description": "Pagination properties.",
                          "properties": {
                            "next_offset": {
                              "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            },
                            "offset": {
                              "description": "The index of the first element in the results.",
                              "example": 10,
                              "format": "int64",
                              "type": "integer"
                            },
                            "size": {
                              "description": "Maximum size of pages to return.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get a list of incidents",
        "tags": [
          "Incidents"
        ],
        "x-pagination": {
          "limitParam": "page[size]",
          "pageOffsetParam": "page[offset]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Create an incident.",
        "operationId": "CreateIncident",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request for an incident.",
                "properties": {
                  "data": {
                    "description": "Incident data for a create request.",
                    "properties": {
                      "attributes": {
                        "description": "The incident's attributes for a create request.",
                        "properties": {
                          "customer_impacted": {
                            "description": "A flag indicating whether the incident caused customer impact.",
                            "example": false,
                            "type": "boolean"
                          },
                          "fields": {
                            "additionalProperties": {
                              "description": "Dynamic fields for which selections can be made, with field names as keys.",
                              "oneOf": [
                                {
                                  "description": "A field with a single value selected.",
                                  "properties": {
                                    "type": {
                                      "default": "dropdown",
                                      "description": "Type of the single value field definitions.",
                                      "enum": [
                                        "dropdown",
                                        "textbox"
                                      ],
                                      "example": "dropdown",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "DROPDOWN",
                                        "TEXTBOX"
                                      ]
                                    },
                                    "value": {
                                      "description": "The single value selected for this field.",
                                      "example": "SEV-1",
                                      "nullable": true,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "A field with potentially multiple values selected.",
                                  "properties": {
                                    "type": {
                                      "default": "multiselect",
                                      "description": "Type of the multiple value field definitions.",
                                      "enum": [
                                        "multiselect",
                                        "textarray",
                                        "metrictag",
                                        "autocomplete"
                                      ],
                                      "example": "multiselect",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "MULTISELECT",
                                        "TEXTARRAY",
                                        "METRICTAG",
                                        "AUTOCOMPLETE"
                                      ]
                                    },
                                    "value": {
                                      "description": "The multiple values selected for this field.",
                                      "example": [
                                        "1.0",
                                        "1.1"
                                      ],
                                      "items": {
                                        "description": "A value which has been selected for the parent field.",
                                        "example": "1.1",
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type"
                              ],
                              "type": "object"
                            },
                            "description": "A condensed view of the user-defined fields for which to create initial selections.",
                            "example": {
                              "severity": {
                                "type": "dropdown",
                                "value": "SEV-5"
                              }
                            },
                            "type": "object"
                          },
                          "initial_cells": {
                            "description": "An array of initial timeline cells to be placed at the beginning of the incident timeline.",
                            "items": {
                              "description": "The timeline cell's attributes for a create request.",
                              "oneOf": [
                                {
                                  "description": "Timeline cell data for Markdown timeline cells for a create request.",
                                  "properties": {
                                    "cell_type": {
                                      "default": "markdown",
                                      "description": "Type of the Markdown timeline cell.",
                                      "enum": [
                                        "markdown"
                                      ],
                                      "example": "markdown",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "MARKDOWN"
                                      ]
                                    },
                                    "content": {
                                      "description": "The Markdown timeline cell contents.",
                                      "properties": {
                                        "content": {
                                          "description": "The Markdown content of the cell.",
                                          "example": "An example timeline cell message.",
                                          "nullable": false,
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "important": {
                                      "default": false,
                                      "description": "A flag indicating whether the timeline cell is important and should be highlighted.",
                                      "example": false,
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [
                                    "content",
                                    "cell_type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "notification_handles": {
                            "description": "Notification handles that will be notified of the incident at creation.",
                            "items": {
                              "description": "A notification handle that will be notified at incident creation.",
                              "properties": {
                                "display_name": {
                                  "description": "The name of the notified handle.",
                                  "example": "Jane Doe",
                                  "type": "string"
                                },
                                "handle": {
                                  "description": "The email address used for the notification.",
                                  "example": "@test.user@test.com",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "title": {
                            "description": "The title of the incident, which summarizes what happened.",
                            "example": "A test incident title",
                            "type": "string"
                          }
                        },
                        "required": [
                          "title",
                          "customer_impacted"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "The relationships the incident will have with other resources once created.",
                        "properties": {
                          "commander_user": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "nullable": true,
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "commander_user"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "incidents",
                        "description": "Incident resource type.",
                        "enum": [
                          "incidents"
                        ],
                        "example": "incidents",
                        "type": "string",
                        "x-enum-varnames": [
                          "INCIDENTS"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident payload.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident.",
                  "properties": {
                    "data": {
                      "description": "Incident data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp when the incident was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "customer_impact_duration": {
                              "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "customer_impact_end": {
                              "description": "Timestamp when customers were no longer impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_scope": {
                              "description": "A summary of the impact customers experienced during the incident.",
                              "example": "An example customer impact scope",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_start": {
                              "description": "Timestamp when customers began being impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impacted": {
                              "description": "A flag indicating whether the incident caused customer impact.",
                              "example": false,
                              "type": "boolean"
                            },
                            "detected": {
                              "description": "Timestamp when the incident was detected.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "fields": {
                              "additionalProperties": {
                                "description": "Dynamic fields for which selections can be made, with field names as keys.",
                                "oneOf": [
                                  {
                                    "description": "A field with a single value selected.",
                                    "properties": {
                                      "type": {
                                        "default": "dropdown",
                                        "description": "Type of the single value field definitions.",
                                        "enum": [
                                          "dropdown",
                                          "textbox"
                                        ],
                                        "example": "dropdown",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "DROPDOWN",
                                          "TEXTBOX"
                                        ]
                                      },
                                      "value": {
                                        "description": "The single value selected for this field.",
                                        "example": "SEV-1",
                                        "nullable": true,
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  {
                                    "description": "A field with potentially multiple values selected.",
                                    "properties": {
                                      "type": {
                                        "default": "multiselect",
                                        "description": "Type of the multiple value field definitions.",
                                        "enum": [
                                          "multiselect",
                                          "textarray",
                                          "metrictag",
                                          "autocomplete"
                                        ],
                                        "example": "multiselect",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "MULTISELECT",
                                          "TEXTARRAY",
                                          "METRICTAG",
                                          "AUTOCOMPLETE"
                                        ]
                                      },
                                      "value": {
                                        "description": "The multiple values selected for this field.",
                                        "example": [
                                          "1.0",
                                          "1.1"
                                        ],
                                        "items": {
                                          "description": "A value which has been selected for the parent field.",
                                          "example": "1.1",
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ],
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "description": "A condensed view of the user-defined fields attached to incidents.",
                              "example": {
                                "severity": {
                                  "type": "dropdown",
                                  "value": "SEV-5"
                                }
                              },
                              "type": "object"
                            },
                            "modified": {
                              "description": "Timestamp when the incident was last modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "notification_handles": {
                              "description": "Notification handles that will be notified of the incident during update.",
                              "items": {
                                "description": "A notification handle that will be notified at incident creation.",
                                "properties": {
                                  "display_name": {
                                    "description": "The name of the notified handle.",
                                    "example": "Jane Doe",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "The email address used for the notification.",
                                    "example": "@test.user@test.com",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "nullable": true,
                              "type": "array"
                            },
                            "postmortem_id": {
                              "description": "The UUID of the postmortem object attached to the incident.",
                              "example": "00000000-0000-0000-7890-000000000000",
                              "type": "string"
                            },
                            "public_id": {
                              "description": "The monotonically increasing integer ID for the incident.",
                              "example": 1,
                              "format": "int64",
                              "type": "integer"
                            },
                            "resolved": {
                              "description": "Timestamp when the incident's state was set to resolved.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "time_to_detect": {
                              "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_internal_response": {
                              "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_repair": {
                              "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_resolve": {
                              "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "title": {
                              "description": "The title of the incident, which summarizes what happened.",
                              "example": "A test incident title",
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident's ID.",
                          "example": "00000000-0000-0000-1234-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident's relationships from a response.",
                          "properties": {
                            "commander_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "nullable": true,
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "created_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "integrations": {
                              "description": "A relationship reference for multiple integration metadata objects.",
                              "example": {
                                "data": [
                                  {
                                    "id": "00000000-abcd-0005-0000-000000000000",
                                    "type": "incident_integrations"
                                  },
                                  {
                                    "id": "00000000-abcd-0006-0000-000000000000",
                                    "type": "incident_integrations"
                                  }
                                ]
                              },
                              "properties": {
                                "data": {
                                  "description": "The integration metadata relationship array",
                                  "example": [
                                    {
                                      "id": "00000000-abcd-0003-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    {
                                      "id": "00000000-abcd-0004-0000-000000000000",
                                      "type": "incident_integrations"
                                    }
                                  ],
                                  "items": {
                                    "description": "A relationship reference for an integration metadata object.",
                                    "example": {
                                      "id": "00000000-abcd-0002-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the integration metadata.",
                                        "example": "00000000-abcd-0001-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "incident_integrations",
                                        "description": "Integration metadata resource type.",
                                        "enum": [
                                          "incident_integrations"
                                        ],
                                        "example": "incident_integrations",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "INCIDENT_INTEGRATIONS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "postmortem": {
                              "description": "A relationship reference for postmortems.",
                              "example": {
                                "data": {
                                  "id": "00000000-0000-abcd-3000-000000000000",
                                  "type": "incident_postmortems"
                                }
                              },
                              "properties": {
                                "data": {
                                  "description": "The postmortem relationship data.",
                                  "example": {
                                    "id": "00000000-0000-abcd-2000-000000000000",
                                    "type": "incident_postmortems"
                                  },
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the postmortem.",
                                      "example": "00000000-0000-abcd-1000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "incident_postmortems",
                                      "description": "Incident postmortem resource type.",
                                      "enum": [
                                        "incident_postmortems"
                                      ],
                                      "example": "incident_postmortems",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "INCIDENT_POSTMORTEMS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "incidents",
                          "description": "Incident resource type.",
                          "enum": [
                            "incidents"
                          ],
                          "example": "incidents",
                          "type": "string",
                          "x-enum-varnames": [
                            "INCIDENTS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included related resources that the user requested.",
                      "items": {
                        "description": "An object related to an incident that is included in the response.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_write"
            ]
          }
        ],
        "summary": "Create an incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "incident": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"title\": \"{{ unique }}\",\n      \"customer_impacted\": false\n     },\n     \"type\": \"incidents\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"incident\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteIncident",
          "parameters": [
            {
              "name": "incident_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/incidents/{incident_id}": {
      "delete": {
        "description": "Deletes an existing incident from the users organization.",
        "operationId": "DeleteIncident",
        "parameters": [
          {
            "description": "The UUID of the incident.",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_write"
            ]
          }
        ],
        "summary": "Delete an existing incident",
        "tags": [
          "Incidents"
        ],
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get the details of an incident by `incident_id`.",
        "operationId": "GetIncident",
        "parameters": [
          {
            "description": "The UUID of the incident.",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "description": "Object related to an incident.",
                "enum": [
                  "users"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident.",
                  "properties": {
                    "data": {
                      "description": "Incident data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp when the incident was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "customer_impact_duration": {
                              "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "customer_impact_end": {
                              "description": "Timestamp when customers were no longer impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_scope": {
                              "description": "A summary of the impact customers experienced during the incident.",
                              "example": "An example customer impact scope",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_start": {
                              "description": "Timestamp when customers began being impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impacted": {
                              "description": "A flag indicating whether the incident caused customer impact.",
                              "example": false,
                              "type": "boolean"
                            },
                            "detected": {
                              "description": "Timestamp when the incident was detected.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "fields": {
                              "additionalProperties": {
                                "description": "Dynamic fields for which selections can be made, with field names as keys.",
                                "oneOf": [
                                  {
                                    "description": "A field with a single value selected.",
                                    "properties": {
                                      "type": {
                                        "default": "dropdown",
                                        "description": "Type of the single value field definitions.",
                                        "enum": [
                                          "dropdown",
                                          "textbox"
                                        ],
                                        "example": "dropdown",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "DROPDOWN",
                                          "TEXTBOX"
                                        ]
                                      },
                                      "value": {
                                        "description": "The single value selected for this field.",
                                        "example": "SEV-1",
                                        "nullable": true,
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  {
                                    "description": "A field with potentially multiple values selected.",
                                    "properties": {
                                      "type": {
                                        "default": "multiselect",
                                        "description": "Type of the multiple value field definitions.",
                                        "enum": [
                                          "multiselect",
                                          "textarray",
                                          "metrictag",
                                          "autocomplete"
                                        ],
                                        "example": "multiselect",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "MULTISELECT",
                                          "TEXTARRAY",
                                          "METRICTAG",
                                          "AUTOCOMPLETE"
                                        ]
                                      },
                                      "value": {
                                        "description": "The multiple values selected for this field.",
                                        "example": [
                                          "1.0",
                                          "1.1"
                                        ],
                                        "items": {
                                          "description": "A value which has been selected for the parent field.",
                                          "example": "1.1",
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ],
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "description": "A condensed view of the user-defined fields attached to incidents.",
                              "example": {
                                "severity": {
                                  "type": "dropdown",
                                  "value": "SEV-5"
                                }
                              },
                              "type": "object"
                            },
                            "modified": {
                              "description": "Timestamp when the incident was last modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "notification_handles": {
                              "description": "Notification handles that will be notified of the incident during update.",
                              "items": {
                                "description": "A notification handle that will be notified at incident creation.",
                                "properties": {
                                  "display_name": {
                                    "description": "The name of the notified handle.",
                                    "example": "Jane Doe",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "The email address used for the notification.",
                                    "example": "@test.user@test.com",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "nullable": true,
                              "type": "array"
                            },
                            "postmortem_id": {
                              "description": "The UUID of the postmortem object attached to the incident.",
                              "example": "00000000-0000-0000-7890-000000000000",
                              "type": "string"
                            },
                            "public_id": {
                              "description": "The monotonically increasing integer ID for the incident.",
                              "example": 1,
                              "format": "int64",
                              "type": "integer"
                            },
                            "resolved": {
                              "description": "Timestamp when the incident's state was set to resolved.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "time_to_detect": {
                              "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_internal_response": {
                              "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_repair": {
                              "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_resolve": {
                              "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "title": {
                              "description": "The title of the incident, which summarizes what happened.",
                              "example": "A test incident title",
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident's ID.",
                          "example": "00000000-0000-0000-1234-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident's relationships from a response.",
                          "properties": {
                            "commander_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "nullable": true,
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "created_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "integrations": {
                              "description": "A relationship reference for multiple integration metadata objects.",
                              "example": {
                                "data": [
                                  {
                                    "id": "00000000-abcd-0005-0000-000000000000",
                                    "type": "incident_integrations"
                                  },
                                  {
                                    "id": "00000000-abcd-0006-0000-000000000000",
                                    "type": "incident_integrations"
                                  }
                                ]
                              },
                              "properties": {
                                "data": {
                                  "description": "The integration metadata relationship array",
                                  "example": [
                                    {
                                      "id": "00000000-abcd-0003-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    {
                                      "id": "00000000-abcd-0004-0000-000000000000",
                                      "type": "incident_integrations"
                                    }
                                  ],
                                  "items": {
                                    "description": "A relationship reference for an integration metadata object.",
                                    "example": {
                                      "id": "00000000-abcd-0002-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the integration metadata.",
                                        "example": "00000000-abcd-0001-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "incident_integrations",
                                        "description": "Integration metadata resource type.",
                                        "enum": [
                                          "incident_integrations"
                                        ],
                                        "example": "incident_integrations",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "INCIDENT_INTEGRATIONS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "postmortem": {
                              "description": "A relationship reference for postmortems.",
                              "example": {
                                "data": {
                                  "id": "00000000-0000-abcd-3000-000000000000",
                                  "type": "incident_postmortems"
                                }
                              },
                              "properties": {
                                "data": {
                                  "description": "The postmortem relationship data.",
                                  "example": {
                                    "id": "00000000-0000-abcd-2000-000000000000",
                                    "type": "incident_postmortems"
                                  },
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the postmortem.",
                                      "example": "00000000-0000-abcd-1000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "incident_postmortems",
                                      "description": "Incident postmortem resource type.",
                                      "enum": [
                                        "incident_postmortems"
                                      ],
                                      "example": "incident_postmortems",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "INCIDENT_POSTMORTEMS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "incidents",
                          "description": "Incident resource type.",
                          "enum": [
                            "incidents"
                          ],
                          "example": "incidents",
                          "type": "string",
                          "x-enum-varnames": [
                            "INCIDENTS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included related resources that the user requested.",
                      "items": {
                        "description": "An object related to an incident that is included in the response.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get the details of an incident",
        "tags": [
          "Incidents"
        ],
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Updates an incident. Provide only the attributes that should be updated as this request is a partial update.",
        "operationId": "UpdateIncident",
        "parameters": [
          {
            "description": "The UUID of the incident.",
            "in": "path",
            "name": "incident_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "description": "Object related to an incident.",
                "enum": [
                  "users"
                ],
                "type": "string",
                "x-enum-varnames": [
                  "USERS"
                ]
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request for an incident.",
                "properties": {
                  "data": {
                    "description": "Incident data for an update request.",
                    "properties": {
                      "attributes": {
                        "description": "The incident's attributes for an update request.",
                        "properties": {
                          "customer_impact_end": {
                            "description": "Timestamp when customers were no longer impacted by the incident.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "customer_impact_scope": {
                            "description": "A summary of the impact customers experienced during the incident.",
                            "example": "Example customer impact scope",
                            "type": "string"
                          },
                          "customer_impact_start": {
                            "description": "Timestamp when customers began being impacted by the incident.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "customer_impacted": {
                            "description": "A flag indicating whether the incident caused customer impact.",
                            "example": false,
                            "type": "boolean"
                          },
                          "detected": {
                            "description": "Timestamp when the incident was detected.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "fields": {
                            "additionalProperties": {
                              "description": "Dynamic fields for which selections can be made, with field names as keys.",
                              "oneOf": [
                                {
                                  "description": "A field with a single value selected.",
                                  "properties": {
                                    "type": {
                                      "default": "dropdown",
                                      "description": "Type of the single value field definitions.",
                                      "enum": [
                                        "dropdown",
                                        "textbox"
                                      ],
                                      "example": "dropdown",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "DROPDOWN",
                                        "TEXTBOX"
                                      ]
                                    },
                                    "value": {
                                      "description": "The single value selected for this field.",
                                      "example": "SEV-1",
                                      "nullable": true,
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                {
                                  "description": "A field with potentially multiple values selected.",
                                  "properties": {
                                    "type": {
                                      "default": "multiselect",
                                      "description": "Type of the multiple value field definitions.",
                                      "enum": [
                                        "multiselect",
                                        "textarray",
                                        "metrictag",
                                        "autocomplete"
                                      ],
                                      "example": "multiselect",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "MULTISELECT",
                                        "TEXTARRAY",
                                        "METRICTAG",
                                        "AUTOCOMPLETE"
                                      ]
                                    },
                                    "value": {
                                      "description": "The multiple values selected for this field.",
                                      "example": [
                                        "1.0",
                                        "1.1"
                                      ],
                                      "items": {
                                        "description": "A value which has been selected for the parent field.",
                                        "example": "1.1",
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type"
                              ],
                              "type": "object"
                            },
                            "description": "A condensed view of the user-defined fields for which to update selections.",
                            "example": {
                              "severity": {
                                "type": "dropdown",
                                "value": "SEV-5"
                              }
                            },
                            "type": "object"
                          },
                          "notification_handles": {
                            "description": "Notification handles that will be notified of the incident during update.",
                            "items": {
                              "description": "A notification handle that will be notified at incident creation.",
                              "properties": {
                                "display_name": {
                                  "description": "The name of the notified handle.",
                                  "example": "Jane Doe",
                                  "type": "string"
                                },
                                "handle": {
                                  "description": "The email address used for the notification.",
                                  "example": "@test.user@test.com",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "resolved": {
                            "description": "Timestamp when the incident's state was set to resolved.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "title": {
                            "description": "The title of the incident, which summarizes what happened.",
                            "example": "A test incident title",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "The team's ID.",
                        "example": "00000000-0000-0000-4567-000000000000",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "The incident's relationships for an update request.",
                        "properties": {
                          "commander_user": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "nullable": true,
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-0000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "integrations": {
                            "description": "A relationship reference for multiple integration metadata objects.",
                            "example": {
                              "data": [
                                {
                                  "id": "00000000-abcd-0005-0000-000000000000",
                                  "type": "incident_integrations"
                                },
                                {
                                  "id": "00000000-abcd-0006-0000-000000000000",
                                  "type": "incident_integrations"
                                }
                              ]
                            },
                            "properties": {
                              "data": {
                                "description": "The integration metadata relationship array",
                                "example": [
                                  {
                                    "id": "00000000-abcd-0003-0000-000000000000",
                                    "type": "incident_integrations"
                                  },
                                  {
                                    "id": "00000000-abcd-0004-0000-000000000000",
                                    "type": "incident_integrations"
                                  }
                                ],
                                "items": {
                                  "description": "A relationship reference for an integration metadata object.",
                                  "example": {
                                    "id": "00000000-abcd-0002-0000-000000000000",
                                    "type": "incident_integrations"
                                  },
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the integration metadata.",
                                      "example": "00000000-abcd-0001-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "incident_integrations",
                                      "description": "Integration metadata resource type.",
                                      "enum": [
                                        "incident_integrations"
                                      ],
                                      "example": "incident_integrations",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "INCIDENT_INTEGRATIONS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "postmortem": {
                            "description": "A relationship reference for postmortems.",
                            "example": {
                              "data": {
                                "id": "00000000-0000-abcd-3000-000000000000",
                                "type": "incident_postmortems"
                              }
                            },
                            "properties": {
                              "data": {
                                "description": "The postmortem relationship data.",
                                "example": {
                                  "id": "00000000-0000-abcd-2000-000000000000",
                                  "type": "incident_postmortems"
                                },
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the postmortem.",
                                    "example": "00000000-0000-abcd-1000-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "incident_postmortems",
                                    "description": "Incident postmortem resource type.",
                                    "enum": [
                                      "incident_postmortems"
                                    ],
                                    "example": "incident_postmortems",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "INCIDENT_POSTMORTEMS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "incidents",
                        "description": "Incident resource type.",
                        "enum": [
                          "incidents"
                        ],
                        "example": "incidents",
                        "type": "string",
                        "x-enum-varnames": [
                          "INCIDENTS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident Payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident.",
                  "properties": {
                    "data": {
                      "description": "Incident data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp when the incident was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "customer_impact_duration": {
                              "description": "Length of the incident's customer impact in seconds.\nEquals the difference between `customer_impact_start` and `customer_impact_end`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "customer_impact_end": {
                              "description": "Timestamp when customers were no longer impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_scope": {
                              "description": "A summary of the impact customers experienced during the incident.",
                              "example": "An example customer impact scope",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impact_start": {
                              "description": "Timestamp when customers began being impacted by the incident.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "customer_impacted": {
                              "description": "A flag indicating whether the incident caused customer impact.",
                              "example": false,
                              "type": "boolean"
                            },
                            "detected": {
                              "description": "Timestamp when the incident was detected.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "fields": {
                              "additionalProperties": {
                                "description": "Dynamic fields for which selections can be made, with field names as keys.",
                                "oneOf": [
                                  {
                                    "description": "A field with a single value selected.",
                                    "properties": {
                                      "type": {
                                        "default": "dropdown",
                                        "description": "Type of the single value field definitions.",
                                        "enum": [
                                          "dropdown",
                                          "textbox"
                                        ],
                                        "example": "dropdown",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "DROPDOWN",
                                          "TEXTBOX"
                                        ]
                                      },
                                      "value": {
                                        "description": "The single value selected for this field.",
                                        "example": "SEV-1",
                                        "nullable": true,
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  {
                                    "description": "A field with potentially multiple values selected.",
                                    "properties": {
                                      "type": {
                                        "default": "multiselect",
                                        "description": "Type of the multiple value field definitions.",
                                        "enum": [
                                          "multiselect",
                                          "textarray",
                                          "metrictag",
                                          "autocomplete"
                                        ],
                                        "example": "multiselect",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "MULTISELECT",
                                          "TEXTARRAY",
                                          "METRICTAG",
                                          "AUTOCOMPLETE"
                                        ]
                                      },
                                      "value": {
                                        "description": "The multiple values selected for this field.",
                                        "example": [
                                          "1.0",
                                          "1.1"
                                        ],
                                        "items": {
                                          "description": "A value which has been selected for the parent field.",
                                          "example": "1.1",
                                          "type": "string"
                                        },
                                        "nullable": true,
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ],
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "description": "A condensed view of the user-defined fields attached to incidents.",
                              "example": {
                                "severity": {
                                  "type": "dropdown",
                                  "value": "SEV-5"
                                }
                              },
                              "type": "object"
                            },
                            "modified": {
                              "description": "Timestamp when the incident was last modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "notification_handles": {
                              "description": "Notification handles that will be notified of the incident during update.",
                              "items": {
                                "description": "A notification handle that will be notified at incident creation.",
                                "properties": {
                                  "display_name": {
                                    "description": "The name of the notified handle.",
                                    "example": "Jane Doe",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "The email address used for the notification.",
                                    "example": "@test.user@test.com",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "nullable": true,
                              "type": "array"
                            },
                            "postmortem_id": {
                              "description": "The UUID of the postmortem object attached to the incident.",
                              "example": "00000000-0000-0000-7890-000000000000",
                              "type": "string"
                            },
                            "public_id": {
                              "description": "The monotonically increasing integer ID for the incident.",
                              "example": 1,
                              "format": "int64",
                              "type": "integer"
                            },
                            "resolved": {
                              "description": "Timestamp when the incident's state was set to resolved.",
                              "format": "date-time",
                              "nullable": true,
                              "type": "string"
                            },
                            "time_to_detect": {
                              "description": "The amount of time in seconds to detect the incident.\nEquals the difference between `customer_impact_start` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_internal_response": {
                              "description": "The amount of time in seconds to call incident after detection. Equals the difference of `detected` and `created`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_repair": {
                              "description": "The amount of time in seconds to resolve customer impact after detecting the issue. Equals the difference between `customer_impact_end` and `detected`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "time_to_resolve": {
                              "description": "The amount of time in seconds to resolve the incident after it was created. Equals the difference between `created` and `resolved`.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            },
                            "title": {
                              "description": "The title of the incident, which summarizes what happened.",
                              "example": "A test incident title",
                              "type": "string"
                            }
                          },
                          "required": [
                            "title"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident's ID.",
                          "example": "00000000-0000-0000-1234-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident's relationships from a response.",
                          "properties": {
                            "commander_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "nullable": true,
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "created_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "integrations": {
                              "description": "A relationship reference for multiple integration metadata objects.",
                              "example": {
                                "data": [
                                  {
                                    "id": "00000000-abcd-0005-0000-000000000000",
                                    "type": "incident_integrations"
                                  },
                                  {
                                    "id": "00000000-abcd-0006-0000-000000000000",
                                    "type": "incident_integrations"
                                  }
                                ]
                              },
                              "properties": {
                                "data": {
                                  "description": "The integration metadata relationship array",
                                  "example": [
                                    {
                                      "id": "00000000-abcd-0003-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    {
                                      "id": "00000000-abcd-0004-0000-000000000000",
                                      "type": "incident_integrations"
                                    }
                                  ],
                                  "items": {
                                    "description": "A relationship reference for an integration metadata object.",
                                    "example": {
                                      "id": "00000000-abcd-0002-0000-000000000000",
                                      "type": "incident_integrations"
                                    },
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the integration metadata.",
                                        "example": "00000000-abcd-0001-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "incident_integrations",
                                        "description": "Integration metadata resource type.",
                                        "enum": [
                                          "incident_integrations"
                                        ],
                                        "example": "incident_integrations",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "INCIDENT_INTEGRATIONS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by_user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "postmortem": {
                              "description": "A relationship reference for postmortems.",
                              "example": {
                                "data": {
                                  "id": "00000000-0000-abcd-3000-000000000000",
                                  "type": "incident_postmortems"
                                }
                              },
                              "properties": {
                                "data": {
                                  "description": "The postmortem relationship data.",
                                  "example": {
                                    "id": "00000000-0000-abcd-2000-000000000000",
                                    "type": "incident_postmortems"
                                  },
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the postmortem.",
                                      "example": "00000000-0000-abcd-1000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "incident_postmortems",
                                      "description": "Incident postmortem resource type.",
                                      "enum": [
                                        "incident_postmortems"
                                      ],
                                      "example": "incident_postmortems",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "INCIDENT_POSTMORTEMS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "incidents",
                          "description": "Incident resource type.",
                          "enum": [
                            "incidents"
                          ],
                          "example": "incidents",
                          "type": "string",
                          "x-enum-varnames": [
                            "INCIDENTS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included related resources that the user requested.",
                      "items": {
                        "description": "An object related to an incident that is included in the response.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_write"
            ]
          }
        ],
        "summary": "Update an existing incident",
        "tags": [
          "Incidents"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/integration/opsgenie/services": {
      "get": {
        "description": "Get a list of all services from the Datadog Opsgenie integration.",
        "operationId": "ListOpsgenieServices",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of Opsgenie services.",
                  "properties": {
                    "data": {
                      "description": "An array of Opsgenie services.",
                      "example": [
                        {
                          "attributes": {
                            "custom_url": null,
                            "name": "fake-opsgenie-service-name",
                            "region": "us"
                          },
                          "id": "596da4af-0563-4097-90ff-07230c3f9db3",
                          "type": "opsgenie-service"
                        },
                        {
                          "attributes": {
                            "custom_url": null,
                            "name": "fake-opsgenie-service-name-2",
                            "region": "eu"
                          },
                          "id": "0d2937f1-b561-44fa-914a-99910f848014",
                          "type": "opsgenie-service"
                        }
                      ],
                      "items": {
                        "description": "Opsgenie service data from a response.",
                        "properties": {
                          "attributes": {
                            "description": "The attributes from an Opsgenie service response.",
                            "properties": {
                              "custom_url": {
                                "description": "The custom URL for a custom region.",
                                "example": null,
                                "nullable": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name for the Opsgenie service.",
                                "example": "fake-opsgenie-service-name",
                                "type": "string"
                              },
                              "region": {
                                "description": "The region for the Opsgenie service.",
                                "enum": [
                                  "us",
                                  "eu",
                                  "custom"
                                ],
                                "example": "us",
                                "type": "string",
                                "x-enum-varnames": [
                                  "US",
                                  "EU",
                                  "CUSTOM"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The ID of the Opsgenie service.",
                            "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                            "type": "string"
                          },
                          "type": {
                            "default": "opsgenie-service",
                            "description": "Opsgenie service resource type.",
                            "enum": [
                              "opsgenie-service"
                            ],
                            "example": "opsgenie-service",
                            "type": "string",
                            "x-enum-varnames": [
                              "OPSGENIE_SERVICE"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "attributes"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all service objects",
        "tags": [
          "Opsgenie Integration"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a new service object in the Opsgenie integration.",
        "operationId": "CreateOpsgenieService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request for an Opsgenie service.",
                "properties": {
                  "data": {
                    "description": "Opsgenie service data for a create request.",
                    "properties": {
                      "attributes": {
                        "description": "The Opsgenie service attributes for a create request.",
                        "properties": {
                          "custom_url": {
                            "description": "The custom URL for a custom region.",
                            "example": "https://example.com",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name for the Opsgenie service.",
                            "example": "fake-opsgenie-service-name",
                            "type": "string"
                          },
                          "opsgenie_api_key": {
                            "description": "The Opsgenie API key for your Opsgenie service.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region for the Opsgenie service.",
                            "enum": [
                              "us",
                              "eu",
                              "custom"
                            ],
                            "example": "us",
                            "type": "string",
                            "x-enum-varnames": [
                              "US",
                              "EU",
                              "CUSTOM"
                            ]
                          }
                        },
                        "required": [
                          "name",
                          "opsgenie_api_key",
                          "region"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "opsgenie-service",
                        "description": "Opsgenie service resource type.",
                        "enum": [
                          "opsgenie-service"
                        ],
                        "example": "opsgenie-service",
                        "type": "string",
                        "x-enum-varnames": [
                          "OPSGENIE_SERVICE"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Opsgenie service payload",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response of an Opsgenie service.",
                  "properties": {
                    "data": {
                      "description": "Opsgenie service data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes from an Opsgenie service response.",
                          "properties": {
                            "custom_url": {
                              "description": "The custom URL for a custom region.",
                              "example": null,
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for the Opsgenie service.",
                              "example": "fake-opsgenie-service-name",
                              "type": "string"
                            },
                            "region": {
                              "description": "The region for the Opsgenie service.",
                              "enum": [
                                "us",
                                "eu",
                                "custom"
                              ],
                              "example": "us",
                              "type": "string",
                              "x-enum-varnames": [
                                "US",
                                "EU",
                                "CUSTOM"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Opsgenie service.",
                          "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                          "type": "string"
                        },
                        "type": {
                          "default": "opsgenie-service",
                          "description": "Opsgenie service resource type.",
                          "enum": [
                            "opsgenie-service"
                          ],
                          "example": "opsgenie-service",
                          "type": "string",
                          "x-enum-varnames": [
                            "OPSGENIE_SERVICE"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create a new service object",
        "tags": [
          "Opsgenie Integration"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "opsgenie_service": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\",\n      \"opsgenie_api_key\": \"00000000-0000-0000-0000-000000000000\",\n      \"region\": \"us\"\n     },\n     \"type\": \"opsgenie-service\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"opsgenie_service\" in the system"
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteOpsgenieService",
          "parameters": [
            {
              "name": "integration_service_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/integration/opsgenie/services/{integration_service_id}": {
      "delete": {
        "description": "Delete a single service object in the Datadog Opsgenie integration.",
        "operationId": "DeleteOpsgenieService",
        "parameters": [
          {
            "description": "The UUID of the service.",
            "in": "path",
            "name": "integration_service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete a single service object",
        "tags": [
          "Opsgenie Integration"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a single service from the Datadog Opsgenie integration.",
        "operationId": "GetOpsgenieService",
        "parameters": [
          {
            "description": "The UUID of the service.",
            "in": "path",
            "name": "integration_service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response of an Opsgenie service.",
                  "properties": {
                    "data": {
                      "description": "Opsgenie service data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes from an Opsgenie service response.",
                          "properties": {
                            "custom_url": {
                              "description": "The custom URL for a custom region.",
                              "example": null,
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for the Opsgenie service.",
                              "example": "fake-opsgenie-service-name",
                              "type": "string"
                            },
                            "region": {
                              "description": "The region for the Opsgenie service.",
                              "enum": [
                                "us",
                                "eu",
                                "custom"
                              ],
                              "example": "us",
                              "type": "string",
                              "x-enum-varnames": [
                                "US",
                                "EU",
                                "CUSTOM"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Opsgenie service.",
                          "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                          "type": "string"
                        },
                        "type": {
                          "default": "opsgenie-service",
                          "description": "Opsgenie service resource type.",
                          "enum": [
                            "opsgenie-service"
                          ],
                          "example": "opsgenie-service",
                          "type": "string",
                          "x-enum-varnames": [
                            "OPSGENIE_SERVICE"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get a single service object",
        "tags": [
          "Opsgenie Integration"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update a single service object in the Datadog Opsgenie integration.",
        "operationId": "UpdateOpsgenieService",
        "parameters": [
          {
            "description": "The UUID of the service.",
            "in": "path",
            "name": "integration_service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request for an Opsgenie service.",
                "properties": {
                  "data": {
                    "description": "Opsgenie service for an update request.",
                    "properties": {
                      "attributes": {
                        "description": "The Opsgenie service attributes for an update request.",
                        "properties": {
                          "custom_url": {
                            "description": "The custom URL for a custom region.",
                            "example": "https://example.com",
                            "nullable": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "The name for the Opsgenie service.",
                            "example": "fake-opsgenie-service-name",
                            "type": "string"
                          },
                          "opsgenie_api_key": {
                            "description": "The Opsgenie API key for your Opsgenie service.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "region": {
                            "description": "The region for the Opsgenie service.",
                            "enum": [
                              "us",
                              "eu",
                              "custom"
                            ],
                            "example": "us",
                            "type": "string",
                            "x-enum-varnames": [
                              "US",
                              "EU",
                              "CUSTOM"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "The ID of the Opsgenie service.",
                        "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                        "type": "string"
                      },
                      "type": {
                        "default": "opsgenie-service",
                        "description": "Opsgenie service resource type.",
                        "enum": [
                          "opsgenie-service"
                        ],
                        "example": "opsgenie-service",
                        "type": "string",
                        "x-enum-varnames": [
                          "OPSGENIE_SERVICE"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Opsgenie service payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response of an Opsgenie service.",
                  "properties": {
                    "data": {
                      "description": "Opsgenie service data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes from an Opsgenie service response.",
                          "properties": {
                            "custom_url": {
                              "description": "The custom URL for a custom region.",
                              "example": null,
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for the Opsgenie service.",
                              "example": "fake-opsgenie-service-name",
                              "type": "string"
                            },
                            "region": {
                              "description": "The region for the Opsgenie service.",
                              "enum": [
                                "us",
                                "eu",
                                "custom"
                              ],
                              "example": "us",
                              "type": "string",
                              "x-enum-varnames": [
                                "US",
                                "EU",
                                "CUSTOM"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Opsgenie service.",
                          "example": "596da4af-0563-4097-90ff-07230c3f9db3",
                          "type": "string"
                        },
                        "type": {
                          "default": "opsgenie-service",
                          "description": "Opsgenie service resource type.",
                          "enum": [
                            "opsgenie-service"
                          ],
                          "example": "opsgenie-service",
                          "type": "string",
                          "x-enum-varnames": [
                            "OPSGENIE_SERVICE"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update a single service object",
        "tags": [
          "Opsgenie Integration"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/logs": {
      "post": {
        "description": "Send your logs to your Datadog platform over HTTP. Limits per HTTP request are:\n\n- Maximum content size per payload (uncompressed): 5MB\n- Maximum size for a single log: 1MB\n- Maximum array size if sending multiple logs in an array: 1000 entries\n\nAny log exceeding 1MB is accepted and truncated by Datadog:\n- For a single log request, the API truncates the log at 1MB and returns a 2xx.\n- For a multi-logs request, the API processes all logs, truncates only logs larger than 1MB, and returns a 2xx.\n\nDatadog recommends sending your logs compressed.\nAdd the `Content-Encoding: gzip` header to the request when sending compressed logs.\n\nThe status codes answered by the HTTP API are:\n- 202: Accepted: the request has been accepted for processing\n- 400: Bad request (likely an issue in the payload formatting)\n- 401: Unauthorized (likely a missing API Key)\n- 403: Permission issue (likely using an invalid API Key)\n- 408: Request Timeout, request should be retried after some time\n- 413: Payload too large (batch is above 5MB uncompressed)\n- 429: Too Many Requests, request should be retried after some time\n- 500: Internal Server Error, the server encountered an unexpected condition that prevented it from fulfilling the request, request should be retried after some time\n- 503: Service Unavailable, the server is not ready to handle the request probably because it is overloaded, request should be retried after some time",
        "operationId": "SubmitLog",
        "parameters": [
          {
            "description": "HTTP header used to compress the media-type.",
            "in": "header",
            "name": "Content-Encoding",
            "required": false,
            "schema": {
              "description": "HTTP header used to compress the media-type.",
              "enum": [
                "gzip",
                "deflate"
              ],
              "type": "string",
              "x-enum-varnames": [
                "GZIP",
                "DEFLATE"
              ]
            }
          },
          {
            "description": "Log tags can be passed as query parameters with `text/plain` content type.",
            "example": "env:prod,user:my-user",
            "in": "query",
            "name": "ddtags",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "multi-json-messages": {
                  "description": "Pass multiple log objects at once.",
                  "summary": "Multi JSON Messages",
                  "value": [
                    {
                      "message": "hello"
                    },
                    {
                      "message": "world"
                    }
                  ]
                },
                "simple-json-message": {
                  "description": "Log attributes can be passed as `key:value` pairs in valid JSON messages.",
                  "summary": "Simple JSON Message",
                  "value": {
                    "ddsource": "agent",
                    "ddtags": "env:prod,user:joe.doe",
                    "hostname": "fa1e1e739d95",
                    "message": "hello world"
                  }
                }
              },
              "schema": {
                "description": "Structured log message.",
                "items": {
                  "additionalProperties": {
                    "description": "Additional log attributes.",
                    "type": "string"
                  },
                  "description": "Logs that are sent over HTTP.",
                  "properties": {
                    "ddsource": {
                      "description": "The integration name associated with your log: the technology from which the log originated.\nWhen it matches an integration name, Datadog automatically installs the corresponding parsers and facets.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
                      "example": "nginx",
                      "type": "string"
                    },
                    "ddtags": {
                      "description": "Tags associated with your logs.",
                      "example": "env:staging,version:5.1",
                      "type": "string"
                    },
                    "hostname": {
                      "description": "The name of the originating host of the log.",
                      "example": "i-012345678",
                      "type": "string"
                    },
                    "message": {
                      "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                      "example": "2019-11-19T14:37:58,995 INFO [process.name][20081] Hello World",
                      "type": "string"
                    },
                    "service": {
                      "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same value when you use both products.\nSee [reserved attributes](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes).",
                      "example": "payment",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "application/logplex-1": {
              "examples": {
                "multi-raw-message": {
                  "description": "Submit log messages.",
                  "summary": "Multi Logplex Messages",
                  "value": "hello\nworld"
                },
                "simple-logplex-message": {
                  "description": "Submit log string.",
                  "summary": "Simple Logplex Message",
                  "value": "hello world"
                }
              },
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "examples": {
                "multi-raw-message": {
                  "description": "Submit log string.",
                  "summary": "Multi Raw Messages",
                  "value": "hello\nworld\n"
                },
                "simple-raw-message": {
                  "description": "Submit log string. Log attributes can be passed as query parameters in the URL. This enables the addition of tags or the source by using the `ddtags` and `ddsource` parameters: `?host=my-hostname&service=my-service&ddsource=my-source&ddtags=env:prod,user:my-user`.",
                  "summary": "Simple Raw Message",
                  "value": "hello world"
                }
              },
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Log to send (JSON format).",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Request accepted for processing (always 202 empty JSON)."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "408": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Request Timeout"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payload Too Large"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invalid query performed.",
                  "properties": {
                    "errors": {
                      "description": "Structured errors.",
                      "items": {
                        "description": "List of errors.",
                        "properties": {
                          "detail": {
                            "description": "Error message.",
                            "example": "Malformed payload",
                            "type": "string"
                          },
                          "status": {
                            "description": "Error code.",
                            "example": "400",
                            "type": "string"
                          },
                          "title": {
                            "description": "Error title.",
                            "example": "Bad Request",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://{subdomain}.{site}",
            "variables": {
              "site": {
                "default": "datadoghq.com",
                "description": "The regional site for customers.",
                "enum": [
                  "datadoghq.com",
                  "us3.datadoghq.com",
                  "us5.datadoghq.com",
                  "datadoghq.eu",
                  "ddog-gov.com"
                ]
              },
              "subdomain": {
                "default": "http-intake.logs",
                "description": "The subdomain where the API is deployed."
              }
            }
          },
          {
            "url": "{protocol}://{name}",
            "variables": {
              "name": {
                "default": "http-intake.logs.datadoghq.com",
                "description": "Full site DNS name."
              },
              "protocol": {
                "default": "https",
                "description": "The protocol for accessing the API."
              }
            }
          },
          {
            "url": "https://{subdomain}.{site}",
            "variables": {
              "site": {
                "default": "datadoghq.com",
                "description": "Any Datadog deployment."
              },
              "subdomain": {
                "default": "http-intake.logs",
                "description": "The subdomain where the API is deployed."
              }
            }
          }
        ],
        "summary": "Send logs",
        "tags": [
          "Logs"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/logs/analytics/aggregate": {
      "post": {
        "description": "The API endpoint to aggregate events into buckets and compute metrics and timeseries.",
        "operationId": "AggregateLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The object sent with the request to retrieve a list of logs from your organization.",
                "properties": {
                  "compute": {
                    "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
                    "items": {
                      "description": "A compute rule to compute metrics or timeseries",
                      "properties": {
                        "aggregation": {
                          "description": "An aggregation function",
                          "enum": [
                            "count",
                            "cardinality",
                            "pc75",
                            "pc90",
                            "pc95",
                            "pc98",
                            "pc99",
                            "sum",
                            "min",
                            "max",
                            "avg",
                            "median"
                          ],
                          "example": "pc90",
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "PERCENTILE_75",
                            "PERCENTILE_90",
                            "PERCENTILE_95",
                            "PERCENTILE_98",
                            "PERCENTILE_99",
                            "SUM",
                            "MIN",
                            "MAX",
                            "AVG",
                            "MEDIAN"
                          ]
                        },
                        "interval": {
                          "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points",
                          "example": "5m",
                          "type": "string"
                        },
                        "metric": {
                          "description": "The metric to use",
                          "example": "@duration",
                          "type": "string"
                        },
                        "type": {
                          "default": "total",
                          "description": "The type of compute",
                          "enum": [
                            "timeseries",
                            "total"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "TIMESERIES",
                            "TOTAL"
                          ]
                        }
                      },
                      "required": [
                        "aggregation"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filter": {
                    "description": "The search and filter query settings",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "indexes": {
                        "default": [
                          "*"
                        ],
                        "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                        "example": [
                          "main",
                          "web"
                        ],
                        "items": {
                          "description": "The name of a log index.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by",
                    "items": {
                      "description": "A group by rule",
                      "properties": {
                        "facet": {
                          "description": "The name of the facet to use (required)",
                          "example": "host",
                          "type": "string"
                        },
                        "histogram": {
                          "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                          "properties": {
                            "interval": {
                              "description": "The bin size of the histogram buckets",
                              "example": 10,
                              "format": "double",
                              "type": "number"
                            },
                            "max": {
                              "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out)",
                              "example": 100,
                              "format": "double",
                              "type": "number"
                            },
                            "min": {
                              "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out)",
                              "example": 50,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "interval",
                            "min",
                            "max"
                          ],
                          "type": "object"
                        },
                        "limit": {
                          "default": 10,
                          "description": "The maximum buckets to return for this group by",
                          "format": "int64",
                          "type": "integer"
                        },
                        "missing": {
                          "description": "The value to use for logs that don't have the facet used to group by",
                          "oneOf": [
                            {
                              "description": "The missing value to use if there is string valued facet.",
                              "type": "string"
                            },
                            {
                              "description": "The missing value to use if there is a number valued facet.",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        },
                        "sort": {
                          "description": "A sort rule",
                          "example": {
                            "aggregation": "count",
                            "order": "asc"
                          },
                          "properties": {
                            "aggregation": {
                              "description": "An aggregation function",
                              "enum": [
                                "count",
                                "cardinality",
                                "pc75",
                                "pc90",
                                "pc95",
                                "pc98",
                                "pc99",
                                "sum",
                                "min",
                                "max",
                                "avg",
                                "median"
                              ],
                              "example": "pc90",
                              "type": "string",
                              "x-enum-varnames": [
                                "COUNT",
                                "CARDINALITY",
                                "PERCENTILE_75",
                                "PERCENTILE_90",
                                "PERCENTILE_95",
                                "PERCENTILE_98",
                                "PERCENTILE_99",
                                "SUM",
                                "MIN",
                                "MAX",
                                "AVG",
                                "MEDIAN"
                              ]
                            },
                            "metric": {
                              "description": "The metric to sort by (only used for `type=measure`)",
                              "example": "@duration",
                              "type": "string"
                            },
                            "order": {
                              "description": "The order to use, ascending or descending",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "example": "asc",
                              "type": "string",
                              "x-enum-varnames": [
                                "ASCENDING",
                                "DESCENDING"
                              ]
                            },
                            "type": {
                              "default": "alphabetical",
                              "description": "The type of sorting algorithm",
                              "enum": [
                                "alphabetical",
                                "measure"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "ALPHABETICAL",
                                "MEASURE"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "default": false,
                          "description": "A resulting object to put the given computes in over all the matching records.",
                          "oneOf": [
                            {
                              "description": "If set to true, creates an additional bucket labeled \"$facet_total\"",
                              "type": "boolean"
                            },
                            {
                              "description": "A string to use as the key value for the total bucket",
                              "type": "string"
                            },
                            {
                              "description": "A number to use as the key value for the total bucket",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        }
                      },
                      "required": [
                        "facet"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
                    "properties": {
                      "timeOffset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging settings",
                    "properties": {
                      "cursor": {
                        "description": "The returned paging point to use to get the next results",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object for the logs aggregate API endpoint",
                  "properties": {
                    "data": {
                      "description": "The query results",
                      "properties": {
                        "buckets": {
                          "description": "The list of matching buckets, one item per bucket",
                          "items": {
                            "description": "A bucket values",
                            "properties": {
                              "by": {
                                "additionalProperties": {
                                  "description": "The values for each group by",
                                  "type": "string"
                                },
                                "description": "The key, value pairs for each group by",
                                "example": {
                                  "@state": "success",
                                  "@version": "abc"
                                },
                                "type": "object"
                              },
                              "computes": {
                                "additionalProperties": {
                                  "description": "A bucket value, can be either a timeseries or a single value",
                                  "oneOf": [
                                    {
                                      "description": "A single string value",
                                      "type": "string"
                                    },
                                    {
                                      "description": "A single number value",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    {
                                      "description": "A timeseries array",
                                      "items": {
                                        "description": "A timeseries point",
                                        "properties": {
                                          "time": {
                                            "description": "The time value for this point",
                                            "example": "2020-06-08T11:55:00Z",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The value for this point",
                                            "example": 19,
                                            "format": "double",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array",
                                      "x-generate-alias-as-model": true
                                    }
                                  ]
                                },
                                "description": "A map of the metric name -> value for regular compute or list of values for a timeseries",
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Aggregate events",
        "tags": [
          "Logs"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/logs/config/archive-order": {
      "get": {
        "description": "Get the current order of your archives.\nThis endpoint takes no JSON arguments.",
        "operationId": "GetLogsArchiveOrder",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A ordered list of archive IDs.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive order.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive order.",
                          "properties": {
                            "archive_ids": {
                              "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                              "example": [
                                "a2zcMylnM4OCHpYusxIi1g",
                                "a2zcMylnM4OCHpYusxIi2g",
                                "a2zcMylnM4OCHpYusxIi3g"
                              ],
                              "items": {
                                "description": "A given archive ID.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "archive_ids"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "archive_order",
                          "description": "Type of the archive order definition.",
                          "enum": [
                            "archive_order"
                          ],
                          "example": "archive_order",
                          "type": "string",
                          "x-enum-varnames": [
                            "ARCHIVE_ORDER"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get archive order",
        "tags": [
          "Logs Archives"
        ],
        "x-menu-order": 9,
        "x-undo": {
          "type": "safe"
        }
      },
      "put": {
        "description": "Update the order of your archives. Since logs are processed sequentially, reordering an archive may change\nthe structure and content of the data processed by other archives.\n\n**Note**: Using the `PUT` method updates your archive's order by replacing the current order\nwith the new one.",
        "operationId": "UpdateLogsArchiveOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "A ordered list of archive IDs.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive order.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive order.",
                        "properties": {
                          "archive_ids": {
                            "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                            "example": [
                              "a2zcMylnM4OCHpYusxIi1g",
                              "a2zcMylnM4OCHpYusxIi2g",
                              "a2zcMylnM4OCHpYusxIi3g"
                            ],
                            "items": {
                              "description": "A given archive ID.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "archive_ids"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archive_order",
                        "description": "Type of the archive order definition.",
                        "enum": [
                          "archive_order"
                        ],
                        "example": "archive_order",
                        "type": "string",
                        "x-enum-varnames": [
                          "ARCHIVE_ORDER"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "An object containing the new ordered list of archive IDs.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A ordered list of archive IDs.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive order.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive order.",
                          "properties": {
                            "archive_ids": {
                              "description": "An ordered array of `<ARCHIVE_ID>` strings, the order of archive IDs in the array\ndefine the overall archives order for Datadog.",
                              "example": [
                                "a2zcMylnM4OCHpYusxIi1g",
                                "a2zcMylnM4OCHpYusxIi2g",
                                "a2zcMylnM4OCHpYusxIi3g"
                              ],
                              "items": {
                                "description": "A given archive ID.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "archive_ids"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "archive_order",
                          "description": "Type of the archive order definition.",
                          "enum": [
                            "archive_order"
                          ],
                          "example": "archive_order",
                          "type": "string",
                          "x-enum-varnames": [
                            "ARCHIVE_ORDER"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "attributes"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update archive order",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 10,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/logs/config/archives": {
      "get": {
        "description": "Get the list of configured logs archives with their definitions.",
        "operationId": "ListLogsArchives",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The available archives.",
                  "properties": {
                    "data": {
                      "description": "A list of archives.",
                      "items": {
                        "description": "The definition of an archive.",
                        "properties": {
                          "attributes": {
                            "description": "The attributes associated with the archive.",
                            "properties": {
                              "destination": {
                                "description": "An archive's destination.",
                                "nullable": true,
                                "oneOf": [
                                  {
                                    "description": "The Azure archive destination.",
                                    "properties": {
                                      "container": {
                                        "description": "The container where the archive will be stored.",
                                        "example": "container-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The Azure archive's integration destination.",
                                        "properties": {
                                          "client_id": {
                                            "description": "A client ID.",
                                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                            "type": "string"
                                          },
                                          "tenant_id": {
                                            "description": "A tenant ID.",
                                            "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "tenant_id",
                                          "client_id"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "region": {
                                        "description": "The region where the archive will be stored.",
                                        "type": "string"
                                      },
                                      "storage_account": {
                                        "description": "The associated storage account.",
                                        "example": "account-name",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "azure",
                                        "description": "Type of the Azure archive destination.",
                                        "enum": [
                                          "azure"
                                        ],
                                        "example": "azure",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "AZURE"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "storage_account",
                                      "container",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The GCS archive destination.",
                                    "properties": {
                                      "bucket": {
                                        "description": "The bucket where the archive will be stored.",
                                        "example": "bucket-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The GCS archive's integration destination.",
                                        "properties": {
                                          "client_email": {
                                            "description": "A client email.",
                                            "example": "youremail@example.com",
                                            "type": "string"
                                          },
                                          "project_id": {
                                            "description": "A project ID.",
                                            "example": "project-id",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "project_id",
                                          "client_email"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "gcs",
                                        "description": "Type of the GCS archive destination.",
                                        "enum": [
                                          "gcs"
                                        ],
                                        "example": "gcs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "GCS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "bucket",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  {
                                    "description": "The S3 archive destination.",
                                    "properties": {
                                      "bucket": {
                                        "description": "The bucket where the archive will be stored.",
                                        "example": "bucket-name",
                                        "type": "string"
                                      },
                                      "integration": {
                                        "description": "The S3 Archive's integration destination.",
                                        "properties": {
                                          "account_id": {
                                            "description": "The account ID for the integration.",
                                            "example": "123456789012",
                                            "type": "string"
                                          },
                                          "role_name": {
                                            "description": "The path of the integration.",
                                            "example": "role-name",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "role_name",
                                          "account_id"
                                        ],
                                        "type": "object"
                                      },
                                      "path": {
                                        "description": "The archive path.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "s3",
                                        "description": "Type of the S3 archive destination.",
                                        "enum": [
                                          "s3"
                                        ],
                                        "example": "s3",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "S3"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "bucket",
                                      "integration",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                ],
                                "required": [
                                  "type",
                                  "integration"
                                ],
                                "type": "object"
                              },
                              "include_tags": {
                                "default": false,
                                "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                                "example": false,
                                "type": "boolean"
                              },
                              "name": {
                                "description": "The archive name.",
                                "example": "Nginx Archive",
                                "type": "string"
                              },
                              "query": {
                                "description": "The archive query/filter. Logs matching this query are included in the archive.",
                                "example": "source:nginx",
                                "type": "string"
                              },
                              "rehydration_max_scan_size_in_gb": {
                                "description": "Maximum scan size for rehydration from this archive.",
                                "example": 100,
                                "format": "int64",
                                "nullable": true,
                                "type": "integer"
                              },
                              "rehydration_tags": {
                                "description": "An array of tags to add to rehydrated logs from an archive.",
                                "example": [
                                  "team:intake",
                                  "team:app"
                                ],
                                "items": {
                                  "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "state": {
                                "description": "The state of the archive.",
                                "enum": [
                                  "UNKNOWN",
                                  "WORKING",
                                  "FAILING",
                                  "WORKING_AUTH_LEGACY"
                                ],
                                "example": "WORKING",
                                "type": "string",
                                "x-enum-varnames": [
                                  "UNKNOWN",
                                  "WORKING",
                                  "FAILING",
                                  "WORKING_AUTH_LEGACY"
                                ]
                              }
                            },
                            "required": [
                              "name",
                              "query",
                              "destination"
                            ],
                            "type": "object"
                          },
                          "id": {
                            "description": "The archive ID.",
                            "example": "a2zcMylnM4OCHpYusxIi3g",
                            "readOnly": true,
                            "type": "string"
                          },
                          "type": {
                            "default": "archives",
                            "description": "The type of the resource. The value should always be archives.",
                            "example": "archives",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get all archives",
        "tags": [
          "Logs Archives"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create an archive in your organization.",
        "operationId": "CreateLogsArchive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The logs archive.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive.",
                        "properties": {
                          "destination": {
                            "description": "An archive's destination.",
                            "oneOf": [
                              {
                                "description": "The Azure archive destination.",
                                "properties": {
                                  "container": {
                                    "description": "The container where the archive will be stored.",
                                    "example": "container-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The Azure archive's integration destination.",
                                    "properties": {
                                      "client_id": {
                                        "description": "A client ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      },
                                      "tenant_id": {
                                        "description": "A tenant ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "tenant_id",
                                      "client_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "region": {
                                    "description": "The region where the archive will be stored.",
                                    "type": "string"
                                  },
                                  "storage_account": {
                                    "description": "The associated storage account.",
                                    "example": "account-name",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "azure",
                                    "description": "Type of the Azure archive destination.",
                                    "enum": [
                                      "azure"
                                    ],
                                    "example": "azure",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AZURE"
                                    ]
                                  }
                                },
                                "required": [
                                  "storage_account",
                                  "container",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The GCS archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The GCS archive's integration destination.",
                                    "properties": {
                                      "client_email": {
                                        "description": "A client email.",
                                        "example": "youremail@example.com",
                                        "type": "string"
                                      },
                                      "project_id": {
                                        "description": "A project ID.",
                                        "example": "project-id",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "project_id",
                                      "client_email"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "gcs",
                                    "description": "Type of the GCS archive destination.",
                                    "enum": [
                                      "gcs"
                                    ],
                                    "example": "gcs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "GCS"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The S3 archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The S3 Archive's integration destination.",
                                    "properties": {
                                      "account_id": {
                                        "description": "The account ID for the integration.",
                                        "example": "123456789012",
                                        "type": "string"
                                      },
                                      "role_name": {
                                        "description": "The path of the integration.",
                                        "example": "role-name",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "role_name",
                                      "account_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "s3",
                                    "description": "Type of the S3 archive destination.",
                                    "enum": [
                                      "s3"
                                    ],
                                    "example": "s3",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "S3"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              }
                            ],
                            "required": [
                              "type",
                              "integration"
                            ],
                            "type": "object"
                          },
                          "include_tags": {
                            "default": false,
                            "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                            "example": false,
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The archive name.",
                            "example": "Nginx Archive",
                            "type": "string"
                          },
                          "query": {
                            "description": "The archive query/filter. Logs matching this query are included in the archive.",
                            "example": "source:nginx",
                            "type": "string"
                          },
                          "rehydration_max_scan_size_in_gb": {
                            "description": "Maximum scan size for rehydration from this archive.",
                            "example": 100,
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          },
                          "rehydration_tags": {
                            "description": "An array of tags to add to rehydrated logs from an archive.",
                            "example": [
                              "team:intake",
                              "team:app"
                            ],
                            "items": {
                              "description": "A given tag in the `<KEY>:<VALUE>` format.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name",
                          "query",
                          "destination"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archives",
                        "description": "The type of the resource. The value should always be archives.",
                        "example": "archives",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The definition of the new archive.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "include_tags": {
                              "default": false,
                              "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_max_scan_size_in_gb": {
                              "description": "Maximum scan size for rehydration from this archive.",
                              "example": 100,
                              "format": "int64",
                              "nullable": true,
                              "type": "integer"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteLogsArchive",
          "parameters": [
            {
              "name": "archive_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/logs/config/archives/{archive_id}": {
      "delete": {
        "description": "Delete a given archive from your organization.",
        "operationId": "DeleteLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a specific archive from your organization.",
        "operationId": "GetLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "include_tags": {
                              "default": false,
                              "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_max_scan_size_in_gb": {
                              "description": "Maximum scan size for rehydration from this archive.",
                              "example": 100,
                              "format": "int64",
                              "nullable": true,
                              "type": "integer"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "put": {
        "description": "Update a given archive configuration.\n\n**Note**: Using this method updates your archive configuration by **replacing**\nyour current configuration with the new one sent to your Datadog organization.",
        "operationId": "UpdateLogsArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The logs archive.",
                "properties": {
                  "data": {
                    "description": "The definition of an archive.",
                    "properties": {
                      "attributes": {
                        "description": "The attributes associated with the archive.",
                        "properties": {
                          "destination": {
                            "description": "An archive's destination.",
                            "oneOf": [
                              {
                                "description": "The Azure archive destination.",
                                "properties": {
                                  "container": {
                                    "description": "The container where the archive will be stored.",
                                    "example": "container-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The Azure archive's integration destination.",
                                    "properties": {
                                      "client_id": {
                                        "description": "A client ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      },
                                      "tenant_id": {
                                        "description": "A tenant ID.",
                                        "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "tenant_id",
                                      "client_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "region": {
                                    "description": "The region where the archive will be stored.",
                                    "type": "string"
                                  },
                                  "storage_account": {
                                    "description": "The associated storage account.",
                                    "example": "account-name",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "azure",
                                    "description": "Type of the Azure archive destination.",
                                    "enum": [
                                      "azure"
                                    ],
                                    "example": "azure",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AZURE"
                                    ]
                                  }
                                },
                                "required": [
                                  "storage_account",
                                  "container",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The GCS archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The GCS archive's integration destination.",
                                    "properties": {
                                      "client_email": {
                                        "description": "A client email.",
                                        "example": "youremail@example.com",
                                        "type": "string"
                                      },
                                      "project_id": {
                                        "description": "A project ID.",
                                        "example": "project-id",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "project_id",
                                      "client_email"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "gcs",
                                    "description": "Type of the GCS archive destination.",
                                    "enum": [
                                      "gcs"
                                    ],
                                    "example": "gcs",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "GCS"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "The S3 archive destination.",
                                "properties": {
                                  "bucket": {
                                    "description": "The bucket where the archive will be stored.",
                                    "example": "bucket-name",
                                    "type": "string"
                                  },
                                  "integration": {
                                    "description": "The S3 Archive's integration destination.",
                                    "properties": {
                                      "account_id": {
                                        "description": "The account ID for the integration.",
                                        "example": "123456789012",
                                        "type": "string"
                                      },
                                      "role_name": {
                                        "description": "The path of the integration.",
                                        "example": "role-name",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "role_name",
                                      "account_id"
                                    ],
                                    "type": "object"
                                  },
                                  "path": {
                                    "description": "The archive path.",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "s3",
                                    "description": "Type of the S3 archive destination.",
                                    "enum": [
                                      "s3"
                                    ],
                                    "example": "s3",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "S3"
                                    ]
                                  }
                                },
                                "required": [
                                  "bucket",
                                  "integration",
                                  "type"
                                ],
                                "type": "object"
                              }
                            ],
                            "required": [
                              "type",
                              "integration"
                            ],
                            "type": "object"
                          },
                          "include_tags": {
                            "default": false,
                            "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                            "example": false,
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The archive name.",
                            "example": "Nginx Archive",
                            "type": "string"
                          },
                          "query": {
                            "description": "The archive query/filter. Logs matching this query are included in the archive.",
                            "example": "source:nginx",
                            "type": "string"
                          },
                          "rehydration_max_scan_size_in_gb": {
                            "description": "Maximum scan size for rehydration from this archive.",
                            "example": 100,
                            "format": "int64",
                            "nullable": true,
                            "type": "integer"
                          },
                          "rehydration_tags": {
                            "description": "An array of tags to add to rehydrated logs from an archive.",
                            "example": [
                              "team:intake",
                              "team:app"
                            ],
                            "items": {
                              "description": "A given tag in the `<KEY>:<VALUE>` format.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "name",
                          "query",
                          "destination"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "archives",
                        "description": "The type of the resource. The value should always be archives.",
                        "example": "archives",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New definition of the archive.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The logs archive.",
                  "properties": {
                    "data": {
                      "description": "The definition of an archive.",
                      "properties": {
                        "attributes": {
                          "description": "The attributes associated with the archive.",
                          "properties": {
                            "destination": {
                              "description": "An archive's destination.",
                              "nullable": true,
                              "oneOf": [
                                {
                                  "description": "The Azure archive destination.",
                                  "properties": {
                                    "container": {
                                      "description": "The container where the archive will be stored.",
                                      "example": "container-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The Azure archive's integration destination.",
                                      "properties": {
                                        "client_id": {
                                          "description": "A client ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        },
                                        "tenant_id": {
                                          "description": "A tenant ID.",
                                          "example": "aaaaaaaa-1a1a-1a1a-1a1a-aaaaaaaaaaaa",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "tenant_id",
                                        "client_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "region": {
                                      "description": "The region where the archive will be stored.",
                                      "type": "string"
                                    },
                                    "storage_account": {
                                      "description": "The associated storage account.",
                                      "example": "account-name",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "azure",
                                      "description": "Type of the Azure archive destination.",
                                      "enum": [
                                        "azure"
                                      ],
                                      "example": "azure",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "AZURE"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "storage_account",
                                    "container",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The GCS archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The GCS archive's integration destination.",
                                      "properties": {
                                        "client_email": {
                                          "description": "A client email.",
                                          "example": "youremail@example.com",
                                          "type": "string"
                                        },
                                        "project_id": {
                                          "description": "A project ID.",
                                          "example": "project-id",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "project_id",
                                        "client_email"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "gcs",
                                      "description": "Type of the GCS archive destination.",
                                      "enum": [
                                        "gcs"
                                      ],
                                      "example": "gcs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "GCS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                {
                                  "description": "The S3 archive destination.",
                                  "properties": {
                                    "bucket": {
                                      "description": "The bucket where the archive will be stored.",
                                      "example": "bucket-name",
                                      "type": "string"
                                    },
                                    "integration": {
                                      "description": "The S3 Archive's integration destination.",
                                      "properties": {
                                        "account_id": {
                                          "description": "The account ID for the integration.",
                                          "example": "123456789012",
                                          "type": "string"
                                        },
                                        "role_name": {
                                          "description": "The path of the integration.",
                                          "example": "role-name",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "role_name",
                                        "account_id"
                                      ],
                                      "type": "object"
                                    },
                                    "path": {
                                      "description": "The archive path.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "s3",
                                      "description": "Type of the S3 archive destination.",
                                      "enum": [
                                        "s3"
                                      ],
                                      "example": "s3",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "S3"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "bucket",
                                    "integration",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              ],
                              "required": [
                                "type",
                                "integration"
                              ],
                              "type": "object"
                            },
                            "include_tags": {
                              "default": false,
                              "description": "To store the tags in the archive, set the value \"true\".\nIf it is set to \"false\", the tags will be deleted when the logs are sent to the archive.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The archive name.",
                              "example": "Nginx Archive",
                              "type": "string"
                            },
                            "query": {
                              "description": "The archive query/filter. Logs matching this query are included in the archive.",
                              "example": "source:nginx",
                              "type": "string"
                            },
                            "rehydration_max_scan_size_in_gb": {
                              "description": "Maximum scan size for rehydration from this archive.",
                              "example": 100,
                              "format": "int64",
                              "nullable": true,
                              "type": "integer"
                            },
                            "rehydration_tags": {
                              "description": "An array of tags to add to rehydrated logs from an archive.",
                              "example": [
                                "team:intake",
                                "team:app"
                              ],
                              "items": {
                                "description": "A given tag in the `<KEY>:<VALUE>` format.",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The state of the archive.",
                              "enum": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ],
                              "example": "WORKING",
                              "type": "string",
                              "x-enum-varnames": [
                                "UNKNOWN",
                                "WORKING",
                                "FAILING",
                                "WORKING_AUTH_LEGACY"
                              ]
                            }
                          },
                          "required": [
                            "name",
                            "query",
                            "destination"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The archive ID.",
                          "example": "a2zcMylnM4OCHpYusxIi3g",
                          "readOnly": true,
                          "type": "string"
                        },
                        "type": {
                          "default": "archives",
                          "description": "The type of the resource. The value should always be archives.",
                          "example": "archives",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/logs/config/archives/{archive_id}/readers": {
      "delete": {
        "description": "Removes a role from an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))",
        "operationId": "RemoveRoleFromArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Revoke role from an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 8,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Returns all read roles a given archive is restricted to.",
        "operationId": "ListArchiveReadRoles",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple roles.",
                  "properties": {
                    "data": {
                      "description": "Array of returned roles.",
                      "items": {
                        "description": "Role object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the role.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last role modification.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                "type": "string"
                              },
                              "user_count": {
                                "description": "Number of users with that role.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique identifier of the role.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the role object returned by the API.",
                            "properties": {
                              "permissions": {
                                "description": "Relationship to multiple permissions objects.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to permission objects.",
                                    "items": {
                                      "description": "Relationship to permission object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the permission.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "permissions",
                                          "description": "Permissions resource type.",
                                          "enum": [
                                            "permissions"
                                          ],
                                          "example": "permissions",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "PERMISSIONS"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List read roles for an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Adds a read role to an archive. ([Roles API](https://docs.datadoghq.com/api/v2/roles/))",
        "operationId": "AddReadRoleToArchive",
        "parameters": [
          {
            "description": "The ID of the archive.",
            "in": "path",
            "name": "archive_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Grant role to an archive",
        "tags": [
          "Logs Archives"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 7,
        "x-undo": {
          "type": "unsafe"
        }
      }
    },
    "/api/v2/logs/config/metrics": {
      "get": {
        "description": "Get the list of configured log-based metrics with their definitions.",
        "operationId": "ListLogsMetrics",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "All the available log-based metric objects.",
                  "properties": {
                    "data": {
                      "description": "A list of log-based metric objects.",
                      "items": {
                        "description": "The log-based metric properties.",
                        "properties": {
                          "attributes": {
                            "description": "The object describing a Datadog log-based metric.",
                            "properties": {
                              "compute": {
                                "description": "The compute rule to compute the log-based metric.",
                                "properties": {
                                  "aggregation_type": {
                                    "description": "The type of aggregation to use.",
                                    "enum": [
                                      "count",
                                      "distribution"
                                    ],
                                    "example": "distribution",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "COUNT",
                                      "DISTRIBUTION"
                                    ]
                                  },
                                  "path": {
                                    "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                                    "example": "@duration",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "filter": {
                                "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                                "properties": {
                                  "query": {
                                    "description": "The search query - following the log search syntax.",
                                    "example": "service:web* AND @http.status_code:[200 TO 299]",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "group_by": {
                                "description": "The rules for the group by.",
                                "items": {
                                  "description": "A group by rule.",
                                  "properties": {
                                    "path": {
                                      "description": "The path to the value the log-based metric will be aggregated over.",
                                      "example": "@http.status_code",
                                      "type": "string"
                                    },
                                    "tag_name": {
                                      "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                      "example": "status_code",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The name of the log-based metric.",
                            "example": "logs.page.load.count",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_metrics",
                            "description": "The type of the resource. The value should always be logs_metrics.",
                            "enum": [
                              "logs_metrics"
                            ],
                            "example": "logs_metrics",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOGS_METRICS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get all log-based metrics",
        "tags": [
          "Logs Metrics"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a metric based on your ingested logs in your organization.\nReturns the log-based metric object from the request body when the request is successful.",
        "operationId": "CreateLogsMetric",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The new log-based metric body.",
                "properties": {
                  "data": {
                    "description": "The new log-based metric properties.",
                    "properties": {
                      "attributes": {
                        "description": "The object describing the Datadog log-based metric to create.",
                        "properties": {
                          "compute": {
                            "description": "The compute rule to compute the log-based metric.",
                            "properties": {
                              "aggregation_type": {
                                "description": "The type of aggregation to use.",
                                "enum": [
                                  "count",
                                  "distribution"
                                ],
                                "example": "distribution",
                                "type": "string",
                                "x-enum-varnames": [
                                  "COUNT",
                                  "DISTRIBUTION"
                                ]
                              },
                              "path": {
                                "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                                "example": "@duration",
                                "type": "string"
                              }
                            },
                            "required": [
                              "aggregation_type"
                            ],
                            "type": "object"
                          },
                          "filter": {
                            "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                            "properties": {
                              "query": {
                                "default": "*",
                                "description": "The search query - following the log search syntax.",
                                "example": "service:web* AND @http.status_code:[200 TO 299]",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "group_by": {
                            "description": "The rules for the group by.",
                            "items": {
                              "description": "A group by rule.",
                              "properties": {
                                "path": {
                                  "description": "The path to the value the log-based metric will be aggregated over.",
                                  "example": "@http.status_code",
                                  "type": "string"
                                },
                                "tag_name": {
                                  "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                  "example": "status_code",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "path"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "compute"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The name of the log-based metric.",
                        "example": "logs.page.load.count",
                        "type": "string"
                      },
                      "type": {
                        "default": "logs_metrics",
                        "description": "The type of the resource. The value should always be logs_metrics.",
                        "enum": [
                          "logs_metrics"
                        ],
                        "example": "logs_metrics",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_METRICS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "The definition of the new log-based metric.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The log-based metric object.",
                  "properties": {
                    "data": {
                      "description": "The log-based metric properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a Datadog log-based metric.",
                          "properties": {
                            "compute": {
                              "description": "The compute rule to compute the log-based metric.",
                              "properties": {
                                "aggregation_type": {
                                  "description": "The type of aggregation to use.",
                                  "enum": [
                                    "count",
                                    "distribution"
                                  ],
                                  "example": "distribution",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "COUNT",
                                    "DISTRIBUTION"
                                  ]
                                },
                                "path": {
                                  "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                                  "example": "@duration",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "filter": {
                              "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                              "properties": {
                                "query": {
                                  "description": "The search query - following the log search syntax.",
                                  "example": "service:web* AND @http.status_code:[200 TO 299]",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "group_by": {
                              "description": "The rules for the group by.",
                              "items": {
                                "description": "A group by rule.",
                                "properties": {
                                  "path": {
                                    "description": "The path to the value the log-based metric will be aggregated over.",
                                    "example": "@http.status_code",
                                    "type": "string"
                                  },
                                  "tag_name": {
                                    "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                    "example": "status_code",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The name of the log-based metric.",
                          "example": "logs.page.load.count",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_metrics",
                          "description": "The type of the resource. The value should always be logs_metrics.",
                          "enum": [
                            "logs_metrics"
                          ],
                          "example": "logs_metrics",
                          "type": "string",
                          "x-enum-varnames": [
                            "LOGS_METRICS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create a log-based metric",
        "tags": [
          "Logs Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "logs_metric": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"id\": \"{{ unique }}\",\n    \"attributes\": {\n      \"filter\": {\n        \"query\": \"source:{{ unique }}\"\n      },\n      \"compute\": {\n        \"aggregation_type\": \"count\"\n      }\n    },\n    \"type\": \"logs_metrics\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"logs_metric\" in the system"
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteLogsMetric",
          "parameters": [
            {
              "name": "metric_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/logs/config/metrics/{metric_id}": {
      "delete": {
        "description": "Delete a specific log-based metric from your organization.",
        "operationId": "DeleteLogsMetric",
        "parameters": [
          {
            "description": "The name of the log-based metric.",
            "in": "path",
            "name": "metric_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete a log-based metric",
        "tags": [
          "Logs Metrics"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a specific log-based metric from your organization.",
        "operationId": "GetLogsMetric",
        "parameters": [
          {
            "description": "The name of the log-based metric.",
            "in": "path",
            "name": "metric_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The log-based metric object.",
                  "properties": {
                    "data": {
                      "description": "The log-based metric properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a Datadog log-based metric.",
                          "properties": {
                            "compute": {
                              "description": "The compute rule to compute the log-based metric.",
                              "properties": {
                                "aggregation_type": {
                                  "description": "The type of aggregation to use.",
                                  "enum": [
                                    "count",
                                    "distribution"
                                  ],
                                  "example": "distribution",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "COUNT",
                                    "DISTRIBUTION"
                                  ]
                                },
                                "path": {
                                  "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                                  "example": "@duration",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "filter": {
                              "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                              "properties": {
                                "query": {
                                  "description": "The search query - following the log search syntax.",
                                  "example": "service:web* AND @http.status_code:[200 TO 299]",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "group_by": {
                              "description": "The rules for the group by.",
                              "items": {
                                "description": "A group by rule.",
                                "properties": {
                                  "path": {
                                    "description": "The path to the value the log-based metric will be aggregated over.",
                                    "example": "@http.status_code",
                                    "type": "string"
                                  },
                                  "tag_name": {
                                    "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                    "example": "status_code",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The name of the log-based metric.",
                          "example": "logs.page.load.count",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_metrics",
                          "description": "The type of the resource. The value should always be logs_metrics.",
                          "enum": [
                            "logs_metrics"
                          ],
                          "example": "logs_metrics",
                          "type": "string",
                          "x-enum-varnames": [
                            "LOGS_METRICS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a log-based metric",
        "tags": [
          "Logs Metrics"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update a specific log-based metric from your organization.\nReturns the log-based metric object from the request body when the request is successful.",
        "operationId": "UpdateLogsMetric",
        "parameters": [
          {
            "description": "The name of the log-based metric.",
            "in": "path",
            "name": "metric_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The new log-based metric body.",
                "properties": {
                  "data": {
                    "description": "The new log-based metric properties.",
                    "properties": {
                      "attributes": {
                        "description": "The log-based metric properties that will be updated.",
                        "properties": {
                          "filter": {
                            "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                            "properties": {
                              "query": {
                                "default": "*",
                                "description": "The search query - following the log search syntax.",
                                "example": "service:web* AND @http.status_code:[200 TO 299]",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "group_by": {
                            "description": "The rules for the group by.",
                            "items": {
                              "description": "A group by rule.",
                              "properties": {
                                "path": {
                                  "description": "The path to the value the log-based metric will be aggregated over.",
                                  "example": "@http.status_code",
                                  "type": "string"
                                },
                                "tag_name": {
                                  "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                  "example": "status_code",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "path"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "logs_metrics",
                        "description": "The type of the resource. The value should always be logs_metrics.",
                        "enum": [
                          "logs_metrics"
                        ],
                        "example": "logs_metrics",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_METRICS"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "New definition of the log-based metric.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The log-based metric object.",
                  "properties": {
                    "data": {
                      "description": "The log-based metric properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a Datadog log-based metric.",
                          "properties": {
                            "compute": {
                              "description": "The compute rule to compute the log-based metric.",
                              "properties": {
                                "aggregation_type": {
                                  "description": "The type of aggregation to use.",
                                  "enum": [
                                    "count",
                                    "distribution"
                                  ],
                                  "example": "distribution",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "COUNT",
                                    "DISTRIBUTION"
                                  ]
                                },
                                "path": {
                                  "description": "The path to the value the log-based metric will aggregate on (only used if the aggregation type is a \"distribution\").",
                                  "example": "@duration",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "filter": {
                              "description": "The log-based metric filter. Logs matching this filter will be aggregated in this metric.",
                              "properties": {
                                "query": {
                                  "description": "The search query - following the log search syntax.",
                                  "example": "service:web* AND @http.status_code:[200 TO 299]",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "group_by": {
                              "description": "The rules for the group by.",
                              "items": {
                                "description": "A group by rule.",
                                "properties": {
                                  "path": {
                                    "description": "The path to the value the log-based metric will be aggregated over.",
                                    "example": "@http.status_code",
                                    "type": "string"
                                  },
                                  "tag_name": {
                                    "description": "Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.",
                                    "example": "status_code",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The name of the log-based metric.",
                          "example": "logs.page.load.count",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_metrics",
                          "description": "The type of the resource. The value should always be logs_metrics.",
                          "enum": [
                            "logs_metrics"
                          ],
                          "example": "logs_metrics",
                          "type": "string",
                          "x-enum-varnames": [
                            "LOGS_METRICS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update a log-based metric",
        "tags": [
          "Logs Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/logs/config/restriction_queries": {
      "get": {
        "description": "Returns all restriction queries, including their names and IDs.",
        "operationId": "ListRestrictionQueries",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List restriction queries",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Create a new restriction query for your organization.",
        "operationId": "CreateRestrictionQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a restriction query.",
                "properties": {
                  "data": {
                    "description": "Data related to the creation of a restriction query.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created restriction query.",
                        "properties": {
                          "restriction_query": {
                            "description": "The restriction query.",
                            "example": "env:sandbox",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "logs_restriction_queries",
                        "description": "Restriction query resource type.",
                        "enum": [
                          "logs_restriction_queries"
                        ],
                        "example": "logs_restriction_queries",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_RESTRICTION_QUERIES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction queries type.",
                          "example": "logs_restriction_queries",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Create a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteRestrictionQuery",
          "parameters": [
            {
              "name": "restriction_query_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/role/{role_id}": {
      "get": {
        "description": "Get restriction query for a given role.",
        "operationId": "GetRoleRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get restriction query for a given role",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-menu-order": 10,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/user/{user_id}": {
      "get": {
        "description": "Get all restriction queries for a given user.",
        "operationId": "ListUserRestrictionQueries",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple restriction queries.",
                  "properties": {
                    "data": {
                      "description": "Array of returned restriction queries.",
                      "items": {
                        "description": "Restriction query object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the restriction query.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the restriction query.",
                                "example": "2020-03-17T21:06:44.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last restriction query modification.",
                                "example": "2020-03-17T21:15:15.000Z",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "restriction_query": {
                                "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                                "example": "env:sandbox",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the restriction query.",
                            "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                            "type": "string"
                          },
                          "type": {
                            "default": "logs_restriction_queries",
                            "description": "Restriction queries type.",
                            "example": "logs_restriction_queries",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get all restriction queries for a given user",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-menu-order": 9,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/{restriction_query_id}": {
      "delete": {
        "description": "Deletes a restriction query.",
        "operationId": "DeleteRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Delete a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get a restriction query in the organization specified by the restriction query's `restriction_query_id`.",
        "operationId": "GetRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the restriction query object.",
                          "properties": {
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction query resource type.",
                          "enum": [
                            "logs_restriction_queries"
                          ],
                          "example": "logs_restriction_queries",
                          "type": "string",
                          "x-enum-varnames": [
                            "LOGS_RESTRICTION_QUERIES"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the restriction query.",
                      "items": {
                        "description": "An object related to a restriction query.",
                        "discriminator": {
                          "mapping": {
                            "roles": "#/components/schemas/RestrictionQueryRole"
                          },
                          "propertyName": "type"
                        },
                        "oneOf": [
                          {
                            "description": "Partial role object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role for a restriction query.",
                                "properties": {
                                  "name": {
                                    "description": "The role name.",
                                    "example": "Datadog Admin Role",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the role.",
                                "example": "<ROLE_ID>",
                                "type": "string"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Role resource type.",
                                "example": "roles",
                                "readOnly": true,
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Edit a restriction query.",
        "operationId": "UpdateRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a restriction query.",
                "properties": {
                  "data": {
                    "description": "Data related to the update of a restriction query.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the edited restriction query.",
                        "properties": {
                          "restriction_query": {
                            "description": "The restriction query.",
                            "example": "env:sandbox",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "logs_restriction_queries",
                        "description": "Restriction query resource type.",
                        "enum": [
                          "logs_restriction_queries"
                        ],
                        "example": "logs_restriction_queries",
                        "type": "string",
                        "x-enum-varnames": [
                          "LOGS_RESTRICTION_QUERIES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single restriction query.",
                  "properties": {
                    "data": {
                      "description": "Restriction query object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the restriction query.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the restriction query.",
                              "example": "2020-03-17T21:06:44.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last restriction query modification.",
                              "example": "2020-03-17T21:15:15.000Z",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "restriction_query": {
                              "description": "The query that defines the restriction. Only the content matching the query can be returned.",
                              "example": "env:sandbox",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the restriction query.",
                          "example": "79a0e60a-644a-11ea-ad29-43329f7f58b5",
                          "type": "string"
                        },
                        "type": {
                          "default": "logs_restriction_queries",
                          "description": "Restriction queries type.",
                          "example": "logs_restriction_queries",
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Update a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/config/restriction_queries/{restriction_query_id}/roles": {
      "delete": {
        "description": "Removes a role from a restriction query.",
        "operationId": "RemoveRoleFromRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Revoke role from a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 8,
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Returns all roles that have a given restriction query.",
        "operationId": "ListRestrictionQueryRoles",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about roles attached to a restriction query.",
                  "properties": {
                    "data": {
                      "description": "Array of roles.",
                      "items": {
                        "description": "Partial role object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role for a restriction query.",
                            "properties": {
                              "name": {
                                "description": "The role name.",
                                "example": "Datadog Admin Role",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the role.",
                            "example": "<ROLE_ID>",
                            "type": "string"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Role resource type.",
                            "example": "roles",
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List roles for a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Adds a role to a restriction query.",
        "operationId": "AddRoleToRestrictionQuery",
        "parameters": [
          {
            "description": "The ID of the restriction query.",
            "in": "path",
            "name": "restriction_query_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to role.",
                "properties": {
                  "data": {
                    "description": "Relationship to role object.",
                    "properties": {
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Grant role to a restriction query",
        "tags": [
          "Logs Restriction Queries"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 7,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/logs/events": {
      "get": {
        "description": "List endpoint returns logs that match a log search query.\n[Results are paginated][1].\n\nUse this endpoint to see your latest logs.\n\n**If you are considering archiving logs for your organization,\nconsider use of the Datadog archive capabilities instead of the log list API.\nSee [Datadog Logs Archive documentation][2].**\n\n[1]: /logs/guide/collect-multiple-logs-with-pagination\n[2]: https://docs.datadoghq.com/logs/archives",
        "operationId": "ListLogsGet",
        "parameters": [
          {
            "description": "Search query following logs syntax.",
            "example": "@datacenter:us @role:db",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "For customers with multiple indexes, the indexes to search\nDefaults to '*' which means all indexes",
            "example": "main",
            "in": "query",
            "name": "filter[index]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum timestamp for requested logs.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum timestamp for requested logs.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Order of logs in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "Sort parameters when querying logs.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of logs in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all logs matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of logs matching the request.",
                      "items": {
                        "description": "Object description of a log after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all log attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from your log.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "host": {
                                "description": "Name of the machine from where the logs are being sent.",
                                "example": "i-0123",
                                "type": "string"
                              },
                              "message": {
                                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                                "example": "Host connected to remote",
                                "type": "string"
                              },
                              "service": {
                                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "agent",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the message associated with your log.",
                                "example": "INFO",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your log.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your log.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your log.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the Log.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "log",
                            "description": "Type of the event.",
                            "enum": [
                              "log"
                            ],
                            "example": "log",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get a list of logs",
        "tags": [
          "Logs"
        ],
        "x-menu-order": 3,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/logs/events/search": {
      "post": {
        "description": "List endpoint returns logs that match a log search query.\n[Results are paginated][1].\n\nUse this endpoint to build complex logs filtering and search.\n\n**If you are considering archiving logs for your organization,\nconsider use of the Datadog archive capabilities instead of the log list API.\nSee [Datadog Logs Archive documentation][2].**\n\n[1]: /logs/guide/collect-multiple-logs-with-pagination\n[2]: https://docs.datadoghq.com/logs/archives",
        "operationId": "ListLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a logs list.",
                "properties": {
                  "filter": {
                    "description": "The search and filter query settings",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "indexes": {
                        "default": [
                          "*"
                        ],
                        "description": "For customers with multiple indexes, the indexes to search. Defaults to ['*'] which means all indexes.",
                        "example": [
                          "main",
                          "web"
                        ],
                        "items": {
                          "description": "The name of a log index.",
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query - following the log search syntax.",
                        "example": "service:web* AND @http.status_code:[200 TO 299]",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested logs, supports date math and regular timestamps (milliseconds).",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: You should only supply timezone or time offset but not both otherwise the query will fail.",
                    "properties": {
                      "timeOffset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging attributes for listing logs.",
                    "properties": {
                      "cursor": {
                        "description": "List following results with a cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of logs in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "Sort parameters when querying logs.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all logs matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of logs matching the request.",
                      "items": {
                        "description": "Object description of a log after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all log attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from your log.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "host": {
                                "description": "Name of the machine from where the logs are being sent.",
                                "example": "i-0123",
                                "type": "string"
                              },
                              "message": {
                                "description": "The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)\nof your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.\nThat value is then highlighted and displayed in the Logstream, where it is indexed for full text search.",
                                "example": "Host connected to remote",
                                "type": "string"
                              },
                              "service": {
                                "description": "The name of the application or service generating the log events.\nIt is used to switch from Logs to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "agent",
                                "type": "string"
                              },
                              "status": {
                                "description": "Status of the message associated with your log.",
                                "example": "INFO",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your log.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your log.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your log.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the Log.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "log",
                            "description": "Type of the event.",
                            "enum": [
                              "log"
                            ],
                            "example": "log",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/logs/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same.\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non fatal errors) encountered, partial results might be returned if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Search logs",
        "tags": [
          "Logs"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-pagination": {
          "cursorParam": "body.page.cursor",
          "cursorPath": "meta.page.after",
          "limitParam": "body.page.limit",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/metrics": {
      "get": {
        "description": "Returns all configured count/gauge/rate/distribution metric names\n(with additional filters if specified).",
        "operationId": "ListTagConfigurations",
        "parameters": [
          {
            "description": "Filter metrics that have configured tags.",
            "example": true,
            "in": "query",
            "name": "filter[configured]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter tag configurations by configured tags.",
            "example": "app",
            "in": "query",
            "name": "filter[tags_configured]",
            "required": false,
            "schema": {
              "description": "Tag keys to filter by.",
              "type": "string"
            }
          },
          {
            "description": "Filter tag configurations by metric type.",
            "in": "query",
            "name": "filter[metric_type]",
            "required": false,
            "schema": {
              "default": "gauge",
              "description": "The metric's type.",
              "enum": [
                "gauge",
                "count",
                "rate",
                "distribution"
              ],
              "example": "count",
              "type": "string",
              "x-enum-varnames": [
                "GAUGE",
                "COUNT",
                "RATE",
                "DISTRIBUTION"
              ]
            }
          },
          {
            "description": "Filter distributions with additional percentile\naggregations enabled or disabled.",
            "example": true,
            "in": "query",
            "name": "filter[include_percentiles]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter metrics that have been submitted with the given tags. Supports boolean and wildcard expressions.\nCannot be combined with other filters.",
            "example": "env IN (staging,test) AND service:web",
            "in": "query",
            "name": "filter[tags]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of seconds of look back (from now) to apply to a filter[tag] query.\nDefaults value is 3600 (1 hour), maximum value is 172,800 (2 days).",
            "example": 3600,
            "in": "query",
            "name": "window[seconds]",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes metrics and metric tag configurations.",
                  "properties": {
                    "data": {
                      "description": "Array of metrics and metric tag configurations.",
                      "items": {
                        "description": "Object for a metrics and metric tag configurations.",
                        "oneOf": [
                          {
                            "description": "Object for a single metric tag configuration.",
                            "example": {
                              "id": "metric.foo.bar",
                              "type": "metrics"
                            },
                            "properties": {
                              "id": {
                                "description": "The metric name for this resource.",
                                "example": "test.metric.latency",
                                "type": "string"
                              },
                              "type": {
                                "default": "metrics",
                                "description": "The metric resource type.",
                                "enum": [
                                  "metrics"
                                ],
                                "example": "metrics",
                                "type": "string",
                                "x-enum-varnames": [
                                  "METRICS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Object for a single metric tag configuration.",
                            "example": {
                              "attributes": {
                                "aggregations": [
                                  {
                                    "space": "avg",
                                    "time": "avg"
                                  }
                                ],
                                "created_at": "2020-03-25T09:48:37.463835Z",
                                "metric_type": "gauge",
                                "modified_at": "2020-04-25T09:48:37.463835Z",
                                "tags": [
                                  "app",
                                  "datacenter"
                                ]
                              },
                              "id": "http.request.latency",
                              "type": "manage_tags"
                            },
                            "properties": {
                              "attributes": {
                                "description": "Object containing the definition of a metric tag configuration attributes.",
                                "properties": {
                                  "aggregations": {
                                    "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                                    "example": [
                                      {
                                        "space": "sum",
                                        "time": "sum"
                                      },
                                      {
                                        "space": "sum",
                                        "time": "count"
                                      }
                                    ],
                                    "items": {
                                      "description": "A time and space aggregation combination for use in query.",
                                      "example": {
                                        "space": "sum",
                                        "time": "sum"
                                      },
                                      "properties": {
                                        "space": {
                                          "description": "A space aggregation for use in query.",
                                          "enum": [
                                            "avg",
                                            "max",
                                            "min",
                                            "sum"
                                          ],
                                          "example": "sum",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "AVG",
                                            "MAX",
                                            "MIN",
                                            "SUM"
                                          ]
                                        },
                                        "time": {
                                          "description": "A time aggregation for use in query.",
                                          "enum": [
                                            "avg",
                                            "count",
                                            "max",
                                            "min",
                                            "sum"
                                          ],
                                          "example": "sum",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "AVG",
                                            "COUNT",
                                            "MAX",
                                            "MIN",
                                            "SUM"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "time",
                                        "space"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "created_at": {
                                    "description": "Timestamp when the tag configuration was created.",
                                    "example": "2020-03-25T09:48:37.463835Z",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "include_percentiles": {
                                    "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                                    "example": true,
                                    "type": "boolean"
                                  },
                                  "metric_type": {
                                    "default": "gauge",
                                    "description": "The metric's type.",
                                    "enum": [
                                      "gauge",
                                      "count",
                                      "rate",
                                      "distribution"
                                    ],
                                    "example": "count",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "GAUGE",
                                      "COUNT",
                                      "RATE",
                                      "DISTRIBUTION"
                                    ]
                                  },
                                  "modified_at": {
                                    "description": "Timestamp when the tag configuration was last modified.",
                                    "example": "2020-03-25T09:48:37.463835Z",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "tags": {
                                    "description": "List of tag keys on which to group.",
                                    "example": [
                                      "app",
                                      "datacenter"
                                    ],
                                    "items": {
                                      "description": "Tag keys to group by.",
                                      "type": "string"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The metric name for this resource.",
                                "example": "test.metric.latency",
                                "type": "string"
                              },
                              "type": {
                                "default": "manage_tags",
                                "description": "The metric tag configuration resource type.",
                                "enum": [
                                  "manage_tags"
                                ],
                                "example": "manage_tags",
                                "type": "string",
                                "x-enum-varnames": [
                                  "MANAGE_TAGS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "metrics_read"
            ]
          }
        ],
        "summary": "List tag configurations",
        "tags": [
          "Metrics"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/metrics/config/bulk-tags": {
      "delete": {
        "description": "Delete all custom lists of queryable tag keys for a set of existing count, gauge, rate, and distribution metrics.\nMetrics are selected by passing a metric name prefix.\nResults can be sent to a set of account email addresses, just like the same operation in the Datadog web app.\nCan only be used with application keys of users with the `Manage Tags for Metrics` permission.",
        "operationId": "DeleteBulkTagsMetricsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Wrapper object for a single bulk tag deletion request.",
                "properties": {
                  "data": {
                    "description": "Request object to bulk delete all tag configurations for metrics matching the given prefix.",
                    "properties": {
                      "attributes": {
                        "description": "Optional parameters for bulk deleting metric tag configurations.",
                        "properties": {
                          "emails": {
                            "description": "A list of account emails to notify when the configuration is applied.",
                            "example": [
                              "sue@example.com",
                              "bob@example.com"
                            ],
                            "items": {
                              "description": "An email address.",
                              "format": "email",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "A text prefix to match against metric names.",
                        "example": "kafka.lag",
                        "type": "string"
                      },
                      "type": {
                        "default": "metric_bulk_configure_tags",
                        "description": "The metric bulk configure tags resource.",
                        "enum": [
                          "metric_bulk_configure_tags"
                        ],
                        "example": "metric_bulk_configure_tags",
                        "type": "string",
                        "x-enum-varnames": [
                          "BULK_MANAGE_TAGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Wrapper for a single bulk tag configuration status response.",
                  "properties": {
                    "data": {
                      "description": "The status of a request to bulk configure metric tags.\nIt contains the fields from the original request for reference.",
                      "properties": {
                        "attributes": {
                          "description": "Optional attributes for the status of a bulk tag configuration request.",
                          "properties": {
                            "emails": {
                              "description": "A list of account emails to notify when the configuration is applied.",
                              "example": [
                                "sue@example.com",
                                "bob@example.com"
                              ],
                              "items": {
                                "description": "An email address.",
                                "format": "email",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "status": {
                              "description": "The status of the request.",
                              "example": "Accepted",
                              "type": "string"
                            },
                            "tags": {
                              "description": "A list of tag names to apply to the configuration.",
                              "example": [
                                "host",
                                "pod_name",
                                "is_shadow"
                              ],
                              "items": {
                                "description": "A metric tag name.",
                                "maxLength": 200,
                                "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "A text prefix to match against metric names.",
                          "example": "kafka.lag",
                          "type": "string"
                        },
                        "type": {
                          "default": "metric_bulk_configure_tags",
                          "description": "The metric bulk configure tags resource.",
                          "enum": [
                            "metric_bulk_configure_tags"
                          ],
                          "example": "metric_bulk_configure_tags",
                          "type": "string",
                          "x-enum-varnames": [
                            "BULK_MANAGE_TAGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "summary": "Configure tags for multiple metrics",
        "tags": [
          "Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 9,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "post": {
        "description": "Create and define a list of queryable tag keys for a set of existing count, gauge, rate, and distribution metrics.\nMetrics are selected by passing a metric name prefix. Use the Delete method of this API path to remove tag configurations.\nResults can be sent to a set of account email addresses, just like the same operation in the Datadog web app.\nIf multiple calls include the same metric, the last configuration applied (not by submit order) is used, do not\nexpect deterministic ordering of concurrent calls.\nCan only be used with application keys of users with the `Manage Tags for Metrics` permission.",
        "operationId": "CreateBulkTagsMetricsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Wrapper object for a single bulk tag configuration request.",
                "properties": {
                  "data": {
                    "description": "Request object to bulk configure tags for metrics matching the given prefix.",
                    "properties": {
                      "attributes": {
                        "description": "Optional parameters for bulk creating metric tag configurations.",
                        "properties": {
                          "emails": {
                            "description": "A list of account emails to notify when the configuration is applied.",
                            "example": [
                              "sue@example.com",
                              "bob@example.com"
                            ],
                            "items": {
                              "description": "An email address.",
                              "format": "email",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "tags": {
                            "description": "A list of tag names to apply to the configuration.",
                            "example": [
                              "host",
                              "pod_name",
                              "is_shadow"
                            ],
                            "items": {
                              "description": "A metric tag name.",
                              "maxLength": 200,
                              "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "A text prefix to match against metric names.",
                        "example": "kafka.lag",
                        "type": "string"
                      },
                      "type": {
                        "default": "metric_bulk_configure_tags",
                        "description": "The metric bulk configure tags resource.",
                        "enum": [
                          "metric_bulk_configure_tags"
                        ],
                        "example": "metric_bulk_configure_tags",
                        "type": "string",
                        "x-enum-varnames": [
                          "BULK_MANAGE_TAGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Wrapper for a single bulk tag configuration status response.",
                  "properties": {
                    "data": {
                      "description": "The status of a request to bulk configure metric tags.\nIt contains the fields from the original request for reference.",
                      "properties": {
                        "attributes": {
                          "description": "Optional attributes for the status of a bulk tag configuration request.",
                          "properties": {
                            "emails": {
                              "description": "A list of account emails to notify when the configuration is applied.",
                              "example": [
                                "sue@example.com",
                                "bob@example.com"
                              ],
                              "items": {
                                "description": "An email address.",
                                "format": "email",
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "status": {
                              "description": "The status of the request.",
                              "example": "Accepted",
                              "type": "string"
                            },
                            "tags": {
                              "description": "A list of tag names to apply to the configuration.",
                              "example": [
                                "host",
                                "pod_name",
                                "is_shadow"
                              ],
                              "items": {
                                "description": "A metric tag name.",
                                "maxLength": 200,
                                "pattern": "^[A-Za-z][A-Za-z0-9\\.\\-\\_:\\/]*$",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "A text prefix to match against metric names.",
                          "example": "kafka.lag",
                          "type": "string"
                        },
                        "type": {
                          "default": "metric_bulk_configure_tags",
                          "description": "The metric bulk configure tags resource.",
                          "enum": [
                            "metric_bulk_configure_tags"
                          ],
                          "example": "metric_bulk_configure_tags",
                          "type": "string",
                          "x-enum-varnames": [
                            "BULK_MANAGE_TAGS"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "summary": "Configure tags for multiple metrics",
        "tags": [
          "Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 8,
        "x-undo": {
          "operationId": "DeleteBulkTagsMetricsConfiguration",
          "parameters": [
            {
              "name": "body",
              "source": ""
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/metrics/{metric_name}/all-tags": {
      "get": {
        "description": "View indexed tag key-value pairs for a given metric name.",
        "operationId": "ListTagsByMetricName",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes a single metric's indexed tags.",
                  "properties": {
                    "data": {
                      "description": "Object for a single metric's indexed tags.",
                      "properties": {
                        "attributes": {
                          "description": "Object containing the definition of a metric's tags.",
                          "properties": {
                            "tags": {
                              "description": "List of indexed tag value pairs.",
                              "example": [
                                "sport:golf",
                                "sport:football",
                                "animal:dog"
                              ],
                              "items": {
                                "description": "Tag key-value pairs.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The metric name for this resource.",
                          "example": "test.metric.latency",
                          "type": "string"
                        },
                        "type": {
                          "default": "metrics",
                          "description": "The metric resource type.",
                          "enum": [
                            "metrics"
                          ],
                          "example": "metrics",
                          "type": "string",
                          "x-enum-varnames": [
                            "METRICS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List tags by metric name",
        "tags": [
          "Metrics"
        ],
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/metrics/{metric_name}/estimate": {
      "get": {
        "description": "Returns the estimated cardinality for a metric with a given tag, percentile and number of aggregations configuration using Metrics without Limits&trade;.",
        "operationId": "EstimateMetricsOutputSeries",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtered tag keys that the metric is configured to query with.",
            "example": "app,host",
            "in": "query",
            "name": "filter[groups]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of hours of look back (from now) to estimate cardinality with.",
            "example": 49,
            "in": "query",
            "name": "filter[hours_ago]",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of aggregations that a `count`, `rate`, or `gauge` metric is configured to use. Max number of aggregation combos is 9.",
            "example": 1,
            "in": "query",
            "name": "filter[num_aggregations]",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A boolean, for distribution metrics only, to estimate cardinality if the metric includes additional percentile aggregators.",
            "example": true,
            "in": "query",
            "name": "filter[pct]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "A window, in hours, from the look back to estimate cardinality with.",
            "example": 6,
            "in": "query",
            "name": "filter[timespan_h]",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes metric cardinality estimates.",
                  "properties": {
                    "data": {
                      "description": "Object for a metric cardinality estimate.",
                      "properties": {
                        "attributes": {
                          "description": "Object containing the definition of a metric estimate attribute.",
                          "properties": {
                            "estimate_type": {
                              "default": "count_or_gauge",
                              "description": "Estimate type based on the queried configuration. By default, `count_or_gauge` is returned. `distribution` is returned for distribution metrics without percentiles enabled. Lastly, `percentile` is returned if `filter[pct]=true` is queried with a distribution metric.",
                              "enum": [
                                "count_or_gauge",
                                "distribution",
                                "percentile"
                              ],
                              "example": "distribution",
                              "type": "string",
                              "x-enum-varnames": [
                                "COUNT_OR_GAUGE",
                                "DISTRIBUTION",
                                "PERCENTILE"
                              ]
                            },
                            "estimated_at": {
                              "description": "Timestamp when the cardinality estimate was requested.",
                              "example": "2022-04-27T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "estimated_output_series": {
                              "description": "Estimated cardinality of the metric based on the queried configuration.",
                              "example": 50,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The metric name for this resource.",
                          "example": "test.metric.latency",
                          "type": "string"
                        },
                        "type": {
                          "default": "metric_cardinality_estimate",
                          "description": "The metric estimate resource type.",
                          "enum": [
                            "metric_cardinality_estimate"
                          ],
                          "example": "metric_cardinality_estimate",
                          "type": "string",
                          "x-enum-varnames": [
                            "METRIC_CARDINALITY_ESTIMATE"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "API error response."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "API error response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "API error response."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Tag Configuration Cardinality Estimator",
        "tags": [
          "Metrics"
        ],
        "x-dd-ownership": {
          "notification_configuration": {
            "manual_escalation_policy": "[Points Aggregation] Primary",
            "prod_high_urgency": "@pagerduty-Points-Aggregation @slack-points-aggr-ops",
            "prod_low_urgency": "@slack-points-aggr-ops",
            "slack_support_channel": "#points-aggregation",
            "staging_high_urgency": "@slack-points-aggr-stg-ops",
            "staging_low_urgency": "@slack-points-aggr-stg-ops"
          },
          "team": "points-aggregation",
          "team_escalation": "[Points Aggregation] Primary"
        },
        "x-menu-order": 10,
        "x-permission": {
          "operator": "OPEN",
          "permissions": []
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/metrics/{metric_name}/tags": {
      "delete": {
        "description": "Deletes a metric's tag configuration. Can only be used with application\nkeys from users with the `Manage Tags for Metrics` permission.",
        "operationId": "DeleteTagConfiguration",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "summary": "Delete a tag configuration",
        "tags": [
          "Metrics"
        ],
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Returns the tag configuration for the given metric name.",
        "operationId": "ListTagConfigurationByName",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single metric's tag configuration.",
                  "properties": {
                    "data": {
                      "description": "Object for a single metric tag configuration.",
                      "example": {
                        "attributes": {
                          "aggregations": [
                            {
                              "space": "avg",
                              "time": "avg"
                            }
                          ],
                          "created_at": "2020-03-25T09:48:37.463835Z",
                          "metric_type": "gauge",
                          "modified_at": "2020-04-25T09:48:37.463835Z",
                          "tags": [
                            "app",
                            "datacenter"
                          ]
                        },
                        "id": "http.request.latency",
                        "type": "manage_tags"
                      },
                      "properties": {
                        "attributes": {
                          "description": "Object containing the definition of a metric tag configuration attributes.",
                          "properties": {
                            "aggregations": {
                              "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                              "example": [
                                {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                {
                                  "space": "sum",
                                  "time": "count"
                                }
                              ],
                              "items": {
                                "description": "A time and space aggregation combination for use in query.",
                                "example": {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                "properties": {
                                  "space": {
                                    "description": "A space aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  },
                                  "time": {
                                    "description": "A time aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "count",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "COUNT",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  }
                                },
                                "required": [
                                  "time",
                                  "space"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Timestamp when the tag configuration was created.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "include_percentiles": {
                              "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                              "example": true,
                              "type": "boolean"
                            },
                            "metric_type": {
                              "default": "gauge",
                              "description": "The metric's type.",
                              "enum": [
                                "gauge",
                                "count",
                                "rate",
                                "distribution"
                              ],
                              "example": "count",
                              "type": "string",
                              "x-enum-varnames": [
                                "GAUGE",
                                "COUNT",
                                "RATE",
                                "DISTRIBUTION"
                              ]
                            },
                            "modified_at": {
                              "description": "Timestamp when the tag configuration was last modified.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "tags": {
                              "description": "List of tag keys on which to group.",
                              "example": [
                                "app",
                                "datacenter"
                              ],
                              "items": {
                                "description": "Tag keys to group by.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The metric name for this resource.",
                          "example": "test.metric.latency",
                          "type": "string"
                        },
                        "type": {
                          "default": "manage_tags",
                          "description": "The metric tag configuration resource type.",
                          "enum": [
                            "manage_tags"
                          ],
                          "example": "manage_tags",
                          "type": "string",
                          "x-enum-varnames": [
                            "MANAGE_TAGS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "metrics_read"
            ]
          }
        ],
        "summary": "List tag configuration by name",
        "tags": [
          "Metrics"
        ],
        "x-menu-order": 2,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update the tag configuration of a metric or percentile aggregations of a distribution metric or custom aggregations\nof a count, rate, or gauge metric.\nCan only be used with application keys from users with the `Manage Tags for Metrics` permission.",
        "operationId": "UpdateTagConfiguration",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request object that includes the metric that you would like to edit the tag configuration on.",
                "properties": {
                  "data": {
                    "description": "Object for a single tag configuration to be edited.",
                    "example": {
                      "attributes": {
                        "group_by": [
                          "app",
                          "datacenter"
                        ],
                        "include_percentiles": false
                      },
                      "id": "http.endpoint.request",
                      "type": "manage_tags"
                    },
                    "properties": {
                      "attributes": {
                        "description": "Object containing the definition of a metric tag configuration to be updated.",
                        "properties": {
                          "aggregations": {
                            "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                            "example": [
                              {
                                "space": "sum",
                                "time": "sum"
                              },
                              {
                                "space": "sum",
                                "time": "count"
                              }
                            ],
                            "items": {
                              "description": "A time and space aggregation combination for use in query.",
                              "example": {
                                "space": "sum",
                                "time": "sum"
                              },
                              "properties": {
                                "space": {
                                  "description": "A space aggregation for use in query.",
                                  "enum": [
                                    "avg",
                                    "max",
                                    "min",
                                    "sum"
                                  ],
                                  "example": "sum",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "AVG",
                                    "MAX",
                                    "MIN",
                                    "SUM"
                                  ]
                                },
                                "time": {
                                  "description": "A time aggregation for use in query.",
                                  "enum": [
                                    "avg",
                                    "count",
                                    "max",
                                    "min",
                                    "sum"
                                  ],
                                  "example": "sum",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "AVG",
                                    "COUNT",
                                    "MAX",
                                    "MIN",
                                    "SUM"
                                  ]
                                }
                              },
                              "required": [
                                "time",
                                "space"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "include_percentiles": {
                            "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "tags": {
                            "default": [],
                            "description": "A list of tag keys that will be queryable for your metric.",
                            "example": [
                              "app",
                              "datacenter"
                            ],
                            "items": {
                              "description": "Tag keys to group by.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "The metric name for this resource.",
                        "example": "test.metric.latency",
                        "type": "string"
                      },
                      "type": {
                        "default": "manage_tags",
                        "description": "The metric tag configuration resource type.",
                        "enum": [
                          "manage_tags"
                        ],
                        "example": "manage_tags",
                        "type": "string",
                        "x-enum-varnames": [
                          "MANAGE_TAGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single metric's tag configuration.",
                  "properties": {
                    "data": {
                      "description": "Object for a single metric tag configuration.",
                      "example": {
                        "attributes": {
                          "aggregations": [
                            {
                              "space": "avg",
                              "time": "avg"
                            }
                          ],
                          "created_at": "2020-03-25T09:48:37.463835Z",
                          "metric_type": "gauge",
                          "modified_at": "2020-04-25T09:48:37.463835Z",
                          "tags": [
                            "app",
                            "datacenter"
                          ]
                        },
                        "id": "http.request.latency",
                        "type": "manage_tags"
                      },
                      "properties": {
                        "attributes": {
                          "description": "Object containing the definition of a metric tag configuration attributes.",
                          "properties": {
                            "aggregations": {
                              "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                              "example": [
                                {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                {
                                  "space": "sum",
                                  "time": "count"
                                }
                              ],
                              "items": {
                                "description": "A time and space aggregation combination for use in query.",
                                "example": {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                "properties": {
                                  "space": {
                                    "description": "A space aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  },
                                  "time": {
                                    "description": "A time aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "count",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "COUNT",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  }
                                },
                                "required": [
                                  "time",
                                  "space"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Timestamp when the tag configuration was created.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "include_percentiles": {
                              "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                              "example": true,
                              "type": "boolean"
                            },
                            "metric_type": {
                              "default": "gauge",
                              "description": "The metric's type.",
                              "enum": [
                                "gauge",
                                "count",
                                "rate",
                                "distribution"
                              ],
                              "example": "count",
                              "type": "string",
                              "x-enum-varnames": [
                                "GAUGE",
                                "COUNT",
                                "RATE",
                                "DISTRIBUTION"
                              ]
                            },
                            "modified_at": {
                              "description": "Timestamp when the tag configuration was last modified.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "tags": {
                              "description": "List of tag keys on which to group.",
                              "example": [
                                "app",
                                "datacenter"
                              ],
                              "items": {
                                "description": "Tag keys to group by.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The metric name for this resource.",
                          "example": "test.metric.latency",
                          "type": "string"
                        },
                        "type": {
                          "default": "manage_tags",
                          "description": "The metric tag configuration resource type.",
                          "enum": [
                            "manage_tags"
                          ],
                          "example": "manage_tags",
                          "type": "string",
                          "x-enum-varnames": [
                            "MANAGE_TAGS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "summary": "Update a tag configuration",
        "tags": [
          "Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "post": {
        "description": "Create and define a list of queryable tag keys for an existing count/gauge/rate/distribution metric.\nOptionally, include percentile aggregations on any distribution metric or configure custom aggregations\non any count, rate, or gauge metric.\nCan only be used with application keys of users with the `Manage Tags for Metrics` permission.",
        "operationId": "CreateTagConfiguration",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request object that includes the metric that you would like to configure tags for.",
                "properties": {
                  "data": {
                    "description": "Object for a single metric to be configure tags on.",
                    "example": {
                      "attributes": {
                        "include_percentiles": false,
                        "metric_type": "distribution",
                        "tags": [
                          "app",
                          "datacenter"
                        ]
                      },
                      "id": "http.endpoint.request",
                      "type": "manage_tags"
                    },
                    "properties": {
                      "attributes": {
                        "description": "Object containing the definition of a metric tag configuration to be created.",
                        "properties": {
                          "aggregations": {
                            "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                            "example": [
                              {
                                "space": "sum",
                                "time": "sum"
                              },
                              {
                                "space": "sum",
                                "time": "count"
                              }
                            ],
                            "items": {
                              "description": "A time and space aggregation combination for use in query.",
                              "example": {
                                "space": "sum",
                                "time": "sum"
                              },
                              "properties": {
                                "space": {
                                  "description": "A space aggregation for use in query.",
                                  "enum": [
                                    "avg",
                                    "max",
                                    "min",
                                    "sum"
                                  ],
                                  "example": "sum",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "AVG",
                                    "MAX",
                                    "MIN",
                                    "SUM"
                                  ]
                                },
                                "time": {
                                  "description": "A time aggregation for use in query.",
                                  "enum": [
                                    "avg",
                                    "count",
                                    "max",
                                    "min",
                                    "sum"
                                  ],
                                  "example": "sum",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "AVG",
                                    "COUNT",
                                    "MAX",
                                    "MIN",
                                    "SUM"
                                  ]
                                }
                              },
                              "required": [
                                "time",
                                "space"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "include_percentiles": {
                            "description": "Toggle to include/exclude percentiles for a distribution metric.\nDefaults to false. Can only be applied to metrics that have a `metric_type` of `distribution`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "metric_type": {
                            "default": "gauge",
                            "description": "The metric's type.",
                            "enum": [
                              "gauge",
                              "count",
                              "rate",
                              "distribution"
                            ],
                            "example": "count",
                            "type": "string",
                            "x-enum-varnames": [
                              "GAUGE",
                              "COUNT",
                              "RATE",
                              "DISTRIBUTION"
                            ]
                          },
                          "tags": {
                            "default": [],
                            "description": "A list of tag keys that will be queryable for your metric.",
                            "example": [
                              "app",
                              "datacenter"
                            ],
                            "items": {
                              "description": "Tag keys to group by.",
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "tags",
                          "metric_type"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The metric name for this resource.",
                        "example": "test.metric.latency",
                        "type": "string"
                      },
                      "type": {
                        "default": "manage_tags",
                        "description": "The metric tag configuration resource type.",
                        "enum": [
                          "manage_tags"
                        ],
                        "example": "manage_tags",
                        "type": "string",
                        "x-enum-varnames": [
                          "MANAGE_TAGS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single metric's tag configuration.",
                  "properties": {
                    "data": {
                      "description": "Object for a single metric tag configuration.",
                      "example": {
                        "attributes": {
                          "aggregations": [
                            {
                              "space": "avg",
                              "time": "avg"
                            }
                          ],
                          "created_at": "2020-03-25T09:48:37.463835Z",
                          "metric_type": "gauge",
                          "modified_at": "2020-04-25T09:48:37.463835Z",
                          "tags": [
                            "app",
                            "datacenter"
                          ]
                        },
                        "id": "http.request.latency",
                        "type": "manage_tags"
                      },
                      "properties": {
                        "attributes": {
                          "description": "Object containing the definition of a metric tag configuration attributes.",
                          "properties": {
                            "aggregations": {
                              "description": "A list of queryable aggregation combinations for a count, rate, or gauge metric.\nBy default, count and rate metrics require the (time: sum, space: sum) aggregation and\nGauge metrics require the (time: avg, space: avg) aggregation.\nAdditional time & space combinations are also available:\n\n- time: avg, space: avg\n- time: avg, space: max\n- time: avg, space: min\n- time: avg, space: sum\n- time: count, space: sum\n- time: max, space: max\n- time: min, space: min\n- time: sum, space: avg\n- time: sum, space: sum\n\nCan only be applied to metrics that have a `metric_type` of `count`, `rate`, or `gauge`.",
                              "example": [
                                {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                {
                                  "space": "sum",
                                  "time": "count"
                                }
                              ],
                              "items": {
                                "description": "A time and space aggregation combination for use in query.",
                                "example": {
                                  "space": "sum",
                                  "time": "sum"
                                },
                                "properties": {
                                  "space": {
                                    "description": "A space aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  },
                                  "time": {
                                    "description": "A time aggregation for use in query.",
                                    "enum": [
                                      "avg",
                                      "count",
                                      "max",
                                      "min",
                                      "sum"
                                    ],
                                    "example": "sum",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "AVG",
                                      "COUNT",
                                      "MAX",
                                      "MIN",
                                      "SUM"
                                    ]
                                  }
                                },
                                "required": [
                                  "time",
                                  "space"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "created_at": {
                              "description": "Timestamp when the tag configuration was created.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "include_percentiles": {
                              "description": "Toggle to turn on/off percentile aggregations for distribution metrics.\nOnly present when the `metric_type` is `distribution`.",
                              "example": true,
                              "type": "boolean"
                            },
                            "metric_type": {
                              "default": "gauge",
                              "description": "The metric's type.",
                              "enum": [
                                "gauge",
                                "count",
                                "rate",
                                "distribution"
                              ],
                              "example": "count",
                              "type": "string",
                              "x-enum-varnames": [
                                "GAUGE",
                                "COUNT",
                                "RATE",
                                "DISTRIBUTION"
                              ]
                            },
                            "modified_at": {
                              "description": "Timestamp when the tag configuration was last modified.",
                              "example": "2020-03-25T09:48:37.463835Z",
                              "format": "date-time",
                              "type": "string"
                            },
                            "tags": {
                              "description": "List of tag keys on which to group.",
                              "example": [
                                "app",
                                "datacenter"
                              ],
                              "items": {
                                "description": "Tag keys to group by.",
                                "type": "string"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The metric name for this resource.",
                          "example": "test.metric.latency",
                          "type": "string"
                        },
                        "type": {
                          "default": "manage_tags",
                          "description": "The metric tag configuration resource type.",
                          "enum": [
                            "manage_tags"
                          ],
                          "example": "manage_tags",
                          "type": "string",
                          "x-enum-varnames": [
                            "MANAGE_TAGS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "summary": "Create a tag configuration",
        "tags": [
          "Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "metric_tag_configuration": {
            "parameters": [
              {
                "name": "metric_name",
                "value": "\"{{ unique_alnum }}\""
              },
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"tags\":[\"app\", \"datacenter\", \"{{ unique_alnum }}\"],\n      \"metric_type\":\"gauge\"\n     },\n     \"type\": \"manage_tags\",\n     \"id\": \"{{ unique_alnum }}\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"metric_tag_configuration\" in the system"
          }
        },
        "x-menu-order": 1,
        "x-undo": {
          "operationId": "DeleteTagConfiguration",
          "parameters": [
            {
              "name": "metric_name",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/metrics/{metric_name}/volumes": {
      "get": {
        "description": "View distinct metrics volumes for the given metric name.\n\nCustom metrics generated in-app from other products will return `null` for ingested volumes.",
        "operationId": "ListVolumesByMetricName",
        "parameters": [
          {
            "description": "The name of the metric.",
            "example": "dist.http.endpoint.request",
            "in": "path",
            "name": "metric_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single metric's volume.",
                  "properties": {
                    "data": {
                      "description": "Possible response objects for a metric's volume.",
                      "oneOf": [
                        {
                          "description": "Object for a single metric's distinct volume.",
                          "properties": {
                            "attributes": {
                              "description": "Object containing the definition of a metric's distinct volume.",
                              "properties": {
                                "distinct_volume": {
                                  "description": "Distinct volume for the given metric.",
                                  "example": 10,
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "description": "The metric name for this resource.",
                              "example": "test.metric.latency",
                              "type": "string"
                            },
                            "type": {
                              "default": "distinct_metric_volumes",
                              "description": "The metric distinct volume type.",
                              "enum": [
                                "distinct_metric_volumes"
                              ],
                              "example": "distinct_metric_volumes",
                              "type": "string",
                              "x-enum-varnames": [
                                "DISTINCT_METRIC_VOLUMES"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        {
                          "description": "Object for a single metric's ingested and indexed volume.",
                          "properties": {
                            "attributes": {
                              "description": "Object containing the definition of a metric's ingested and indexed volume.",
                              "properties": {
                                "indexed_volume": {
                                  "description": "Indexed volume for the given metric.",
                                  "example": 10,
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "ingested_volume": {
                                  "description": "Ingested volume for the given metric.",
                                  "example": 20,
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "description": "The metric name for this resource.",
                              "example": "test.metric.latency",
                              "type": "string"
                            },
                            "type": {
                              "default": "metric_volumes",
                              "description": "The metric ingested and indexed volume type.",
                              "enum": [
                                "metric_volumes"
                              ],
                              "example": "metric_volumes",
                              "type": "string",
                              "x-enum-varnames": [
                                "METRIC_VOLUMES"
                              ]
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too Many Requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List distinct metric volumes by metric name",
        "tags": [
          "Metrics"
        ],
        "x-menu-order": 7,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/permissions": {
      "get": {
        "description": "Returns a list of all permissions, including name, description, and ID.",
        "operationId": "ListPermissions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List permissions",
        "tags": [
          "Roles"
        ],
        "x-given": {
          "permission": {
            "source": "data[0]",
            "step": "there is a valid \"permission\" in the system"
          }
        },
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/processes": {
      "get": {
        "description": "Get all processes for your organization.",
        "operationId": "ListProcesses",
        "parameters": [
          {
            "description": "String to search processes by.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of tags to filter processes by.",
            "example": "account:prod,user:admin",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unix timestamp (number of seconds since epoch) of the start of the query window.\nIf not provided, the start of the query window will be 15 minutes before the `to` timestamp. If neither\n`from` nor `to` are provided, the query window will be `[now - 15m, now]`.",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Unix timestamp (number of seconds since epoch) of the end of the query window.\nIf not provided, the end of the query window will be 15 minutes after the `from` timestamp. If neither\n`from` nor `to` are provided, the query window will be `[now - 15m, now]`.",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of results returned.",
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "String to query the next page of results.\nThis key is provided with each valid response from the API in `meta.page.after`.",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of process summaries.",
                  "properties": {
                    "data": {
                      "description": "Array of process summary objects.",
                      "items": {
                        "description": "Process summary object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes for a process summary.",
                            "properties": {
                              "cmdline": {
                                "description": "Process command line.",
                                "type": "string"
                              },
                              "host": {
                                "description": "Host running the process.",
                                "type": "string"
                              },
                              "pid": {
                                "description": "Process ID.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "ppid": {
                                "description": "Parent process ID.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "start": {
                                "description": "Time the process was started.",
                                "type": "string"
                              },
                              "tags": {
                                "description": "List of tags associated with the process.",
                                "items": {
                                  "description": "A tag associated with the process.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Time the process was seen.",
                                "type": "string"
                              },
                              "user": {
                                "description": "Process owner.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Process ID.",
                            "type": "string"
                          },
                          "type": {
                            "default": "process",
                            "description": "Type of process summary.",
                            "enum": [
                              "process"
                            ],
                            "example": "process",
                            "type": "string",
                            "x-enum-varnames": [
                              "PROCESS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Response metadata object.",
                      "properties": {
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "911abf1204838d9cdfcb9a96d0b6a1bd03e1b514074f1ce1737c4cbd",
                              "type": "string"
                            },
                            "size": {
                              "description": "Number of results returned.",
                              "format": "int32",
                              "maximum": 10000,
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication Error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get all processes",
        "tags": [
          "Processes"
        ],
        "x-menu-order": 1,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/roles": {
      "get": {
        "description": "Returns all roles, including their names and their unique identifiers.",
        "operationId": "ListRoles",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Sort roles depending on the given field. Sort order is **ascending** by default.\nSort order is **descending** if the field is prefixed by a negative sign, for example:\n`sort=-name`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options for roles.",
              "enum": [
                "name",
                "-name",
                "modified_at",
                "-modified_at",
                "user_count",
                "-user_count"
              ],
              "type": "string",
              "x-enum-varnames": [
                "NAME_ASCENDING",
                "NAME_DESCENDING",
                "MODIFIED_AT_ASCENDING",
                "MODIFIED_AT_DESCENDING",
                "USER_COUNT_ASCENDING",
                "USER_COUNT_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter all roles by the given string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple roles.",
                  "properties": {
                    "data": {
                      "description": "Array of returned roles.",
                      "items": {
                        "description": "Role object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of the role.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the role.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time of last role modification.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                "type": "string"
                              },
                              "user_count": {
                                "description": "Number of users with that role.",
                                "format": "int64",
                                "readOnly": true,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique identifier of the role.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the role object returned by the API.",
                            "properties": {
                              "permissions": {
                                "description": "Relationship to multiple permissions objects.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to permission objects.",
                                    "items": {
                                      "description": "Relationship to permission object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the permission.",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "permissions",
                                          "description": "Permissions resource type.",
                                          "enum": [
                                            "permissions"
                                          ],
                                          "example": "permissions",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "PERMISSIONS"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "roles",
                            "description": "Roles type.",
                            "enum": [
                              "roles"
                            ],
                            "example": "roles",
                            "type": "string",
                            "x-enum-varnames": [
                              "ROLES"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List roles",
        "tags": [
          "Roles"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a new role for your organization.",
        "operationId": "CreateRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a role.",
                "properties": {
                  "data": {
                    "description": "Data related to the creation of a role.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created role.",
                        "properties": {
                          "created_at": {
                            "description": "Creation time of the role.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modified_at": {
                            "description": "Time of last role modification.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.",
                            "example": "developers",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationships of the role object.",
                        "properties": {
                          "permissions": {
                            "description": "Relationship to multiple permissions objects.",
                            "properties": {
                              "data": {
                                "description": "Relationships to permission objects.",
                                "items": {
                                  "description": "Relationship to permission object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the permission.",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "permissions",
                                      "description": "Permissions resource type.",
                                      "enum": [
                                        "permissions"
                                      ],
                                      "example": "permissions",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "PERMISSIONS"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "users": {
                            "description": "Relationship to users.",
                            "properties": {
                              "data": {
                                "description": "Relationships to user objects.",
                                "example": [],
                                "items": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a created role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the created role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the role.",
                              "example": "developers",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "The unique identifier of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Create role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "role": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n     },\n     \"type\": \"roles\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"role\" in the system"
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteRole",
          "parameters": [
            {
              "name": "role_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/roles/{role_id}": {
      "delete": {
        "description": "Disables a role.",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Delete role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a role in the organization specified by the role’s `role_id`.",
        "operationId": "GetRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                              "type": "string"
                            },
                            "user_count": {
                              "description": "Number of users with that role.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The unique identifier of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit a role. Can only be used with application keys belonging to administrators.",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a role.",
                "properties": {
                  "data": {
                    "description": "Data related to the update of a role.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the role.",
                        "properties": {
                          "created_at": {
                            "description": "Creation time of the role.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "modified_at": {
                            "description": "Time of last role modification.",
                            "format": "date-time",
                            "readOnly": true,
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the role.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "The unique identifier of the role.",
                        "example": "00000000-0000-1111-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type",
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about an updated role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the role.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The unique identifier of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Update a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/roles/{role_id}/clone": {
      "post": {
        "description": "Clone an existing role",
        "operationId": "CloneRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request to create a role by cloning an existing role.",
                "properties": {
                  "data": {
                    "description": "Data for the clone role request.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes required to create a new role by cloning an existing one.",
                        "properties": {
                          "name": {
                            "description": "Name of the new role that is cloned.",
                            "example": "cloned-role",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "roles",
                        "description": "Roles type.",
                        "enum": [
                          "roles"
                        ],
                        "example": "roles",
                        "type": "string",
                        "x-enum-varnames": [
                          "ROLES"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single role.",
                  "properties": {
                    "data": {
                      "description": "Role object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of the role.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the role.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time of last role modification.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                              "type": "string"
                            },
                            "user_count": {
                              "description": "Number of users with that role.",
                              "format": "int64",
                              "readOnly": true,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The unique identifier of the role.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the role object returned by the API.",
                          "properties": {
                            "permissions": {
                              "description": "Relationship to multiple permissions objects.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to permission objects.",
                                  "items": {
                                    "description": "Relationship to permission object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the permission.",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "permissions",
                                        "description": "Permissions resource type.",
                                        "enum": [
                                          "permissions"
                                        ],
                                        "example": "permissions",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "PERMISSIONS"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "roles",
                          "description": "Roles type.",
                          "enum": [
                            "roles"
                          ],
                          "example": "roles",
                          "type": "string",
                          "x-enum-varnames": [
                            "ROLES"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Create a new role by cloning an existing role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 12,
        "x-permission": "OR(USER_ACCESS_MANAGE)",
        "x-undo": {
          "operationId": "DeleteRole",
          "parameters": [
            {
              "name": "role_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/roles/{role_id}/permissions": {
      "delete": {
        "description": "Removes a permission from a role.",
        "operationId": "RemovePermissionFromRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to a permissions object.",
                "properties": {
                  "data": {
                    "description": "Relationship to permission object.",
                    "properties": {
                      "id": {
                        "description": "ID of the permission.",
                        "type": "string"
                      },
                      "type": {
                        "default": "permissions",
                        "description": "Permissions resource type.",
                        "enum": [
                          "permissions"
                        ],
                        "example": "permissions",
                        "type": "string",
                        "x-enum-varnames": [
                          "PERMISSIONS"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Revoke permission",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 8,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Returns a list of all permissions for a single role.",
        "operationId": "ListRolePermissions",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List permissions for a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Adds a permission to a role.",
        "operationId": "AddPermissionToRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to a permissions object.",
                "properties": {
                  "data": {
                    "description": "Relationship to permission object.",
                    "properties": {
                      "id": {
                        "description": "ID of the permission.",
                        "type": "string"
                      },
                      "type": {
                        "default": "permissions",
                        "description": "Permissions resource type.",
                        "enum": [
                          "permissions"
                        ],
                        "example": "permissions",
                        "type": "string",
                        "x-enum-varnames": [
                          "PERMISSIONS"
                        ]
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Grant permission to a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "permission_role": {
            "parameters": [
              {
                "name": "role_id",
                "source": "role.data.id"
              },
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"id\": \"{{ permission.id }}\",\n    \"type\": \"{{ permission.type }}\"\n  }\n}"
              }
            ],
            "step": "the \"permission\" is granted to the \"role\""
          }
        },
        "x-menu-order": 7,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/roles/{role_id}/users": {
      "delete": {
        "description": "Removes a user from a role.",
        "operationId": "RemoveUserFromRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time that the user was last modified.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "service_account": {
                                "description": "Whether the user is a service account.",
                                "type": "boolean"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-beef-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-2345-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and the unique identifier of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "The unique identifier of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Remove a user from a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 11,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Gets all users of a role.",
        "operationId": "ListRoleUsers",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "User attribute to order results by. Sort order is **ascending** by default.\nSort order is **descending** if the field is prefixed by a negative sign,\nfor example `sort=-name`. Options: `name`, `email`, `status`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "type": "string"
            }
          },
          {
            "description": "Filter all users by the given string. Defaults to no filtering.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time that the user was last modified.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "service_account": {
                                "description": "Whether the user is a service account.",
                                "type": "boolean"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-beef-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-2345-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and the unique identifier of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "The unique identifier of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get all users of a role",
        "tags": [
          "Roles"
        ],
        "x-menu-order": 9,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Adds a user to a role.",
        "operationId": "AddUserToRole",
        "parameters": [
          {
            "description": "The unique identifier of the role.",
            "in": "path",
            "name": "role_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Relationship to user.",
                "properties": {
                  "data": {
                    "description": "Relationship to user object.",
                    "properties": {
                      "id": {
                        "description": "A unique identifier that represents the user.",
                        "example": "00000000-0000-0000-2345-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time that the user was last modified.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "service_account": {
                                "description": "Whether the user is a service account.",
                                "type": "boolean"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-beef-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-2345-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and the unique identifier of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "The unique identifier of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Add a user to a role",
        "tags": [
          "Roles"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "permission_role": {
            "parameters": [
              {
                "name": "role_id",
                "source": "role.data.id"
              },
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"id\": \"{{ user.data.id }}\",\n    \"type\": \"{{ user.data.type }}\"\n  }\n}"
              }
            ],
            "step": "the \"user\" has the \"role\""
          }
        },
        "x-menu-order": 10,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/rum/analytics/aggregate": {
      "post": {
        "description": "The API endpoint to aggregate RUM events into buckets of computed metrics and timeseries.",
        "operationId": "AggregateRUMEvents",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The object sent with the request to retrieve aggregation buckets of RUM events from your organization.",
                "properties": {
                  "compute": {
                    "description": "The list of metrics or timeseries to compute for the retrieved buckets.",
                    "items": {
                      "description": "A compute rule to compute metrics or timeseries.",
                      "properties": {
                        "aggregation": {
                          "description": "An aggregation function.",
                          "enum": [
                            "count",
                            "cardinality",
                            "pc75",
                            "pc90",
                            "pc95",
                            "pc98",
                            "pc99",
                            "sum",
                            "min",
                            "max",
                            "avg",
                            "median"
                          ],
                          "example": "pc90",
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "PERCENTILE_75",
                            "PERCENTILE_90",
                            "PERCENTILE_95",
                            "PERCENTILE_98",
                            "PERCENTILE_99",
                            "SUM",
                            "MIN",
                            "MAX",
                            "AVG",
                            "MEDIAN"
                          ]
                        },
                        "interval": {
                          "description": "The time buckets' size (only used for type=timeseries)\nDefaults to a resolution of 150 points.",
                          "example": "5m",
                          "type": "string"
                        },
                        "metric": {
                          "description": "The metric to use.",
                          "example": "@duration",
                          "type": "string"
                        },
                        "type": {
                          "default": "total",
                          "description": "The type of compute.",
                          "enum": [
                            "timeseries",
                            "total"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "TIMESERIES",
                            "TOTAL"
                          ]
                        }
                      },
                      "required": [
                        "aggregation"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filter": {
                    "description": "The search and filter query settings.",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query following the RUM search syntax.",
                        "example": "@type:session AND @session.type:user",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "group_by": {
                    "description": "The rules for the group by.",
                    "items": {
                      "description": "A group-by rule.",
                      "properties": {
                        "facet": {
                          "description": "The name of the facet to use (required).",
                          "example": "@view.time_spent",
                          "type": "string"
                        },
                        "histogram": {
                          "description": "Used to perform a histogram computation (only for measure facets).\nNote: At most 100 buckets are allowed, the number of buckets is (max - min)/interval.",
                          "properties": {
                            "interval": {
                              "description": "The bin size of the histogram buckets.",
                              "example": 10,
                              "format": "double",
                              "type": "number"
                            },
                            "max": {
                              "description": "The maximum value for the measure used in the histogram\n(values greater than this one are filtered out).",
                              "example": 100,
                              "format": "double",
                              "type": "number"
                            },
                            "min": {
                              "description": "The minimum value for the measure used in the histogram\n(values smaller than this one are filtered out).",
                              "example": 50,
                              "format": "double",
                              "type": "number"
                            }
                          },
                          "required": [
                            "interval",
                            "min",
                            "max"
                          ],
                          "type": "object"
                        },
                        "limit": {
                          "default": 10,
                          "description": "The maximum buckets to return for this group-by.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "missing": {
                          "description": "The value to use for logs that don't have the facet used to group by.",
                          "oneOf": [
                            {
                              "description": "The missing value to use if there is string valued facet.",
                              "type": "string"
                            },
                            {
                              "description": "The missing value to use if there is a number valued facet.",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        },
                        "sort": {
                          "description": "A sort rule.",
                          "example": {
                            "aggregation": "count",
                            "order": "asc"
                          },
                          "properties": {
                            "aggregation": {
                              "description": "An aggregation function.",
                              "enum": [
                                "count",
                                "cardinality",
                                "pc75",
                                "pc90",
                                "pc95",
                                "pc98",
                                "pc99",
                                "sum",
                                "min",
                                "max",
                                "avg",
                                "median"
                              ],
                              "example": "pc90",
                              "type": "string",
                              "x-enum-varnames": [
                                "COUNT",
                                "CARDINALITY",
                                "PERCENTILE_75",
                                "PERCENTILE_90",
                                "PERCENTILE_95",
                                "PERCENTILE_98",
                                "PERCENTILE_99",
                                "SUM",
                                "MIN",
                                "MAX",
                                "AVG",
                                "MEDIAN"
                              ]
                            },
                            "metric": {
                              "description": "The metric to sort by (only used for `type=measure`).",
                              "example": "@duration",
                              "type": "string"
                            },
                            "order": {
                              "description": "The order to use, ascending or descending.",
                              "enum": [
                                "asc",
                                "desc"
                              ],
                              "example": "asc",
                              "type": "string",
                              "x-enum-varnames": [
                                "ASCENDING",
                                "DESCENDING"
                              ]
                            },
                            "type": {
                              "default": "alphabetical",
                              "description": "The type of sorting algorithm.",
                              "enum": [
                                "alphabetical",
                                "measure"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "ALPHABETICAL",
                                "MEASURE"
                              ]
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "default": false,
                          "description": "A resulting object to put the given computes in over all the matching records.",
                          "oneOf": [
                            {
                              "description": "If set to true, creates an additional bucket labeled \"$facet_total\".",
                              "type": "boolean"
                            },
                            {
                              "description": "A string to use as the key value for the total bucket.",
                              "type": "string"
                            },
                            {
                              "description": "A number to use as the key value for the total bucket.",
                              "format": "double",
                              "type": "number"
                            }
                          ]
                        }
                      },
                      "required": [
                        "facet"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: Only supply timezone or time offset, not both. Otherwise, the query fails.",
                    "properties": {
                      "time_offset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging attributes for listing events.",
                    "properties": {
                      "cursor": {
                        "description": "List following results with a cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of events in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object for the RUM events aggregate API endpoint.",
                  "properties": {
                    "data": {
                      "description": "The query results.",
                      "properties": {
                        "buckets": {
                          "description": "The list of matching buckets, one item per bucket.",
                          "items": {
                            "description": "Bucket values.",
                            "properties": {
                              "by": {
                                "additionalProperties": {
                                  "description": "The values for each group-by.",
                                  "type": "string"
                                },
                                "description": "The key-value pairs for each group-by.",
                                "example": {
                                  "@session.type": "user",
                                  "@type": "view"
                                },
                                "type": "object"
                              },
                              "computes": {
                                "additionalProperties": {
                                  "description": "A bucket value, can be either a timeseries or a single value.",
                                  "oneOf": [
                                    {
                                      "description": "A single string value.",
                                      "type": "string"
                                    },
                                    {
                                      "description": "A single number value.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    {
                                      "description": "A timeseries array.",
                                      "items": {
                                        "description": "A timeseries point.",
                                        "properties": {
                                          "time": {
                                            "description": "The time value for this point.",
                                            "example": "2020-06-08T11:55:00.123Z",
                                            "format": "date-time",
                                            "type": "string"
                                          },
                                          "value": {
                                            "description": "The value for this point.",
                                            "example": 19,
                                            "format": "double",
                                            "type": "number"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "type": "array",
                                      "x-generate-alias-as-model": true
                                    }
                                  ]
                                },
                                "description": "A map of the metric name to value for regular compute, or a list of values for a timeseries.",
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response.",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Aggregate RUM events",
        "tags": [
          "RUM"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/rum/applications": {
      "get": {
        "description": "List all the RUM applications in your organization.",
        "operationId": "GetRUMApplications",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "RUM applications response.",
                  "properties": {
                    "data": {
                      "description": "RUM applications array response.",
                      "items": {
                        "description": "RUM application.",
                        "properties": {
                          "attributes": {
                            "description": "RUM application attributes.",
                            "properties": {
                              "application_id": {
                                "description": "ID of the RUM application.",
                                "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                                "type": "string"
                              },
                              "created_at": {
                                "description": "Timestamp in ms of the creation date.",
                                "example": 1659479836169,
                                "format": "int64",
                                "type": "integer"
                              },
                              "created_by_handle": {
                                "description": "Handle of the creator user.",
                                "example": "john.doe",
                                "type": "string"
                              },
                              "hash": {
                                "description": "Client token of the RUM application.",
                                "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the RUM application.",
                                "example": "my_rum_application",
                                "type": "string"
                              },
                              "org_id": {
                                "description": "Org ID of the RUM application.",
                                "example": 999,
                                "format": "int32",
                                "type": "integer"
                              },
                              "type": {
                                "description": "Type of the RUM application.",
                                "example": "browser|ios|android|react-native|flutter",
                                "type": "string"
                              },
                              "updated_at": {
                                "description": "Timestamp in ms of the last update date.",
                                "example": 1659479836169,
                                "format": "int64",
                                "type": "integer"
                              },
                              "updated_by_handle": {
                                "description": "Handle of the updater user.",
                                "example": "jane.doe",
                                "type": "string"
                              }
                            },
                            "required": [
                              "application_id",
                              "created_at",
                              "created_by_handle",
                              "name",
                              "org_id",
                              "type",
                              "updated_at",
                              "updated_by_handle"
                            ],
                            "type": "object"
                          },
                          "id": {
                            "description": "RUM application ID.",
                            "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                            "type": "string"
                          },
                          "type": {
                            "default": "rum_application",
                            "description": "RUM application response type.",
                            "enum": [
                              "rum_application"
                            ],
                            "example": "rum_application",
                            "type": "string",
                            "x-enum-varnames": [
                              "RUM_APPLICATION"
                            ]
                          }
                        },
                        "required": [
                          "attributes",
                          "id",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          }
        ],
        "summary": "List all the RUM applications",
        "tags": [
          "RUM"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a new RUM application in your organization.",
        "operationId": "CreateRUMApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "RUM application creation request attributes.",
                "properties": {
                  "data": {
                    "description": "RUM application creation.",
                    "properties": {
                      "attributes": {
                        "description": "RUM application creation attributes.",
                        "properties": {
                          "name": {
                            "description": "Name of the RUM application.",
                            "example": "my_new_rum_application",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the RUM application.",
                            "example": "browser|ios|android|react-native|flutter",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "rum_application_create",
                        "description": "RUM application creation type.",
                        "enum": [
                          "rum_application_create"
                        ],
                        "example": "rum_application_create",
                        "type": "string",
                        "x-enum-varnames": [
                          "RUM_APPLICATION_CREATE"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "RUM application response.",
                  "properties": {
                    "data": {
                      "description": "RUM application.",
                      "properties": {
                        "attributes": {
                          "description": "RUM application attributes.",
                          "properties": {
                            "application_id": {
                              "description": "ID of the RUM application.",
                              "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Timestamp in ms of the creation date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "created_by_handle": {
                              "description": "Handle of the creator user.",
                              "example": "john.doe",
                              "type": "string"
                            },
                            "hash": {
                              "description": "Client token of the RUM application.",
                              "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the RUM application.",
                              "example": "my_rum_application",
                              "type": "string"
                            },
                            "org_id": {
                              "description": "Org ID of the RUM application.",
                              "example": 999,
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": {
                              "description": "Type of the RUM application.",
                              "example": "browser|ios|android|react-native|flutter",
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "Timestamp in ms of the last update date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updated_by_handle": {
                              "description": "Handle of the updater user.",
                              "example": "jane.doe",
                              "type": "string"
                            }
                          },
                          "required": [
                            "application_id",
                            "created_at",
                            "created_by_handle",
                            "name",
                            "org_id",
                            "type",
                            "updated_at",
                            "updated_by_handle"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "RUM application ID.",
                          "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                          "type": "string"
                        },
                        "type": {
                          "default": "rum_application",
                          "description": "RUM application response type.",
                          "enum": [
                            "rum_application"
                          ],
                          "example": "rum_application",
                          "type": "string",
                          "x-enum-varnames": [
                            "RUM_APPLICATION"
                          ]
                        }
                      },
                      "required": [
                        "attributes",
                        "id",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          }
        ],
        "summary": "Create a new RUM application",
        "tags": [
          "RUM"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "rum_application": {
            "parameters": [
              {
                "name": "body",
                "value": "{ \"data\": {\n    \"type\": \"rum_application_create\",\n    \"attributes\": {\n        \"name\": \"test_name_create\",\n        \"type\": \"browser\"\n    }\n  }\n}"
              }
            ],
            "step": "there is a valid \"rum_application\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteRUMApplication",
          "parameters": [
            {
              "name": "id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/rum/applications/{id}": {
      "delete": {
        "description": "Delete an existing RUM application in your organization.",
        "operationId": "DeleteRUMApplication",
        "parameters": [
          {
            "description": "RUM application ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          }
        ],
        "summary": "Delete a RUM application",
        "tags": [
          "RUM"
        ],
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get the RUM application with given ID in your organization.",
        "operationId": "GetRUMApplication",
        "parameters": [
          {
            "description": "RUM application ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "RUM application response.",
                  "properties": {
                    "data": {
                      "description": "RUM application.",
                      "properties": {
                        "attributes": {
                          "description": "RUM application attributes.",
                          "properties": {
                            "application_id": {
                              "description": "ID of the RUM application.",
                              "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Timestamp in ms of the creation date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "created_by_handle": {
                              "description": "Handle of the creator user.",
                              "example": "john.doe",
                              "type": "string"
                            },
                            "hash": {
                              "description": "Client token of the RUM application.",
                              "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the RUM application.",
                              "example": "my_rum_application",
                              "type": "string"
                            },
                            "org_id": {
                              "description": "Org ID of the RUM application.",
                              "example": 999,
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": {
                              "description": "Type of the RUM application.",
                              "example": "browser|ios|android|react-native|flutter",
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "Timestamp in ms of the last update date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updated_by_handle": {
                              "description": "Handle of the updater user.",
                              "example": "jane.doe",
                              "type": "string"
                            }
                          },
                          "required": [
                            "application_id",
                            "created_at",
                            "created_by_handle",
                            "name",
                            "org_id",
                            "type",
                            "updated_at",
                            "updated_by_handle"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "RUM application ID.",
                          "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                          "type": "string"
                        },
                        "type": {
                          "default": "rum_application",
                          "description": "RUM application response type.",
                          "enum": [
                            "rum_application"
                          ],
                          "example": "rum_application",
                          "type": "string",
                          "x-enum-varnames": [
                            "RUM_APPLICATION"
                          ]
                        }
                      },
                      "required": [
                        "attributes",
                        "id",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          }
        ],
        "summary": "Get a RUM application",
        "tags": [
          "RUM"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update the RUM application with given ID in your organization.",
        "operationId": "UpdateRUMApplication",
        "parameters": [
          {
            "description": "RUM application ID.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "RUM application update request.",
                "properties": {
                  "data": {
                    "description": "RUM application update.",
                    "properties": {
                      "attributes": {
                        "description": "RUM application update attributes.",
                        "properties": {
                          "name": {
                            "description": "Name of the RUM application.",
                            "example": "updated_name_for_my_existing_rum_application",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the RUM application.",
                            "example": "browser|ios|android|react-native|flutter",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "RUM application ID.",
                        "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                        "type": "string"
                      },
                      "type": {
                        "default": "rum_application_update",
                        "description": "RUM application update type.",
                        "enum": [
                          "rum_application_update"
                        ],
                        "example": "rum_application_update",
                        "type": "string",
                        "x-enum-varnames": [
                          "RUM_APPLICATION_UPDATE"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "RUM application response.",
                  "properties": {
                    "data": {
                      "description": "RUM application.",
                      "properties": {
                        "attributes": {
                          "description": "RUM application attributes.",
                          "properties": {
                            "application_id": {
                              "description": "ID of the RUM application.",
                              "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                              "type": "string"
                            },
                            "created_at": {
                              "description": "Timestamp in ms of the creation date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "created_by_handle": {
                              "description": "Handle of the creator user.",
                              "example": "john.doe",
                              "type": "string"
                            },
                            "hash": {
                              "description": "Client token of the RUM application.",
                              "example": "abcd1234efgh5678ijkl90abcd1234efgh0",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the RUM application.",
                              "example": "my_rum_application",
                              "type": "string"
                            },
                            "org_id": {
                              "description": "Org ID of the RUM application.",
                              "example": 999,
                              "format": "int32",
                              "type": "integer"
                            },
                            "type": {
                              "description": "Type of the RUM application.",
                              "example": "browser|ios|android|react-native|flutter",
                              "type": "string"
                            },
                            "updated_at": {
                              "description": "Timestamp in ms of the last update date.",
                              "example": 1659479836169,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updated_by_handle": {
                              "description": "Handle of the updater user.",
                              "example": "jane.doe",
                              "type": "string"
                            }
                          },
                          "required": [
                            "application_id",
                            "created_at",
                            "created_by_handle",
                            "name",
                            "org_id",
                            "type",
                            "updated_at",
                            "updated_by_handle"
                          ],
                          "type": "object"
                        },
                        "id": {
                          "description": "RUM application ID.",
                          "example": "abcd1234-0000-0000-abcd-1234abcd5678",
                          "type": "string"
                        },
                        "type": {
                          "default": "rum_application",
                          "description": "RUM application response type.",
                          "enum": [
                            "rum_application"
                          ],
                          "example": "rum_application",
                          "type": "string",
                          "x-enum-varnames": [
                            "RUM_APPLICATION"
                          ]
                        }
                      },
                      "required": [
                        "attributes",
                        "id",
                        "type"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          }
        ],
        "summary": "Update a RUM application",
        "tags": [
          "RUM"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/rum/events": {
      "get": {
        "description": "List endpoint returns events that match a RUM search query.\n[Results are paginated][1].\n\nUse this endpoint to see your latest RUM events.\n\n[1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination",
        "operationId": "ListRUMEvents",
        "parameters": [
          {
            "description": "Search query following RUM syntax.",
            "example": "@type:session @application_id:xxxx",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum timestamp for requested events.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum timestamp for requested events.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Order of events in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "Sort parameters when querying events.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "List following results with a cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of events in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of events matching the request.",
                      "items": {
                        "description": "Object description of a RUM event after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all event attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from RUM events.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "service": {
                                "description": "The name of the application or service generating RUM events.\nIt is used to switch from RUM to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "web-app",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "rum",
                            "description": "Type of the event.",
                            "enum": [
                              "rum"
                            ],
                            "example": "rum",
                            "type": "string",
                            "x-enum-varnames": [
                              "RUM"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response.",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a list of RUM events",
        "tags": [
          "RUM"
        ],
        "x-menu-order": 2,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/rum/events/search": {
      "post": {
        "description": "List endpoint returns RUM events that match a RUM search query.\n[Results are paginated][1].\n\nUse this endpoint to build complex RUM events filtering and search.\n\n[1]: https://docs.datadoghq.com/logs/guide/collect-multiple-logs-with-pagination",
        "operationId": "SearchRUMEvents",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a RUM events list.",
                "properties": {
                  "filter": {
                    "description": "The search and filter query settings.",
                    "properties": {
                      "from": {
                        "default": "now-15m",
                        "description": "The minimum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now-15m",
                        "type": "string"
                      },
                      "query": {
                        "default": "*",
                        "description": "The search query following the RUM search syntax.",
                        "example": "@type:session AND @session.type:user",
                        "type": "string"
                      },
                      "to": {
                        "default": "now",
                        "description": "The maximum time for the requested events; supports date, math, and regular timestamps (in milliseconds).",
                        "example": "now",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "options": {
                    "description": "Global query options that are used during the query.\nNote: Only supply timezone or time offset, not both. Otherwise, the query fails.",
                    "properties": {
                      "time_offset": {
                        "description": "The time offset (in seconds) to apply to the query.",
                        "format": "int64",
                        "type": "integer"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "The timezone can be specified both as an offset, for example: \"UTC+03:00\".",
                        "example": "GMT",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "Paging attributes for listing events.",
                    "properties": {
                      "cursor": {
                        "description": "List following results with a cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "Maximum number of events in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "Sort parameters when querying events.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object with all events matching the request and pagination information.",
                  "properties": {
                    "data": {
                      "description": "Array of events matching the request.",
                      "items": {
                        "description": "Object description of a RUM event after being processed and stored by Datadog.",
                        "properties": {
                          "attributes": {
                            "description": "JSON object containing all event attributes and their associated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "JSON object of attributes from RUM events.",
                                "example": {
                                  "customAttribute": 123,
                                  "duration": 2345
                                },
                                "type": "object"
                              },
                              "service": {
                                "description": "The name of the application or service generating RUM events.\nIt is used to switch from RUM to APM, so make sure you define the same\nvalue when you use both products.",
                                "example": "web-app",
                                "type": "string"
                              },
                              "tags": {
                                "description": "Array of tags associated with your event.",
                                "example": [
                                  "team:A"
                                ],
                                "items": {
                                  "description": "Tag associated with your event.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "Timestamp of your event.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the event.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "rum",
                            "description": "Type of the event.",
                            "enum": [
                              "rum"
                            ],
                            "example": "rum",
                            "type": "string",
                            "x-enum-varnames": [
                              "RUM"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "Link for the next set of results. Note that the request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/rum/event?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "The metadata associated with a request.",
                      "properties": {
                        "elapsed": {
                          "description": "The time elapsed in milliseconds.",
                          "example": 132,
                          "format": "int64",
                          "type": "integer"
                        },
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor to use to get the next results, if any. To make the next request, use the same parameters with the addition of `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "request_id": {
                          "description": "The identifier of the request.",
                          "example": "MWlFUjVaWGZTTTZPYzM0VXp1OXU2d3xLSVpEMjZKQ0VKUTI0dEYtM3RSOFVR",
                          "type": "string"
                        },
                        "status": {
                          "description": "The status of the response.",
                          "enum": [
                            "done",
                            "timeout"
                          ],
                          "example": "done",
                          "type": "string",
                          "x-enum-varnames": [
                            "DONE",
                            "TIMEOUT"
                          ]
                        },
                        "warnings": {
                          "description": "A list of warnings (non-fatal errors) encountered. Partial results may return if\nwarnings are present in the response.",
                          "items": {
                            "description": "A warning message indicating something that went wrong with the query.",
                            "properties": {
                              "code": {
                                "description": "A unique code for this type of warning.",
                                "example": "unknown_index",
                                "type": "string"
                              },
                              "detail": {
                                "description": "A detailed explanation of this specific warning.",
                                "example": "indexes: foo, bar",
                                "type": "string"
                              },
                              "title": {
                                "description": "A short human-readable summary of the warning.",
                                "example": "One or several indexes are missing or invalid, results hold data from the other indexes",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Search RUM events",
        "tags": [
          "RUM"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-pagination": {
          "cursorParam": "body.page.cursor",
          "cursorPath": "meta.page.after",
          "limitParam": "body.page.limit",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/saml_configurations/idp_metadata": {
      "post": {
        "description": "Endpoint for uploading IdP metadata for SAML setup.\n\nUse this endpoint to upload or replace IdP metadata for SAML login configuration.",
        "operationId": "UploadIdPMetadata",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "description": "The form data submitted to upload IdP metadata",
                "properties": {
                  "idp_file": {
                    "description": "The IdP metadata XML file",
                    "format": "binary",
                    "type": "string",
                    "x-mimetype": "application/xml"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Upload IdP metadata",
        "tags": [
          "Organizations"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security/cloud_workload/policy/download": {
      "get": {
        "description": "The download endpoint generates a Cloud Workload Security policy file from your currently active\nCloud Workload Security rules, and downloads them as a .policy file. This file can then be deployed to\nyour agents to update the policy running in your environment.",
        "operationId": "DownloadCloudWorkloadPolicyFile",
        "responses": {
          "200": {
            "content": {
              "application/yaml": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get the latest Cloud Workload Security policy",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/security_monitoring/cloud_workload_security/agent_rules": {
      "get": {
        "description": "Get the list of Agent rules.",
        "operationId": "ListCloudWorkloadSecurityAgentRules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes a list of Agent rule.",
                  "properties": {
                    "data": {
                      "description": "A list of Agent rules objects.",
                      "items": {
                        "description": "Object for a single Agent rule.",
                        "properties": {
                          "attributes": {
                            "description": "A Cloud Workload Security Agent rule returned by the API.",
                            "properties": {
                              "category": {
                                "description": "The category of the Agent rule.",
                                "example": "Process Activity",
                                "type": "string"
                              },
                              "creationDate": {
                                "description": "When the Agent rule was created, timestamp in milliseconds.",
                                "example": 1624366480320,
                                "format": "int64",
                                "type": "integer"
                              },
                              "creator": {
                                "description": "The attributes of the user who created the Agent rule.",
                                "properties": {
                                  "handle": {
                                    "description": "The handle of the user.",
                                    "example": "datadog.user@example.com",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the user.",
                                    "example": "Datadog User",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "defaultRule": {
                                "description": "Whether the rule is included by default.",
                                "example": false,
                                "type": "boolean"
                              },
                              "description": {
                                "description": "The description of the Agent rule.",
                                "example": "My Agent rule",
                                "type": "string"
                              },
                              "enabled": {
                                "description": "Whether the Agent rule is enabled.",
                                "example": true,
                                "type": "boolean"
                              },
                              "expression": {
                                "description": "The SECL expression of the Agent rule.",
                                "example": "exec.file.name == \\\"sh\\\"",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the Agent rule.",
                                "example": "my_agent_rule",
                                "type": "string"
                              },
                              "updatedAt": {
                                "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                                "example": 1624366480320,
                                "format": "int64",
                                "type": "integer"
                              },
                              "updater": {
                                "description": "The attributes of the user who last updated the Agent rule.",
                                "properties": {
                                  "handle": {
                                    "description": "The handle of the user.",
                                    "example": "datadog.user@example.com",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the user.",
                                    "example": "Datadog User",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "version": {
                                "description": "The version of the Agent rule.",
                                "example": 23,
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The ID of the Agent rule.",
                            "example": "3dd-0uc-h1s",
                            "type": "string"
                          },
                          "type": {
                            "default": "agent_rule",
                            "description": "The type of the resource. The value should always be `agent_rule`.",
                            "enum": [
                              "agent_rule"
                            ],
                            "example": "agent_rule",
                            "type": "string",
                            "x-enum-varnames": [
                              "AGENT_RULE"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get all Cloud Workload Security Agent rules",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a new Agent rule with the given parameters.",
        "operationId": "CreateCloudWorkloadSecurityAgentRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request object that includes the Agent rule to create.",
                "properties": {
                  "data": {
                    "description": "Object for a single Agent rule.",
                    "properties": {
                      "attributes": {
                        "description": "Create a new Cloud Workload Security Agent rule.",
                        "properties": {
                          "description": {
                            "description": "The description of the Agent rule.",
                            "example": "My Agent rule",
                            "type": "string"
                          },
                          "enabled": {
                            "description": "Whether the Agent rule is enabled.",
                            "example": true,
                            "type": "boolean"
                          },
                          "expression": {
                            "description": "The SECL expression of the Agent rule.",
                            "example": "exec.file.name == \\\"sh\\\"",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the Agent rule.",
                            "example": "my_agent_rule",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "expression"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "agent_rule",
                        "description": "The type of the resource. The value should always be `agent_rule`.",
                        "enum": [
                          "agent_rule"
                        ],
                        "example": "agent_rule",
                        "type": "string",
                        "x-enum-varnames": [
                          "AGENT_RULE"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "The definition of the new Agent rule.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes an Agent rule.",
                  "properties": {
                    "data": {
                      "description": "Object for a single Agent rule.",
                      "properties": {
                        "attributes": {
                          "description": "A Cloud Workload Security Agent rule returned by the API.",
                          "properties": {
                            "category": {
                              "description": "The category of the Agent rule.",
                              "example": "Process Activity",
                              "type": "string"
                            },
                            "creationDate": {
                              "description": "When the Agent rule was created, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "creator": {
                              "description": "The attributes of the user who created the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "defaultRule": {
                              "description": "Whether the rule is included by default.",
                              "example": false,
                              "type": "boolean"
                            },
                            "description": {
                              "description": "The description of the Agent rule.",
                              "example": "My Agent rule",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Whether the Agent rule is enabled.",
                              "example": true,
                              "type": "boolean"
                            },
                            "expression": {
                              "description": "The SECL expression of the Agent rule.",
                              "example": "exec.file.name == \\\"sh\\\"",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the Agent rule.",
                              "example": "my_agent_rule",
                              "type": "string"
                            },
                            "updatedAt": {
                              "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updater": {
                              "description": "The attributes of the user who last updated the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "version": {
                              "description": "The version of the Agent rule.",
                              "example": 23,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Agent rule.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "agent_rule",
                          "description": "The type of the resource. The value should always be `agent_rule`.",
                          "enum": [
                            "agent_rule"
                          ],
                          "example": "agent_rule",
                          "type": "string",
                          "x-enum-varnames": [
                            "AGENT_RULE"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create a Cloud Workload Security Agent rule",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "agent_rule": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"type\": \"agent_rule\",\n    \"attributes\": {\n      \"name\": \"{{ unique_lower_alnum }}\",\n      \"description\": \"My Agent rule\",\n      \"expression\": \"exec.file.name == \\\"sh\\\"\",\n      \"enabled\": true\n     }\n  }\n}"
              }
            ],
            "step": "there is a valid \"agent_rule\" in the system"
          }
        },
        "x-menu-order": 4,
        "x-undo": {
          "operationId": "DeleteCloudWorkloadSecurityAgentRule",
          "parameters": [
            {
              "name": "agent_rule_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/security_monitoring/cloud_workload_security/agent_rules/{agent_rule_id}": {
      "delete": {
        "description": "Delete a specific Agent rule.",
        "operationId": "DeleteCloudWorkloadSecurityAgentRule",
        "parameters": [
          {
            "description": "The ID of the Agent rule.",
            "example": "3b5-v82-ns6",
            "in": "path",
            "name": "agent_rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete a Cloud Workload Security Agent rule",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-menu-order": 6,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get the details of a specific Agent rule.",
        "operationId": "GetCloudWorkloadSecurityAgentRule",
        "parameters": [
          {
            "description": "The ID of the Agent rule.",
            "example": "3b5-v82-ns6",
            "in": "path",
            "name": "agent_rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes an Agent rule.",
                  "properties": {
                    "data": {
                      "description": "Object for a single Agent rule.",
                      "properties": {
                        "attributes": {
                          "description": "A Cloud Workload Security Agent rule returned by the API.",
                          "properties": {
                            "category": {
                              "description": "The category of the Agent rule.",
                              "example": "Process Activity",
                              "type": "string"
                            },
                            "creationDate": {
                              "description": "When the Agent rule was created, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "creator": {
                              "description": "The attributes of the user who created the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "defaultRule": {
                              "description": "Whether the rule is included by default.",
                              "example": false,
                              "type": "boolean"
                            },
                            "description": {
                              "description": "The description of the Agent rule.",
                              "example": "My Agent rule",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Whether the Agent rule is enabled.",
                              "example": true,
                              "type": "boolean"
                            },
                            "expression": {
                              "description": "The SECL expression of the Agent rule.",
                              "example": "exec.file.name == \\\"sh\\\"",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the Agent rule.",
                              "example": "my_agent_rule",
                              "type": "string"
                            },
                            "updatedAt": {
                              "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updater": {
                              "description": "The attributes of the user who last updated the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "version": {
                              "description": "The version of the Agent rule.",
                              "example": 23,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Agent rule.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "agent_rule",
                          "description": "The type of the resource. The value should always be `agent_rule`.",
                          "enum": [
                            "agent_rule"
                          ],
                          "example": "agent_rule",
                          "type": "string",
                          "x-enum-varnames": [
                            "AGENT_RULE"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get a Cloud Workload Security Agent rule",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-menu-order": 2,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update a specific Agent rule.\nReturns the Agent rule object when the request is successful.",
        "operationId": "UpdateCloudWorkloadSecurityAgentRule",
        "parameters": [
          {
            "description": "The ID of the Agent rule.",
            "example": "3b5-v82-ns6",
            "in": "path",
            "name": "agent_rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request object that includes the Agent rule with the attributes to update.",
                "properties": {
                  "data": {
                    "description": "Object for a single Agent rule.",
                    "properties": {
                      "attributes": {
                        "description": "Update an existing Cloud Workload Security Agent rule.",
                        "properties": {
                          "description": {
                            "description": "The description of the Agent rule.",
                            "example": "My Agent rule",
                            "type": "string"
                          },
                          "enabled": {
                            "description": "Whether the Agent rule is enabled.",
                            "example": true,
                            "type": "boolean"
                          },
                          "expression": {
                            "description": "The SECL expression of the Agent rule.",
                            "example": "exec.file.name == \\\"sh\\\"",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "agent_rule",
                        "description": "The type of the resource. The value should always be `agent_rule`.",
                        "enum": [
                          "agent_rule"
                        ],
                        "example": "agent_rule",
                        "type": "string",
                        "x-enum-varnames": [
                          "AGENT_RULE"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "New definition of the Agent rule.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object that includes an Agent rule.",
                  "properties": {
                    "data": {
                      "description": "Object for a single Agent rule.",
                      "properties": {
                        "attributes": {
                          "description": "A Cloud Workload Security Agent rule returned by the API.",
                          "properties": {
                            "category": {
                              "description": "The category of the Agent rule.",
                              "example": "Process Activity",
                              "type": "string"
                            },
                            "creationDate": {
                              "description": "When the Agent rule was created, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "creator": {
                              "description": "The attributes of the user who created the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "defaultRule": {
                              "description": "Whether the rule is included by default.",
                              "example": false,
                              "type": "boolean"
                            },
                            "description": {
                              "description": "The description of the Agent rule.",
                              "example": "My Agent rule",
                              "type": "string"
                            },
                            "enabled": {
                              "description": "Whether the Agent rule is enabled.",
                              "example": true,
                              "type": "boolean"
                            },
                            "expression": {
                              "description": "The SECL expression of the Agent rule.",
                              "example": "exec.file.name == \\\"sh\\\"",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the Agent rule.",
                              "example": "my_agent_rule",
                              "type": "string"
                            },
                            "updatedAt": {
                              "description": "When the Agent rule was last updated, timestamp in milliseconds.",
                              "example": 1624366480320,
                              "format": "int64",
                              "type": "integer"
                            },
                            "updater": {
                              "description": "The attributes of the user who last updated the Agent rule.",
                              "properties": {
                                "handle": {
                                  "description": "The handle of the user.",
                                  "example": "datadog.user@example.com",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "The name of the user.",
                                  "example": "Datadog User",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "version": {
                              "description": "The version of the Agent rule.",
                              "example": 23,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the Agent rule.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "agent_rule",
                          "description": "The type of the resource. The value should always be `agent_rule`.",
                          "enum": [
                            "agent_rule"
                          ],
                          "example": "agent_rule",
                          "type": "string",
                          "x-enum-varnames": [
                            "AGENT_RULE"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Concurrent Modification"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Update a Cloud Workload Security Agent rule",
        "tags": [
          "Cloud Workload Security"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security_monitoring/configuration/security_filters": {
      "get": {
        "description": "Get the list of configured security filters with their definitions.",
        "operationId": "ListSecurityFilters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "All the available security filters objects.",
                  "properties": {
                    "data": {
                      "description": "A list of security filters objects.",
                      "items": {
                        "description": "The security filter's properties.",
                        "properties": {
                          "attributes": {
                            "description": "The object describing a security filter.",
                            "properties": {
                              "exclusion_filters": {
                                "description": "The list of exclusion filters applied in this security filter.",
                                "items": {
                                  "description": "A single exclusion filter.",
                                  "properties": {
                                    "name": {
                                      "description": "The exclusion filter name.",
                                      "example": "Exclude staging",
                                      "type": "string"
                                    },
                                    "query": {
                                      "description": "The exclusion filter query.",
                                      "example": "source:staging",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "filtered_data_type": {
                                "description": "The filtered data type.",
                                "enum": [
                                  "logs"
                                ],
                                "example": "logs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "LOGS"
                                ]
                              },
                              "is_builtin": {
                                "description": "Whether the security filter is the built-in filter.",
                                "example": false,
                                "type": "boolean"
                              },
                              "is_enabled": {
                                "description": "Whether the security filter is enabled.",
                                "example": false,
                                "type": "boolean"
                              },
                              "name": {
                                "description": "The security filter name.",
                                "example": "Custom security filter",
                                "type": "string"
                              },
                              "query": {
                                "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                                "example": "service:api",
                                "type": "string"
                              },
                              "version": {
                                "description": "The version of the security filter.",
                                "example": 1,
                                "format": "int32",
                                "maximum": 2147483647,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The ID of the security filter.",
                            "example": "3dd-0uc-h1s",
                            "type": "string"
                          },
                          "type": {
                            "default": "security_filters",
                            "description": "The type of the resource. The value should always be `security_filters`.",
                            "enum": [
                              "security_filters"
                            ],
                            "example": "security_filters",
                            "type": "string",
                            "x-enum-varnames": [
                              "SECURITY_FILTERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Optional metadata associated to the response.",
                      "properties": {
                        "warning": {
                          "description": "A warning message.",
                          "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_filters_read"
            ]
          }
        ],
        "summary": "Get all security filters",
        "tags": [
          "Security Monitoring"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a security filter.\n\nSee the [security filter guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)\nfor more examples.",
        "operationId": "CreateSecurityFilter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request object that includes the security filter that you would like to create.",
                "properties": {
                  "data": {
                    "description": "Object for a single security filter.",
                    "properties": {
                      "attributes": {
                        "description": "Object containing the attributes of the security filter to be created.",
                        "properties": {
                          "exclusion_filters": {
                            "description": "Exclusion filters to exclude some logs from the security filter.",
                            "example": [
                              {
                                "name": "Exclude staging",
                                "query": "source:staging"
                              }
                            ],
                            "items": {
                              "description": "Exclusion filter for the security filter.",
                              "example": {
                                "name": "Exclude staging",
                                "query": "source:staging"
                              },
                              "properties": {
                                "name": {
                                  "description": "Exclusion filter name.",
                                  "example": "Exclude staging",
                                  "type": "string"
                                },
                                "query": {
                                  "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                                  "example": "source:staging",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "query"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "filtered_data_type": {
                            "description": "The filtered data type.",
                            "enum": [
                              "logs"
                            ],
                            "example": "logs",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOGS"
                            ]
                          },
                          "is_enabled": {
                            "description": "Whether the security filter is enabled.",
                            "example": true,
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The name of the security filter.",
                            "example": "Custom security filter",
                            "type": "string"
                          },
                          "query": {
                            "description": "The query of the security filter.",
                            "example": "service:api",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "query",
                          "exclusion_filters",
                          "filtered_data_type",
                          "is_enabled"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "security_filters",
                        "description": "The type of the resource. The value should always be `security_filters`.",
                        "enum": [
                          "security_filters"
                        ],
                        "example": "security_filters",
                        "type": "string",
                        "x-enum-varnames": [
                          "SECURITY_FILTERS"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "The definition of the new security filter.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single security filter.",
                  "properties": {
                    "data": {
                      "description": "The security filter's properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a security filter.",
                          "properties": {
                            "exclusion_filters": {
                              "description": "The list of exclusion filters applied in this security filter.",
                              "items": {
                                "description": "A single exclusion filter.",
                                "properties": {
                                  "name": {
                                    "description": "The exclusion filter name.",
                                    "example": "Exclude staging",
                                    "type": "string"
                                  },
                                  "query": {
                                    "description": "The exclusion filter query.",
                                    "example": "source:staging",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "filtered_data_type": {
                              "description": "The filtered data type.",
                              "enum": [
                                "logs"
                              ],
                              "example": "logs",
                              "type": "string",
                              "x-enum-varnames": [
                                "LOGS"
                              ]
                            },
                            "is_builtin": {
                              "description": "Whether the security filter is the built-in filter.",
                              "example": false,
                              "type": "boolean"
                            },
                            "is_enabled": {
                              "description": "Whether the security filter is enabled.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The security filter name.",
                              "example": "Custom security filter",
                              "type": "string"
                            },
                            "query": {
                              "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                              "example": "service:api",
                              "type": "string"
                            },
                            "version": {
                              "description": "The version of the security filter.",
                              "example": 1,
                              "format": "int32",
                              "maximum": 2147483647,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the security filter.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "security_filters",
                          "description": "The type of the resource. The value should always be `security_filters`.",
                          "enum": [
                            "security_filters"
                          ],
                          "example": "security_filters",
                          "type": "string",
                          "x-enum-varnames": [
                            "SECURITY_FILTERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Optional metadata associated to the response.",
                      "properties": {
                        "warning": {
                          "description": "A warning message.",
                          "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_filters_write"
            ]
          }
        ],
        "summary": "Create a security filter",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "security_filter": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"type\": \"security_filters\",\n    \"attributes\": {\n      \"name\": \"{{ unique }}\",\n      \"query\": \"service:{{ unique_alnum }}\",\n      \"exclusion_filters\":[\n        {\n          \"name\": \"Exclude logs from staging\",\n          \"query\": \"source:staging\"\n        }\n     ],\n      \"filtered_data_type\":\"logs\",\n      \"is_enabled\": true\n     }\n  }\n}"
              }
            ],
            "step": "there is a valid \"security_filter\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteSecurityFilter",
          "parameters": [
            {
              "name": "security_filter_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/security_monitoring/configuration/security_filters/{security_filter_id}": {
      "delete": {
        "description": "Delete a specific security filter.",
        "operationId": "DeleteSecurityFilter",
        "parameters": [
          {
            "description": "The ID of the security filter.",
            "in": "path",
            "name": "security_filter_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_filters_write"
            ]
          }
        ],
        "summary": "Delete a security filter",
        "tags": [
          "Security Monitoring"
        ],
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get the details of a specific security filter.\n\nSee the [security filter guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)\nfor more examples.",
        "operationId": "GetSecurityFilter",
        "parameters": [
          {
            "description": "The ID of the security filter.",
            "in": "path",
            "name": "security_filter_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single security filter.",
                  "properties": {
                    "data": {
                      "description": "The security filter's properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a security filter.",
                          "properties": {
                            "exclusion_filters": {
                              "description": "The list of exclusion filters applied in this security filter.",
                              "items": {
                                "description": "A single exclusion filter.",
                                "properties": {
                                  "name": {
                                    "description": "The exclusion filter name.",
                                    "example": "Exclude staging",
                                    "type": "string"
                                  },
                                  "query": {
                                    "description": "The exclusion filter query.",
                                    "example": "source:staging",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "filtered_data_type": {
                              "description": "The filtered data type.",
                              "enum": [
                                "logs"
                              ],
                              "example": "logs",
                              "type": "string",
                              "x-enum-varnames": [
                                "LOGS"
                              ]
                            },
                            "is_builtin": {
                              "description": "Whether the security filter is the built-in filter.",
                              "example": false,
                              "type": "boolean"
                            },
                            "is_enabled": {
                              "description": "Whether the security filter is enabled.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The security filter name.",
                              "example": "Custom security filter",
                              "type": "string"
                            },
                            "query": {
                              "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                              "example": "service:api",
                              "type": "string"
                            },
                            "version": {
                              "description": "The version of the security filter.",
                              "example": 1,
                              "format": "int32",
                              "maximum": 2147483647,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the security filter.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "security_filters",
                          "description": "The type of the resource. The value should always be `security_filters`.",
                          "enum": [
                            "security_filters"
                          ],
                          "example": "security_filters",
                          "type": "string",
                          "x-enum-varnames": [
                            "SECURITY_FILTERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Optional metadata associated to the response.",
                      "properties": {
                        "warning": {
                          "description": "A warning message.",
                          "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_filters_read"
            ]
          }
        ],
        "summary": "Get a security filter",
        "tags": [
          "Security Monitoring"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Update a specific security filter.\nReturns the security filter object when the request is successful.",
        "operationId": "UpdateSecurityFilter",
        "parameters": [
          {
            "description": "The ID of the security filter.",
            "in": "path",
            "name": "security_filter_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The new security filter body.",
                "properties": {
                  "data": {
                    "description": "The new security filter properties.",
                    "properties": {
                      "attributes": {
                        "description": "The security filters properties to be updated.",
                        "properties": {
                          "exclusion_filters": {
                            "description": "Exclusion filters to exclude some logs from the security filter.",
                            "example": [],
                            "items": {
                              "description": "Exclusion filter for the security filter.",
                              "example": {
                                "name": "Exclude staging",
                                "query": "source:staging"
                              },
                              "properties": {
                                "name": {
                                  "description": "Exclusion filter name.",
                                  "example": "Exclude staging",
                                  "type": "string"
                                },
                                "query": {
                                  "description": "Exclusion filter query. Logs that match this query are excluded from the security filter.",
                                  "example": "source:staging",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "name",
                                "query"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "filtered_data_type": {
                            "description": "The filtered data type.",
                            "enum": [
                              "logs"
                            ],
                            "example": "logs",
                            "type": "string",
                            "x-enum-varnames": [
                              "LOGS"
                            ]
                          },
                          "is_enabled": {
                            "description": "Whether the security filter is enabled.",
                            "example": true,
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The name of the security filter.",
                            "example": "Custom security filter",
                            "type": "string"
                          },
                          "query": {
                            "description": "The query of the security filter.",
                            "example": "service:api",
                            "type": "string"
                          },
                          "version": {
                            "description": "The version of the security filter to update.",
                            "example": 1,
                            "format": "int32",
                            "maximum": 2147483647,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "security_filters",
                        "description": "The type of the resource. The value should always be `security_filters`.",
                        "enum": [
                          "security_filters"
                        ],
                        "example": "security_filters",
                        "type": "string",
                        "x-enum-varnames": [
                          "SECURITY_FILTERS"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "New definition of the security filter.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response object which includes a single security filter.",
                  "properties": {
                    "data": {
                      "description": "The security filter's properties.",
                      "properties": {
                        "attributes": {
                          "description": "The object describing a security filter.",
                          "properties": {
                            "exclusion_filters": {
                              "description": "The list of exclusion filters applied in this security filter.",
                              "items": {
                                "description": "A single exclusion filter.",
                                "properties": {
                                  "name": {
                                    "description": "The exclusion filter name.",
                                    "example": "Exclude staging",
                                    "type": "string"
                                  },
                                  "query": {
                                    "description": "The exclusion filter query.",
                                    "example": "source:staging",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "filtered_data_type": {
                              "description": "The filtered data type.",
                              "enum": [
                                "logs"
                              ],
                              "example": "logs",
                              "type": "string",
                              "x-enum-varnames": [
                                "LOGS"
                              ]
                            },
                            "is_builtin": {
                              "description": "Whether the security filter is the built-in filter.",
                              "example": false,
                              "type": "boolean"
                            },
                            "is_enabled": {
                              "description": "Whether the security filter is enabled.",
                              "example": false,
                              "type": "boolean"
                            },
                            "name": {
                              "description": "The security filter name.",
                              "example": "Custom security filter",
                              "type": "string"
                            },
                            "query": {
                              "description": "The security filter query. Logs accepted by this query will be accepted by this filter.",
                              "example": "service:api",
                              "type": "string"
                            },
                            "version": {
                              "description": "The version of the security filter.",
                              "example": 1,
                              "format": "int32",
                              "maximum": 2147483647,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The ID of the security filter.",
                          "example": "3dd-0uc-h1s",
                          "type": "string"
                        },
                        "type": {
                          "default": "security_filters",
                          "description": "The type of the resource. The value should always be `security_filters`.",
                          "enum": [
                            "security_filters"
                          ],
                          "example": "security_filters",
                          "type": "string",
                          "x-enum-varnames": [
                            "SECURITY_FILTERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Optional metadata associated to the response.",
                      "properties": {
                        "warning": {
                          "description": "A warning message.",
                          "example": "All the security filters are disabled. As a result, no logs are being analyzed.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Concurrent Modification"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_filters_write"
            ]
          }
        ],
        "summary": "Update a security filter",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security_monitoring/rules": {
      "get": {
        "description": "List rules.",
        "operationId": "ListSecurityMonitoringRules",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of rules.",
                  "properties": {
                    "data": {
                      "description": "Array containing the list of rules.",
                      "items": {
                        "description": "Rule.",
                        "properties": {
                          "cases": {
                            "description": "Cases for generating signals.",
                            "items": {
                              "description": "Case when signal is generated.",
                              "properties": {
                                "condition": {
                                  "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the case.",
                                  "type": "string"
                                },
                                "notifications": {
                                  "description": "Notification targets for each rule case.",
                                  "items": {
                                    "description": "Notification.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "status": {
                                  "description": "Severity of the Security Signal.",
                                  "enum": [
                                    "info",
                                    "low",
                                    "medium",
                                    "high",
                                    "critical"
                                  ],
                                  "example": "critical",
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "INFO",
                                    "LOW",
                                    "MEDIUM",
                                    "HIGH",
                                    "CRITICAL"
                                  ]
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "createdAt": {
                            "description": "When the rule was created, timestamp in milliseconds.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "creationAuthorId": {
                            "description": "User ID of the user who created the rule.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "filters": {
                            "description": "Additional queries to filter matched events before they are processed.",
                            "items": {
                              "description": "The rule's suppression filter.",
                              "properties": {
                                "action": {
                                  "description": "The type of filtering action.",
                                  "enum": [
                                    "require",
                                    "suppress"
                                  ],
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "REQUIRE",
                                    "SUPPRESS"
                                  ]
                                },
                                "query": {
                                  "description": "Query for selecting logs to apply the filtering action.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "hasExtendedTitle": {
                            "description": "Whether the notifications include the triggering group-by values in their title.",
                            "type": "boolean"
                          },
                          "id": {
                            "description": "The ID of the rule.",
                            "type": "string"
                          },
                          "isDefault": {
                            "description": "Whether the rule is included by default.",
                            "type": "boolean"
                          },
                          "isDeleted": {
                            "description": "Whether the rule has been deleted.",
                            "type": "boolean"
                          },
                          "isEnabled": {
                            "description": "Whether the rule is enabled.",
                            "type": "boolean"
                          },
                          "message": {
                            "description": "Message for generated signals.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the rule.",
                            "type": "string"
                          },
                          "options": {
                            "description": "Options on rules.",
                            "properties": {
                              "decreaseCriticalityBasedOnEnv": {
                                "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                                "example": false,
                                "type": "boolean"
                              },
                              "detectionMethod": {
                                "description": "The detection method.",
                                "enum": [
                                  "threshold",
                                  "new_value",
                                  "anomaly_detection",
                                  "impossible_travel",
                                  "hardcoded"
                                ],
                                "type": "string",
                                "x-enum-varnames": [
                                  "THRESHOLD",
                                  "NEW_VALUE",
                                  "ANOMALY_DETECTION",
                                  "IMPOSSIBLE_TRAVEL",
                                  "HARDCODED"
                                ]
                              },
                              "evaluationWindow": {
                                "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS"
                                ]
                              },
                              "hardcodedEvaluatorType": {
                                "description": "Hardcoded evaluator type.",
                                "enum": [
                                  "log4shell"
                                ],
                                "type": "string",
                                "x-enum-varnames": [
                                  "LOG4SHELL"
                                ]
                              },
                              "impossibleTravelOptions": {
                                "description": "Options on impossible travel rules.",
                                "properties": {
                                  "baselineUserLocations": {
                                    "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                                    "example": true,
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "keepAlive": {
                                "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200,
                                  10800,
                                  21600
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS",
                                  "THREE_HOURS",
                                  "SIX_HOURS"
                                ]
                              },
                              "maxSignalDuration": {
                                "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                                "enum": [
                                  0,
                                  60,
                                  300,
                                  600,
                                  900,
                                  1800,
                                  3600,
                                  7200,
                                  10800,
                                  21600,
                                  43200,
                                  86400
                                ],
                                "format": "int32",
                                "type": "integer",
                                "x-enum-varnames": [
                                  "ZERO_MINUTES",
                                  "ONE_MINUTE",
                                  "FIVE_MINUTES",
                                  "TEN_MINUTES",
                                  "FIFTEEN_MINUTES",
                                  "THIRTY_MINUTES",
                                  "ONE_HOUR",
                                  "TWO_HOURS",
                                  "THREE_HOURS",
                                  "SIX_HOURS",
                                  "TWELVE_HOURS",
                                  "ONE_DAY"
                                ]
                              },
                              "newValueOptions": {
                                "description": "Options on new value rules.",
                                "properties": {
                                  "forgetAfter": {
                                    "description": "The duration in days after which a learned value is forgotten.",
                                    "enum": [
                                      1,
                                      2,
                                      7,
                                      14,
                                      21,
                                      28
                                    ],
                                    "format": "int32",
                                    "type": "integer",
                                    "x-enum-varnames": [
                                      "ONE_DAY",
                                      "TWO_DAYS",
                                      "ONE_WEEK",
                                      "TWO_WEEKS",
                                      "THREE_WEEKS",
                                      "FOUR_WEEKS"
                                    ]
                                  },
                                  "learningDuration": {
                                    "default": 0,
                                    "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                                    "enum": [
                                      0,
                                      1,
                                      7
                                    ],
                                    "format": "int32",
                                    "type": "integer",
                                    "x-enum-varnames": [
                                      "ZERO_DAYS",
                                      "ONE_DAY",
                                      "SEVEN_DAYS"
                                    ]
                                  },
                                  "learningMethod": {
                                    "default": "duration",
                                    "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                                    "enum": [
                                      "duration",
                                      "threshold"
                                    ],
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "DURATION",
                                      "THRESHOLD"
                                    ]
                                  },
                                  "learningThreshold": {
                                    "default": 0,
                                    "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                                    "enum": [
                                      0,
                                      1
                                    ],
                                    "format": "int32",
                                    "type": "integer",
                                    "x-enum-varnames": [
                                      "ZERO_OCCURRENCES",
                                      "ONE_OCCURRENCE"
                                    ]
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "queries": {
                            "description": "Queries for selecting logs which are part of the rule.",
                            "items": {
                              "description": "Query for matching rule.",
                              "properties": {
                                "aggregation": {
                                  "description": "The aggregation type.",
                                  "enum": [
                                    "count",
                                    "cardinality",
                                    "sum",
                                    "max",
                                    "new_value",
                                    "geo_data"
                                  ],
                                  "type": "string",
                                  "x-enum-varnames": [
                                    "COUNT",
                                    "CARDINALITY",
                                    "SUM",
                                    "MAX",
                                    "NEW_VALUE",
                                    "GEO_DATA"
                                  ]
                                },
                                "distinctFields": {
                                  "description": "Field for which the cardinality is measured. Sent as an array.",
                                  "items": {
                                    "description": "Field.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "groupByFields": {
                                  "description": "Fields to group by.",
                                  "items": {
                                    "description": "Field.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "metric": {
                                  "description": "The target field to aggregate over when using the sum or max\naggregations.",
                                  "type": "string"
                                },
                                "metrics": {
                                  "description": "Group of target fields to aggregate over when using the new value aggregations.",
                                  "items": {
                                    "description": "Field.",
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "name": {
                                  "description": "Name of the query.",
                                  "type": "string"
                                },
                                "query": {
                                  "description": "Query to run on logs.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "tags": {
                            "description": "Tags for generated signals.",
                            "items": {
                              "description": "Tag.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "type": {
                            "description": "The rule type.",
                            "enum": [
                              "log_detection",
                              "infrastructure_configuration",
                              "workload_security",
                              "cloud_configuration"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "LOG_DETECTION",
                              "INFRASTRUCTURE_CONFIGURATION",
                              "WORKLOAD_SECURITY",
                              "CLOUD_CONFIGURATION"
                            ]
                          },
                          "updateAuthorId": {
                            "description": "User ID of the user who updated the rule.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "version": {
                            "description": "The version of the rule.",
                            "format": "int64",
                            "type": "integer"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_rules_read"
            ]
          }
        ],
        "summary": "List rules",
        "tags": [
          "Security Monitoring"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a detection rule.",
        "operationId": "CreateSecurityMonitoringRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a new rule.",
                "properties": {
                  "cases": {
                    "description": "Cases for generating signals.",
                    "example": [],
                    "items": {
                      "description": "Case when signal is generated.",
                      "properties": {
                        "condition": {
                          "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the case.",
                          "type": "string"
                        },
                        "notifications": {
                          "description": "Notification targets for each rule case.",
                          "items": {
                            "description": "Notification.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "Severity of the Security Signal.",
                          "enum": [
                            "info",
                            "low",
                            "medium",
                            "high",
                            "critical"
                          ],
                          "example": "critical",
                          "type": "string",
                          "x-enum-varnames": [
                            "INFO",
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "CRITICAL"
                          ]
                        }
                      },
                      "required": [
                        "status"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filters": {
                    "description": "Additional queries to filter matched events before they are processed.",
                    "items": {
                      "description": "The rule's suppression filter.",
                      "properties": {
                        "action": {
                          "description": "The type of filtering action.",
                          "enum": [
                            "require",
                            "suppress"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "REQUIRE",
                            "SUPPRESS"
                          ]
                        },
                        "query": {
                          "description": "Query for selecting logs to apply the filtering action.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "hasExtendedTitle": {
                    "description": "Whether the notifications include the triggering group-by values in their title.",
                    "example": true,
                    "type": "boolean"
                  },
                  "isEnabled": {
                    "description": "Whether the rule is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Message for generated signals.",
                    "example": "",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the rule.",
                    "example": "My security monitoring rule.",
                    "type": "string"
                  },
                  "options": {
                    "description": "Options on rules.",
                    "properties": {
                      "decreaseCriticalityBasedOnEnv": {
                        "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                        "example": false,
                        "type": "boolean"
                      },
                      "detectionMethod": {
                        "description": "The detection method.",
                        "enum": [
                          "threshold",
                          "new_value",
                          "anomaly_detection",
                          "impossible_travel",
                          "hardcoded"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "THRESHOLD",
                          "NEW_VALUE",
                          "ANOMALY_DETECTION",
                          "IMPOSSIBLE_TRAVEL",
                          "HARDCODED"
                        ]
                      },
                      "evaluationWindow": {
                        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS"
                        ]
                      },
                      "hardcodedEvaluatorType": {
                        "description": "Hardcoded evaluator type.",
                        "enum": [
                          "log4shell"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "LOG4SHELL"
                        ]
                      },
                      "impossibleTravelOptions": {
                        "description": "Options on impossible travel rules.",
                        "properties": {
                          "baselineUserLocations": {
                            "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "keepAlive": {
                        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS"
                        ]
                      },
                      "maxSignalDuration": {
                        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600,
                          43200,
                          86400
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS",
                          "TWELVE_HOURS",
                          "ONE_DAY"
                        ]
                      },
                      "newValueOptions": {
                        "description": "Options on new value rules.",
                        "properties": {
                          "forgetAfter": {
                            "description": "The duration in days after which a learned value is forgotten.",
                            "enum": [
                              1,
                              2,
                              7,
                              14,
                              21,
                              28
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ONE_DAY",
                              "TWO_DAYS",
                              "ONE_WEEK",
                              "TWO_WEEKS",
                              "THREE_WEEKS",
                              "FOUR_WEEKS"
                            ]
                          },
                          "learningDuration": {
                            "default": 0,
                            "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                            "enum": [
                              0,
                              1,
                              7
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ZERO_DAYS",
                              "ONE_DAY",
                              "SEVEN_DAYS"
                            ]
                          },
                          "learningMethod": {
                            "default": "duration",
                            "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                            "enum": [
                              "duration",
                              "threshold"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "DURATION",
                              "THRESHOLD"
                            ]
                          },
                          "learningThreshold": {
                            "default": 0,
                            "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                            "enum": [
                              0,
                              1
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ZERO_OCCURRENCES",
                              "ONE_OCCURRENCE"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "queries": {
                    "description": "Queries for selecting logs which are part of the rule.",
                    "example": [],
                    "items": {
                      "description": "Query for matching rule.",
                      "properties": {
                        "aggregation": {
                          "description": "The aggregation type.",
                          "enum": [
                            "count",
                            "cardinality",
                            "sum",
                            "max",
                            "new_value",
                            "geo_data"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "SUM",
                            "MAX",
                            "NEW_VALUE",
                            "GEO_DATA"
                          ]
                        },
                        "distinctFields": {
                          "description": "Field for which the cardinality is measured. Sent as an array.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "groupByFields": {
                          "description": "Fields to group by.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "metric": {
                          "description": "The target field to aggregate over when using the sum or max\naggregations.",
                          "type": "string"
                        },
                        "metrics": {
                          "description": "Group of target fields to aggregate over when using the new value aggregations.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "Name of the query.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query to run on logs.",
                          "example": "a > 3",
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "tags": {
                    "description": "Tags for generated signals.",
                    "example": [
                      "env:prod",
                      "team:security"
                    ],
                    "items": {
                      "description": "Tag.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": {
                    "description": "The rule type.",
                    "enum": [
                      "log_detection",
                      "workload_security"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "LOG_DETECTION",
                      "WORKLOAD_SECURITY"
                    ]
                  }
                },
                "required": [
                  "name",
                  "isEnabled",
                  "queries",
                  "options",
                  "cases",
                  "message"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "example": "critical",
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "filters": {
                      "description": "Additional queries to filter matched events before they are processed.",
                      "items": {
                        "description": "The rule's suppression filter.",
                        "properties": {
                          "action": {
                            "description": "The type of filtering action.",
                            "enum": [
                              "require",
                              "suppress"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "REQUIRE",
                              "SUPPRESS"
                            ]
                          },
                          "query": {
                            "description": "Query for selecting logs to apply the filtering action.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "hasExtendedTitle": {
                      "description": "Whether the notifications include the triggering group-by values in their title.",
                      "type": "boolean"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "decreaseCriticalityBasedOnEnv": {
                          "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                          "example": false,
                          "type": "boolean"
                        },
                        "detectionMethod": {
                          "description": "The detection method.",
                          "enum": [
                            "threshold",
                            "new_value",
                            "anomaly_detection",
                            "impossible_travel",
                            "hardcoded"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "THRESHOLD",
                            "NEW_VALUE",
                            "ANOMALY_DETECTION",
                            "IMPOSSIBLE_TRAVEL",
                            "HARDCODED"
                          ]
                        },
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "hardcodedEvaluatorType": {
                          "description": "Hardcoded evaluator type.",
                          "enum": [
                            "log4shell"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "LOG4SHELL"
                          ]
                        },
                        "impossibleTravelOptions": {
                          "description": "Options on impossible travel rules.",
                          "properties": {
                            "baselineUserLocations": {
                              "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                              "example": true,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        },
                        "newValueOptions": {
                          "description": "Options on new value rules.",
                          "properties": {
                            "forgetAfter": {
                              "description": "The duration in days after which a learned value is forgotten.",
                              "enum": [
                                1,
                                2,
                                7,
                                14,
                                21,
                                28
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ONE_DAY",
                                "TWO_DAYS",
                                "ONE_WEEK",
                                "TWO_WEEKS",
                                "THREE_WEEKS",
                                "FOUR_WEEKS"
                              ]
                            },
                            "learningDuration": {
                              "default": 0,
                              "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                              "enum": [
                                0,
                                1,
                                7
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_DAYS",
                                "ONE_DAY",
                                "SEVEN_DAYS"
                              ]
                            },
                            "learningMethod": {
                              "default": "duration",
                              "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                              "enum": [
                                "duration",
                                "threshold"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "DURATION",
                                "THRESHOLD"
                              ]
                            },
                            "learningThreshold": {
                              "default": 0,
                              "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                              "enum": [
                                0,
                                1
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_OCCURRENCES",
                                "ONE_OCCURRENCE"
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max",
                              "new_value",
                              "geo_data"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX",
                              "NEW_VALUE",
                              "GEO_DATA"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "metrics": {
                            "description": "Group of target fields to aggregate over when using the new value aggregations.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": {
                      "description": "The rule type.",
                      "enum": [
                        "log_detection",
                        "infrastructure_configuration",
                        "workload_security",
                        "cloud_configuration"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "LOG_DETECTION",
                        "INFRASTRUCTURE_CONFIGURATION",
                        "WORKLOAD_SECURITY",
                        "CLOUD_CONFIGURATION"
                      ]
                    },
                    "updateAuthorId": {
                      "description": "User ID of the user who updated the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_rules_write"
            ]
          }
        ],
        "summary": "Create a detection rule",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "security_rule": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"name\": \"{{ unique }}\",\n  \"queries\": [{\n    \"query\": \"@test:true\",\n    \"aggregation\": \"count\",\n    \"groupByFields\": [],\n    \"distinctFields\": [],\n    \"metric\": \"\"\n  }],\n  \"filters\": [],\n  \"cases\": [{\n    \"name\": \"\",\n    \"status\": \"info\",\n    \"condition\": \"a > 0\",\n    \"notifications\": []\n  }],\n  \"options\": {\n    \"evaluationWindow\": 900,\n    \"keepAlive\": 3600,\n    \"maxSignalDuration\": 86400\n  },\n  \"message\": \"Test rule\",\n  \"tags\": [],\n  \"isEnabled\": true,\n  \"type\": \"log_detection\"\n}"
              }
            ],
            "step": "there is a valid \"security_rule\" in the system"
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DeleteSecurityMonitoringRule",
          "parameters": [
            {
              "name": "rule_id",
              "source": "id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/security_monitoring/rules/{rule_id}": {
      "delete": {
        "description": "Delete an existing rule. Default rules cannot be deleted.",
        "operationId": "DeleteSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_rules_write"
            ]
          }
        ],
        "summary": "Delete an existing rule",
        "tags": [
          "Security Monitoring"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a rule's details.",
        "operationId": "GetSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "example": "critical",
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "filters": {
                      "description": "Additional queries to filter matched events before they are processed.",
                      "items": {
                        "description": "The rule's suppression filter.",
                        "properties": {
                          "action": {
                            "description": "The type of filtering action.",
                            "enum": [
                              "require",
                              "suppress"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "REQUIRE",
                              "SUPPRESS"
                            ]
                          },
                          "query": {
                            "description": "Query for selecting logs to apply the filtering action.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "hasExtendedTitle": {
                      "description": "Whether the notifications include the triggering group-by values in their title.",
                      "type": "boolean"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "decreaseCriticalityBasedOnEnv": {
                          "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                          "example": false,
                          "type": "boolean"
                        },
                        "detectionMethod": {
                          "description": "The detection method.",
                          "enum": [
                            "threshold",
                            "new_value",
                            "anomaly_detection",
                            "impossible_travel",
                            "hardcoded"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "THRESHOLD",
                            "NEW_VALUE",
                            "ANOMALY_DETECTION",
                            "IMPOSSIBLE_TRAVEL",
                            "HARDCODED"
                          ]
                        },
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "hardcodedEvaluatorType": {
                          "description": "Hardcoded evaluator type.",
                          "enum": [
                            "log4shell"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "LOG4SHELL"
                          ]
                        },
                        "impossibleTravelOptions": {
                          "description": "Options on impossible travel rules.",
                          "properties": {
                            "baselineUserLocations": {
                              "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                              "example": true,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        },
                        "newValueOptions": {
                          "description": "Options on new value rules.",
                          "properties": {
                            "forgetAfter": {
                              "description": "The duration in days after which a learned value is forgotten.",
                              "enum": [
                                1,
                                2,
                                7,
                                14,
                                21,
                                28
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ONE_DAY",
                                "TWO_DAYS",
                                "ONE_WEEK",
                                "TWO_WEEKS",
                                "THREE_WEEKS",
                                "FOUR_WEEKS"
                              ]
                            },
                            "learningDuration": {
                              "default": 0,
                              "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                              "enum": [
                                0,
                                1,
                                7
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_DAYS",
                                "ONE_DAY",
                                "SEVEN_DAYS"
                              ]
                            },
                            "learningMethod": {
                              "default": "duration",
                              "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                              "enum": [
                                "duration",
                                "threshold"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "DURATION",
                                "THRESHOLD"
                              ]
                            },
                            "learningThreshold": {
                              "default": 0,
                              "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                              "enum": [
                                0,
                                1
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_OCCURRENCES",
                                "ONE_OCCURRENCE"
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max",
                              "new_value",
                              "geo_data"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX",
                              "NEW_VALUE",
                              "GEO_DATA"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "metrics": {
                            "description": "Group of target fields to aggregate over when using the new value aggregations.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": {
                      "description": "The rule type.",
                      "enum": [
                        "log_detection",
                        "infrastructure_configuration",
                        "workload_security",
                        "cloud_configuration"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "LOG_DETECTION",
                        "INFRASTRUCTURE_CONFIGURATION",
                        "WORKLOAD_SECURITY",
                        "CLOUD_CONFIGURATION"
                      ]
                    },
                    "updateAuthorId": {
                      "description": "User ID of the user who updated the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_rules_read"
            ]
          }
        ],
        "summary": "Get a rule's details",
        "tags": [
          "Security Monitoring"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "put": {
        "description": "Update an existing rule. When updating `cases`, `queries` or `options`, the whole field\nmust be included. For example, when modifying a query all queries must be included.\nDefault rules can only be updated to be enabled and to change notifications.",
        "operationId": "UpdateSecurityMonitoringRule",
        "parameters": [
          {
            "description": "The ID of the rule.",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update an existing rule.",
                "properties": {
                  "cases": {
                    "description": "Cases for generating signals.",
                    "items": {
                      "description": "Case when signal is generated.",
                      "properties": {
                        "condition": {
                          "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the case.",
                          "type": "string"
                        },
                        "notifications": {
                          "description": "Notification targets for each rule case.",
                          "items": {
                            "description": "Notification.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "description": "Severity of the Security Signal.",
                          "enum": [
                            "info",
                            "low",
                            "medium",
                            "high",
                            "critical"
                          ],
                          "example": "critical",
                          "type": "string",
                          "x-enum-varnames": [
                            "INFO",
                            "LOW",
                            "MEDIUM",
                            "HIGH",
                            "CRITICAL"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "filters": {
                    "description": "Additional queries to filter matched events before they are processed.",
                    "items": {
                      "description": "The rule's suppression filter.",
                      "properties": {
                        "action": {
                          "description": "The type of filtering action.",
                          "enum": [
                            "require",
                            "suppress"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "REQUIRE",
                            "SUPPRESS"
                          ]
                        },
                        "query": {
                          "description": "Query for selecting logs to apply the filtering action.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "hasExtendedTitle": {
                    "description": "Whether the notifications include the triggering group-by values in their title.",
                    "example": true,
                    "type": "boolean"
                  },
                  "isEnabled": {
                    "description": "Whether the rule is enabled.",
                    "type": "boolean"
                  },
                  "message": {
                    "description": "Message for generated signals.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the rule.",
                    "type": "string"
                  },
                  "options": {
                    "description": "Options on rules.",
                    "properties": {
                      "decreaseCriticalityBasedOnEnv": {
                        "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                        "example": false,
                        "type": "boolean"
                      },
                      "detectionMethod": {
                        "description": "The detection method.",
                        "enum": [
                          "threshold",
                          "new_value",
                          "anomaly_detection",
                          "impossible_travel",
                          "hardcoded"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "THRESHOLD",
                          "NEW_VALUE",
                          "ANOMALY_DETECTION",
                          "IMPOSSIBLE_TRAVEL",
                          "HARDCODED"
                        ]
                      },
                      "evaluationWindow": {
                        "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS"
                        ]
                      },
                      "hardcodedEvaluatorType": {
                        "description": "Hardcoded evaluator type.",
                        "enum": [
                          "log4shell"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                          "LOG4SHELL"
                        ]
                      },
                      "impossibleTravelOptions": {
                        "description": "Options on impossible travel rules.",
                        "properties": {
                          "baselineUserLocations": {
                            "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "keepAlive": {
                        "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS"
                        ]
                      },
                      "maxSignalDuration": {
                        "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                        "enum": [
                          0,
                          60,
                          300,
                          600,
                          900,
                          1800,
                          3600,
                          7200,
                          10800,
                          21600,
                          43200,
                          86400
                        ],
                        "format": "int32",
                        "type": "integer",
                        "x-enum-varnames": [
                          "ZERO_MINUTES",
                          "ONE_MINUTE",
                          "FIVE_MINUTES",
                          "TEN_MINUTES",
                          "FIFTEEN_MINUTES",
                          "THIRTY_MINUTES",
                          "ONE_HOUR",
                          "TWO_HOURS",
                          "THREE_HOURS",
                          "SIX_HOURS",
                          "TWELVE_HOURS",
                          "ONE_DAY"
                        ]
                      },
                      "newValueOptions": {
                        "description": "Options on new value rules.",
                        "properties": {
                          "forgetAfter": {
                            "description": "The duration in days after which a learned value is forgotten.",
                            "enum": [
                              1,
                              2,
                              7,
                              14,
                              21,
                              28
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ONE_DAY",
                              "TWO_DAYS",
                              "ONE_WEEK",
                              "TWO_WEEKS",
                              "THREE_WEEKS",
                              "FOUR_WEEKS"
                            ]
                          },
                          "learningDuration": {
                            "default": 0,
                            "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                            "enum": [
                              0,
                              1,
                              7
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ZERO_DAYS",
                              "ONE_DAY",
                              "SEVEN_DAYS"
                            ]
                          },
                          "learningMethod": {
                            "default": "duration",
                            "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                            "enum": [
                              "duration",
                              "threshold"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "DURATION",
                              "THRESHOLD"
                            ]
                          },
                          "learningThreshold": {
                            "default": 0,
                            "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                            "enum": [
                              0,
                              1
                            ],
                            "format": "int32",
                            "type": "integer",
                            "x-enum-varnames": [
                              "ZERO_OCCURRENCES",
                              "ONE_OCCURRENCE"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "queries": {
                    "description": "Queries for selecting logs which are part of the rule.",
                    "items": {
                      "description": "Query for matching rule.",
                      "properties": {
                        "aggregation": {
                          "description": "The aggregation type.",
                          "enum": [
                            "count",
                            "cardinality",
                            "sum",
                            "max",
                            "new_value",
                            "geo_data"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "COUNT",
                            "CARDINALITY",
                            "SUM",
                            "MAX",
                            "NEW_VALUE",
                            "GEO_DATA"
                          ]
                        },
                        "distinctFields": {
                          "description": "Field for which the cardinality is measured. Sent as an array.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "groupByFields": {
                          "description": "Fields to group by.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "metric": {
                          "description": "The target field to aggregate over when using the sum or max\naggregations.",
                          "type": "string"
                        },
                        "metrics": {
                          "description": "Group of target fields to aggregate over when using the new value aggregations.",
                          "items": {
                            "description": "Field.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "name": {
                          "description": "Name of the query.",
                          "type": "string"
                        },
                        "query": {
                          "description": "Query to run on logs.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "tags": {
                    "description": "Tags for generated signals.",
                    "items": {
                      "description": "Tag.",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "version": {
                    "description": "The version of the rule being updated.",
                    "example": 1,
                    "format": "int32",
                    "maximum": 2147483647,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Rule.",
                  "properties": {
                    "cases": {
                      "description": "Cases for generating signals.",
                      "items": {
                        "description": "Case when signal is generated.",
                        "properties": {
                          "condition": {
                            "description": "A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated\nbased on the event counts in the previously defined queries.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the case.",
                            "type": "string"
                          },
                          "notifications": {
                            "description": "Notification targets for each rule case.",
                            "items": {
                              "description": "Notification.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "status": {
                            "description": "Severity of the Security Signal.",
                            "enum": [
                              "info",
                              "low",
                              "medium",
                              "high",
                              "critical"
                            ],
                            "example": "critical",
                            "type": "string",
                            "x-enum-varnames": [
                              "INFO",
                              "LOW",
                              "MEDIUM",
                              "HIGH",
                              "CRITICAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "createdAt": {
                      "description": "When the rule was created, timestamp in milliseconds.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "creationAuthorId": {
                      "description": "User ID of the user who created the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "filters": {
                      "description": "Additional queries to filter matched events before they are processed.",
                      "items": {
                        "description": "The rule's suppression filter.",
                        "properties": {
                          "action": {
                            "description": "The type of filtering action.",
                            "enum": [
                              "require",
                              "suppress"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "REQUIRE",
                              "SUPPRESS"
                            ]
                          },
                          "query": {
                            "description": "Query for selecting logs to apply the filtering action.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "hasExtendedTitle": {
                      "description": "Whether the notifications include the triggering group-by values in their title.",
                      "type": "boolean"
                    },
                    "id": {
                      "description": "The ID of the rule.",
                      "type": "string"
                    },
                    "isDefault": {
                      "description": "Whether the rule is included by default.",
                      "type": "boolean"
                    },
                    "isDeleted": {
                      "description": "Whether the rule has been deleted.",
                      "type": "boolean"
                    },
                    "isEnabled": {
                      "description": "Whether the rule is enabled.",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Message for generated signals.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the rule.",
                      "type": "string"
                    },
                    "options": {
                      "description": "Options on rules.",
                      "properties": {
                        "decreaseCriticalityBasedOnEnv": {
                          "description": "If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce signal noise.\nThe severity is decreased by one level: `CRITICAL` in production becomes `HIGH` in non-production, `HIGH` becomes `MEDIUM` and so on. `INFO` remains `INFO`.\nThe decrement is applied when the environment tag of the signal starts with `staging`, `test` or `dev`.",
                          "example": false,
                          "type": "boolean"
                        },
                        "detectionMethod": {
                          "description": "The detection method.",
                          "enum": [
                            "threshold",
                            "new_value",
                            "anomaly_detection",
                            "impossible_travel",
                            "hardcoded"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "THRESHOLD",
                            "NEW_VALUE",
                            "ANOMALY_DETECTION",
                            "IMPOSSIBLE_TRAVEL",
                            "HARDCODED"
                          ]
                        },
                        "evaluationWindow": {
                          "description": "A time window is specified to match when at least one of the cases matches true. This is a sliding window\nand evaluates in real time.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS"
                          ]
                        },
                        "hardcodedEvaluatorType": {
                          "description": "Hardcoded evaluator type.",
                          "enum": [
                            "log4shell"
                          ],
                          "type": "string",
                          "x-enum-varnames": [
                            "LOG4SHELL"
                          ]
                        },
                        "impossibleTravelOptions": {
                          "description": "Options on impossible travel rules.",
                          "properties": {
                            "baselineUserLocations": {
                              "description": "If true, signals are suppressed for the first 24 hours. In that time, Datadog learns the user's regular\naccess locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.",
                              "example": true,
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "keepAlive": {
                          "description": "Once a signal is generated, the signal will remain “open” if a case is matched at least once within\nthis keep alive window.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS"
                          ]
                        },
                        "maxSignalDuration": {
                          "description": "A signal will “close” regardless of the query being matched once the time exceeds the maximum duration.\nThis time is calculated from the first seen timestamp.",
                          "enum": [
                            0,
                            60,
                            300,
                            600,
                            900,
                            1800,
                            3600,
                            7200,
                            10800,
                            21600,
                            43200,
                            86400
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "ZERO_MINUTES",
                            "ONE_MINUTE",
                            "FIVE_MINUTES",
                            "TEN_MINUTES",
                            "FIFTEEN_MINUTES",
                            "THIRTY_MINUTES",
                            "ONE_HOUR",
                            "TWO_HOURS",
                            "THREE_HOURS",
                            "SIX_HOURS",
                            "TWELVE_HOURS",
                            "ONE_DAY"
                          ]
                        },
                        "newValueOptions": {
                          "description": "Options on new value rules.",
                          "properties": {
                            "forgetAfter": {
                              "description": "The duration in days after which a learned value is forgotten.",
                              "enum": [
                                1,
                                2,
                                7,
                                14,
                                21,
                                28
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ONE_DAY",
                                "TWO_DAYS",
                                "ONE_WEEK",
                                "TWO_WEEKS",
                                "THREE_WEEKS",
                                "FOUR_WEEKS"
                              ]
                            },
                            "learningDuration": {
                              "default": 0,
                              "description": "The duration in days during which values are learned, and after which signals will be generated for values that\nweren't learned. If set to 0, a signal will be generated for all new values after the first value is learned.",
                              "enum": [
                                0,
                                1,
                                7
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_DAYS",
                                "ONE_DAY",
                                "SEVEN_DAYS"
                              ]
                            },
                            "learningMethod": {
                              "default": "duration",
                              "description": "The learning method used to determine when signals should be generated for values that weren't learned.",
                              "enum": [
                                "duration",
                                "threshold"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "DURATION",
                                "THRESHOLD"
                              ]
                            },
                            "learningThreshold": {
                              "default": 0,
                              "description": "A number of occurrences after which signals will be generated for values that weren't learned.",
                              "enum": [
                                0,
                                1
                              ],
                              "format": "int32",
                              "type": "integer",
                              "x-enum-varnames": [
                                "ZERO_OCCURRENCES",
                                "ONE_OCCURRENCE"
                              ]
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "queries": {
                      "description": "Queries for selecting logs which are part of the rule.",
                      "items": {
                        "description": "Query for matching rule.",
                        "properties": {
                          "aggregation": {
                            "description": "The aggregation type.",
                            "enum": [
                              "count",
                              "cardinality",
                              "sum",
                              "max",
                              "new_value",
                              "geo_data"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "COUNT",
                              "CARDINALITY",
                              "SUM",
                              "MAX",
                              "NEW_VALUE",
                              "GEO_DATA"
                            ]
                          },
                          "distinctFields": {
                            "description": "Field for which the cardinality is measured. Sent as an array.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "groupByFields": {
                            "description": "Fields to group by.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "metric": {
                            "description": "The target field to aggregate over when using the sum or max\naggregations.",
                            "type": "string"
                          },
                          "metrics": {
                            "description": "Group of target fields to aggregate over when using the new value aggregations.",
                            "items": {
                              "description": "Field.",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "name": {
                            "description": "Name of the query.",
                            "type": "string"
                          },
                          "query": {
                            "description": "Query to run on logs.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "tags": {
                      "description": "Tags for generated signals.",
                      "items": {
                        "description": "Tag.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "type": {
                      "description": "The rule type.",
                      "enum": [
                        "log_detection",
                        "infrastructure_configuration",
                        "workload_security",
                        "cloud_configuration"
                      ],
                      "type": "string",
                      "x-enum-varnames": [
                        "LOG_DETECTION",
                        "INFRASTRUCTURE_CONFIGURATION",
                        "WORKLOAD_SECURITY",
                        "CLOUD_CONFIGURATION"
                      ]
                    },
                    "updateAuthorId": {
                      "description": "User ID of the user who updated the rule.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "version": {
                      "description": "The version of the rule.",
                      "format": "int64",
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Concurrent Modification"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_rules_write"
            ]
          }
        ],
        "summary": "Update an existing rule",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security_monitoring/signals": {
      "get": {
        "description": "The list endpoint returns security signals that match a search query.\nBoth this endpoint and the POST endpoint can be used interchangeably when listing\nsecurity signals.",
        "operationId": "ListSecurityMonitoringSignals",
        "parameters": [
          {
            "description": "The search query for security signals.",
            "example": "security:attack status:high",
            "in": "query",
            "name": "filter[query]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The minimum timestamp for requested security signals.",
            "example": "2019-01-02T09:42:36.320Z",
            "in": "query",
            "name": "filter[from]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The maximum timestamp for requested security signals.",
            "example": "2019-01-03T09:42:36.320Z",
            "in": "query",
            "name": "filter[to]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The order of the security signals in results.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "description": "The sort parameters used for querying security signals.",
              "enum": [
                "timestamp",
                "-timestamp"
              ],
              "type": "string",
              "x-enum-varnames": [
                "TIMESTAMP_ASCENDING",
                "TIMESTAMP_DESCENDING"
              ]
            }
          },
          {
            "description": "A list of results using the cursor provided in the previous query.",
            "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
            "in": "query",
            "name": "page[cursor]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of security signals in the response.",
            "example": 25,
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 1000,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all security signals matching the request\nand pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of security signals matching the request.",
                      "items": {
                        "description": "Object description of a security signal.",
                        "properties": {
                          "attributes": {
                            "description": "The object containing all signal attributes and their\nassociated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "A JSON object of attributes in the security signal.",
                                "example": {
                                  "workflow": {
                                    "first_seen": "2020-06-23T14:46:01.000Z",
                                    "last_seen": "2020-06-23T14:46:49.000Z",
                                    "rule": {
                                      "id": "0f5-e0c-805",
                                      "name": "Brute Force Attack Grouped By User ",
                                      "version": 12
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "message": {
                                "description": "The message in the security signal defined by the rule that generated the signal.",
                                "example": "Detect Account Take Over (ATO) through brute force attempts",
                                "type": "string"
                              },
                              "tags": {
                                "description": "An array of tags associated with the security signal.",
                                "example": [
                                  "security:attack",
                                  "technique:T1110-brute-force"
                                ],
                                "items": {
                                  "description": "The tag associated with the security signal.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "The timestamp of the security signal.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique ID of the security signal.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "signal",
                            "description": "The type of event.",
                            "enum": [
                              "signal"
                            ],
                            "example": "signal",
                            "type": "string",
                            "x-enum-varnames": [
                              "SIGNAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Meta attributes.",
                      "properties": {
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_signals_read"
            ]
          }
        ],
        "summary": "Get a quick list of security signals",
        "tags": [
          "Security Monitoring"
        ],
        "x-menu-order": 7,
        "x-pagination": {
          "cursorParam": "page[cursor]",
          "cursorPath": "meta.page.after",
          "limitParam": "page[limit]",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/security_monitoring/signals/search": {
      "post": {
        "description": "Returns security signals that match a search query.\nBoth this endpoint and the GET endpoint can be used interchangeably for listing\nsecurity signals.",
        "operationId": "SearchSecurityMonitoringSignals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The request for a security signal list.",
                "properties": {
                  "filter": {
                    "description": "Search filters for listing security signals.",
                    "properties": {
                      "from": {
                        "description": "The minimum timestamp for requested security signals.",
                        "example": "2019-01-02T09:42:36.320Z",
                        "format": "date-time",
                        "type": "string"
                      },
                      "query": {
                        "description": "Search query for listing security signals.",
                        "example": "security:attack status:high",
                        "type": "string"
                      },
                      "to": {
                        "description": "The maximum timestamp for requested security signals.",
                        "example": "2019-01-03T09:42:36.320Z",
                        "format": "date-time",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "page": {
                    "description": "The paging attributes for listing security signals.",
                    "properties": {
                      "cursor": {
                        "description": "A list of results using the cursor provided in the previous query.",
                        "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                        "type": "string"
                      },
                      "limit": {
                        "default": 10,
                        "description": "The maximum number of security signals in the response.",
                        "example": 25,
                        "format": "int32",
                        "maximum": 1000,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "sort": {
                    "description": "The sort parameters used for querying security signals.",
                    "enum": [
                      "timestamp",
                      "-timestamp"
                    ],
                    "type": "string",
                    "x-enum-varnames": [
                      "TIMESTAMP_ASCENDING",
                      "TIMESTAMP_DESCENDING"
                    ]
                  }
                },
                "type": "object"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response object with all security signals matching the request\nand pagination information.",
                  "properties": {
                    "data": {
                      "description": "An array of security signals matching the request.",
                      "items": {
                        "description": "Object description of a security signal.",
                        "properties": {
                          "attributes": {
                            "description": "The object containing all signal attributes and their\nassociated values.",
                            "properties": {
                              "attributes": {
                                "additionalProperties": {},
                                "description": "A JSON object of attributes in the security signal.",
                                "example": {
                                  "workflow": {
                                    "first_seen": "2020-06-23T14:46:01.000Z",
                                    "last_seen": "2020-06-23T14:46:49.000Z",
                                    "rule": {
                                      "id": "0f5-e0c-805",
                                      "name": "Brute Force Attack Grouped By User ",
                                      "version": 12
                                    }
                                  }
                                },
                                "type": "object"
                              },
                              "message": {
                                "description": "The message in the security signal defined by the rule that generated the signal.",
                                "example": "Detect Account Take Over (ATO) through brute force attempts",
                                "type": "string"
                              },
                              "tags": {
                                "description": "An array of tags associated with the security signal.",
                                "example": [
                                  "security:attack",
                                  "technique:T1110-brute-force"
                                ],
                                "items": {
                                  "description": "The tag associated with the security signal.",
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "timestamp": {
                                "description": "The timestamp of the security signal.",
                                "example": "2019-01-02T09:42:36.320Z",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The unique ID of the security signal.",
                            "example": "AAAAAWgN8Xwgr1vKDQAAAABBV2dOOFh3ZzZobm1mWXJFYTR0OA",
                            "type": "string"
                          },
                          "type": {
                            "default": "signal",
                            "description": "The type of event.",
                            "enum": [
                              "signal"
                            ],
                            "example": "signal",
                            "type": "string",
                            "x-enum-varnames": [
                              "SIGNAL"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "links": {
                      "description": "Links attributes.",
                      "properties": {
                        "next": {
                          "description": "The link for the next set of results. **Note**: The request can also be made using the\nPOST endpoint.",
                          "example": "https://app.datadoghq.com/api/v2/security_monitoring/signals?filter[query]=foo&page[cursor]=eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "description": "Meta attributes.",
                      "properties": {
                        "page": {
                          "description": "Paging attributes.",
                          "properties": {
                            "after": {
                              "description": "The cursor used to get the next results, if any. To make the next request, use the same\nparameters with the addition of the `page[cursor]`.",
                              "example": "eyJzdGFydEF0IjoiQVFBQUFYS2tMS3pPbm40NGV3QUFBQUJCV0V0clRFdDZVbG8zY3pCRmNsbHJiVmxDWlEifQ==",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Authorized"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_signals_read"
            ]
          }
        ],
        "summary": "Get a list of security signals",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 6,
        "x-pagination": {
          "cursorParam": "body.page.cursor",
          "cursorPath": "meta.page.after",
          "limitParam": "body.page.limit",
          "resultsPath": "data"
        },
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/security_monitoring/signals/{signal_id}/assignee": {
      "patch": {
        "description": "Modify the triage assignee of a security signal.",
        "operationId": "EditSecurityMonitoringSignalAssignee",
        "parameters": [
          {
            "description": "The ID of the signal.",
            "in": "path",
            "name": "signal_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request body for changing the assignee of a given security monitoring signal.",
                "properties": {
                  "data": {
                    "description": "Data containing the patch for changing the assignee of a signal.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes describing the new assignee of a security signal.",
                        "properties": {
                          "assignee": {
                            "description": "Object representing a given user entity.",
                            "properties": {
                              "handle": {
                                "description": "The handle for this user account.",
                                "type": "string"
                              },
                              "id": {
                                "description": "Numerical ID assigned by Datadog to this user account.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "name": {
                                "description": "The name for this user account.",
                                "type": "string"
                              },
                              "uuid": {
                                "description": "UUID assigned by Datadog to this user account.",
                                "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                "type": "string"
                              }
                            },
                            "required": [
                              "uuid"
                            ],
                            "type": "object"
                          },
                          "version": {
                            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "assignee"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Attributes describing the signal update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response returned after all triage operations, containing the updated signal triage data.",
                  "properties": {
                    "data": {
                      "description": "Data containing the updated triage attributes of the signal.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes describing a triage state update operation over a security signal.",
                          "properties": {
                            "archive_comment": {
                              "description": "Optional comment to display on archived signals.",
                              "type": "string"
                            },
                            "archive_comment_timestamp": {
                              "description": "Timestamp of the last edit to the comment.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "archive_comment_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "archive_reason": {
                              "description": "Reason a signal is archived.",
                              "enum": [
                                "none",
                                "false_positive",
                                "testing_or_maintenance",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "NONE",
                                "FALSE_POSITIVE",
                                "TESTING_OR_MAINTENANCE",
                                "OTHER"
                              ]
                            },
                            "assignee": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "incident_ids": {
                              "description": "Array of incidents that are associated with this signal.",
                              "items": {
                                "description": "Public ID attribute of the incident that is associated with the signal.",
                                "example": 2066,
                                "format": "int64",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The new triage state of the signal.",
                              "enum": [
                                "open",
                                "archived",
                                "under_review"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "OPEN",
                                "ARCHIVED",
                                "UNDER_REVIEW"
                              ]
                            },
                            "state_update_timestamp": {
                              "description": "Timestamp of the last update to the signal state.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "state_update_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "assignee",
                            "state",
                            "incident_ids"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_signals_write"
            ]
          }
        ],
        "summary": "Modify the triage assignee of a security signal",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security_monitoring/signals/{signal_id}/incidents": {
      "patch": {
        "description": "Change the related incidents for a security signal.",
        "operationId": "EditSecurityMonitoringSignalIncidents",
        "parameters": [
          {
            "description": "The ID of the signal.",
            "in": "path",
            "name": "signal_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request body for changing the related incidents of a given security monitoring signal.",
                "properties": {
                  "data": {
                    "description": "Data containing the patch for changing the related incidents of a signal.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes describing the new list of related signals for a security signal.",
                        "properties": {
                          "incident_ids": {
                            "description": "Array of incidents that are associated with this signal.",
                            "items": {
                              "description": "Public ID attribute of the incident that is associated with the signal.",
                              "example": 2066,
                              "format": "int64",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "version": {
                            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "incident_ids"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Attributes describing the signal update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response returned after all triage operations, containing the updated signal triage data.",
                  "properties": {
                    "data": {
                      "description": "Data containing the updated triage attributes of the signal.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes describing a triage state update operation over a security signal.",
                          "properties": {
                            "archive_comment": {
                              "description": "Optional comment to display on archived signals.",
                              "type": "string"
                            },
                            "archive_comment_timestamp": {
                              "description": "Timestamp of the last edit to the comment.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "archive_comment_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "archive_reason": {
                              "description": "Reason a signal is archived.",
                              "enum": [
                                "none",
                                "false_positive",
                                "testing_or_maintenance",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "NONE",
                                "FALSE_POSITIVE",
                                "TESTING_OR_MAINTENANCE",
                                "OTHER"
                              ]
                            },
                            "assignee": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "incident_ids": {
                              "description": "Array of incidents that are associated with this signal.",
                              "items": {
                                "description": "Public ID attribute of the incident that is associated with the signal.",
                                "example": 2066,
                                "format": "int64",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The new triage state of the signal.",
                              "enum": [
                                "open",
                                "archived",
                                "under_review"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "OPEN",
                                "ARCHIVED",
                                "UNDER_REVIEW"
                              ]
                            },
                            "state_update_timestamp": {
                              "description": "Timestamp of the last update to the signal state.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "state_update_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "assignee",
                            "state",
                            "incident_ids"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_signals_write"
            ]
          }
        ],
        "summary": "Change the related incidents of a security signal",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/security_monitoring/signals/{signal_id}/state": {
      "patch": {
        "description": "Change the triage state of a security signal.",
        "operationId": "EditSecurityMonitoringSignalState",
        "parameters": [
          {
            "description": "The ID of the signal.",
            "in": "path",
            "name": "signal_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request body for changing the state of a given security monitoring signal.",
                "properties": {
                  "data": {
                    "description": "Data containing the patch for changing the state of a signal.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes describing the change of state of a security signal.",
                        "properties": {
                          "archive_comment": {
                            "description": "Optional comment to display on archived signals.",
                            "type": "string"
                          },
                          "archive_reason": {
                            "description": "Reason a signal is archived.",
                            "enum": [
                              "none",
                              "false_positive",
                              "testing_or_maintenance",
                              "other"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "NONE",
                              "FALSE_POSITIVE",
                              "TESTING_OR_MAINTENANCE",
                              "OTHER"
                            ]
                          },
                          "state": {
                            "description": "The new triage state of the signal.",
                            "enum": [
                              "open",
                              "archived",
                              "under_review"
                            ],
                            "type": "string",
                            "x-enum-varnames": [
                              "OPEN",
                              "ARCHIVED",
                              "UNDER_REVIEW"
                            ]
                          },
                          "version": {
                            "description": "Version of the updated signal. If server side version is higher, update will be rejected.",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "state"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "attributes"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Attributes describing the signal update.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The response returned after all triage operations, containing the updated signal triage data.",
                  "properties": {
                    "data": {
                      "description": "Data containing the updated triage attributes of the signal.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes describing a triage state update operation over a security signal.",
                          "properties": {
                            "archive_comment": {
                              "description": "Optional comment to display on archived signals.",
                              "type": "string"
                            },
                            "archive_comment_timestamp": {
                              "description": "Timestamp of the last edit to the comment.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "archive_comment_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "archive_reason": {
                              "description": "Reason a signal is archived.",
                              "enum": [
                                "none",
                                "false_positive",
                                "testing_or_maintenance",
                                "other"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "NONE",
                                "FALSE_POSITIVE",
                                "TESTING_OR_MAINTENANCE",
                                "OTHER"
                              ]
                            },
                            "assignee": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            },
                            "incident_ids": {
                              "description": "Array of incidents that are associated with this signal.",
                              "items": {
                                "description": "Public ID attribute of the incident that is associated with the signal.",
                                "example": 2066,
                                "format": "int64",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "state": {
                              "description": "The new triage state of the signal.",
                              "enum": [
                                "open",
                                "archived",
                                "under_review"
                              ],
                              "type": "string",
                              "x-enum-varnames": [
                                "OPEN",
                                "ARCHIVED",
                                "UNDER_REVIEW"
                              ]
                            },
                            "state_update_timestamp": {
                              "description": "Timestamp of the last update to the signal state.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "state_update_user": {
                              "description": "Object representing a given user entity.",
                              "properties": {
                                "handle": {
                                  "description": "The handle for this user account.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Numerical ID assigned by Datadog to this user account.",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "The name for this user account.",
                                  "type": "string"
                                },
                                "uuid": {
                                  "description": "UUID assigned by Datadog to this user account.",
                                  "example": "773b045d-ccf8-4808-bd3b-955ef6a8c940",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "uuid"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "assignee",
                            "state",
                            "incident_ids"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "security_monitoring_signals_write"
            ]
          }
        ],
        "summary": "Change the triage state of a security signal",
        "tags": [
          "Security Monitoring"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/series": {
      "post": {
        "description": "The metrics end-point allows you to post time-series data that can be graphed on Datadog’s dashboards.\nThe maximum payload size is 500 kilobytes (512000 bytes). Compressed payloads must have a decompressed size of less than 5 megabytes (5242880 bytes).\n\nIf you’re submitting metrics directly to the Datadog API without using DogStatsD, expect:\n\n- 64 bits for the timestamp\n- 64 bits for the value\n- 20 bytes for the metric names\n- 50 bytes for the timeseries\n- The full payload is approximately 100 bytes.\n\nHost name is one of the resources in the Resources field.",
        "operationId": "SubmitMetrics",
        "parameters": [
          {
            "description": "HTTP header used to compress the media-type.",
            "in": "header",
            "name": "Content-Encoding",
            "required": false,
            "schema": {
              "default": "deflate",
              "description": "HTTP header used to compress the media-type.",
              "enum": [
                "deflate"
              ],
              "type": "string",
              "x-enum-varnames": [
                "DEFLATE"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "dynamic-points": {
                  "description": "Post time-series data that can be graphed on Datadog’s dashboards.",
                  "externalValue": "examples/metrics/dynamic-points.json.sh",
                  "summary": "Dynamic Points",
                  "x-variables": {
                    "NOW": "$(date +%s)"
                  }
                }
              },
              "schema": {
                "description": "The metrics' payload.",
                "properties": {
                  "series": {
                    "description": "A list of time series to submit to Datadog.",
                    "example": [
                      {
                        "metric": "system.load.1",
                        "points": [
                          {
                            "timestamp": 1475317847,
                            "value": 0.7
                          }
                        ],
                        "resources": [
                          {
                            "name": "dummyhost",
                            "type": "host"
                          }
                        ]
                      }
                    ],
                    "items": {
                      "description": "A metric to submit to Datadog.\nSee [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).",
                      "properties": {
                        "interval": {
                          "description": "If the type of the metric is rate or count, define the corresponding interval.",
                          "example": 20,
                          "format": "int64",
                          "type": "integer"
                        },
                        "metadata": {
                          "description": "Metadata for the metric.",
                          "properties": {
                            "origin": {
                              "description": "Metric origin information.",
                              "properties": {
                                "metric_type": {
                                  "default": 0,
                                  "description": "The origin metric type code",
                                  "format": "int32",
                                  "maximum": 1000,
                                  "type": "integer"
                                },
                                "product": {
                                  "default": 0,
                                  "description": "The origin product code",
                                  "format": "int32",
                                  "maximum": 1000,
                                  "type": "integer"
                                },
                                "service": {
                                  "default": 0,
                                  "description": "The origin service code",
                                  "format": "int32",
                                  "maximum": 1000,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "metric": {
                          "description": "The name of the timeseries.",
                          "example": "system.load.1",
                          "type": "string"
                        },
                        "points": {
                          "description": "Points relating to a metric. All points must be objects with timestamp and a scalar value (cannot be a string). Timestamps should be in POSIX time in seconds, and cannot be more than ten minutes in the future or more than one hour in the past.",
                          "items": {
                            "description": "A point object is of the form `{POSIX_timestamp, numeric_value}`.",
                            "example": {
                              "timestamp": 1575317847,
                              "value": 0.5
                            },
                            "properties": {
                              "timestamp": {
                                "description": "The timestamp should be in seconds and current.\nCurrent is defined as not more than 10 minutes in the future or more than 1 hour in the past.",
                                "format": "int64",
                                "type": "integer"
                              },
                              "value": {
                                "description": "The numeric value format should be a 64bit float gauge-type value.",
                                "format": "double",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "resources": {
                          "description": "A list of resources to associate with this metric.",
                          "items": {
                            "description": "Metric resource.",
                            "example": {
                              "name": "dummyhost",
                              "type": "host"
                            },
                            "properties": {
                              "name": {
                                "description": "The name of the resource.",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of the resource.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "source_type_name": {
                          "description": "The source type name.",
                          "example": "datadog",
                          "type": "string"
                        },
                        "tags": {
                          "description": "A list of tags associated with the metric.",
                          "example": [
                            "environment:test"
                          ],
                          "items": {
                            "description": "Individual tags.",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "description": "The type of metric. The available types are `0` (unspecified), `1` (count), `2` (rate), and `3` (gauge).",
                          "enum": [
                            0,
                            1,
                            2,
                            3
                          ],
                          "format": "int32",
                          "type": "integer",
                          "x-enum-varnames": [
                            "UNSPECIFIED",
                            "COUNT",
                            "RATE",
                            "GAUGE"
                          ]
                        },
                        "unit": {
                          "description": "The unit of point value.",
                          "example": "second",
                          "type": "string"
                        }
                      },
                      "required": [
                        "metric",
                        "points"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "series"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The payload accepted for intake.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "An empty error list.",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payload accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "408": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Request timeout"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Payload too large"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "summary": "Submit metrics",
        "tags": [
          "Metrics"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/service_accounts": {
      "post": {
        "description": "Create a service account for your organization.",
        "operationId": "CreateServiceAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a service account.",
                "properties": {
                  "data": {
                    "description": "Object to create a service account User.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created user.",
                        "properties": {
                          "email": {
                            "description": "The email of the user.",
                            "example": "jane.doe@example.com",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the user.",
                            "type": "string"
                          },
                          "service_account": {
                            "description": "Whether the user is a service account. Must be true.",
                            "example": true,
                            "type": "boolean"
                          },
                          "title": {
                            "description": "The title of the user.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email",
                          "service_account"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationships of the user object.",
                        "properties": {
                          "roles": {
                            "description": "Relationship to roles.",
                            "properties": {
                              "data": {
                                "description": "An array containing type and the unique identifier of a role.",
                                "items": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "The unique identifier of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time that the user was last modified.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "service_account": {
                              "description": "Whether the user is a service account.",
                              "type": "boolean"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-beef-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create a service account",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "service_account_user": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"email\": \"{{ unique }}@datadoghq.com\",\n      \"title\": \"user title\",\n      \"service_account\": true\n     },\n     \"type\": \"users\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"service_account_user\" in the system"
          }
        },
        "x-menu-order": 1,
        "x-undo": {
          "operationId": "DisableUser",
          "parameters": [
            {
              "name": "user_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/service_accounts/{service_account_id}/application_keys": {
      "get": {
        "description": "List all application keys available for this service account.",
        "operationId": "ListServiceAccountApplicationKeys",
        "parameters": [
          {
            "description": "The ID of the service account.",
            "in": "path",
            "name": "service_account_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-1234-0000-000000000000",
              "type": "string"
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Application key attribute used to sort results. Sort order is ascending\nby default. In order to specify a descending sort, prefix the\nattribute with a minus sign.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "description": "Sorting options",
              "enum": [
                "created_at",
                "-created_at",
                "last4",
                "-last4",
                "name",
                "-name"
              ],
              "type": "string",
              "x-enum-varnames": [
                "CREATED_AT_ASCENDING",
                "CREATED_AT_DESCENDING",
                "LAST4_ASCENDING",
                "LAST4_DESCENDING",
                "NAME_ASCENDING",
                "NAME_DESCENDING"
              ]
            }
          },
          {
            "description": "Filter application keys by the specified string.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or after the specified date.",
            "in": "query",
            "name": "filter[created_at][start]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          },
          {
            "description": "Only include application keys created on or before the specified date.",
            "in": "query",
            "name": "filter[created_at][end]",
            "required": false,
            "schema": {
              "example": "2020-11-24T18:46:21+00:00",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a list of application keys.",
                  "properties": {
                    "data": {
                      "description": "Array of application keys.",
                      "items": {
                        "description": "Partial Datadog application key.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a partial application key.",
                            "properties": {
                              "created_at": {
                                "description": "Creation date of the application key.",
                                "example": "2020-11-23T10:00:00.000Z",
                                "readOnly": true,
                                "type": "string"
                              },
                              "last4": {
                                "description": "The last four characters of the application key.",
                                "example": "abcd",
                                "maxLength": 4,
                                "minLength": 4,
                                "readOnly": true,
                                "type": "string",
                                "x-secret": true
                              },
                              "name": {
                                "description": "Name of the application key.",
                                "example": "Application Key for managing dashboards",
                                "type": "string"
                              },
                              "scopes": {
                                "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                                "example": [
                                  "dashboards_read",
                                  "dashboards_write",
                                  "dashboards_public_share"
                                ],
                                "items": {
                                  "description": "Name of scope.",
                                  "type": "string"
                                },
                                "nullable": true,
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the application key.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Resources related to the application key.",
                            "properties": {
                              "owned_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "application_keys",
                            "description": "Application Keys resource type.",
                            "enum": [
                              "application_keys"
                            ],
                            "example": "application_keys",
                            "type": "string",
                            "x-enum-varnames": [
                              "APPLICATION_KEYS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "List application keys for this service account",
        "tags": [
          "Service Accounts"
        ],
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create an application key for this service account.",
        "operationId": "CreateServiceAccountApplicationKey",
        "parameters": [
          {
            "description": "The ID of the service account.",
            "in": "path",
            "name": "service_account_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-1234-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to create an application key.",
                "properties": {
                  "data": {
                    "description": "Object used to create an application key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to create an application Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the application key.",
                            "example": "Application Key for managing dashboards",
                            "type": "string"
                          },
                          "scopes": {
                            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                            "example": [
                              "dashboards_read",
                              "dashboards_write",
                              "dashboards_public_share"
                            ],
                            "items": {
                              "description": "Name of scope.",
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "type": {
                        "default": "application_keys",
                        "description": "Application Keys resource type.",
                        "enum": [
                          "application_keys"
                        ],
                        "example": "application_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "APPLICATION_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving an application key.",
                  "properties": {
                    "data": {
                      "description": "Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a full application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "key": {
                              "description": "The application key.",
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Create an application key for this service account",
        "tags": [
          "Service Accounts"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "service_account_application_key": {
            "parameters": [
              {
                "name": "service_account_id",
                "value": "\"{{ service_account_user.data.id }}\""
              },
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n    },\n    \"type\": \"application_keys\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"service_account_application_key\" for \"service_account_user\""
          }
        },
        "x-undo": {
          "operationId": "DeleteServiceAccountApplicationKey",
          "parameters": [
            {
              "name": "app_key_id",
              "source": "data.id"
            },
            {
              "name": "service_account_id",
              "source": "data.relationships.owned_by.data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/service_accounts/{service_account_id}/application_keys/{app_key_id}": {
      "delete": {
        "description": "Delete an application key owned by this service account.",
        "operationId": "DeleteServiceAccountApplicationKey",
        "parameters": [
          {
            "description": "The ID of the service account.",
            "in": "path",
            "name": "service_account_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-1234-0000-000000000000",
              "type": "string"
            }
          },
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Delete an application key for this service account",
        "tags": [
          "Service Accounts"
        ],
        "x-menu-order": 3,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get an application key owned by this service account.",
        "operationId": "GetServiceAccountApplicationKey",
        "parameters": [
          {
            "description": "The ID of the service account.",
            "in": "path",
            "name": "service_account_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-1234-0000-000000000000",
              "type": "string"
            }
          },
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving a partial application key.",
                  "properties": {
                    "data": {
                      "description": "Partial Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a partial application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Get one application key for this service account",
        "tags": [
          "Service Accounts"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit an application key owned by this service account.",
        "operationId": "UpdateServiceAccountApplicationKey",
        "parameters": [
          {
            "description": "The ID of the service account.",
            "in": "path",
            "name": "service_account_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-1234-0000-000000000000",
              "type": "string"
            }
          },
          {
            "description": "The ID of the application key.",
            "in": "path",
            "name": "app_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request used to update an application key.",
                "properties": {
                  "data": {
                    "description": "Object used to update an application key.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes used to update an application Key.",
                        "properties": {
                          "name": {
                            "description": "Name of the application key.",
                            "example": "Application Key for managing dashboards",
                            "type": "string"
                          },
                          "scopes": {
                            "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                            "example": [
                              "dashboards_read",
                              "dashboards_write",
                              "dashboards_public_share"
                            ],
                            "items": {
                              "description": "Name of scope.",
                              "type": "string"
                            },
                            "nullable": true,
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the application key.",
                        "example": "00112233-4455-6677-8899-aabbccddeeff",
                        "type": "string"
                      },
                      "type": {
                        "default": "application_keys",
                        "description": "Application Keys resource type.",
                        "enum": [
                          "application_keys"
                        ],
                        "example": "application_keys",
                        "type": "string",
                        "x-enum-varnames": [
                          "APPLICATION_KEYS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "id",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for retrieving a partial application key.",
                  "properties": {
                    "data": {
                      "description": "Partial Datadog application key.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a partial application key.",
                          "properties": {
                            "created_at": {
                              "description": "Creation date of the application key.",
                              "example": "2020-11-23T10:00:00.000Z",
                              "readOnly": true,
                              "type": "string"
                            },
                            "last4": {
                              "description": "The last four characters of the application key.",
                              "example": "abcd",
                              "maxLength": 4,
                              "minLength": 4,
                              "readOnly": true,
                              "type": "string",
                              "x-secret": true
                            },
                            "name": {
                              "description": "Name of the application key.",
                              "example": "Application Key for managing dashboards",
                              "type": "string"
                            },
                            "scopes": {
                              "description": "Array of scopes to grant the application key. This feature is in private beta, please contact Datadog support to enable scopes for your application keys.",
                              "example": [
                                "dashboards_read",
                                "dashboards_write",
                                "dashboards_public_share"
                              ],
                              "items": {
                                "description": "Name of scope.",
                                "type": "string"
                              },
                              "nullable": true,
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the application key.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Resources related to the application key.",
                          "properties": {
                            "owned_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "application_keys",
                          "description": "Application Keys resource type.",
                          "enum": [
                            "application_keys"
                          ],
                          "example": "application_keys",
                          "type": "string",
                          "x-enum-varnames": [
                            "APPLICATION_KEYS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the application key.",
                      "items": {
                        "description": "An object related to an application key.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "summary": "Edit an application key for this service account",
        "tags": [
          "Service Accounts"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 2,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/services": {
      "get": {
        "description": "Get all incident services uploaded for the requesting user's organization. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these incident services.",
        "operationId": "ListIncidentServices",
        "parameters": [
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "description": "Object related to an incident.",
              "enum": [
                "users"
              ],
              "type": "string",
              "x-enum-varnames": [
                "USERS"
              ]
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific offset to use as the beginning of the returned page.",
            "in": "query",
            "name": "page[offset]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "A search query that filters services by name.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "example": "ExampleServiceName",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of incident service payloads.",
                  "properties": {
                    "data": {
                      "description": "An array of incident services.",
                      "example": [
                        {
                          "id": "00000000-0000-0000-0000-000000000000",
                          "type": "services"
                        }
                      ],
                      "items": {
                        "description": "Incident Service data from responses.",
                        "properties": {
                          "attributes": {
                            "description": "The incident service's attributes from a response.",
                            "properties": {
                              "created": {
                                "description": "Timestamp of when the incident service was created.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified": {
                                "description": "Timestamp of when the incident service was modified.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the incident service.",
                                "example": "service name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The incident service's ID.",
                            "example": "00000000-0000-0000-0000-000000000000",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "The incident service's relationships.",
                            "properties": {
                              "created_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "last_modified_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "default": "services",
                            "description": "Incident service resource type.",
                            "enum": [
                              "services"
                            ],
                            "example": "services",
                            "type": "string",
                            "x-enum-varnames": [
                              "SERVICES"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included related resources which the user requested.",
                      "items": {
                        "description": "An object related to an incident service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "meta": {
                      "description": "The metadata object containing pagination metadata.",
                      "properties": {
                        "pagination": {
                          "description": "Pagination properties.",
                          "properties": {
                            "next_offset": {
                              "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            },
                            "offset": {
                              "description": "The index of the first element in the results.",
                              "example": 10,
                              "format": "int64",
                              "type": "integer"
                            },
                            "size": {
                              "description": "Maximum size of pages to return.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get a list of all incident services",
        "tags": [
          "Incident Services"
        ],
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Creates a new incident service.",
        "operationId": "CreateIncidentService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request with an incident service payload.",
                "properties": {
                  "data": {
                    "description": "Incident Service payload for create requests.",
                    "properties": {
                      "attributes": {
                        "description": "The incident service's attributes for a create request.",
                        "properties": {
                          "name": {
                            "description": "Name of the incident service.",
                            "example": "an example service name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "The incident service's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "services",
                        "description": "Incident service resource type.",
                        "enum": [
                          "services"
                        ],
                        "example": "services",
                        "type": "string",
                        "x-enum-varnames": [
                          "SERVICES"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident Service Payload.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident service payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The incident service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Incident service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Create a new incident service",
        "tags": [
          "Incident Services"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "service": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n     },\n     \"type\": \"services\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"service\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteIncidentService",
          "parameters": [
            {
              "name": "service_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/services/{service_id}": {
      "delete": {
        "description": "Deletes an existing incident service.",
        "operationId": "DeleteIncidentService",
        "parameters": [
          {
            "description": "The ID of the incident service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Delete an existing incident service",
        "tags": [
          "Incident Services"
        ],
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get details of an incident service. If the `include[users]` query parameter is provided,\nthe included attribute will contain the users related to these incident services.",
        "operationId": "GetIncidentService",
        "parameters": [
          {
            "description": "The ID of the incident service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "description": "Object related to an incident.",
              "enum": [
                "users"
              ],
              "type": "string",
              "x-enum-varnames": [
                "USERS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident service payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The incident service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Incident service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get details of an incident service",
        "tags": [
          "Incident Services"
        ],
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Updates an existing incident service. Only provide the attributes which should be updated as this request is a partial update.",
        "operationId": "UpdateIncidentService",
        "parameters": [
          {
            "description": "The ID of the incident service.",
            "in": "path",
            "name": "service_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request with an incident service payload.",
                "properties": {
                  "data": {
                    "description": "Incident Service payload for update requests.",
                    "properties": {
                      "attributes": {
                        "description": "The incident service's attributes for an update request.",
                        "properties": {
                          "name": {
                            "description": "Name of the incident service.",
                            "example": "an example service name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The incident service's ID.",
                        "example": "00000000-0000-0000-0000-000000000000",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "The incident service's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "services",
                        "description": "Incident service resource type.",
                        "enum": [
                          "services"
                        ],
                        "example": "services",
                        "type": "string",
                        "x-enum-varnames": [
                          "SERVICES"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident Service Payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident service payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Service data from responses.",
                      "properties": {
                        "attributes": {
                          "description": "The incident service's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident service was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident service was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident service.",
                              "example": "service name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident service's ID.",
                          "example": "00000000-0000-0000-0000-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident service's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "services",
                          "description": "Incident service resource type.",
                          "enum": [
                            "services"
                          ],
                          "example": "services",
                          "type": "string",
                          "x-enum-varnames": [
                            "SERVICES"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ],
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident service which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Update an existing incident service",
        "tags": [
          "Incident Services"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/teams": {
      "get": {
        "description": "Get all incident teams for the requesting user's organization. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these incident teams.",
        "operationId": "ListIncidentTeams",
        "parameters": [
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "description": "Object related to an incident.",
              "enum": [
                "users"
              ],
              "type": "string",
              "x-enum-varnames": [
                "USERS"
              ]
            }
          },
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific offset to use as the beginning of the returned page.",
            "in": "query",
            "name": "page[offset]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "A search query that filters teams by name.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "example": "ExampleTeamName",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with a list of incident team payloads.",
                  "properties": {
                    "data": {
                      "description": "An array of incident teams.",
                      "example": [
                        {
                          "attributes": {
                            "name": "team name"
                          },
                          "id": "00000000-7ea3-0000-0000-000000000000",
                          "type": "teams"
                        }
                      ],
                      "items": {
                        "description": "Incident Team data from a response.",
                        "properties": {
                          "attributes": {
                            "description": "The incident team's attributes from a response.",
                            "properties": {
                              "created": {
                                "description": "Timestamp of when the incident team was created.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "modified": {
                                "description": "Timestamp of when the incident team was modified.",
                                "format": "date-time",
                                "readOnly": true,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the incident team.",
                                "example": "team name",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "The incident team's ID.",
                            "example": "00000000-7ea3-0000-000a-000000000000",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "The incident team's relationships.",
                            "properties": {
                              "created_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "last_modified_by": {
                                "description": "Relationship to user.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              }
                            },
                            "readOnly": true,
                            "type": "object"
                          },
                          "type": {
                            "default": "teams",
                            "description": "Incident Team resource type.",
                            "enum": [
                              "teams"
                            ],
                            "example": "teams",
                            "type": "string",
                            "x-enum-varnames": [
                              "TEAMS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Included related resources which the user requested.",
                      "items": {
                        "description": "An object related to an incident team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    },
                    "meta": {
                      "description": "The metadata object containing pagination metadata.",
                      "properties": {
                        "pagination": {
                          "description": "Pagination properties.",
                          "properties": {
                            "next_offset": {
                              "description": "The index of the first element in the next page of results. Equal to page size added to the current offset.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            },
                            "offset": {
                              "description": "The index of the first element in the results.",
                              "example": 10,
                              "format": "int64",
                              "type": "integer"
                            },
                            "size": {
                              "description": "Maximum size of pages to return.",
                              "example": 1000,
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "type": "object"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get a list of all incident teams",
        "tags": [
          "Incident Teams"
        ],
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "post": {
        "description": "Creates a new incident team.",
        "operationId": "CreateIncidentTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create request with an incident team payload.",
                "properties": {
                  "data": {
                    "description": "Incident Team data for a create request.",
                    "properties": {
                      "attributes": {
                        "description": "The incident team's attributes for a create request.",
                        "properties": {
                          "name": {
                            "description": "Name of the incident team.",
                            "example": "team name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "The incident team's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "teams",
                        "description": "Incident Team resource type.",
                        "enum": [
                          "teams"
                        ],
                        "example": "teams",
                        "type": "string",
                        "x-enum-varnames": [
                          "TEAMS"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident Team Payload.",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident team payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident team's ID.",
                          "example": "00000000-7ea3-0000-000a-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Incident Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "CREATED"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Create a new incident team",
        "tags": [
          "Incident Teams"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "team": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"{{ unique }}\"\n     },\n     \"type\": \"teams\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"team\" in the system"
          }
        },
        "x-undo": {
          "operationId": "DeleteIncidentTeam",
          "parameters": [
            {
              "name": "team_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/teams/{team_id}": {
      "delete": {
        "description": "Deletes an existing incident team.",
        "operationId": "DeleteIncidentTeam",
        "parameters": [
          {
            "description": "The ID of the incident team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Delete an existing incident team",
        "tags": [
          "Incident Teams"
        ],
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "get": {
        "description": "Get details of an incident team. If the `include[users]` query parameter is provided,\nthe included attribute will contain the users related to these incident teams.",
        "operationId": "GetIncidentTeam",
        "parameters": [
          {
            "description": "The ID of the incident team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies which types of related objects should be included in the response.",
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "description": "Object related to an incident.",
              "enum": [
                "users"
              ],
              "type": "string",
              "x-enum-varnames": [
                "USERS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident team payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident team's ID.",
                          "example": "00000000-7ea3-0000-000a-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Incident Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_read"
            ]
          }
        ],
        "summary": "Get details of an incident team",
        "tags": [
          "Incident Teams"
        ],
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      },
      "patch": {
        "description": "Updates an existing incident team. Only provide the attributes which should be updated as this request is a partial update.",
        "operationId": "UpdateIncidentTeam",
        "parameters": [
          {
            "description": "The ID of the incident team.",
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update request with an incident team payload.",
                "properties": {
                  "data": {
                    "description": "Incident Team data for an update request.",
                    "properties": {
                      "attributes": {
                        "description": "The incident team's attributes for an update request.",
                        "properties": {
                          "name": {
                            "description": "Name of the incident team.",
                            "example": "team name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name"
                        ],
                        "type": "object"
                      },
                      "id": {
                        "description": "The incident team's ID.",
                        "example": "00000000-7ea3-0000-0001-000000000000",
                        "type": "string"
                      },
                      "relationships": {
                        "description": "The incident team's relationships.",
                        "properties": {
                          "created_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          },
                          "last_modified_by": {
                            "description": "Relationship to user.",
                            "properties": {
                              "data": {
                                "description": "Relationship to user object.",
                                "properties": {
                                  "id": {
                                    "description": "A unique identifier that represents the user.",
                                    "example": "00000000-0000-0000-2345-000000000000",
                                    "type": "string"
                                  },
                                  "type": {
                                    "default": "users",
                                    "description": "Users resource type.",
                                    "enum": [
                                      "users"
                                    ],
                                    "example": "users",
                                    "type": "string",
                                    "x-enum-varnames": [
                                      "USERS"
                                    ]
                                  }
                                },
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "type": "object"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "readOnly": true,
                        "type": "object"
                      },
                      "type": {
                        "default": "teams",
                        "description": "Incident Team resource type.",
                        "enum": [
                          "teams"
                        ],
                        "example": "teams",
                        "type": "string",
                        "x-enum-varnames": [
                          "TEAMS"
                        ]
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "description": "Incident Team Payload.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response with an incident team payload.",
                  "properties": {
                    "data": {
                      "description": "Incident Team data from a response.",
                      "properties": {
                        "attributes": {
                          "description": "The incident team's attributes from a response.",
                          "properties": {
                            "created": {
                              "description": "Timestamp of when the incident team was created.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "modified": {
                              "description": "Timestamp of when the incident team was modified.",
                              "format": "date-time",
                              "readOnly": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the incident team.",
                              "example": "team name",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "The incident team's ID.",
                          "example": "00000000-7ea3-0000-000a-000000000000",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "The incident team's relationships.",
                          "properties": {
                            "created_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "last_modified_by": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "readOnly": true,
                          "type": "object"
                        },
                        "type": {
                          "default": "teams",
                          "description": "Incident Team resource type.",
                          "enum": [
                            "teams"
                          ],
                          "example": "teams",
                          "type": "string",
                          "x-enum-varnames": [
                            "TEAMS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Included objects from relationships.",
                      "items": {
                        "description": "An object related to an incident team which is present in the included payload.",
                        "oneOf": [
                          {
                            "description": "User object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of user object returned by the API.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the user.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether the user is disabled.",
                                    "type": "boolean"
                                  },
                                  "email": {
                                    "description": "Email of the user.",
                                    "type": "string"
                                  },
                                  "handle": {
                                    "description": "Handle of the user.",
                                    "type": "string"
                                  },
                                  "icon": {
                                    "description": "URL of the user's icon.",
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time that the user was last modified.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "service_account": {
                                    "description": "Whether the user is a service account.",
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "description": "Status of the user.",
                                    "type": "string"
                                  },
                                  "title": {
                                    "description": "Title of the user.",
                                    "nullable": true,
                                    "type": "string"
                                  },
                                  "verified": {
                                    "description": "Whether the user is verified.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the user.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the user object returned by the API.",
                                "properties": {
                                  "org": {
                                    "description": "Relationship to an organization.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationship to organization object.",
                                        "properties": {
                                          "id": {
                                            "description": "ID of the organization.",
                                            "example": "00000000-0000-beef-0000-000000000000",
                                            "type": "string"
                                          },
                                          "type": {
                                            "default": "orgs",
                                            "description": "Organizations resource type.",
                                            "enum": [
                                              "orgs"
                                            ],
                                            "example": "orgs",
                                            "type": "string",
                                            "x-enum-varnames": [
                                              "ORGS"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "type"
                                        ],
                                        "type": "object"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_orgs": {
                                    "description": "Relationship to organizations.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to organization objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to organization object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the organization.",
                                              "example": "00000000-0000-beef-0000-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "orgs",
                                              "description": "Organizations resource type.",
                                              "enum": [
                                                "orgs"
                                              ],
                                              "example": "orgs",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ORGS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "other_users": {
                                    "description": "Relationship to users.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to user objects.",
                                        "example": [],
                                        "items": {
                                          "description": "Relationship to user object.",
                                          "properties": {
                                            "id": {
                                              "description": "A unique identifier that represents the user.",
                                              "example": "00000000-0000-0000-2345-000000000000",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "users",
                                              "description": "Users resource type.",
                                              "enum": [
                                                "users"
                                              ],
                                              "example": "users",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "USERS"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "id",
                                            "type"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "data"
                                    ],
                                    "type": "object"
                                  },
                                  "roles": {
                                    "description": "Relationship to roles.",
                                    "properties": {
                                      "data": {
                                        "description": "An array containing type and the unique identifier of a role.",
                                        "items": {
                                          "description": "Relationship to role object.",
                                          "properties": {
                                            "id": {
                                              "description": "The unique identifier of the role.",
                                              "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "roles",
                                              "description": "Roles type.",
                                              "enum": [
                                                "roles"
                                              ],
                                              "example": "roles",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "ROLES"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "users",
                                "description": "Users resource type.",
                                "enum": [
                                  "users"
                                ],
                                "example": "users",
                                "type": "string",
                                "x-enum-varnames": [
                                  "USERS"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "readOnly": true,
                      "type": "array"
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "incident_settings_write"
            ]
          }
        ],
        "summary": "Update an existing incident team",
        "tags": [
          "Incident Teams"
        ],
        "x-codegen-request-body-name": "body",
        "x-undo": {
          "type": "idempotent"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nIf you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/)."
      }
    },
    "/api/v2/usage/application_security": {
      "get": {
        "description": "Get hourly usage for application security .\n**Note:** hourly usage data for all products is now available in the [Get hourly usage by product family API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)",
        "operationId": "GetUsageApplicationSecurityMonitoring",
        "parameters": [
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage beginning at this hour.",
            "in": "query",
            "name": "start_hr",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage ending\n**before** this hour.",
            "in": "query",
            "name": "end_hr",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Application Security Monitoring usage response.",
                  "properties": {
                    "data": {
                      "description": "Response containing Application Security Monitoring usage.",
                      "items": {
                        "description": "Usage data.",
                        "properties": {
                          "attributes": {
                            "description": "Usage attributes data.",
                            "properties": {
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "product_family": {
                                "description": "The product for which usage is being reported.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "timeseries": {
                                "description": "List of usage data reported for each requested hour.",
                                "items": {
                                  "description": "Usage timeseries data.",
                                  "properties": {
                                    "timestamp": {
                                      "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Contains the number measured for the given usage_type during the hour.",
                                      "format": "int64",
                                      "nullable": true,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "usage_type": {
                                "description": "Usage type that is being measured.",
                                "enum": [
                                  "app_sec_host_count",
                                  "observability_pipelines_bytes_processed",
                                  "lambda_traced_invocations_count"
                                ],
                                "example": "observability_pipelines_bytes_processed",
                                "type": "string",
                                "x-enum-varnames": [
                                  "APP_SEC_HOST_COUNT",
                                  "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                                  "LAMBDA_TRACED_INVOCATIONS_COUNT"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "usage_timeseries",
                            "description": "Type of usage data.",
                            "enum": [
                              "usage_timeseries"
                            ],
                            "example": "usage_timeseries",
                            "type": "string",
                            "x-enum-varnames": [
                              "USAGE_TIMESERIES"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get hourly usage for application security",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 38,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/usage/cost_by_org": {
      "get": {
        "description": "Get cost across multi-org account. Cost by org data for a given month becomes available no later than the 16th of the following month.",
        "operationId": "GetCostByOrg",
        "parameters": [
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for cost beginning this month.",
            "in": "query",
            "name": "start_month",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for cost ending this month.",
            "in": "query",
            "name": "end_month",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Chargeback Summary response.",
                  "properties": {
                    "data": {
                      "description": "Response containing Chargeback Summary.",
                      "items": {
                        "description": "Cost data.",
                        "properties": {
                          "attributes": {
                            "description": "Cost attributes data.",
                            "properties": {
                              "charges": {
                                "description": "List of charges data reported for the requested month.",
                                "items": {
                                  "description": "Charges breakdown.",
                                  "properties": {
                                    "charge_type": {
                                      "description": "The type of charge for a particular product.",
                                      "example": "on_demand",
                                      "type": "string"
                                    },
                                    "cost": {
                                      "description": "The cost for a particular product and charge type during a given month.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "product_name": {
                                      "description": "The product for which cost is being reported.",
                                      "example": "infra_host",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "date": {
                                "description": "The month requested.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "total_cost": {
                                "description": "The total cost of products for the month.",
                                "format": "double",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "cost_by_org",
                            "description": "Type of cost data.",
                            "enum": [
                              "cost_by_org"
                            ],
                            "example": "cost_by_org",
                            "type": "string",
                            "x-enum-varnames": [
                              "COST_BY_ORG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get cost across multi-org account",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 5,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/usage/estimated_cost": {
      "get": {
        "description": "Get estimated cost across multi-org and single root-org accounts.\nEstimated cost data is only available for the current month and previous month. To access historical costs prior to this, use the /cost_by_org endpoint.",
        "operationId": "GetEstimatedCostByOrg",
        "parameters": [
          {
            "description": "String to specify whether cost is broken down at a parent-org level or at the sub-org level. Currently, only the 'sub-org' view is supported.",
            "in": "query",
            "name": "view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for cost beginning this month. Either start_month or start_date should be specified, but not both. (start_month cannot go beyond two months in the past)",
            "in": "query",
            "name": "start_month",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to month: `[YYYY-MM]` for cost ending this month.",
            "in": "query",
            "name": "end_month",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to day: `[YYYY-MM-DD]` for cost beginning this day. Either start_month or start_date should be specified, but not both. (start_date cannot go beyond two months in the past)",
            "in": "query",
            "name": "start_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to day: `[YYYY-MM-DD]` for cost ending this day.",
            "in": "query",
            "name": "end_date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Chargeback Summary response.",
                  "properties": {
                    "data": {
                      "description": "Response containing Chargeback Summary.",
                      "items": {
                        "description": "Cost data.",
                        "properties": {
                          "attributes": {
                            "description": "Cost attributes data.",
                            "properties": {
                              "charges": {
                                "description": "List of charges data reported for the requested month.",
                                "items": {
                                  "description": "Charges breakdown.",
                                  "properties": {
                                    "charge_type": {
                                      "description": "The type of charge for a particular product.",
                                      "example": "on_demand",
                                      "type": "string"
                                    },
                                    "cost": {
                                      "description": "The cost for a particular product and charge type during a given month.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "product_name": {
                                      "description": "The product for which cost is being reported.",
                                      "example": "infra_host",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "date": {
                                "description": "The month requested.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "total_cost": {
                                "description": "The total cost of products for the month.",
                                "format": "double",
                                "type": "number"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "cost_by_org",
                            "description": "Type of cost data.",
                            "enum": [
                              "cost_by_org"
                            ],
                            "example": "cost_by_org",
                            "type": "string",
                            "x-enum-varnames": [
                              "COST_BY_ORG"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get estimated cost across your account",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        },
        "x-unstable": "**Note**: This endpoint is in public beta.\nOnly the sub-org view is available currently, the summary view will be released at a later date."
      }
    },
    "/api/v2/usage/hourly_usage": {
      "get": {
        "description": "Get hourly usage by product family",
        "operationId": "GetHourlyUsage",
        "parameters": [
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.",
            "in": "query",
            "name": "filter[timestamp][start]",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.",
            "in": "query",
            "name": "filter[timestamp][end]",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of product families to retrieve. Available families are `all`, `analyzed_logs`,\n`application_security`, `audit_logs`, `serverless`, `ci_app`, `cspm`, `custom_events`, `cws`, `dbm`, `fargate`,\n`infra_hosts`, `incident_management`, `indexed_logs`, `indexed_spans`, `ingested_spans`, `iot`,\n`lambda_traced_invocations`, `logs`, `network_flows`, `network_hosts`, `observability_pipelines`,\n`online_archive`, `profiling`, `rum`, `rum_browser_sessions`, `rum_mobile_sessions`, `sds`, `snmp`,\n`synthetics_api`, `synthetics_browser`, and `timeseries`.",
            "in": "query",
            "name": "filter[product_families]",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include child org usage in the response. Defaults to false.",
            "in": "query",
            "name": "filter[include_descendants]",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Comma separated list of product family versions to use in the format `product_family:version`. For example,\n`infra_hosts:1.0.0`. If this parameter is not used, the API will use the latest version of each requested\nproduct family. Currently all families have one version `1.0.0`.",
            "in": "query",
            "name": "filter[versions]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return (between 1 and 500) - defaults to 500 if limit not specified.",
            "in": "query",
            "name": "page[limit]",
            "required": false,
            "schema": {
              "default": 500,
              "format": "int32",
              "maximum": 500,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "List following results with a next_record_id provided in the previous query.",
            "in": "query",
            "name": "page[next_record_id]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Hourly usage response.",
                  "properties": {
                    "data": {
                      "description": "Response containing hourly usage.",
                      "items": {
                        "description": "Hourly usage for a product family for an org.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of hourly usage for a product family for an org for a time period.",
                            "properties": {
                              "measurements": {
                                "description": "List of the measured usage values for the product family for the org for the time period.",
                                "items": {
                                  "description": "Usage amount for a given usage type.",
                                  "properties": {
                                    "usage_type": {
                                      "description": "Type of usage.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Contains the number measured for the given usage_type during the hour.",
                                      "format": "int64",
                                      "nullable": true,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "product_family": {
                                "description": "The product for which usage is being reported.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "region": {
                                "description": "The region of the Datadog instance that the organization belongs to.",
                                "type": "string"
                              },
                              "timestamp": {
                                "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                                "format": "date-time",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "usage_timeseries",
                            "description": "Type of usage data.",
                            "enum": [
                              "usage_timeseries"
                            ],
                            "example": "usage_timeseries",
                            "type": "string",
                            "x-enum-varnames": [
                              "USAGE_TIMESERIES"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "The object containing document metadata.",
                      "properties": {
                        "pagination": {
                          "description": "The metadata for the current pagination.",
                          "properties": {
                            "next_record_id": {
                              "description": "The cursor to get the next results (if any). To make the next request, use the same parameters and add `next_record_id`.",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get hourly usage by product family",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/usage/lambda_traced_invocations": {
      "get": {
        "description": "Get hourly usage for lambda traced invocations.\n**Note:** hourly usage data for all products is now available in the [Get hourly usage by product family API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)",
        "operationId": "GetUsageLambdaTracedInvocations",
        "parameters": [
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage beginning at this hour.",
            "in": "query",
            "name": "start_hr",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage ending\n**before** this hour.",
            "in": "query",
            "name": "end_hr",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Lambda Traced Invocations usage response.",
                  "properties": {
                    "data": {
                      "description": "Response containing Lambda Traced Invocations usage.",
                      "items": {
                        "description": "Usage data.",
                        "properties": {
                          "attributes": {
                            "description": "Usage attributes data.",
                            "properties": {
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "product_family": {
                                "description": "The product for which usage is being reported.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "timeseries": {
                                "description": "List of usage data reported for each requested hour.",
                                "items": {
                                  "description": "Usage timeseries data.",
                                  "properties": {
                                    "timestamp": {
                                      "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Contains the number measured for the given usage_type during the hour.",
                                      "format": "int64",
                                      "nullable": true,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "usage_type": {
                                "description": "Usage type that is being measured.",
                                "enum": [
                                  "app_sec_host_count",
                                  "observability_pipelines_bytes_processed",
                                  "lambda_traced_invocations_count"
                                ],
                                "example": "observability_pipelines_bytes_processed",
                                "type": "string",
                                "x-enum-varnames": [
                                  "APP_SEC_HOST_COUNT",
                                  "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                                  "LAMBDA_TRACED_INVOCATIONS_COUNT"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "usage_timeseries",
                            "description": "Type of usage data.",
                            "enum": [
                              "usage_timeseries"
                            ],
                            "example": "usage_timeseries",
                            "type": "string",
                            "x-enum-varnames": [
                              "USAGE_TIMESERIES"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get hourly usage for lambda traced invocations",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 37,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/usage/observability_pipelines": {
      "get": {
        "description": "Get hourly usage for observability pipelines.\n**Note:** hourly usage data for all products is now available in the [Get hourly usage by product family API](https://docs.datadoghq.com/api/latest/usage-metering/#get-hourly-usage-by-product-family)",
        "operationId": "GetUsageObservabilityPipelines",
        "parameters": [
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage beginning at this hour.",
            "in": "query",
            "name": "start_hr",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Datetime in ISO-8601 format, UTC, precise to hour: `[YYYY-MM-DDThh]` for usage ending\n**before** this hour.",
            "in": "query",
            "name": "end_hr",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "Observability Pipelines usage response.",
                  "properties": {
                    "data": {
                      "description": "Response containing Observability Pipelines usage.",
                      "items": {
                        "description": "Usage data.",
                        "properties": {
                          "attributes": {
                            "description": "Usage attributes data.",
                            "properties": {
                              "org_name": {
                                "description": "The organization name.",
                                "type": "string"
                              },
                              "product_family": {
                                "description": "The product for which usage is being reported.",
                                "type": "string"
                              },
                              "public_id": {
                                "description": "The organization public ID.",
                                "type": "string"
                              },
                              "timeseries": {
                                "description": "List of usage data reported for each requested hour.",
                                "items": {
                                  "description": "Usage timeseries data.",
                                  "properties": {
                                    "timestamp": {
                                      "description": "Datetime in ISO-8601 format, UTC. The hour for the usage.",
                                      "format": "date-time",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "Contains the number measured for the given usage_type during the hour.",
                                      "format": "int64",
                                      "nullable": true,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "usage_type": {
                                "description": "Usage type that is being measured.",
                                "enum": [
                                  "app_sec_host_count",
                                  "observability_pipelines_bytes_processed",
                                  "lambda_traced_invocations_count"
                                ],
                                "example": "observability_pipelines_bytes_processed",
                                "type": "string",
                                "x-enum-varnames": [
                                  "APP_SEC_HOST_COUNT",
                                  "OBSERVABILITY_PIPELINES_BYTES_PROCESSSED",
                                  "LAMBDA_TRACED_INVOCATIONS_COUNT"
                                ]
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "Unique ID of the response.",
                            "type": "string"
                          },
                          "type": {
                            "default": "usage_timeseries",
                            "description": "Type of usage data.",
                            "enum": [
                              "usage_timeseries"
                            ],
                            "example": "usage_timeseries",
                            "type": "string",
                            "x-enum-varnames": [
                              "USAGE_TIMESERIES"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Forbidden - User is not authorized"
          },
          "429": {
            "content": {
              "application/json;datetime-format=rfc3339": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "usage_read"
            ]
          }
        ],
        "summary": "Get hourly usage for observability pipelines",
        "tags": [
          "Usage Metering"
        ],
        "x-menu-order": 39,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/user_invitations": {
      "post": {
        "description": "Sends emails to one or more users inviting them to join the organization.",
        "operationId": "SendInvitations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Object to invite users to join the organization.",
                "properties": {
                  "data": {
                    "description": "List of user invitations.",
                    "example": [],
                    "items": {
                      "description": "Object to create a user invitation.",
                      "properties": {
                        "relationships": {
                          "description": "Relationships data for user invitation.",
                          "properties": {
                            "user": {
                              "description": "Relationship to user.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to user object.",
                                  "properties": {
                                    "id": {
                                      "description": "A unique identifier that represents the user.",
                                      "example": "00000000-0000-0000-2345-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "users",
                                      "description": "Users resource type.",
                                      "enum": [
                                        "users"
                                      ],
                                      "example": "users",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "USERS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            }
                          },
                          "required": [
                            "user"
                          ],
                          "type": "object"
                        },
                        "type": {
                          "default": "user_invitations",
                          "description": "User invitations type.",
                          "enum": [
                            "user_invitations"
                          ],
                          "example": "user_invitations",
                          "type": "string",
                          "x-enum-varnames": [
                            "USER_INVITATIONS"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "relationships"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "User invitations as returned by the API.",
                  "properties": {
                    "data": {
                      "description": "Array of user invitations.",
                      "items": {
                        "description": "Object of a user invitation returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a user invitation.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user invitation.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "expires_at": {
                                "description": "Time of invitation expiration.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "invite_type": {
                                "description": "Type of invitation.",
                                "type": "string"
                              },
                              "uuid": {
                                "description": "UUID of the user invitation.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user invitation.",
                            "type": "string"
                          },
                          "type": {
                            "default": "user_invitations",
                            "description": "User invitations type.",
                            "enum": [
                              "user_invitations"
                            ],
                            "example": "user_invitations",
                            "type": "string",
                            "x-enum-varnames": [
                              "USER_INVITATIONS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_invite"
            ]
          }
        ],
        "summary": "Send invitation emails",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "user_invitation": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": [\n    {\n      \"relationships\": {\"user\": {\"data\": {\n        \"id\": \"{{ user.data.id }}\",\n        \"type\": \"{{ user.data.type }}\"\n      }}},\n      \"type\": \"user_invitations\"\n    }\n  ]\n}"
              }
            ],
            "source": "data[0]",
            "step": "the \"user\" has a \"user_invitation\""
          }
        },
        "x-menu-order": 8,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/user_invitations/{user_invitation_uuid}": {
      "get": {
        "description": "Returns a single user invitation by its UUID.",
        "operationId": "GetInvitation",
        "parameters": [
          {
            "description": "The UUID of the user invitation.",
            "in": "path",
            "name": "user_invitation_uuid",
            "required": true,
            "schema": {
              "example": "00000000-0000-0000-3456-000000000000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "User invitation as returned by the API.",
                  "properties": {
                    "data": {
                      "description": "Object of a user invitation returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of a user invitation.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user invitation.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "expires_at": {
                              "description": "Time of invitation expiration.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "invite_type": {
                              "description": "Type of invitation.",
                              "type": "string"
                            },
                            "uuid": {
                              "description": "UUID of the user invitation.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user invitation.",
                          "type": "string"
                        },
                        "type": {
                          "default": "user_invitations",
                          "description": "User invitations type.",
                          "enum": [
                            "user_invitations"
                          ],
                          "example": "user_invitations",
                          "type": "string",
                          "x-enum-varnames": [
                            "USER_INVITATIONS"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_invite"
            ]
          }
        ],
        "summary": "Get a user invitation",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 9,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/users": {
      "get": {
        "description": "Get the list of all users in the organization. This list includes\nall users even if they are deactivated or unverified.",
        "operationId": "ListUsers",
        "parameters": [
          {
            "description": "Size for a given page.",
            "in": "query",
            "name": "page[size]",
            "required": false,
            "schema": {
              "default": 10,
              "example": 10,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Specific page number to return.",
            "in": "query",
            "name": "page[number]",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "User attribute to order results by. Sort order is ascending by default.\nSort order is descending if the field\nis prefixed by a negative sign, for example `sort=-name`. Options: `name`,\n`modified_at`, `user_count`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "name",
              "example": "name",
              "type": "string"
            }
          },
          {
            "description": "Direction of sort. Options: `asc`, `desc`.",
            "in": "query",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "default": "desc",
              "description": "Direction of sort.",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-enum-varnames": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "description": "Filter all users by the given string. Defaults to no filtering.",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter on status attribute.\nComma separated list, with possible values `Active`, `Pending`, and `Disabled`.\nDefaults to no filtering.",
            "in": "query",
            "name": "filter[status]",
            "required": false,
            "schema": {
              "example": "Active",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about multiple users.",
                  "properties": {
                    "data": {
                      "description": "Array of returned users.",
                      "items": {
                        "description": "User object returned by the API.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of user object returned by the API.",
                            "properties": {
                              "created_at": {
                                "description": "Creation time of the user.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "disabled": {
                                "description": "Whether the user is disabled.",
                                "type": "boolean"
                              },
                              "email": {
                                "description": "Email of the user.",
                                "type": "string"
                              },
                              "handle": {
                                "description": "Handle of the user.",
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the user's icon.",
                                "type": "string"
                              },
                              "modified_at": {
                                "description": "Time that the user was last modified.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "service_account": {
                                "description": "Whether the user is a service account.",
                                "type": "boolean"
                              },
                              "status": {
                                "description": "Status of the user.",
                                "type": "string"
                              },
                              "title": {
                                "description": "Title of the user.",
                                "nullable": true,
                                "type": "string"
                              },
                              "verified": {
                                "description": "Whether the user is verified.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the user.",
                            "type": "string"
                          },
                          "relationships": {
                            "description": "Relationships of the user object returned by the API.",
                            "properties": {
                              "org": {
                                "description": "Relationship to an organization.",
                                "properties": {
                                  "data": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_orgs": {
                                "description": "Relationship to organizations.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to organization objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to organization object.",
                                      "properties": {
                                        "id": {
                                          "description": "ID of the organization.",
                                          "example": "00000000-0000-beef-0000-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "orgs",
                                          "description": "Organizations resource type.",
                                          "enum": [
                                            "orgs"
                                          ],
                                          "example": "orgs",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ORGS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "other_users": {
                                "description": "Relationship to users.",
                                "properties": {
                                  "data": {
                                    "description": "Relationships to user objects.",
                                    "example": [],
                                    "items": {
                                      "description": "Relationship to user object.",
                                      "properties": {
                                        "id": {
                                          "description": "A unique identifier that represents the user.",
                                          "example": "00000000-0000-0000-2345-000000000000",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "users",
                                          "description": "Users resource type.",
                                          "enum": [
                                            "users"
                                          ],
                                          "example": "users",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "USERS"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "type"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "data"
                                ],
                                "type": "object"
                              },
                              "roles": {
                                "description": "Relationship to roles.",
                                "properties": {
                                  "data": {
                                    "description": "An array containing type and the unique identifier of a role.",
                                    "items": {
                                      "description": "Relationship to role object.",
                                      "properties": {
                                        "id": {
                                          "description": "The unique identifier of the role.",
                                          "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                          "type": "string"
                                        },
                                        "type": {
                                          "default": "roles",
                                          "description": "Roles type.",
                                          "enum": [
                                            "roles"
                                          ],
                                          "example": "roles",
                                          "type": "string",
                                          "x-enum-varnames": [
                                            "ROLES"
                                          ]
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "type": "array"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": {
                            "default": "users",
                            "description": "Users resource type.",
                            "enum": [
                              "users"
                            ],
                            "example": "users",
                            "type": "string",
                            "x-enum-varnames": [
                              "USERS"
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "included": {
                      "description": "Array of objects related to the users.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "description": "Object describing meta attributes of response.",
                      "properties": {
                        "page": {
                          "description": "Pagination object.",
                          "properties": {
                            "total_count": {
                              "description": "Total count.",
                              "format": "int64",
                              "type": "integer"
                            },
                            "total_filtered_count": {
                              "description": "Total count of elements matched by the filter.",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "readOnly": true,
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "List all users",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 1,
        "x-undo": {
          "type": "safe"
        }
      },
      "post": {
        "description": "Create a user for your organization.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Create a user.",
                "properties": {
                  "data": {
                    "description": "Object to create a user.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the created user.",
                        "properties": {
                          "email": {
                            "description": "The email of the user.",
                            "example": "jane.doe@example.com",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the user.",
                            "type": "string"
                          },
                          "title": {
                            "description": "The title of the user.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "email"
                        ],
                        "type": "object"
                      },
                      "relationships": {
                        "description": "Relationships of the user object.",
                        "properties": {
                          "roles": {
                            "description": "Relationship to roles.",
                            "properties": {
                              "data": {
                                "description": "An array containing type and the unique identifier of a role.",
                                "items": {
                                  "description": "Relationship to role object.",
                                  "properties": {
                                    "id": {
                                      "description": "The unique identifier of the role.",
                                      "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "roles",
                                      "description": "Roles type.",
                                      "enum": [
                                        "roles"
                                      ],
                                      "example": "roles",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ROLES"
                                      ]
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time that the user was last modified.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "service_account": {
                              "description": "Whether the user is a service account.",
                              "type": "boolean"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-beef-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_invite"
            ]
          }
        ],
        "summary": "Create a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-given": {
          "user": {
            "parameters": [
              {
                "name": "body",
                "value": "{\n  \"data\": {\n    \"attributes\": {\n      \"email\": \"{{ unique }}@datadoghq.com\",\n      \"title\": \"user title\"\n     },\n     \"type\": \"users\"\n  }\n}"
              }
            ],
            "step": "there is a valid \"user\" in the system"
          }
        },
        "x-menu-order": 2,
        "x-undo": {
          "operationId": "DisableUser",
          "parameters": [
            {
              "name": "user_id",
              "source": "data.id"
            }
          ],
          "type": "unsafe"
        }
      }
    },
    "/api/v2/users/{user_id}": {
      "delete": {
        "description": "Disable a user. Can only be used with an application key belonging\nto an administrator user.",
        "operationId": "DisableUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-9999-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Disable a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 5,
        "x-undo": {
          "type": "idempotent"
        }
      },
      "get": {
        "description": "Get a user in the organization specified by the user’s `user_id`.",
        "operationId": "GetUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-9999-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time that the user was last modified.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "service_account": {
                              "description": "Whether the user is a service account.",
                              "type": "boolean"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-beef-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK for get user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get user details",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 3,
        "x-undo": {
          "type": "safe"
        }
      },
      "patch": {
        "description": "Edit a user. Can only be used with an application key belonging\nto an administrator user.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-9999-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Update a user.",
                "properties": {
                  "data": {
                    "description": "Object to update a user.",
                    "properties": {
                      "attributes": {
                        "description": "Attributes of the edited user.",
                        "properties": {
                          "disabled": {
                            "description": "If the user is enabled or disabled.",
                            "type": "boolean"
                          },
                          "email": {
                            "description": "The email of the user.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the user.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "ID of the user.",
                        "example": "00000000-0000-feed-0000-000000000000",
                        "type": "string"
                      },
                      "type": {
                        "default": "users",
                        "description": "Users resource type.",
                        "enum": [
                          "users"
                        ],
                        "example": "users",
                        "type": "string",
                        "x-enum-varnames": [
                          "USERS"
                        ]
                      }
                    },
                    "required": [
                      "attributes",
                      "type",
                      "id"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time that the user was last modified.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "service_account": {
                              "description": "Whether the user is a service account.",
                              "type": "boolean"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-beef-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Bad Request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Unprocessable Entity"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": [
              "user_access_manage"
            ]
          }
        ],
        "summary": "Update a user",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 4,
        "x-undo": {
          "type": "idempotent"
        }
      }
    },
    "/api/v2/users/{user_id}/orgs": {
      "get": {
        "description": "Get a user organization. Returns the user information and all organizations\njoined by this user.",
        "operationId": "ListUserOrganizations",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-9999-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response containing information about a single user.",
                  "properties": {
                    "data": {
                      "description": "User object returned by the API.",
                      "properties": {
                        "attributes": {
                          "description": "Attributes of user object returned by the API.",
                          "properties": {
                            "created_at": {
                              "description": "Creation time of the user.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "disabled": {
                              "description": "Whether the user is disabled.",
                              "type": "boolean"
                            },
                            "email": {
                              "description": "Email of the user.",
                              "type": "string"
                            },
                            "handle": {
                              "description": "Handle of the user.",
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the user's icon.",
                              "type": "string"
                            },
                            "modified_at": {
                              "description": "Time that the user was last modified.",
                              "format": "date-time",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "service_account": {
                              "description": "Whether the user is a service account.",
                              "type": "boolean"
                            },
                            "status": {
                              "description": "Status of the user.",
                              "type": "string"
                            },
                            "title": {
                              "description": "Title of the user.",
                              "nullable": true,
                              "type": "string"
                            },
                            "verified": {
                              "description": "Whether the user is verified.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        },
                        "id": {
                          "description": "ID of the user.",
                          "type": "string"
                        },
                        "relationships": {
                          "description": "Relationships of the user object returned by the API.",
                          "properties": {
                            "org": {
                              "description": "Relationship to an organization.",
                              "properties": {
                                "data": {
                                  "description": "Relationship to organization object.",
                                  "properties": {
                                    "id": {
                                      "description": "ID of the organization.",
                                      "example": "00000000-0000-beef-0000-000000000000",
                                      "type": "string"
                                    },
                                    "type": {
                                      "default": "orgs",
                                      "description": "Organizations resource type.",
                                      "enum": [
                                        "orgs"
                                      ],
                                      "example": "orgs",
                                      "type": "string",
                                      "x-enum-varnames": [
                                        "ORGS"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "type": "object"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_orgs": {
                              "description": "Relationship to organizations.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to organization objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to organization object.",
                                    "properties": {
                                      "id": {
                                        "description": "ID of the organization.",
                                        "example": "00000000-0000-beef-0000-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "orgs",
                                        "description": "Organizations resource type.",
                                        "enum": [
                                          "orgs"
                                        ],
                                        "example": "orgs",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ORGS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "other_users": {
                              "description": "Relationship to users.",
                              "properties": {
                                "data": {
                                  "description": "Relationships to user objects.",
                                  "example": [],
                                  "items": {
                                    "description": "Relationship to user object.",
                                    "properties": {
                                      "id": {
                                        "description": "A unique identifier that represents the user.",
                                        "example": "00000000-0000-0000-2345-000000000000",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "users",
                                        "description": "Users resource type.",
                                        "enum": [
                                          "users"
                                        ],
                                        "example": "users",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "USERS"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "data"
                              ],
                              "type": "object"
                            },
                            "roles": {
                              "description": "Relationship to roles.",
                              "properties": {
                                "data": {
                                  "description": "An array containing type and the unique identifier of a role.",
                                  "items": {
                                    "description": "Relationship to role object.",
                                    "properties": {
                                      "id": {
                                        "description": "The unique identifier of the role.",
                                        "example": "3653d3c6-0c75-11ea-ad28-fb5701eabc7d",
                                        "type": "string"
                                      },
                                      "type": {
                                        "default": "roles",
                                        "description": "Roles type.",
                                        "enum": [
                                          "roles"
                                        ],
                                        "example": "roles",
                                        "type": "string",
                                        "x-enum-varnames": [
                                          "ROLES"
                                        ]
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "default": "users",
                          "description": "Users resource type.",
                          "enum": [
                            "users"
                          ],
                          "example": "users",
                          "type": "string",
                          "x-enum-varnames": [
                            "USERS"
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "included": {
                      "description": "Array of objects related to the user.",
                      "items": {
                        "description": "An object related to a user.",
                        "oneOf": [
                          {
                            "description": "Organization object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the organization.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the organization.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the organization.",
                                    "type": "string"
                                  },
                                  "disabled": {
                                    "description": "Whether or not the organization is disabled.",
                                    "type": "boolean"
                                  },
                                  "modified_at": {
                                    "description": "Time of last organization modification.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the organization.",
                                    "type": "string"
                                  },
                                  "public_id": {
                                    "description": "Public ID of the organization.",
                                    "type": "string"
                                  },
                                  "sharing": {
                                    "description": "Sharing type of the organization.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL of the site that this organization exists at.",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the organization.",
                                "type": "string"
                              },
                              "type": {
                                "default": "orgs",
                                "description": "Organizations resource type.",
                                "enum": [
                                  "orgs"
                                ],
                                "example": "orgs",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ORGS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Permission object.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of a permission.",
                                "properties": {
                                  "created": {
                                    "description": "Creation time of the permission.",
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "description": {
                                    "description": "Description of the permission.",
                                    "type": "string"
                                  },
                                  "display_name": {
                                    "description": "Displayed name for the permission.",
                                    "type": "string"
                                  },
                                  "display_type": {
                                    "description": "Display type.",
                                    "type": "string"
                                  },
                                  "group_name": {
                                    "description": "Name of the permission group.",
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "Name of the permission.",
                                    "type": "string"
                                  },
                                  "restricted": {
                                    "description": "Whether or not the permission is restricted.",
                                    "type": "boolean"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "ID of the permission.",
                                "type": "string"
                              },
                              "type": {
                                "default": "permissions",
                                "description": "Permissions resource type.",
                                "enum": [
                                  "permissions"
                                ],
                                "example": "permissions",
                                "type": "string",
                                "x-enum-varnames": [
                                  "PERMISSIONS"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Role object returned by the API.",
                            "properties": {
                              "attributes": {
                                "description": "Attributes of the role.",
                                "properties": {
                                  "created_at": {
                                    "description": "Creation time of the role.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "modified_at": {
                                    "description": "Time of last role modification.",
                                    "format": "date-time",
                                    "readOnly": true,
                                    "type": "string"
                                  },
                                  "name": {
                                    "description": "The name of the role. The name is neither unique nor a stable identifier of the role.",
                                    "type": "string"
                                  },
                                  "user_count": {
                                    "description": "Number of users with that role.",
                                    "format": "int64",
                                    "readOnly": true,
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "id": {
                                "description": "The unique identifier of the role.",
                                "type": "string"
                              },
                              "relationships": {
                                "description": "Relationships of the role object returned by the API.",
                                "properties": {
                                  "permissions": {
                                    "description": "Relationship to multiple permissions objects.",
                                    "properties": {
                                      "data": {
                                        "description": "Relationships to permission objects.",
                                        "items": {
                                          "description": "Relationship to permission object.",
                                          "properties": {
                                            "id": {
                                              "description": "ID of the permission.",
                                              "type": "string"
                                            },
                                            "type": {
                                              "default": "permissions",
                                              "description": "Permissions resource type.",
                                              "enum": [
                                                "permissions"
                                              ],
                                              "example": "permissions",
                                              "type": "string",
                                              "x-enum-varnames": [
                                                "PERMISSIONS"
                                              ]
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              },
                              "type": {
                                "default": "roles",
                                "description": "Roles type.",
                                "enum": [
                                  "roles"
                                ],
                                "example": "roles",
                                "type": "string",
                                "x-enum-varnames": [
                                  "ROLES"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a user organization",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 6,
        "x-undo": {
          "type": "safe"
        }
      }
    },
    "/api/v2/users/{user_id}/permissions": {
      "get": {
        "description": "Get a user permission set. Returns a list of the user’s permissions\ngranted by the associated user's roles.",
        "operationId": "ListUserPermissions",
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": "00000000-0000-9999-0000-000000000000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payload with API-returned permissions.",
                  "properties": {
                    "data": {
                      "description": "Array of permissions.",
                      "items": {
                        "description": "Permission object.",
                        "properties": {
                          "attributes": {
                            "description": "Attributes of a permission.",
                            "properties": {
                              "created": {
                                "description": "Creation time of the permission.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "description": {
                                "description": "Description of the permission.",
                                "type": "string"
                              },
                              "display_name": {
                                "description": "Displayed name for the permission.",
                                "type": "string"
                              },
                              "display_type": {
                                "description": "Display type.",
                                "type": "string"
                              },
                              "group_name": {
                                "description": "Name of the permission group.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the permission.",
                                "type": "string"
                              },
                              "restricted": {
                                "description": "Whether or not the permission is restricted.",
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "id": {
                            "description": "ID of the permission.",
                            "type": "string"
                          },
                          "type": {
                            "default": "permissions",
                            "description": "Permissions resource type.",
                            "enum": [
                              "permissions"
                            ],
                            "example": "permissions",
                            "type": "string",
                            "x-enum-varnames": [
                              "PERMISSIONS"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Authentication error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Not found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "API error response.",
                  "properties": {
                    "errors": {
                      "description": "A list of errors.",
                      "items": {
                        "description": "A list of items.",
                        "example": "Bad Request",
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "errors"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Too many requests"
          }
        },
        "security": [
          {
            "apiKeyAuth": [],
            "appKeyAuth": []
          },
          {
            "AuthZ": []
          }
        ],
        "summary": "Get a user permissions",
        "tags": [
          "Users"
        ],
        "x-codegen-request-body-name": "body",
        "x-menu-order": 7,
        "x-undo": {
          "type": "safe"
        }
      }
    }
  },
  "security": [
    {
      "apiKeyAuth": [],
      "appKeyAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://{subdomain}.{site}",
      "variables": {
        "site": {
          "default": "datadoghq.com",
          "description": "The regional site for Datadog customers.",
          "enum": [
            "datadoghq.com",
            "us3.datadoghq.com",
            "us5.datadoghq.com",
            "datadoghq.eu",
            "ddog-gov.com"
          ]
        },
        "subdomain": {
          "default": "api",
          "description": "The subdomain where the API is deployed."
        }
      }
    },
    {
      "url": "{protocol}://{name}",
      "variables": {
        "name": {
          "default": "api.datadoghq.com",
          "description": "Full site DNS name."
        },
        "protocol": {
          "default": "https",
          "description": "The protocol for accessing the API."
        }
      }
    },
    {
      "url": "https://{subdomain}.{site}",
      "variables": {
        "site": {
          "default": "datadoghq.com",
          "description": "Any Datadog deployment."
        },
        "subdomain": {
          "default": "api",
          "description": "The subdomain where the API is deployed."
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Search your Audit Logs events over HTTP.",
      "name": "Audit"
    },
    {
      "description": "[AuthN Mappings API](https://docs.datadoghq.com/account_management/authn_mapping/?tab=example)\nis used to automatically map group of users to roles in Datadog using attributes\nsent from Identity Providers.",
      "name": "AuthN Mappings"
    },
    {
      "description": "Workload activity security rules for generating events using the Datadog security Agent.",
      "name": "Cloud Workload Security"
    },
    {
      "description": "Interact with your dashboard lists through the API to\norganize, find, and share all of your dashboards with your team and\norganization.",
      "name": "Dashboard Lists"
    },
    {
      "description": "The events service allows you to programmatically post events to the event stream\nand fetch events from the event stream. Events are limited to 4000 characters.\nIf an event is sent out with a message containing more than 4000 characters, only the\nfirst 4000 characters are displayed.",
      "name": "Events"
    },
    {
      "description": "Create, update, delete, and retrieve services which can be associated with incidents.",
      "name": "Incident Services"
    },
    {
      "description": "Create, update, delete and retrieve teams which can be associated with incidents.",
      "name": "Incident Teams"
    },
    {
      "description": "Manage incident response.",
      "name": "Incidents"
    },
    {
      "description": "Manage your Datadog API and application keys. You need an API key and\nan application key for a user with the required permissions to interact\nwith these endpoints. The full list of API and application keys can be\nseen on your [Datadog API page](https://app.datadoghq.com/account/settings#api).",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/account_management/api-app-keys/"
      },
      "name": "Key Management"
    },
    {
      "description": "Search your logs and send them to your Datadog platform over HTTP.",
      "name": "Logs"
    },
    {
      "description": "Archives forward all the logs ingested to a cloud storage system.\n\nSee the [Archives Page](https://app.datadoghq.com/logs/pipelines/archives)\nfor a list of the archives currently configured in web UI.",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/logs/archives/"
      },
      "name": "Logs Archives"
    },
    {
      "description": "Manage configuration of [log-based metrics](https://app.datadoghq.com/logs/pipelines/generate-metrics) for your organization.",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/logs/logs_to_metrics/"
      },
      "name": "Logs Metrics"
    },
    {
      "description": "**Note: This endpoint is in public beta. If you have any feedback, contact [Datadog support](https://docs.datadoghq.com/help/).**\n\nTo grant read access on log data at all, you must grant the `logs_read_data` permission.\nFrom there you can limit what data a role grants read access to by associating a Restriction Query with that role.\n\nA Restriction Query is a logs query that restricts which logs the `logs_read_data` permission grants read access to.\nFor users whose roles have Restriction Queries, any log query they make only returns those log events that also match\none of their Restriction Queries. This is true whether the user queries log events from any log-related feature, including\nthe log explorer, Live Tail, re-hydration, or a dashboard widget.\n\nRestriction Queries currently only support use of the following components of log events:\n\n- Reserved attributes\n- The log message\n- Tags\n\nThe recommended way to manage restricted read access on log data for customers with large or complicated organizational structures\nis to add a team tag to log events to indicate which team(s) own(s) them, and then to scope Restriction Queries to the appropriate\nvalues of the team tag. Tags can be applied to log events in many ways, and a log event can have multiple tags with the same key (like team)\nand different values—in this way the same log event can be visible to roles whose restriction queries are scoped to different team values.\n\nYou need an API and application key with Admin rights to interact with this endpoint.",
      "name": "Logs Restriction Queries"
    },
    {
      "description": "The metrics endpoint allows you to:\n\n- Post metrics data so it can be graphed on Datadog’s dashboards\n- Query metrics from any time period\n- Modify tag configurations for metrics\n- View tags and volumes for metrics\n\n**Note**: A graph can only contain a set number of points\nand as the timeframe over which a metric is viewed increases,\naggregation between points occurs to stay below that set number.\n\nThe Post, Patch, and Delete `manage_tags` API methods can only be performed by\na user who has the `Manage Tags for Metrics` permission.",
      "name": "Metrics"
    },
    {
      "description": "Configure your [Datadog Opsgenie integration](https://docs.datadoghq.com/integrations/opsgenie/)\ndirectly through the Datadog API.",
      "externalDocs": {
        "url": "https://docs.datadoghq.com/api/latest/opsgenie-integration"
      },
      "name": "Opsgenie Integration"
    },
    {
      "description": "Create, edit, and manage your organizations. Read more about [multi-org accounts](https://docs.datadoghq.com/account_management/multi_organization).",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/account_management/multi_organization"
      },
      "name": "Organizations"
    },
    {
      "description": "The processes API allows you to query processes data for your organization.",
      "name": "Processes"
    },
    {
      "description": "Search or aggregate your RUM events over HTTP.",
      "name": "RUM"
    },
    {
      "description": "The Roles API is used to create and manage Datadog roles, what\n[global permissions](https://docs.datadoghq.com/account_management/rbac/)\nthey grant, and which users belong to them.\n\nPermissions related to specific account assets can be granted to roles\nin the Datadog application without using this API. For example, granting\nread access on a specific log index to a role can be done in Datadog from the\n[Pipelines page](https://app.datadoghq.com/logs/pipelines).",
      "name": "Roles"
    },
    {
      "description": "Detection rules for generating signals and listing of generated\nsignals.",
      "name": "Security Monitoring"
    },
    {
      "description": "Create, edit, and disable service accounts.",
      "name": "Service Accounts"
    },
    {
      "description": "The usage metering API allows you to get hourly, daily, and\nmonthly usage across multiple facets of Datadog.\nThis API is available to all Pro and Enterprise customers.\nUsage is only accessible for [parent-level organizations](https://docs.datadoghq.com/account_management/multi_organization/).\n\n**Note**: Usage data is delayed by up to 72 hours from when it was incurred.\nIt is retained for 15 months.\n\nYou can retrieve up to 24 hours of hourly usage data for multiple organizations,\nand up to two months of hourly usage data for a single organization in one request.",
      "externalDocs": {
        "description": "Find out more at",
        "url": "https://docs.datadoghq.com/account_management/billing/usage_details/"
      },
      "name": "Usage Metering"
    },
    {
      "description": "Create, edit, and disable users.",
      "externalDocs": {
        "url": "https://docs.datadoghq.com/account_management/users"
      },
      "name": "Users"
    }
  ],
  "x-group-parameters": true
}
# Source: datadog/templates/secret-api-key.yaml
apiVersion: v1
kind: Secret
metadata:
  name: datadog-agent
  labels: {}
type: Opaque
data:
  api-key: PUT_YOUR_BASE64_ENCODED_API_KEY_HERE
---
# Source: datadog/templates/install_info-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: datadog-agent-installinfo
  labels: {}
  annotations:
    checksum/install_info: 22b8b7e0a7d3253452aedb7615f5e649c4c08a662ad1ffe80ac5eff42d2d7bde
data:
  install_info: |
    ---
    install_method:
      tool: kubernetes sample manifests
      tool_version: kubernetes sample manifests
      installer_version: kubernetes sample manifests
---
# Source: datadog/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: datadog-agent
  labels: {}
spec:
  selector:
    matchLabels:
      app: datadog-agent
  template:
    metadata:
      labels:
        app: datadog-agent
      name: datadog-agent
      annotations: {}
    spec:
      containers:
      - name: agent
        image: "gcr.io/datadoghq/agent:7.26.0"
        imagePullPolicy: IfNotPresent
        command: ["agent", "run"]
        resources: {}
        ports:
        - containerPort: 8125
          name: dogstatsdport
          protocol: UDP
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: "datadog-agent"
              key: api-key
        - name: DD_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: KUBERNETES
          value: "yes"
        - name: DD_AC_EXCLUDE
          value: "name:datadog-agent"
        - name: DOCKER_HOST
          value: npipe:////./pipe/docker_engine
        - name: DD_LOG_LEVEL
          value: "INFO"
        - name: DD_DOGSTATSD_PORT
          value: "8125"
        - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
          value: "true"
        - name: DD_LEADER_ELECTION
          value: "true"
        - name: DD_COLLECT_KUBERNETES_EVENTS
          value: "true"
        - name: DD_APM_ENABLED
          value: "false"
        - name: DD_LOGS_ENABLED
          value: "true"
        - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
          value: "true"
        - name: DD_LOGS_CONFIG_K8S_CONTAINER_USE_FILE
          value: "true"
        - name: DD_HEALTH_PORT
          value: "5555"
        volumeMounts:
        - name: config
          mountPath: C:/ProgramData/Datadog
        - name: runtimesocket
          mountPath: \\.\pipe\docker_engine
        - name: pointerdir
          mountPath: C:/var/log
        - name: logpodpath
          mountPath: C:/var/log/pods
          readOnly: true
        - name: logdockercontainerpath
          mountPath: C:/ProgramData/docker/containers
          readOnly: true
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /live
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /ready
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
      initContainers:
      - name: init-volume
        image: "gcr.io/datadoghq/agent:7.26.0"
        imagePullPolicy: IfNotPresent
        command: ["pwsh", "-Command"]
        args:
        - |
          Copy-Item -Recurse -Force C:/ProgramData/Datadog C:/Temp
          Copy-Item -Force C:/Temp/install_info/install_info C:/Temp/Datadog/install_info
        volumeMounts:
        - name: config
          mountPath: C:/Temp/Datadog
        - name: installinfo
          mountPath: C:/Temp/install_info
        resources: {}
      - name: init-config
        image: "gcr.io/datadoghq/agent:7.26.0"
        imagePullPolicy: IfNotPresent
        command: ["pwsh", "-Command"]
        args:
        - Get-ChildItem 'entrypoint-ps1' | ForEach-Object { & $_.FullName if (-Not
          $?) { exit 1 } }
        volumeMounts:
        - name: config
          mountPath: C:/ProgramData/Datadog
        - name: runtimesocket
          mountPath: \\.\pipe\docker_engine
        env:
        - name: DD_API_KEY
          valueFrom:
            secretKeyRef:
              name: "datadog-agent"
              key: api-key
        - name: DD_KUBERNETES_KUBELET_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: KUBERNETES
          value: "yes"
        - name: DD_AC_EXCLUDE
          value: "name:datadog-agent"
        - name: DOCKER_HOST
          value: npipe:////./pipe/docker_engine
        resources: {}
      volumes:
      - name: installinfo
        configMap:
          name: datadog-agent-installinfo
      - name: config
        emptyDir: {}
      - hostPath:
          path: \\.\pipe\docker_engine
        name: runtimesocket
      - hostPath:
          path: C:/var/log
        name: pointerdir
      - hostPath:
          path: C:/var/log/pods
        name: logpodpath
      - hostPath:
          path: C:/ProgramData/docker/containers
        name: logdockercontainerpath
      tolerations:
      - effect: NoSchedule
        key: node.kubernetes.io/os
        value: windows
        operator: Equal
      affinity: {}
      serviceAccountName: "datadog-agent"
      nodeSelector:
        kubernetes.io/os: windows
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%
    type: RollingUpdate
